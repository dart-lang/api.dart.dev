// Generated by dart2js, the Dart to JavaScript compiler.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
(function($) {
function dart(){ this.x = 0 }var A = new dart;
delete A.x;
var B = new dart;
delete B.x;
var C = new dart;
delete C.x;
var D = new dart;
delete D.x;
var E = new dart;
delete E.x;
var F = new dart;
delete F.x;
var G = new dart;
delete G.x;
var H = new dart;
delete H.x;
var J = new dart;
delete J.x;
var K = new dart;
delete K.x;
var L = new dart;
delete L.x;
var M = new dart;
delete M.x;
var N = new dart;
delete N.x;
var O = new dart;
delete O.x;
var P = new dart;
delete P.x;
var Q = new dart;
delete Q.x;
var R = new dart;
delete R.x;
var S = new dart;
delete S.x;
var T = new dart;
delete T.x;
var U = new dart;
delete U.x;
var V = new dart;
delete V.x;
var W = new dart;
delete W.x;
var X = new dart;
delete X.x;
var Y = new dart;
delete Y.x;
var Z = new dart;
delete Z.x;
function Isolate() {}
init();

$ = Isolate.$isolateProperties;
var $$ = {};

// Native classes
(function(reflectionData) {
  "use strict";
  function map(x) {
    x = {x: x};
    delete x.x;
    return x;
  }
  function processStatics(descriptor) {
    for (var property in descriptor) {
      if (!hasOwnProperty.call(descriptor, property))
        continue;
      if (property === "^")
        continue;
      var element = descriptor[property];
      var firstChar = property.substring(0, 1);
      var previousProperty;
      if (firstChar === "+") {
        mangledGlobalNames[previousProperty] = property.substring(1);
        var flag = descriptor[property];
        if (flag > 0)
          descriptor[previousProperty].$reflectable = flag;
        if (element && element.length)
          init.typeInformation[previousProperty] = element;
      } else if (firstChar === "@") {
        property = property.substring(1);
        $[property]["@"] = element;
      } else if (firstChar === "*") {
        globalObject[previousProperty].$defaultValues = element;
        var optionalMethods = descriptor.$methodsWithOptionalArguments;
        if (!optionalMethods) {
          descriptor.$methodsWithOptionalArguments = optionalMethods = {};
        }
        optionalMethods[property] = previousProperty;
      } else if (typeof element === "function") {
        globalObject[previousProperty = property] = element;
        functions.push(property);
        init.globalFunctions[property] = element;
      } else if (element.constructor === Array) {
        addStubs(globalObject, element, property, true, descriptor, functions);
      } else {
        previousProperty = property;
        var newDesc = {};
        var previousProp;
        for (var prop in element) {
          if (!hasOwnProperty.call(element, prop))
            continue;
          firstChar = prop.substring(0, 1);
          if (prop === "static") {
            processStatics(init.statics[property] = element[prop]);
          } else if (firstChar === "+") {
            mangledNames[previousProp] = prop.substring(1);
            var flag = element[prop];
            if (flag > 0)
              element[previousProp].$reflectable = flag;
          } else if (firstChar === "@" && prop !== "@") {
            newDesc[prop.substring(1)]["@"] = element[prop];
          } else if (firstChar === "*") {
            newDesc[previousProp].$defaultValues = element[prop];
            var optionalMethods = newDesc.$methodsWithOptionalArguments;
            if (!optionalMethods) {
              newDesc.$methodsWithOptionalArguments = optionalMethods = {};
            }
            optionalMethods[prop] = previousProp;
          } else {
            var elem = element[prop];
            if (prop !== "^" && elem != null && elem.constructor === Array && prop !== "<>") {
              addStubs(newDesc, elem, prop, false, element, []);
            } else {
              newDesc[previousProp = prop] = elem;
            }
          }
        }
        $$[property] = [globalObject, newDesc];
        classes.push(property);
      }
    }
  }
  function addStubs(descriptor, array, name, isStatic, originalDescriptor, functions) {
    var f, funcs = [originalDescriptor[name] = descriptor[name] = f = array[0]];
    f.$stubName = name;
    functions.push(name);
    for (var index = 0; index < array.length; index += 2) {
      f = array[index + 1];
      if (typeof f != "function")
        break;
      f.$stubName = array[index + 2];
      funcs.push(f);
      if (f.$stubName) {
        originalDescriptor[f.$stubName] = descriptor[f.$stubName] = f;
        functions.push(f.$stubName);
      }
    }
    for (var i = 0; i < funcs.length; index++, i++) {
      funcs[i].$callName = array[index + 1];
    }
    var getterStubName = array[++index];
    array = array.slice(++index);
    var requiredParameterInfo = array[0];
    var requiredParameterCount = requiredParameterInfo >> 1;
    var isAccessor = (requiredParameterInfo & 1) === 1;
    var isSetter = requiredParameterInfo === 3;
    var isGetter = requiredParameterInfo === 1;
    var optionalParameterInfo = array[1];
    var optionalParameterCount = optionalParameterInfo >> 1;
    var optionalParametersAreNamed = (optionalParameterInfo & 1) === 1;
    var isIntercepted = requiredParameterCount + optionalParameterCount != funcs[0].length;
    var functionTypeIndex = array[2];
    var unmangledNameIndex = 2 * optionalParameterCount + requiredParameterCount + 3;
    var isReflectable = array.length > unmangledNameIndex;
    if (getterStubName) {
      f = tearOff(funcs, array, isStatic, name, isIntercepted);
      descriptor[name].$getter = f;
      f.$getterStub = true;
      if (isStatic)
        init.globalFunctions[name] = f;
      originalDescriptor[getterStubName] = descriptor[getterStubName] = f;
      funcs.push(f);
      if (getterStubName)
        functions.push(getterStubName);
      f.$stubName = getterStubName;
      f.$callName = null;
      if (isIntercepted)
        init.interceptedNames[getterStubName] = true;
    }
    if (isReflectable) {
      for (var i = 0; i < funcs.length; i++) {
        funcs[i].$reflectable = 1;
        funcs[i].$reflectionInfo = array;
      }
      var mangledNames = isStatic ? init.mangledGlobalNames : init.mangledNames;
      var unmangledName = array[unmangledNameIndex];
      var reflectionName = unmangledName;
      if (getterStubName)
        mangledNames[getterStubName] = reflectionName;
      if (isSetter) {
        reflectionName += "=";
      } else if (!isGetter) {
        reflectionName += ":" + requiredParameterCount + ":" + optionalParameterCount;
      }
      mangledNames[name] = reflectionName;
      funcs[0].$reflectionName = reflectionName;
      funcs[0].$metadataIndex = unmangledNameIndex + 1;
      if (optionalParameterCount)
        descriptor[unmangledName + "*"] = funcs[0];
    }
  }
  function tearOffGetterNoCsp(funcs, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(x) {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [x], name);" + "return new c(this, funcs[0], x, name);" + "}")(funcs, reflectionInfo, name, H, null) : new Function("funcs", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = H.closureFromTearOff(" + "this, funcs, reflectionInfo, false, [], name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, reflectionInfo, name, H, null);
  }
  function tearOffGetterCsp(funcs, reflectionInfo, name, isIntercepted) {
    var cache = null;
    return isIntercepted ? function(x) {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [x], name);
      return new cache(this, funcs[0], x, name);
    } : function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, false, [], name);
      return new cache(this, funcs[0], null, name);
    };
  }
  function tearOff(funcs, reflectionInfo, isStatic, name, isIntercepted) {
    var cache;
    return isStatic ? function() {
      if (cache === void 0)
        cache = H.closureFromTearOff(this, funcs, reflectionInfo, true, [], name).prototype;
      return cache;
    } : tearOffGetter(funcs, reflectionInfo, name, isIntercepted);
  }
  var functionCounter = 0;
  var tearOffGetter = typeof dart_precompiled == "function" ? tearOffGetterCsp : tearOffGetterNoCsp;
  if (!init.libraries)
    init.libraries = [];
  if (!init.mangledNames)
    init.mangledNames = map();
  if (!init.mangledGlobalNames)
    init.mangledGlobalNames = map();
  if (!init.statics)
    init.statics = map();
  if (!init.typeInformation)
    init.typeInformation = map();
  if (!init.globalFunctions)
    init.globalFunctions = map();
  if (!init.interceptedNames)
    init.interceptedNames = map();
  var libraries = init.libraries;
  var mangledNames = init.mangledNames;
  var mangledGlobalNames = init.mangledGlobalNames;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var length = reflectionData.length;
  for (var i = 0; i < length; i++) {
    var data = reflectionData[i];
    var name = data[0];
    var uri = data[1];
    var metadata = data[2];
    var globalObject = data[3];
    var descriptor = data[4];
    var isRoot = !!data[5];
    var fields = descriptor && descriptor["^"];
    var classes = [];
    var functions = [];
    processStatics(descriptor);
    libraries.push([name, uri, classes, functions, metadata, fields, isRoot, globalObject]);
  }
})([
["_foreign_helper", "dart:_foreign_helper", , H, {
  "^": "",
  JS_CONST: {
    "^": "Object;code"
  }
}],
["_interceptors", "dart:_interceptors", , J, {
  "^": "",
  getInterceptor: function(object) {
    return void 0;
  },
  makeDispatchRecord: function(interceptor, proto, extension, indexability) {
    return {i: interceptor, p: proto, e: extension, x: indexability};
  },
  getNativeInterceptor: function(object) {
    var record, proto, objectProto, interceptor;
    record = object[init.dispatchPropertyName];
    if (record == null)
      if ($.initNativeDispatchFlag == null) {
        H.initNativeDispatch();
        record = object[init.dispatchPropertyName];
      }
    if (record != null) {
      proto = record.p;
      if (false === proto)
        return record.i;
      if (true === proto)
        return object;
      objectProto = Object.getPrototypeOf(object);
      if (proto === objectProto)
        return record.i;
      if (record.e === objectProto)
        throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
    }
    interceptor = H.lookupAndCacheInterceptor(object);
    if (interceptor == null) {
      proto = Object.getPrototypeOf(object);
      if (proto == null || proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      else
        return C.UnknownJavaScriptObject_methods;
    }
    return interceptor;
  },
  findIndexForNativeSubclassType: function(type) {
    var t1, map, t2, i;
    t1 = $.mapTypeToInterceptor;
    if (t1 == null)
      return;
    map = t1;
    for (t1 = map.length, t2 = J.getInterceptor(type), i = 0; i + 1 < t1; i += 3) {
      if (i >= t1)
        return H.ioore(map, i);
      if (t2.$eq(type, map[i]))
        return i;
    }
    return;
  },
  findInterceptorConstructorForType: function(type) {
    var index, map, t1;
    index = J.findIndexForNativeSubclassType(type);
    if (index == null)
      return;
    map = $.mapTypeToInterceptor;
    t1 = index + 1;
    if (t1 >= map.length)
      return H.ioore(map, t1);
    return map[t1];
  },
  findConstructorForNativeSubclassType: function(type, $name) {
    var index, map, t1;
    index = J.findIndexForNativeSubclassType(type);
    if (index == null)
      return;
    map = $.mapTypeToInterceptor;
    t1 = index + 2;
    if (t1 >= map.length)
      return H.ioore(map, t1);
    return map[t1][$name];
  },
  Interceptor: {
    "^": "Object;",
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return H.Primitives_objectToString(receiver);
    },
    noSuchMethod$1: [function(receiver, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    }, "call$1", "get$noSuchMethod", 2, 0, null, 57],
    get$runtimeType: function(receiver) {
      return new H.TypeImpl(H.getRuntimeTypeString(receiver), null);
    },
    "%": "DOMImplementation|MediaError|MediaKeyError|Navigator|PositionError|SQLError|SVGAnimatedEnumeration|SVGAnimatedLength|SVGAnimatedLengthList|SVGAnimatedNumber|SVGAnimatedNumberList|SVGAnimatedString"
  },
  JSBool: {
    "^": "Interceptor;",
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_EsU0;
    },
    $isbool: true
  },
  JSNull: {
    "^": "Interceptor;",
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_eZO;
    },
    noSuchMethod$1: [function(receiver, invocation) {
      return J.Interceptor.prototype.noSuchMethod$1.call(this, receiver, invocation);
    }, "call$1", "get$noSuchMethod", 2, 0, null, 57]
  },
  JavaScriptObject: {
    "^": "Interceptor;",
    get$hashCode: function(_) {
      return 0;
    },
    get$runtimeType: function(_) {
      return C.Type_XXD;
    }
  },
  PlainJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  UnknownJavaScriptObject: {
    "^": "JavaScriptObject;"
  },
  JSArray: {
    "^": "Interceptor;",
    add$1: function(receiver, value) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    insert$2: function(receiver, index, value) {
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      receiver.splice(index, 0, value);
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, f), [null]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        this.add$1(receiver, t1.get$current());
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    forEach$1: function(receiver, f) {
      return H.IterableMixinWorkaround_forEach(receiver, f);
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    join$1: function(receiver, separator) {
      var t1, list, i, t2;
      t1 = receiver.length;
      list = Array(t1);
      list.fixed$length = init;
      for (i = 0; i < receiver.length; ++i) {
        t2 = H.S(receiver[i]);
        if (i >= t1)
          return H.ioore(list, i);
        list[i] = t2;
      }
      return list.join(separator);
    },
    take$1: function(receiver, n) {
      return H.SubListIterable$(receiver, 0, n, null);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, null);
    },
    fold$2: function(receiver, initialValue, combine) {
      return H.IterableMixinWorkaround_fold(receiver, initialValue, combine);
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      return H.IterableMixinWorkaround_firstWhere(receiver, test, orElse);
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    getRange$2: function(receiver, start, end) {
      H.IterableMixinWorkaround__rangeCheck(receiver, start, end);
      return H.SubListIterable$(receiver, start, end, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    removeRange$2: function(receiver, start, end) {
      var receiverLength, t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeRange"));
      receiverLength = receiver.length;
      t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, receiverLength))
        throw H.wrapException(P.RangeError$range(start, 0, receiverLength));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, receiverLength))
        throw H.wrapException(P.RangeError$range(end, start, receiverLength));
      if (typeof end !== "number")
        return H.iae(end);
      H.Lists_copy(receiver, end, receiver, start, receiverLength - end);
      if (typeof start !== "number")
        return H.iae(start);
      this.set$length(receiver, receiverLength - (end - start));
    },
    any$1: function(receiver, f) {
      return H.IterableMixinWorkaround_any(receiver, f);
    },
    get$reversed: function(receiver) {
      return H.setRuntimeTypeInfo(new H.ReversedListIterable(receiver), [null]);
    },
    sort$1: function(receiver, compare) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.IterableMixinWorkaround_sortList(receiver, compare);
    },
    indexOf$2: function(receiver, element, start) {
      return H.Lists_indexOf(receiver, element, start, receiver.length);
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, start) {
      return H.Lists_lastIndexOf(receiver, element, receiver.length - 1);
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return H.IterableMixinWorkaround_toStringIterable(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1;
      if (growable)
        return H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
      else {
        t1 = H.setRuntimeTypeInfo(receiver.slice(), [H.getTypeArgumentByIndex(receiver, 0)]);
        t1.fixed$length = init;
        return t1;
      }
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new H.ListIterator(receiver, receiver.length, 0, null), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$(newLength));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$value(newLength));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      receiver[index] = value;
    },
    $isJSArray: true,
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {JSArray_JSArray$fixed: function($length, $E) {
        var t1;
        if (typeof $length !== "number" || Math.floor($length) !== $length || $length < 0)
          throw H.wrapException(P.ArgumentError$("Length must be a non-negative integer: " + H.S($length)));
        t1 = H.setRuntimeTypeInfo(new Array($length), [$E]);
        t1.fixed$length = init;
        return t1;
      }}
  },
  JSNumber: {
    "^": "Interceptor;",
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      if (typeof b !== "number")
        throw H.wrapException(P.ArgumentError$(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (this.get$isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$isNaN: function(receiver) {
      return isNaN(receiver);
    },
    remainder$1: function(receiver, b) {
      return receiver % b;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$('' + receiver));
    },
    round$0: function(receiver) {
      return this.toInt$0(this.roundToDouble$0(receiver));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    toRadixString$1: function(receiver, radix) {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$(radix));
      return receiver.toString(radix);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      return receiver & 0x1FFFFFFF;
    },
    $negate: function(receiver) {
      return -receiver;
    },
    $add: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver - other;
    },
    $div: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver / other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver * other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver && (other | 0) === other && 0 !== other && -1 !== other)
        return receiver / other | 0;
      else {
        if (typeof other !== "number")
          H.throwExpression(P.ArgumentError$(other));
        return this.toInt$0(receiver / other);
      }
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this.toInt$0(receiver / other);
    },
    $shl: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    _shlPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver << other >>> 0;
    },
    $shr: function(receiver, other) {
      var t1;
      if (other < 0)
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = other > 31 ? 0 : receiver >>> other;
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    $and: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver & other) >>> 0;
    },
    $xor: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return (receiver ^ other) >>> 0;
    },
    $lt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver < other;
    },
    $gt: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver >= other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_xM7;
    },
    $isnum: true,
    static: {"^": "JSNumber__MIN_INT32,JSNumber__MAX_INT32"}
  },
  JSInt: {
    "^": "JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_SnA;
    },
    $is$double: true,
    $isnum: true,
    $is$int: true
  },
  JSDouble: {
    "^": "JSNumber;",
    get$runtimeType: function(receiver) {
      return C.Type_qq1;
    },
    $is$double: true,
    $isnum: true
  },
  JSString: {
    "^": "Interceptor;",
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index < 0)
        throw H.wrapException(P.RangeError$value(index));
      if (index >= receiver.length)
        throw H.wrapException(P.RangeError$value(index));
      return receiver.charCodeAt(index);
    },
    allMatches$1: function(receiver, str) {
      return H.allMatchesInStringUnchecked(receiver, str);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, t2, i, t3;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length));
      t1 = receiver.length;
      t2 = string.length;
      if (start + t1 > t2)
        return;
      for (i = 0; i < t1; ++i) {
        t3 = start + i;
        if (t3 < 0)
          H.throwExpression(P.RangeError$value(t3));
        if (t3 >= t2)
          H.throwExpression(P.RangeError$value(t3));
        t3 = string.charCodeAt(t3);
        if (i >= t1)
          H.throwExpression(P.RangeError$value(i));
        if (t3 !== receiver.charCodeAt(i))
          return;
      }
      return new H.StringMatch(start, string, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var t1, otherLength, t2;
      if (typeof other !== "string")
        H.throwExpression(P.ArgumentError$(other));
      t1 = J.getInterceptor$asx(other);
      otherLength = t1.get$length(other);
      t2 = receiver.length;
      if (J.$gt$n(otherLength, t2))
        return false;
      if (typeof otherLength !== "number")
        return H.iae(otherLength);
      return t1.$eq(other, this.substring$1(receiver, t2 - otherLength));
    },
    replaceAll$2: function(receiver, from, to) {
      return H.stringReplaceAllUnchecked(receiver, from, to);
    },
    split$1: function(receiver, pattern) {
      if (pattern == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof pattern === "string")
        return receiver.split(pattern);
      else if (!!J.getInterceptor(pattern).$isJSSyntaxRegExp)
        return receiver.split(pattern._nativeRegExp);
      else
        throw H.wrapException("String.split(Pattern) UNIMPLEMENTED");
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length));
      if (typeof pattern === "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      var t1;
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(P.ArgumentError$(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof endIndex !== "number" || Math.floor(endIndex) !== endIndex)
        H.throwExpression(P.ArgumentError$(endIndex));
      t1 = J.getInterceptor$n(startIndex);
      if (t1.$lt(startIndex, 0))
        throw H.wrapException(P.RangeError$value(startIndex));
      if (t1.$gt(startIndex, endIndex))
        throw H.wrapException(P.RangeError$value(startIndex));
      if (J.$gt$n(endIndex, receiver.length))
        throw H.wrapException(P.RangeError$value(endIndex));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    toUpperCase$0: function(receiver) {
      return receiver.toUpperCase();
    },
    trim$0: function(receiver) {
      var result, endIndex, startIndex, t1, endIndex0;
      result = receiver.trim();
      endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this.codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    $mul: function(receiver, times) {
      var s, result;
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    get$codeUnits: function(receiver) {
      return new J._CodeUnits(receiver);
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1, t2, i;
      if (pattern == null)
        H.throwExpression(P.ArgumentError$(null));
      if (typeof start !== "number" || Math.floor(start) !== start)
        throw H.wrapException(P.ArgumentError$(start));
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length));
      if (typeof pattern === "string")
        return receiver.indexOf(pattern, start);
      for (t1 = receiver.length, t2 = J.getInterceptor$s(pattern), i = start; i <= t1; ++i)
        if (t2.matchAsPrefix$2(pattern, receiver, i) != null)
          return i;
      return -1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$2: function(receiver, pattern, start) {
      var t1, t2;
      start = receiver.length;
      t1 = pattern.length;
      t2 = receiver.length;
      if (start + t1 > t2)
        start = t2 - t1;
      return receiver.lastIndexOf(pattern, start);
    },
    lastIndexOf$1: function($receiver, pattern) {
      return this.lastIndexOf$2($receiver, pattern, null);
    },
    contains$2: function(receiver, other, startIndex) {
      if (other == null)
        H.throwExpression(P.ArgumentError$(null));
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    compareTo$1: function(receiver, other) {
      var t1;
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    get$runtimeType: function(receiver) {
      return C.Type_Ejg;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(P.ArgumentError$(index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      return receiver[index];
    },
    $isString: true,
    static: {JSString__isWhitespace: function(codeUnit) {
        if (codeUnit < 256)
          switch (codeUnit) {
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
            case 133:
            case 160:
              return true;
            default:
              return false;
          }
        switch (codeUnit) {
          case 5760:
          case 6158:
          case 8192:
          case 8193:
          case 8194:
          case 8195:
          case 8196:
          case 8197:
          case 8198:
          case 8199:
          case 8200:
          case 8201:
          case 8202:
          case 8232:
          case 8233:
          case 8239:
          case 8287:
          case 12288:
          case 65279:
            return true;
          default:
            return false;
        }
      }, JSString__skipLeadingWhitespace: function(string, index) {
        var t1, codeUnit;
        for (t1 = string.length; index < t1;) {
          if (index >= t1)
            H.throwExpression(P.RangeError$value(index));
          codeUnit = string.charCodeAt(index);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
          ++index;
        }
        return index;
      }, JSString__skipTrailingWhitespace: function(string, index) {
        var t1, index0, codeUnit;
        for (t1 = string.length; index > 0; index = index0) {
          index0 = index - 1;
          if (index0 >= t1)
            H.throwExpression(P.RangeError$value(index0));
          codeUnit = string.charCodeAt(index0);
          if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
            break;
        }
        return index;
      }}
  },
  _CodeUnits: {
    "^": "UnmodifiableListBase;__interceptors$_string",
    get$length: function(_) {
      return this.__interceptors$_string.length;
    },
    $index: function(_, i) {
      var t1, t2;
      t1 = this.__interceptors$_string;
      if (typeof i !== "number" || Math.floor(i) !== i)
        H.throwExpression(P.ArgumentError$(i));
      t2 = J.getInterceptor$n(i);
      if (t2.$lt(i, 0))
        H.throwExpression(P.RangeError$value(i));
      if (t2.$ge(i, t1.length))
        H.throwExpression(P.RangeError$value(i));
      return t1.charCodeAt(i);
    },
    $asUnmodifiableListBase: function() {
      return [P.$int];
    },
    $asListBase: function() {
      return [P.$int];
    },
    $asList: function() {
      return [P.$int];
    },
    $asIterable: function() {
      return [P.$int];
    }
  }
}],
["_isolate_helper", "dart:_isolate_helper", , H, {
  "^": "",
  _callInIsolate: function(isolate, $function) {
    var result = isolate.eval$1($function);
    init.globalState.topEventLoop.run$0();
    return result;
  },
  leaveJsAsync: function() {
    --init.globalState.topEventLoop._activeJsAsyncCount;
  },
  startRootIsolate: function(entry, args) {
    var t1, t2, t3, t4, t5, rootContext;
    t1 = {};
    t1.args_0 = args;
    args = args;
    t1.args_0 = args;
    if (args == null) {
      args = [];
      t1.args_0 = args;
      t2 = args;
    } else
      t2 = args;
    if (!J.getInterceptor(t2).$isList)
      throw H.wrapException(P.ArgumentError$("Arguments to main must be a List: " + H.S(t2)));
    t2 = new H._Manager(0, 0, 1, null, null, null, null, null, null, null, null, null, entry);
    t2._Manager$1(entry);
    init.globalState = t2;
    if (init.globalState.isWorker === true)
      return;
    t2 = init.globalState.nextIsolateId++;
    t3 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
    t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
    t5 = new H.RawReceivePortImpl(0, null, false);
    rootContext = new H._IsolateContext(t2, t3, t4, new Isolate(), t5, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, false);
    t4.add$1(0, 0);
    rootContext._addRegistration$2(0, t5);
    init.globalState.rootContext = rootContext;
    init.globalState.currentContext = rootContext;
    t2 = H.getDynamicRuntimeType();
    t3 = H.buildFunctionType(t2, [t2])._isTest$1(entry);
    if (t3)
      rootContext.eval$1(new H.startRootIsolate_closure(t1, entry));
    else {
      t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(entry);
      if (t2)
        rootContext.eval$1(new H.startRootIsolate_closure0(t1, entry));
      else
        rootContext.eval$1(entry);
    }
    init.globalState.topEventLoop.run$0();
  },
  IsolateNatives_computeThisScript: function() {
    var currentScript = init.currentScript;
    if (currentScript != null)
      return String(currentScript.src);
    if (typeof version == "function" && typeof os == "object" && "system" in os)
      return H.IsolateNatives_computeThisScriptFromTrace();
    if (typeof version == "function" && typeof system == "function")
      return thisFilename();
    if (init.globalState.isWorker === true)
      return H.IsolateNatives_computeThisScriptFromTrace();
    return;
  },
  IsolateNatives_computeThisScriptFromTrace: function() {
    var stack, matches;
    stack = new Error().stack;
    if (stack == null) {
      stack = function() {
        try {
          throw new Error();
        } catch (e) {
          return e.stack;
        }

      }();
      if (stack == null)
        throw H.wrapException(P.UnsupportedError$("No stack trace"));
    }
    matches = stack.match(new RegExp("^ *at [^(]*\\((.*):[0-9]*:[0-9]*\\)$", "m"));
    if (matches != null)
      return matches[1];
    matches = stack.match(new RegExp("^[^@]*@(.*):[0-9]*$", "m"));
    if (matches != null)
      return matches[1];
    throw H.wrapException(P.UnsupportedError$("Cannot extract URI from \"" + H.S(stack) + "\""));
  },
  IsolateNatives__processWorkerMessage: [function(sender, e) {
    var msg, t1, functionName, entryPoint, args, message, isSpawnUri, startPaused, replyTo, t2, t3, t4, context, uri, t5, t6, worker, t7;
    msg = H._deserializeMessage(e.data);
    t1 = J.getInterceptor$asx(msg);
    switch (t1.$index(msg, "command")) {
      case "start":
        init.globalState.currentManagerId = t1.$index(msg, "id");
        functionName = t1.$index(msg, "functionName");
        entryPoint = functionName == null ? init.globalState.entry : init.globalFunctions[functionName]();
        args = t1.$index(msg, "args");
        message = H._deserializeMessage(t1.$index(msg, "msg"));
        isSpawnUri = t1.$index(msg, "isSpawnUri");
        startPaused = t1.$index(msg, "startPaused");
        replyTo = H._deserializeMessage(t1.$index(msg, "replyTo"));
        t1 = init.globalState.nextIsolateId++;
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H.RawReceivePortImpl);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.$int);
        t4 = new H.RawReceivePortImpl(0, null, false);
        context = new H._IsolateContext(t1, t2, t3, new Isolate(), t4, P.Capability_Capability(), P.Capability_Capability(), false, [], P.LinkedHashSet_LinkedHashSet(null, null, null, null), null, null, false, false);
        t3.add$1(0, 0);
        context._addRegistration$2(0, t4);
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, new H.IsolateNatives__processWorkerMessage_closure(entryPoint, args, message, isSpawnUri, startPaused, replyTo), "worker-start"));
        init.globalState.currentContext = context;
        init.globalState.topEventLoop.run$0();
        break;
      case "spawn-worker":
        t2 = t1.$index(msg, "functionName");
        uri = t1.$index(msg, "uri");
        t3 = t1.$index(msg, "args");
        t4 = t1.$index(msg, "msg");
        t5 = t1.$index(msg, "isSpawnUri");
        t6 = t1.$index(msg, "startPaused");
        t1 = t1.$index(msg, "replyPort");
        if (uri == null)
          uri = $.get$IsolateNatives_thisScript();
        worker = new Worker(uri);
        worker.onmessage = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, worker);
        t7 = init.globalState.nextManagerId++;
        $.get$IsolateNatives_workerIds().$indexSet(0, worker, t7);
        init.globalState.managers.$indexSet(0, t7, worker);
        worker.postMessage(H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "start", "id", t7, "replyTo", H._serializeMessage(t1), "args", t3, "msg", H._serializeMessage(t4), "isSpawnUri", t5, "startPaused", t6, "functionName", t2], null, null)));
        break;
      case "message":
        if (t1.$index(msg, "port") != null)
          J.send$1$x(t1.$index(msg, "port"), t1.$index(msg, "msg"));
        init.globalState.topEventLoop.run$0();
        break;
      case "close":
        init.globalState.managers.remove$1(0, $.get$IsolateNatives_workerIds().$index(0, sender));
        sender.terminate();
        init.globalState.topEventLoop.run$0();
        break;
      case "log":
        H.IsolateNatives__log(t1.$index(msg, "msg"));
        break;
      case "print":
        if (init.globalState.isWorker === true) {
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "print", "msg", msg], null, null));
          t1.toString;
          self.postMessage(t2);
        } else
          P.print(t1.$index(msg, "msg"));
        break;
      case "error":
        throw H.wrapException(t1.$index(msg, "msg"));
    }
  }, "call$2", "IsolateNatives__processWorkerMessage$closure", 4, 0, null, 0, 1],
  IsolateNatives__log: function(msg) {
    var trace, t1, t2, exception;
    if (init.globalState.isWorker === true) {
      t1 = init.globalState.mainManager;
      t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "log", "msg", msg], null, null));
      t1.toString;
      self.postMessage(t2);
    } else
      try {
        $.get$globalThis().console.log(msg);
      } catch (exception) {
        H.unwrapException(exception);
        trace = new H._StackTrace(exception, null);
        throw H.wrapException(P.Exception_Exception(trace));
      }

  },
  IsolateNatives__startIsolate: function(topLevel, args, message, isSpawnUri, startPaused, replyTo) {
    var context, t1, t2, t3;
    context = init.globalState.currentContext;
    t1 = context.id;
    $.Primitives_mirrorFunctionCacheName = $.Primitives_mirrorFunctionCacheName + ("_" + t1);
    $.Primitives_mirrorInvokeCacheName = $.Primitives_mirrorInvokeCacheName + ("_" + t1);
    t1 = context.controlPort;
    t2 = init.globalState.currentContext.id;
    t3 = context.pauseCapability;
    J.send$1$x(replyTo, ["spawned", new H._NativeJsSendPort(t1, t2), t3, context.terminateCapability]);
    t2 = new H.IsolateNatives__startIsolate_runStartFunction(topLevel, args, message, isSpawnUri);
    if (startPaused === true) {
      context.addPause$2(t3, t3);
      init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(context, t2, "start isolate"));
    } else
      t2.call$0();
  },
  _serializeMessage: function(message) {
    var t1;
    if (init.globalState.supportsWorkers === true) {
      t1 = new H._JsSerializer(0, new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    } else {
      t1 = new H._JsCopier(new H._MessageTraverserVisitedMap());
      t1._visited = new H._JsVisitedMap(null);
      return t1.traverse$1(message);
    }
  },
  _deserializeMessage: function(message) {
    if (init.globalState.supportsWorkers === true)
      return new H._JsDeserializer(null).deserialize$1(message);
    else
      return message;
  },
  _MessageTraverser_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  _Deserializer_isPrimitive: function(x) {
    return x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean";
  },
  startRootIsolate_closure: {
    "^": "Closure0:11;box_0,entry_1",
    call$0: function() {
      this.entry_1.call$1(this.box_0.args_0);
    },
    $isFunction: true
  },
  startRootIsolate_closure0: {
    "^": "Closure0:11;box_0,entry_2",
    call$0: function() {
      this.entry_2.call$2(this.box_0.args_0, null);
    },
    $isFunction: true
  },
  _Manager: {
    "^": "Object;nextIsolateId,currentManagerId,nextManagerId,currentContext,rootContext,topEventLoop,fromCommandLine,isWorker,supportsWorkers,isolates,mainManager,managers,entry",
    _Manager$1: function(entry) {
      var t1, t2, t3, $function;
      t1 = $.get$globalWindow() == null;
      t2 = $.get$globalWorker();
      t3 = t1 && $.get$globalPostMessageDefined() === true;
      this.isWorker = t3;
      if (!t3)
        t2 = t2 != null && $.get$IsolateNatives_thisScript() != null;
      else
        t2 = true;
      this.supportsWorkers = t2;
      this.fromCommandLine = t1 && !t3;
      t2 = H._IsolateEvent;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [t2]);
      t3.ListQueue$1(null, t2);
      this.topEventLoop = new H._EventLoop(t3, 0);
      this.isolates = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, H._IsolateContext);
      this.managers = P.LinkedHashMap_LinkedHashMap(null, null, null, P.$int, null);
      if (this.isWorker === true) {
        t1 = new H._MainManagerStub();
        this.mainManager = t1;
        $function = function(f, a) {
          return function(e) {
            f(a, e);
          };
        }(H.IsolateNatives__processWorkerMessage, t1);
        $.get$globalThis().onmessage = $function;
        $.get$globalThis().dartPrint = function(object) {
        };
      }
    }
  },
  _IsolateContext: {
    "^": "Object;id>,ports,weakPorts,isolateStatics<,controlPort<,pauseCapability,terminateCapability,isPaused<,delayedEvents<,pauseTokens,doneHandlers,_scheduledControlEvents,_isExecutingEvent,errorsAreFatal",
    addPause$2: function(authentification, resume) {
      if (!this.pauseCapability.$eq(0, authentification))
        return;
      if (this.pauseTokens.add$1(0, resume) && !this.isPaused)
        this.isPaused = true;
      this._updateGlobalState$0();
    },
    removePause$1: function(resume) {
      var t1, t2, $event, t3, t4, t5;
      if (!this.isPaused)
        return;
      t1 = this.pauseTokens;
      t1.remove$1(0, resume);
      if (t1._collection$_length === 0) {
        for (t1 = this.delayedEvents; t2 = t1.length, t2 !== 0;) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          $event = t1.pop();
          t2 = init.globalState.topEventLoop.events;
          t3 = t2._head;
          t4 = t2._table;
          t5 = t4.length;
          t3 = (t3 - 1 & t5 - 1) >>> 0;
          t2._head = t3;
          if (t3 < 0 || t3 >= t5)
            return H.ioore(t4, t3);
          t4[t3] = $event;
          if (t3 === t2._tail)
            t2._grow$0();
          ++t2._modificationCount;
        }
        this.isPaused = false;
      }
      this._updateGlobalState$0();
    },
    addDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null) {
        t1 = [];
        this.doneHandlers = t1;
      }
      if (J.contains$1$asx(t1, responsePort))
        return;
      this.doneHandlers.push(responsePort);
    },
    removeDoneListener$1: function(responsePort) {
      var t1 = this.doneHandlers;
      if (t1 == null)
        return;
      J.remove$1$ax(t1, responsePort);
    },
    setErrorsFatal$2: function(authentification, errorsAreFatal) {
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      this.errorsAreFatal = errorsAreFatal;
    },
    handlePing$2: function(responsePort, pingType) {
      var t1, t2;
      t1 = J.getInterceptor(pingType);
      if (!t1.$eq(pingType, 0))
        t2 = t1.$eq(pingType, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        J.send$1$x(responsePort, null);
        return;
      }
      t2 = new H._IsolateContext_handlePing_respond(responsePort);
      if (t1.$eq(pingType, 2)) {
        init.globalState.topEventLoop.events._add$1(0, new H._IsolateEvent(this, t2, "ping"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(0, t2);
    },
    handleKill$2: function(authentification, priority) {
      var t1, t2;
      if (!this.terminateCapability.$eq(0, authentification))
        return;
      t1 = J.getInterceptor(priority);
      if (!t1.$eq(priority, 0))
        t2 = t1.$eq(priority, 1) && !this._isExecutingEvent;
      else
        t2 = true;
      if (t2) {
        this.kill$0();
        return;
      }
      if (t1.$eq(priority, 2)) {
        t1 = init.globalState.topEventLoop;
        t2 = this.get$kill();
        t1.events._add$1(0, new H._IsolateEvent(this, t2, "kill"));
        return;
      }
      t1 = this._scheduledControlEvents;
      if (t1 == null) {
        t1 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
        t1.ListQueue$1(null, null);
        this._scheduledControlEvents = t1;
      }
      t1._add$1(0, this.get$kill());
    },
    eval$1: function(code) {
      var old, result, t1;
      old = init.globalState.currentContext;
      init.globalState.currentContext = this;
      $ = this.isolateStatics;
      result = null;
      this._isExecutingEvent = true;
      try {
        result = code.call$0();
      } finally {
        this._isExecutingEvent = false;
        init.globalState.currentContext = old;
        if (old != null)
          $ = old.get$isolateStatics();
        if (this._scheduledControlEvents != null)
          for (; t1 = this._scheduledControlEvents, !t1.get$isEmpty(t1);)
            this._scheduledControlEvents.removeFirst$0().call$0();
      }
      return result;
    },
    handleControlMessage$1: function(message) {
      var t1 = J.getInterceptor$asx(message);
      switch (t1.$index(message, 0)) {
        case "pause":
          this.addPause$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "resume":
          this.removePause$1(t1.$index(message, 1));
          break;
        case "add-ondone":
          this.addDoneListener$1(t1.$index(message, 1));
          break;
        case "remove-ondone":
          this.removeDoneListener$1(t1.$index(message, 1));
          break;
        case "set-errors-fatal":
          this.setErrorsFatal$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "ping":
          this.handlePing$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
        case "kill":
          this.handleKill$2(t1.$index(message, 1), t1.$index(message, 2));
          break;
      }
    },
    lookup$1: function(portId) {
      return this.ports.$index(0, portId);
    },
    _addRegistration$2: function(portId, port) {
      var t1 = this.ports;
      if (t1.containsKey$1(portId))
        throw H.wrapException(P.Exception_Exception("Registry: ports must be registered only once."));
      t1.$indexSet(0, portId, port);
    },
    _updateGlobalState$0: function() {
      if (this.ports._collection$_length - this.weakPorts._collection$_length > 0 || this.isPaused)
        init.globalState.isolates.$indexSet(0, this.id, this);
      else
        this.kill$0();
    },
    kill$0: [function() {
      var t1, t2;
      t1 = this._scheduledControlEvents;
      if (t1 != null)
        t1.clear$0(0);
      for (t1 = this.ports, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current.__isolate_helper$_close$0();
      t1.clear$0(0);
      this.weakPorts.clear$0(0);
      init.globalState.isolates.remove$1(0, this.id);
      t1 = this.doneHandlers;
      if (t1 != null) {
        for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          J.send$1$x(t1._current, null);
        this.doneHandlers = null;
      }
    }, "call$0", "get$kill", 0, 0, 10],
    $is_IsolateContext: true
  },
  _IsolateContext_handlePing_respond: {
    "^": "Closure0:10;responsePort_0",
    call$0: [function() {
      J.send$1$x(this.responsePort_0, null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _EventLoop: {
    "^": "Object;events,_activeJsAsyncCount",
    dequeue$0: function() {
      var t1 = this.events;
      if (t1._head === t1._tail)
        return;
      return t1.removeFirst$0();
    },
    runIteration$0: function() {
      var $event, t1, t2;
      $event = this.dequeue$0();
      if ($event == null) {
        if (init.globalState.rootContext != null && init.globalState.isolates.containsKey$1(init.globalState.rootContext.id) && init.globalState.fromCommandLine === true && init.globalState.rootContext.ports._collection$_length === 0)
          H.throwExpression(P.Exception_Exception("Program exited with open ReceivePorts."));
        t1 = init.globalState;
        if (t1.isWorker === true && t1.isolates._collection$_length === 0 && t1.topEventLoop._activeJsAsyncCount === 0) {
          t1 = t1.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "close"], null, null));
          t1.toString;
          self.postMessage(t2);
        }
        return false;
      }
      $event.process$0();
      return true;
    },
    _runHelper$0: function() {
      if ($.get$globalWindow() != null)
        new H._EventLoop__runHelper_next(this).call$0();
      else
        for (; this.runIteration$0();)
          ;
    },
    run$0: function() {
      var e, trace, exception, t1, t2;
      if (init.globalState.isWorker !== true)
        this._runHelper$0();
      else
        try {
          this._runHelper$0();
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          trace = new H._StackTrace(exception, null);
          t1 = init.globalState.mainManager;
          t2 = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "error", "msg", H.S(e) + "\n" + H.S(trace)], null, null));
          t1.toString;
          self.postMessage(t2);
        }

    }
  },
  _EventLoop__runHelper_next: {
    "^": "Closure0:10;this_0",
    call$0: [function() {
      if (!this.this_0.runIteration$0())
        return;
      P.Timer_Timer(C.Duration_0, this);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _IsolateEvent: {
    "^": "Object;isolate,fn,message",
    process$0: function() {
      var t1 = this.isolate;
      if (t1.get$isPaused()) {
        t1.get$delayedEvents().push(this);
        return;
      }
      t1.eval$1(this.fn);
    },
    $is_IsolateEvent: true
  },
  _MainManagerStub: {
    "^": "Object;"
  },
  IsolateNatives__processWorkerMessage_closure: {
    "^": "Closure0:11;entryPoint_0,args_1,message_2,isSpawnUri_3,startPaused_4,replyTo_5",
    call$0: function() {
      H.IsolateNatives__startIsolate(this.entryPoint_0, this.args_1, this.message_2, this.isSpawnUri_3, this.startPaused_4, this.replyTo_5);
    },
    $isFunction: true
  },
  IsolateNatives__startIsolate_runStartFunction: {
    "^": "Closure0:10;topLevel_0,args_1,message_2,isSpawnUri_3",
    call$0: function() {
      var t1, t2, t3;
      if (this.isSpawnUri_3 !== true)
        this.topLevel_0.call$1(this.message_2);
      else {
        t1 = this.topLevel_0;
        t2 = H.getDynamicRuntimeType();
        t3 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
        if (t3)
          t1.call$2(this.args_1, this.message_2);
        else {
          t2 = H.buildFunctionType(t2, [t2])._isTest$1(t1);
          if (t2)
            t1.call$1(this.args_1);
          else
            t1.call$0();
        }
      }
    },
    $isFunction: true
  },
  _BaseSendPort: {
    "^": "Object;",
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort: {
    "^": "_BaseSendPort;_receivePort,_isolateId",
    send$1: function(_, message) {
      var t1, t2, isolate, t3, shouldSerialize;
      t1 = {};
      t2 = this._isolateId;
      isolate = init.globalState.isolates.$index(0, t2);
      if (isolate == null)
        return;
      t3 = this._receivePort;
      if (t3.get$__isolate_helper$_isClosed())
        return;
      shouldSerialize = init.globalState.currentContext != null && init.globalState.currentContext.id !== t2;
      t1.msg_0 = message;
      if (shouldSerialize)
        t1.msg_0 = H._serializeMessage(message);
      if (isolate.get$controlPort() === t3) {
        isolate.handleControlMessage$1(t1.msg_0);
        return;
      }
      t2 = init.globalState.topEventLoop;
      t3 = "receive " + H.S(message);
      t2.events._add$1(0, new H._IsolateEvent(isolate, new H._NativeJsSendPort_send_closure(t1, this, shouldSerialize), t3));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_NativeJsSendPort && J.$eq(this._receivePort, other._receivePort);
    },
    get$hashCode: function(_) {
      return this._receivePort.get$_id();
    },
    $is_NativeJsSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  _NativeJsSendPort_send_closure: {
    "^": "Closure0:11;box_0,this_1,shouldSerialize_2",
    call$0: function() {
      var t1, t2;
      t1 = this.this_1._receivePort;
      if (!t1.get$__isolate_helper$_isClosed()) {
        if (this.shouldSerialize_2) {
          t2 = this.box_0;
          t2.msg_0 = H._deserializeMessage(t2.msg_0);
        }
        J.__isolate_helper$_add$1$x(t1, this.box_0.msg_0);
      }
    },
    $isFunction: true
  },
  _WorkerSendPort: {
    "^": "_BaseSendPort;_workerId,_receivePortId,_isolateId",
    send$1: function(_, message) {
      var workerMessage, manager;
      workerMessage = H._serializeMessage(P.LinkedHashMap_LinkedHashMap$_literal(["command", "message", "port", this, "msg", message], null, null));
      if (init.globalState.isWorker === true) {
        init.globalState.mainManager.toString;
        self.postMessage(workerMessage);
      } else {
        manager = init.globalState.managers.$index(0, this._workerId);
        if (manager != null)
          manager.postMessage(workerMessage);
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$is_WorkerSendPort && J.$eq(this._workerId, other._workerId) && J.$eq(this._isolateId, other._isolateId) && J.$eq(this._receivePortId, other._receivePortId);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.$shl$n(this._workerId, 16);
      t2 = J.$shl$n(this._isolateId, 8);
      t3 = this._receivePortId;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3) >>> 0;
    },
    $is_WorkerSendPort: true,
    $isSendPort: true,
    $isCapability: true
  },
  RawReceivePortImpl: {
    "^": "Object;_id<,_handler,__isolate_helper$_isClosed<",
    _handler$1: function(arg0) {
      return this._handler.call$1(arg0);
    },
    __isolate_helper$_close$0: function() {
      this.__isolate_helper$_isClosed = true;
      this._handler = null;
    },
    close$0: function(_) {
      var t1, t2;
      if (this.__isolate_helper$_isClosed)
        return;
      this.__isolate_helper$_isClosed = true;
      this._handler = null;
      t1 = init.globalState.currentContext;
      t2 = this._id;
      t1.ports.remove$1(0, t2);
      t1.weakPorts.remove$1(0, t2);
      t1._updateGlobalState$0();
    },
    __isolate_helper$_add$1: function(_, dataEvent) {
      if (this.__isolate_helper$_isClosed)
        return;
      this._handler$1(dataEvent);
    },
    $isRawReceivePortImpl: true,
    static: {"^": "RawReceivePortImpl__nextFreeId"}
  },
  _JsSerializer: {
    "^": "_Serializer;_nextFreeRefId,_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return ["sendport", init.globalState.currentManagerId, x._isolateId, x._receivePort.get$_id()];
      if (!!x.$is_WorkerSendPort)
        return ["sendport", x._workerId, x._isolateId, x._receivePortId];
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return ["capability", x._id];
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsCopier: {
    "^": "_Copier;_visited",
    visitSendPort$1: function(x) {
      if (!!x.$is_NativeJsSendPort)
        return new H._NativeJsSendPort(x._receivePort, x._isolateId);
      if (!!x.$is_WorkerSendPort)
        return new H._WorkerSendPort(x._workerId, x._receivePortId, x._isolateId);
      throw H.wrapException("Illegal underlying port " + x.toString$0(0));
    },
    visitCapability$1: function(x) {
      if (!!x.$isCapabilityImpl)
        return new H.CapabilityImpl(x._id);
      throw H.wrapException("Capability not serializable: " + x.toString$0(0));
    }
  },
  _JsDeserializer: {
    "^": "_Deserializer;_deserialized",
    deserializeSendPort$1: function(list) {
      var t1, managerId, isolateId, receivePortId, isolate, receivePort;
      t1 = J.getInterceptor$asx(list);
      managerId = t1.$index(list, 1);
      isolateId = t1.$index(list, 2);
      receivePortId = t1.$index(list, 3);
      if (J.$eq(managerId, init.globalState.currentManagerId)) {
        isolate = init.globalState.isolates.$index(0, isolateId);
        if (isolate == null)
          return;
        receivePort = isolate.lookup$1(receivePortId);
        if (receivePort == null)
          return;
        return new H._NativeJsSendPort(receivePort, isolateId);
      } else
        return new H._WorkerSendPort(managerId, receivePortId, isolateId);
    },
    deserializeCapability$1: function(list) {
      return new H.CapabilityImpl(J.$index$asx(list, 1));
    }
  },
  _JsVisitedMap: {
    "^": "Object;tagged",
    $index: function(_, object) {
      return object.__MessageTraverser__attached_info__;
    },
    $indexSet: function(_, object, info) {
      this.tagged.push(object);
      object.__MessageTraverser__attached_info__ = info;
    },
    reset$0: function(_) {
      this.tagged = [];
    },
    cleanup$0: function() {
      var $length, i, t1;
      for ($length = this.tagged.length, i = 0; i < $length; ++i) {
        t1 = this.tagged;
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].__MessageTraverser__attached_info__ = null;
      }
      this.tagged = null;
    }
  },
  _MessageTraverserVisitedMap: {
    "^": "Object;",
    $index: function(_, object) {
      return;
    },
    $indexSet: function(_, object, info) {
    },
    reset$0: function(_) {
    },
    cleanup$0: function() {
    }
  },
  _MessageTraverser: {
    "^": "Object;",
    traverse$1: function(x) {
      var result;
      if (H._MessageTraverser_isPrimitive(x))
        return this.visitPrimitive$1(x);
      this._visited.reset$0(0);
      result = null;
      try {
        result = this._dispatch$1(x);
      } finally {
        this._visited.cleanup$0();
      }
      return result;
    },
    _dispatch$1: function(x) {
      var t1;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return this.visitPrimitive$1(x);
      t1 = J.getInterceptor(x);
      if (!!t1.$isList)
        return this.visitList$1(x);
      if (!!t1.$isMap)
        return this.visitMap$1(x);
      if (!!t1.$isSendPort)
        return this.visitSendPort$1(x);
      if (!!t1.$isCapability)
        return this.visitCapability$1(x);
      return this.visitObject$1(x);
    },
    visitObject$1: function(x) {
      throw H.wrapException("Message serialization: Illegal value " + H.S(x) + " passed");
    }
  },
  _Copier: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copy, t1, len, i;
      copy = this._visited.$index(0, list);
      if (copy != null)
        return copy;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      copy = Array(len);
      copy.fixed$length = init;
      this._visited.$indexSet(0, list, copy);
      for (i = 0; i < len; ++i)
        copy[i] = this._dispatch$1(t1.$index(list, i));
      return copy;
    },
    visitMap$1: function(map) {
      var t1, copy;
      t1 = {};
      copy = this._visited.$index(0, map);
      t1.copy_0 = copy;
      if (copy != null)
        return copy;
      copy = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1.copy_0 = copy;
      this._visited.$indexSet(0, map, copy);
      map.forEach$1(0, new H._Copier_visitMap_closure(t1, this));
      return t1.copy_0;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Copier_visitMap_closure: {
    "^": "Closure0:58;box_0,this_1",
    call$2: function(key, val) {
      var t1 = this.this_1;
      J.$indexSet$ax(this.box_0.copy_0, t1._dispatch$1(key), t1._dispatch$1(val));
    },
    $isFunction: true
  },
  _Serializer: {
    "^": "_MessageTraverser;",
    visitPrimitive$1: function(x) {
      return x;
    },
    visitList$1: function(list) {
      var copyId, t1;
      copyId = this._visited.$index(0, list);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, list, t1);
      return ["list", t1, this._serializeList$1(list)];
    },
    visitMap$1: function(map) {
      var copyId, t1;
      copyId = this._visited.$index(0, map);
      if (copyId != null)
        return ["ref", copyId];
      t1 = this._nextFreeRefId++;
      this._visited.$indexSet(0, map, t1);
      return ["map", t1, this._serializeList$1(J.toList$0$ax(map.get$keys())), this._serializeList$1(J.toList$0$ax(map.get$values(map)))];
    },
    _serializeList$1: function(list) {
      var t1, len, result, i, t2;
      t1 = J.getInterceptor$asx(list);
      len = t1.get$length(list);
      result = [];
      C.JSArray_methods.set$length(result, len);
      for (i = 0; i < len; ++i) {
        t2 = this._dispatch$1(t1.$index(list, i));
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t2;
      }
      return result;
    },
    visitSendPort$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    },
    visitCapability$1: function(x) {
      return H.throwExpression(P.UnimplementedError$(null));
    }
  },
  _Deserializer: {
    "^": "Object;",
    deserialize$1: function(x) {
      if (H._Deserializer_isPrimitive(x))
        return x;
      this._deserialized = P.HashMap_HashMap(null, null, null, null, null);
      return this._deserializeHelper$1(x);
    },
    _deserializeHelper$1: function(x) {
      var t1, id;
      if (x == null || typeof x === "string" || typeof x === "number" || typeof x === "boolean")
        return x;
      t1 = J.getInterceptor$asx(x);
      switch (t1.$index(x, 0)) {
        case "ref":
          id = t1.$index(x, 1);
          return this._deserialized.$index(0, id);
        case "list":
          return this._deserializeList$1(x);
        case "map":
          return this._deserializeMap$1(x);
        case "sendport":
          return this.deserializeSendPort$1(x);
        case "capability":
          return this.deserializeCapability$1(x);
        default:
          return this.deserializeObject$1(x);
      }
    },
    _deserializeList$1: function(x) {
      var t1, id, dartList, len, i;
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      dartList = t1.$index(x, 2);
      this._deserialized.$indexSet(0, id, dartList);
      t1 = J.getInterceptor$asx(dartList);
      len = t1.get$length(dartList);
      if (typeof len !== "number")
        return H.iae(len);
      i = 0;
      for (; i < len; ++i)
        t1.$indexSet(dartList, i, this._deserializeHelper$1(t1.$index(dartList, i)));
      return dartList;
    },
    _deserializeMap$1: function(x) {
      var result, t1, id, keys, values, len, t2, i;
      result = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = J.getInterceptor$asx(x);
      id = t1.$index(x, 1);
      this._deserialized.$indexSet(0, id, result);
      keys = t1.$index(x, 2);
      values = t1.$index(x, 3);
      t1 = J.getInterceptor$asx(keys);
      len = t1.get$length(keys);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = J.getInterceptor$asx(values);
      i = 0;
      for (; i < len; ++i)
        result.$indexSet(0, this._deserializeHelper$1(t1.$index(keys, i)), this._deserializeHelper$1(t2.$index(values, i)));
      return result;
    },
    deserializeObject$1: function(x) {
      throw H.wrapException("Unexpected serialized object");
    }
  },
  TimerImpl: {
    "^": "Object;_once,_inEventLoop,_handle",
    cancel$0: function() {
      if ($.get$globalThis().setTimeout != null) {
        if (this._inEventLoop)
          throw H.wrapException(P.UnsupportedError$("Timer in event loop cannot be canceled."));
        if (this._handle == null)
          return;
        H.leaveJsAsync();
        if (this._once)
          $.get$globalThis().clearTimeout(this._handle);
        else
          $.get$globalThis().clearInterval(this._handle);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    TimerImpl$2: function(milliseconds, callback) {
      var t1, t2;
      if (milliseconds === 0)
        t1 = $.get$globalThis().setTimeout == null || init.globalState.isWorker === true;
      else
        t1 = false;
      if (t1) {
        this._handle = 1;
        t1 = init.globalState.topEventLoop;
        t2 = init.globalState.currentContext;
        t1.events._add$1(0, new H._IsolateEvent(t2, new H.TimerImpl_internalCallback(this, callback), "timer"));
        this._inEventLoop = true;
      } else {
        t1 = $.get$globalThis();
        if (t1.setTimeout != null) {
          ++init.globalState.topEventLoop._activeJsAsyncCount;
          this._handle = t1.setTimeout(H.convertDartClosureToJS(new H.TimerImpl_internalCallback0(this, callback), 0), milliseconds);
        } else
          throw H.wrapException(P.UnsupportedError$("Timer greater than 0."));
      }
    },
    static: {TimerImpl$: function(milliseconds, callback) {
        var t1 = new H.TimerImpl(true, false, null);
        t1.TimerImpl$2(milliseconds, callback);
        return t1;
      }}
  },
  TimerImpl_internalCallback: {
    "^": "Closure0:10;this_0,callback_1",
    call$0: function() {
      this.this_0._handle = null;
      this.callback_1.call$0();
    },
    $isFunction: true
  },
  TimerImpl_internalCallback0: {
    "^": "Closure0:10;this_2,callback_3",
    call$0: [function() {
      this.this_2._handle = null;
      H.leaveJsAsync();
      this.callback_3.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  CapabilityImpl: {
    "^": "Object;_id<",
    get$hashCode: function(_) {
      var hash, t1, t2;
      hash = this._id;
      t1 = J.getInterceptor$n(hash);
      t2 = t1.$shr(hash, 0);
      t1 = t1.$tdiv(hash, 4294967296);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = t2 ^ t1;
      hash = (~hash >>> 0) + (hash << 15 >>> 0) & 4294967295;
      hash = ((hash ^ hash >>> 12) >>> 0) * 5 & 4294967295;
      hash = ((hash ^ hash >>> 4) >>> 0) * 2057 & 4294967295;
      return (hash ^ hash >>> 16) >>> 0;
    },
    $eq: function(_, other) {
      var t1, t2;
      if (other == null)
        return false;
      if (other === this)
        return true;
      if (!!J.getInterceptor(other).$isCapabilityImpl) {
        t1 = this._id;
        t2 = other._id;
        return t1 == null ? t2 == null : t1 === t2;
      }
      return false;
    },
    $isCapabilityImpl: true,
    $isCapability: true
  }
}],
["_js_helper", "dart:_js_helper", , H, {
  "^": "",
  isJsIndexable: function(object, record) {
    var result;
    if (record != null) {
      result = record.x;
      if (result != null)
        return result;
    }
    return !!J.getInterceptor(object).$isJavaScriptIndexingBehavior;
  },
  S: function(value) {
    var res;
    if (typeof value === "string")
      return value;
    if (typeof value === "number") {
      if (value !== 0)
        return "" + value;
    } else if (true === value)
      return "true";
    else if (false === value)
      return "false";
    else if (value == null)
      return "null";
    res = J.toString$0(value);
    if (typeof res !== "string")
      throw H.wrapException(P.ArgumentError$(value));
    return res;
  },
  Primitives_objectHashCode: function(object) {
    var hash = object.$identityHash;
    if (hash == null) {
      hash = Math.random() * 0x3fffffff | 0;
      object.$identityHash = hash;
    }
    return hash;
  },
  Primitives__throwFormatException: [function(string) {
    throw H.wrapException(P.FormatException$(string));
  }, "call$1", "Primitives__throwFormatException$closure", 2, 0, 2],
  Primitives_parseInt: function(source, radix, handleError) {
    var match, t1, maxCharCode, digitsPart, i, t2;
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
    if (radix == null) {
      if (match != null) {
        t1 = match.length;
        if (2 >= t1)
          return H.ioore(match, 2);
        if (match[2] != null)
          return parseInt(source, 16);
        if (3 >= t1)
          return H.ioore(match, 3);
        if (match[3] != null)
          return parseInt(source, 10);
        return handleError.call$1(source);
      }
      radix = 10;
    } else {
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$("Radix " + H.S(radix) + " not in range 2..36"));
      if (match != null) {
        if (radix === 10) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] != null;
        } else
          t1 = false;
        if (t1)
          return parseInt(source, 10);
        if (!(radix < 10)) {
          if (3 >= match.length)
            return H.ioore(match, 3);
          t1 = match[3] == null;
        } else
          t1 = true;
        if (t1) {
          maxCharCode = radix <= 10 ? 48 + radix - 1 : 97 + radix - 10 - 1;
          if (1 >= match.length)
            return H.ioore(match, 1);
          digitsPart = match[1];
          t1 = J.getInterceptor$asx(digitsPart);
          i = 0;
          while (true) {
            t2 = t1.get$length(digitsPart);
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(i < t2))
              break;
            t1.codeUnitAt$1(digitsPart, 0);
            if (t1.codeUnitAt$1(digitsPart, i) > maxCharCode)
              return handleError.call$1(source);
            ++i;
          }
        }
      }
    }
    if (match == null)
      return handleError.call$1(source);
    return parseInt(source, radix);
  },
  Primitives_parseDouble: function(source, handleError) {
    var result, trimmed;
    if (typeof source !== "string")
      H.throwExpression(P.ArgumentError$(source));
    if (handleError == null)
      handleError = H.Primitives__throwFormatException$closure();
    if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
      return handleError.call$1(source);
    result = parseFloat(source);
    if (isNaN(result)) {
      trimmed = J.trim$0$s(source);
      if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
        return result;
      return handleError.call$1(source);
    }
    return result;
  },
  Primitives_objectTypeName: function(object) {
    var $name, decompiled;
    $name = C.JS_CONST_8ZY(J.getInterceptor(object));
    if ($name === "Object") {
      decompiled = String(object.constructor).match(/^\s*function\s*(\S*)\s*\(/)[1];
      if (typeof decompiled === "string")
        $name = /^\w+$/.test(decompiled) ? decompiled : $name;
    }
    if ($name.length > 1 && C.JSString_methods.codeUnitAt$1($name, 0) === 36)
      $name = C.JSString_methods.substring$1($name, 1);
    return ($name + H.joinArguments(H.getRuntimeTypeInfo(object), 0, null)).replace(/[^<,> ]+/g, function(m) {
      return init.mangledGlobalNames[m] || m;
    });
  },
  Primitives_objectToString: function(object) {
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Primitives_numMicroseconds: function() {
    if (typeof window != "undefined" && window !== null) {
      var performance = window.performance;
      if (performance != null && typeof performance.webkitNow == "function")
        return C.JSNumber_methods.toInt$0(Math.floor(1000 * performance.webkitNow()));
    }
    return 1000 * Date.now();
  },
  Primitives__fromCharCodeApply: function(array) {
    var end, t1, result, i, subarray, t2;
    end = array.length;
    for (t1 = end <= 500, result = "", i = 0; i < end; i += 500) {
      if (t1)
        subarray = array;
      else {
        t2 = i + 500;
        t2 = t2 < end ? t2 : end;
        subarray = array.slice(i, t2);
      }
      result += String.fromCharCode.apply(null, subarray);
    }
    return result;
  },
  Primitives_stringFromCodePoints: function(codePoints) {
    var a, t1, i;
    a = [];
    a.$builtinTypeInfo = [P.$int];
    t1 = new H.ListIterator(codePoints, codePoints.length, 0, null);
    t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(codePoints, 0)];
    for (; t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i <= 65535)
        a.push(i);
      else if (i <= 1114111) {
        a.push(55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
        a.push(56320 + (i & 1023));
      } else
        throw H.wrapException(P.ArgumentError$(i));
    }
    return H.Primitives__fromCharCodeApply(a);
  },
  Primitives_stringFromCharCodes: function(charCodes) {
    var t1, i;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(charCodes, charCodes.length, 0, null), [H.getTypeArgumentByIndex(charCodes, 0)]); t1.moveNext$0();) {
      i = t1._current;
      if (typeof i !== "number" || Math.floor(i) !== i)
        throw H.wrapException(P.ArgumentError$(i));
      if (i < 0)
        throw H.wrapException(P.ArgumentError$(i));
      if (i > 65535)
        return H.Primitives_stringFromCodePoints(charCodes);
    }
    return H.Primitives__fromCharCodeApply(charCodes);
  },
  Primitives_stringFromCharCode: function(charCode) {
    var bits;
    if (typeof charCode !== "number")
      return H.iae(charCode);
    if (0 <= charCode) {
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSNumber_methods._shrOtherPositive$1(bits, 10)) >>> 0, (56320 | bits & 1023) >>> 0);
      }
    }
    throw H.wrapException(P.RangeError$range(charCode, 0, 1114111));
  },
  Primitives_valueFromDecomposedDate: function(years, month, day, hours, minutes, seconds, milliseconds, isUtc) {
    var jsMonth, value, t1, date;
    if (typeof years !== "number" || Math.floor(years) !== years)
      H.throwExpression(P.ArgumentError$(years));
    if (typeof month !== "number" || Math.floor(month) !== month)
      H.throwExpression(P.ArgumentError$(month));
    if (typeof day !== "number" || Math.floor(day) !== day)
      H.throwExpression(P.ArgumentError$(day));
    if (typeof hours !== "number" || Math.floor(hours) !== hours)
      H.throwExpression(P.ArgumentError$(hours));
    if (typeof minutes !== "number" || Math.floor(minutes) !== minutes)
      H.throwExpression(P.ArgumentError$(minutes));
    if (typeof seconds !== "number" || Math.floor(seconds) !== seconds)
      H.throwExpression(P.ArgumentError$(seconds));
    jsMonth = J.$sub$n(month, 1);
    value = isUtc ? Date.UTC(years, jsMonth, day, hours, minutes, seconds, milliseconds) : new Date(years, jsMonth, day, hours, minutes, seconds, milliseconds).valueOf();
    if (isNaN(value) || value < -8640000000000000 || value > 8640000000000000)
      throw H.wrapException(P.ArgumentError$(null));
    t1 = J.getInterceptor$n(years);
    if (t1.$le(years, 0) || t1.$lt(years, 100)) {
      date = new Date(value);
      if (isUtc)
        date.setUTCFullYear(years);
      else
        date.setFullYear(years);
      return date.valueOf();
    }
    return value;
  },
  Primitives_lazyAsJsDate: function(receiver) {
    if (receiver.date === void 0)
      receiver.date = new Date(receiver.millisecondsSinceEpoch);
    return receiver.date;
  },
  Primitives_getProperty: function(object, key) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    return object[key];
  },
  Primitives_setProperty: function(object, key, value) {
    if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
      throw H.wrapException(P.ArgumentError$(object));
    object[key] = value;
  },
  Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
    var t1, $arguments, namedArgumentList;
    t1 = {};
    t1.argumentCount_0 = 0;
    $arguments = [];
    namedArgumentList = [];
    if (positionalArguments != null) {
      t1.argumentCount_0 = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
    }
    t1.names_1 = "";
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
      namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, $arguments, namedArgumentList));
    return J.noSuchMethod$1($function, new H.JSInvocationMirror(C.Symbol_call, "call$" + t1.argumentCount_0 + t1.names_1, 0, $arguments, namedArgumentList, null));
  },
  Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
    var t1, jsFunction, info, t2, defaultArguments, t3, i, index, $arguments, argumentCount;
    t1 = {};
    if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments)) {
      jsFunction = J.getInterceptor($function)["call*"];
      if (jsFunction == null)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      info = H.ReflectionInfo_ReflectionInfo(jsFunction);
      if (info == null || !info.areOptionalParametersNamed)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      positionalArguments = P.List_List$from(positionalArguments, true, null);
      t2 = info.requiredParameterCount;
      if (t2 !== positionalArguments.length)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      defaultArguments = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      for (t3 = info.optionalParameterCount, i = 0; i < t3; ++i) {
        index = i + t2;
        defaultArguments.$indexSet(0, info.parameterNameInOrder$1(index), init.metadata[info.defaultValueInOrder$1(index)]);
      }
      t1.bad_0 = false;
      namedArguments.forEach$1(0, new H.Primitives_applyFunction_closure(t1, defaultArguments));
      if (t1.bad_0)
        return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
      C.JSArray_methods.addAll$1(positionalArguments, defaultArguments.get$values(defaultArguments));
      return jsFunction.apply($function, positionalArguments);
    }
    $arguments = [];
    argumentCount = positionalArguments.length;
    C.JSArray_methods.addAll$1($arguments, positionalArguments);
    jsFunction = $function["call$" + argumentCount];
    if (jsFunction == null)
      return H.Primitives_functionNoSuchMethod($function, positionalArguments, namedArguments);
    return jsFunction.apply($function, $arguments);
  },
  iae: function(argument) {
    throw H.wrapException(P.ArgumentError$(argument));
  },
  ioore: function(receiver, index) {
    if (receiver == null)
      J.get$length$asx(receiver);
    if (typeof index !== "number" || Math.floor(index) !== index)
      H.iae(index);
    throw H.wrapException(P.RangeError$value(index));
  },
  wrapException: function(ex) {
    var wrapper;
    if (ex == null)
      ex = new P.NullThrownError();
    wrapper = new Error();
    wrapper.dartException = ex;
    if ("defineProperty" in Object) {
      Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
      wrapper.name = "";
    } else
      wrapper.toString = H.toStringWrapper;
    return wrapper;
  },
  toStringWrapper: [function() {
    return J.toString$0(this.dartException);
  }, "call$0", "toStringWrapper$closure", 0, 0, null],
  throwExpression: function(ex) {
    throw H.wrapException(ex);
  },
  unwrapException: function(ex) {
    var t1, message, number, ieErrorCode, t2, t3, t4, nullLiteralCall, t5, t6, t7, t8, t9, match;
    t1 = new H.unwrapException_saveStackTrace(ex);
    if (ex == null)
      return;
    if (typeof ex !== "object")
      return ex;
    if ("dartException" in ex)
      return t1.call$1(ex.dartException);
    else if (!("message" in ex))
      return ex;
    message = ex.message;
    if ("number" in ex && typeof ex.number == "number") {
      number = ex.number;
      ieErrorCode = number & 65535;
      if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
        switch (ieErrorCode) {
          case 438:
            return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", null));
          case 445:
          case 5007:
            t2 = H.S(message) + " (Error " + ieErrorCode + ")";
            return t1.call$1(new H.NullError(t2, null));
        }
    }
    if (ex instanceof TypeError) {
      t2 = $.get$TypeErrorDecoder_noSuchMethodPattern();
      t3 = $.get$TypeErrorDecoder_notClosurePattern();
      t4 = $.get$TypeErrorDecoder_nullCallPattern();
      nullLiteralCall = $.get$TypeErrorDecoder_nullLiteralCallPattern();
      t5 = $.get$TypeErrorDecoder_undefinedCallPattern();
      t6 = $.get$TypeErrorDecoder_undefinedLiteralCallPattern();
      t7 = $.get$TypeErrorDecoder_nullPropertyPattern();
      $.get$TypeErrorDecoder_nullLiteralPropertyPattern();
      t8 = $.get$TypeErrorDecoder_undefinedPropertyPattern();
      t9 = $.get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
      match = t2.matchTypeError$1(message);
      if (match != null)
        return t1.call$1(H.JsNoSuchMethodError$(message, match));
      else {
        match = t3.matchTypeError$1(message);
        if (match != null) {
          match.method = "call";
          return t1.call$1(H.JsNoSuchMethodError$(message, match));
        } else {
          match = t4.matchTypeError$1(message);
          if (match == null) {
            match = nullLiteralCall.matchTypeError$1(message);
            if (match == null) {
              match = t5.matchTypeError$1(message);
              if (match == null) {
                match = t6.matchTypeError$1(message);
                if (match == null) {
                  match = t7.matchTypeError$1(message);
                  if (match == null) {
                    match = nullLiteralCall.matchTypeError$1(message);
                    if (match == null) {
                      match = t8.matchTypeError$1(message);
                      if (match == null) {
                        match = t9.matchTypeError$1(message);
                        t2 = match != null;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
          } else
            t2 = true;
          if (t2) {
            t2 = match == null ? null : match.method;
            return t1.call$1(new H.NullError(message, t2));
          }
        }
      }
      t2 = typeof message === "string" ? message : "";
      return t1.call$1(new H.UnknownJsTypeError(t2));
    }
    if (ex instanceof RangeError) {
      if (typeof message === "string" && message.indexOf("call stack") !== -1)
        return new P.StackOverflowError();
      return t1.call$1(new P.ArgumentError(null));
    }
    if (typeof InternalError == "function" && ex instanceof InternalError)
      if (typeof message === "string" && message === "too much recursion")
        return new P.StackOverflowError();
    return ex;
  },
  objectHashCode: function(object) {
    if (object == null || typeof object != 'object')
      return J.get$hashCode$(object);
    else
      return H.Primitives_objectHashCode(object);
  },
  fillLiteralMap: function(keyValuePairs, result) {
    var $length, index, index0, index1;
    $length = keyValuePairs.length;
    for (index = 0; index < $length; index = index1) {
      index0 = index + 1;
      index1 = index0 + 1;
      result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
    }
    return result;
  },
  invokeClosure: [function(closure, isolate, numberOfArguments, arg1, arg2, arg3, arg4) {
    var t1 = J.getInterceptor(numberOfArguments);
    if (t1.$eq(numberOfArguments, 0))
      return H._callInIsolate(isolate, new H.invokeClosure_closure(closure));
    else if (t1.$eq(numberOfArguments, 1))
      return H._callInIsolate(isolate, new H.invokeClosure_closure0(closure, arg1));
    else if (t1.$eq(numberOfArguments, 2))
      return H._callInIsolate(isolate, new H.invokeClosure_closure1(closure, arg1, arg2));
    else if (t1.$eq(numberOfArguments, 3))
      return H._callInIsolate(isolate, new H.invokeClosure_closure2(closure, arg1, arg2, arg3));
    else if (t1.$eq(numberOfArguments, 4))
      return H._callInIsolate(isolate, new H.invokeClosure_closure3(closure, arg1, arg2, arg3, arg4));
    else
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
  }, "call$7", "invokeClosure$closure", 14, 0, null, 3, 4, 5, 6, 7, 8, 9],
  convertDartClosureToJS: function(closure, arity) {
    var $function;
    if (closure == null)
      return;
    $function = closure.$identity;
    if (!!$function)
      return $function;
    $function = function(closure, arity, context, invoke) {
      return function(a1, a2, a3, a4) {
        return invoke(closure, context, arity, a1, a2, a3, a4);
      };
    }(closure, arity, init.globalState.currentContext, H.invokeClosure);
    closure.$identity = $function;
    return $function;
  },
  Closure_fromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, propertyName) {
    var $function, callName, functionType, $prototype, $constructor, t1, isIntercepted, trampoline, signatureFunction, getReceiver, i, stub, stubCallName, t2;
    $function = functions[0];
    $function.$stubName;
    callName = $function.$callName;
    $function.$reflectionInfo = reflectionInfo;
    functionType = H.ReflectionInfo_ReflectionInfo($function).functionType;
    $prototype = isStatic ? Object.create(new H.TearOffClosure().constructor.prototype) : Object.create(new H.BoundClosure(null, null, null, null).constructor.prototype);
    $prototype.$initialize = $prototype.constructor;
    if (isStatic)
      $constructor = function() {
        this.$initialize();
      };
    else if (typeof dart_precompiled == "function") {
      t1 = function(a, b, c, d) {
        this.$initialize(a, b, c, d);
      };
      $constructor = t1;
    } else {
      t1 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t1, 1);
      t1 = new Function("a", "b", "c", "d", "this.$initialize(a,b,c,d);" + t1);
      $constructor = t1;
    }
    $prototype.constructor = $constructor;
    $constructor.prototype = $prototype;
    t1 = !isStatic;
    if (t1) {
      isIntercepted = jsArguments.length == 1 && true;
      trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
      trampoline.$reflectionInfo = reflectionInfo;
    } else {
      $prototype.$name = propertyName;
      trampoline = $function;
      isIntercepted = false;
    }
    if (typeof functionType == "number")
      signatureFunction = function(s) {
        return function() {
          return init.metadata[s];
        };
      }(functionType);
    else if (t1 && typeof functionType == "function") {
      getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
      signatureFunction = function(f, r) {
        return function() {
          return f.apply({$receiver: r(this)}, arguments);
        };
      }(functionType, getReceiver);
    } else
      throw H.wrapException("Error in reflectionInfo.");
    $prototype.$signature = signatureFunction;
    $prototype[callName] = trampoline;
    for (t1 = functions.length, i = 1; i < t1; ++i) {
      stub = functions[i];
      stubCallName = stub.$callName;
      if (stubCallName != null) {
        t2 = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
        $prototype[stubCallName] = t2;
      }
    }
    $prototype["call*"] = trampoline;
    return $constructor;
  },
  Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
    var getSelf = H.BoundClosure_selfOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        return function(n, S) {
          return function() {
            return S(this)[n]();
          };
        }(stubName, getSelf);
      case 1:
        return function(n, S) {
          return function(a) {
            return S(this)[n](a);
          };
        }(stubName, getSelf);
      case 2:
        return function(n, S) {
          return function(a, b) {
            return S(this)[n](a, b);
          };
        }(stubName, getSelf);
      case 3:
        return function(n, S) {
          return function(a, b, c) {
            return S(this)[n](a, b, c);
          };
        }(stubName, getSelf);
      case 4:
        return function(n, S) {
          return function(a, b, c, d) {
            return S(this)[n](a, b, c, d);
          };
        }(stubName, getSelf);
      case 5:
        return function(n, S) {
          return function(a, b, c, d, e) {
            return S(this)[n](a, b, c, d, e);
          };
        }(stubName, getSelf);
      default:
        return function(f, s) {
          return function() {
            return f.apply(s(this), arguments);
          };
        }($function, getSelf);
    }
  },
  Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
    var stubName, arity, lookedUpFunction, t1, t2, $arguments;
    if (isIntercepted)
      return H.Closure_forwardInterceptedCallTo(receiver, $function);
    stubName = $function.$stubName;
    arity = $function.length;
    lookedUpFunction = receiver[stubName];
    t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (typeof dart_precompiled == "function" || !t1 || arity >= 27)
      return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
    if (arity === 0) {
      t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null) {
        t1 = H.BoundClosure_computeFieldNamed("self");
        $.BoundClosure_selfFieldNameCache = t1;
      }
      t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "();";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
    t1 = "return function(" + $arguments + "){return this.";
    t2 = $.BoundClosure_selfFieldNameCache;
    if (t2 == null) {
      t2 = H.BoundClosure_computeFieldNamed("self");
      $.BoundClosure_selfFieldNameCache = t2;
    }
    t2 = t1 + H.S(t2) + "." + H.S(stubName) + "(" + $arguments + ");";
    t1 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t1, 1);
    return new Function(t2 + H.S(t1) + "}")();
  },
  Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
    var getSelf, getReceiver;
    getSelf = H.BoundClosure_selfOf;
    getReceiver = H.BoundClosure_receiverOf;
    switch (isSuperCall ? -1 : arity) {
      case 0:
        throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
      case 1:
        return function(n, s, r) {
          return function() {
            return s(this)[n](r(this));
          };
        }($name, getSelf, getReceiver);
      case 2:
        return function(n, s, r) {
          return function(a) {
            return s(this)[n](r(this), a);
          };
        }($name, getSelf, getReceiver);
      case 3:
        return function(n, s, r) {
          return function(a, b) {
            return s(this)[n](r(this), a, b);
          };
        }($name, getSelf, getReceiver);
      case 4:
        return function(n, s, r) {
          return function(a, b, c) {
            return s(this)[n](r(this), a, b, c);
          };
        }($name, getSelf, getReceiver);
      case 5:
        return function(n, s, r) {
          return function(a, b, c, d) {
            return s(this)[n](r(this), a, b, c, d);
          };
        }($name, getSelf, getReceiver);
      case 6:
        return function(n, s, r) {
          return function(a, b, c, d, e) {
            return s(this)[n](r(this), a, b, c, d, e);
          };
        }($name, getSelf, getReceiver);
      default:
        return function(f, s, r, a) {
          return function() {
            a = [r(this)];
            Array.prototype.push.apply(a, arguments);
            return f.apply(s(this), a);
          };
        }($function, getSelf, getReceiver);
    }
  },
  Closure_forwardInterceptedCallTo: function(receiver, $function) {
    var selfField, t1, stubName, arity, isCsp, lookedUpFunction, t2, $arguments;
    selfField = H.BoundClosure_selfFieldName();
    t1 = $.BoundClosure_receiverFieldNameCache;
    if (t1 == null) {
      t1 = H.BoundClosure_computeFieldNamed("receiver");
      $.BoundClosure_receiverFieldNameCache = t1;
    }
    stubName = $function.$stubName;
    arity = $function.length;
    isCsp = typeof dart_precompiled == "function";
    lookedUpFunction = receiver[stubName];
    t2 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
    if (isCsp || !t2 || arity >= 28)
      return H.Closure_cspForwardInterceptedCall(arity, !t2, stubName, $function);
    if (arity === 1) {
      t1 = "return function(){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ");";
      t2 = $.Closure_functionCounter;
      $.Closure_functionCounter = J.$add$ns(t2, 1);
      return new Function(t1 + H.S(t2) + "}")();
    }
    $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
    t1 = "return function(" + $arguments + "){return this." + H.S(selfField) + "." + H.S(stubName) + "(this." + H.S(t1) + ", " + $arguments + ");";
    t2 = $.Closure_functionCounter;
    $.Closure_functionCounter = J.$add$ns(t2, 1);
    return new Function(t1 + H.S(t2) + "}")();
  },
  closureFromTearOff: function(receiver, functions, reflectionInfo, isStatic, jsArguments, $name) {
    functions.fixed$length = init;
    reflectionInfo.fixed$length = init;
    return H.Closure_fromTearOff(receiver, functions, reflectionInfo, !!isStatic, jsArguments, $name);
  },
  propertyTypeCastError: function(value, property) {
    var t1 = J.getInterceptor$asx(property);
    throw H.wrapException(H.CastErrorImplementation$(H.Primitives_objectTypeName(value), t1.substring$2(property, 3, t1.get$length(property))));
  },
  interceptedTypeCast: function(value, property) {
    var t1;
    if (value != null)
      t1 = typeof value === "object" && J.getInterceptor(value)[property];
    else
      t1 = true;
    if (t1)
      return value;
    H.propertyTypeCastError(value, property);
  },
  throwCyclicInit: function(staticName) {
    throw H.wrapException(P.CyclicInitializationError$("Cyclic initialization for static " + H.S(staticName)));
  },
  buildFunctionType: function(returnType, parameterTypes, optionalParameterTypes) {
    return new H.RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, null);
  },
  buildInterfaceType: function(rti, typeArguments) {
    var $name = rti.name;
    if (typeArguments == null || typeArguments.length === 0)
      return new H.RuntimeTypePlain($name);
    return new H.RuntimeTypeGeneric($name, typeArguments, null);
  },
  getDynamicRuntimeType: function() {
    return C.C_DynamicRuntimeType;
  },
  createRuntimeType: function($name) {
    return new H.TypeImpl($name, null);
  },
  setRuntimeTypeInfo: function(target, typeInfo) {
    if (target != null)
      target.$builtinTypeInfo = typeInfo;
    return target;
  },
  getRuntimeTypeInfo: function(target) {
    if (target == null)
      return;
    return target.$builtinTypeInfo;
  },
  getRuntimeTypeArguments: function(target, substitutionName) {
    return H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
  },
  getRuntimeTypeArgument: function(target, substitutionName, index) {
    var $arguments = H.getRuntimeTypeArguments(target, substitutionName);
    return $arguments == null ? null : $arguments[index];
  },
  getTypeArgumentByIndex: function(target, index) {
    var rti = H.getRuntimeTypeInfo(target);
    return rti == null ? null : rti[index];
  },
  runtimeTypeToString: function(type, onTypeVariable) {
    if (type == null)
      return "dynamic";
    else if (typeof type === "object" && type !== null && type.constructor === Array)
      return type[0].builtin$cls + H.joinArguments(type, 1, onTypeVariable);
    else if (typeof type == "function")
      return type.builtin$cls;
    else if (typeof type === "number" && Math.floor(type) === type)
      return C.JSInt_methods.toString$0(type);
    else
      return;
  },
  joinArguments: function(types, startIndex, onTypeVariable) {
    var buffer, index, firstArgument, allDynamic, argument, str;
    if (types == null)
      return "";
    buffer = P.StringBuffer$("");
    for (index = startIndex, firstArgument = true, allDynamic = true; index < types.length; ++index) {
      if (firstArgument)
        firstArgument = false;
      else
        buffer._contents += ", ";
      argument = types[index];
      if (argument != null)
        allDynamic = false;
      str = H.runtimeTypeToString(argument, onTypeVariable);
      buffer._contents += typeof str === "string" ? str : H.S(str);
    }
    return allDynamic ? "" : "<" + H.S(buffer) + ">";
  },
  getRuntimeTypeString: function(object) {
    var className = J.getInterceptor(object).constructor.builtin$cls;
    if (object == null)
      return className;
    return className + H.joinArguments(object.$builtinTypeInfo, 0, null);
  },
  substitute: function(substitution, $arguments) {
    if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
      $arguments = substitution;
    else if (typeof substitution == "function") {
      substitution = H.invokeOn(substitution, null, $arguments);
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        $arguments = substitution;
      else if (typeof substitution == "function")
        $arguments = H.invokeOn(substitution, null, $arguments);
    }
    return $arguments;
  },
  checkSubtype: function(object, isField, checks, asField) {
    var $arguments, interceptor;
    if (object == null)
      return false;
    $arguments = H.getRuntimeTypeInfo(object);
    interceptor = J.getInterceptor(object);
    if (interceptor[isField] == null)
      return false;
    return H.areSubtypes(H.substitute(interceptor[asField], $arguments), checks);
  },
  areSubtypes: function(s, t) {
    var len, i;
    if (s == null || t == null)
      return true;
    len = s.length;
    for (i = 0; i < len; ++i)
      if (!H.isSubtype(s[i], t[i]))
        return false;
    return true;
  },
  computeSignature: function(signature, context, contextName) {
    return H.invokeOn(signature, context, H.getRuntimeTypeArguments(context, contextName));
  },
  checkSubtypeOfRuntimeType: function(o, t) {
    var rti, type;
    if (o == null)
      return t == null || t.builtin$cls === "Object" || t.builtin$cls === "Null";
    if (t == null)
      return true;
    rti = H.getRuntimeTypeInfo(o);
    o = J.getInterceptor(o);
    if (rti != null) {
      type = rti.slice();
      type.splice(0, 0, o);
    } else
      type = o;
    return H.isSubtype(type, t);
  },
  isSubtype: function(s, t) {
    var targetSignatureFunction, t1, typeOfS, t2, typeOfT, $name, substitution;
    if (s === t)
      return true;
    if (s == null || t == null)
      return true;
    if ("func" in t) {
      if (!("func" in s)) {
        if ("$is_" + H.S(t.func) in s)
          return true;
        targetSignatureFunction = s.$signature;
        if (targetSignatureFunction == null)
          return false;
        s = targetSignatureFunction.apply(s, null);
      }
      return H.isFunctionSubtype(s, t);
    }
    if (t.builtin$cls === "Function" && "func" in s)
      return true;
    t1 = typeof s === "object" && s !== null && s.constructor === Array;
    typeOfS = t1 ? s[0] : s;
    t2 = typeof t === "object" && t !== null && t.constructor === Array;
    typeOfT = t2 ? t[0] : t;
    $name = H.runtimeTypeToString(typeOfT, null);
    if (typeOfT !== typeOfS) {
      if (!("$is" + H.S($name) in typeOfS))
        return false;
      substitution = typeOfS["$as" + H.S(H.runtimeTypeToString(typeOfT, null))];
    } else
      substitution = null;
    if (!t1 && substitution == null || !t2)
      return true;
    t1 = t1 ? s.slice(1) : null;
    t2 = t2 ? t.slice(1) : null;
    return H.areSubtypes(H.substitute(substitution, t1), t2);
  },
  areAssignable: function(s, t, allowShorter) {
    var sLength, tLength, i, t1, t2;
    if (t == null && s == null)
      return true;
    if (t == null)
      return allowShorter;
    if (s == null)
      return false;
    sLength = s.length;
    tLength = t.length;
    if (allowShorter) {
      if (sLength < tLength)
        return false;
    } else if (sLength !== tLength)
      return false;
    for (i = 0; i < tLength; ++i) {
      t1 = s[i];
      t2 = t[i];
      if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
        return false;
    }
    return true;
  },
  areAssignableMaps: function(s, t) {
    var t1, names, i, $name, tType, sType;
    if (t == null)
      return true;
    if (s == null)
      return false;
    t1 = Object.getOwnPropertyNames(t);
    t1.fixed$length = init;
    names = t1;
    for (t1 = names.length, i = 0; i < t1; ++i) {
      $name = names[i];
      if (!Object.hasOwnProperty.call(s, $name))
        return false;
      tType = t[$name];
      sType = s[$name];
      if (!(H.isSubtype(tType, sType) || H.isSubtype(sType, tType)))
        return false;
    }
    return true;
  },
  isFunctionSubtype: function(s, t) {
    var sReturnType, tReturnType, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, t1, t2, tPos, sPos;
    if (!("func" in s))
      return false;
    if ("void" in s) {
      if (!("void" in t) && "ret" in t)
        return false;
    } else if (!("void" in t)) {
      sReturnType = s.ret;
      tReturnType = t.ret;
      if (!(H.isSubtype(sReturnType, tReturnType) || H.isSubtype(tReturnType, sReturnType)))
        return false;
    }
    sParameterTypes = s.args;
    tParameterTypes = t.args;
    sOptionalParameterTypes = s.opt;
    tOptionalParameterTypes = t.opt;
    sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
    tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
    sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
    tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
    if (sParametersLen > tParametersLen)
      return false;
    if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
      return false;
    if (sParametersLen === tParametersLen) {
      if (!H.areAssignable(sParameterTypes, tParameterTypes, false))
        return false;
      if (!H.areAssignable(sOptionalParameterTypes, tOptionalParameterTypes, true))
        return false;
    } else {
      for (pos = 0; pos < sParametersLen; ++pos) {
        t1 = sParameterTypes[pos];
        t2 = tParameterTypes[pos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos) {
        t1 = sOptionalParameterTypes[sPos];
        t2 = tOptionalParameterTypes[tPos];
        if (!(H.isSubtype(t1, t2) || H.isSubtype(t2, t1)))
          return false;
      }
    }
    return H.areAssignableMaps(s.named, t.named);
  },
  invokeOn: function($function, receiver, $arguments) {
    return $function.apply(receiver, $arguments);
  },
  toStringForNativeObject: function(obj) {
    var t1 = $.getTagFunction;
    return "Instance of " + (t1 == null ? "<Unknown>" : t1.call$1(obj));
  },
  hashCodeForNativeObject: function(object) {
    return H.Primitives_objectHashCode(object);
  },
  defineProperty: function(obj, property, value) {
    Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
  },
  lookupAndCacheInterceptor: function(obj) {
    var tag, record, interceptor, interceptorClass, mark, t1;
    tag = $.getTagFunction.call$1(obj);
    record = $.dispatchRecordsForInstanceTags[tag];
    if (record != null) {
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    interceptor = $.interceptorsForUncacheableTags[tag];
    if (interceptor != null)
      return interceptor;
    interceptorClass = init.interceptorsByTag[tag];
    if (interceptorClass == null) {
      tag = $.alternateTagFunction.call$2(obj, tag);
      if (tag != null) {
        record = $.dispatchRecordsForInstanceTags[tag];
        if (record != null) {
          Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
          return record.i;
        }
        interceptor = $.interceptorsForUncacheableTags[tag];
        if (interceptor != null)
          return interceptor;
        interceptorClass = init.interceptorsByTag[tag];
      }
    }
    if (interceptorClass == null)
      return;
    interceptor = interceptorClass.prototype;
    mark = tag[0];
    if (mark === "!") {
      record = H.makeLeafDispatchRecord(interceptor);
      $.dispatchRecordsForInstanceTags[tag] = record;
      Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
      return record.i;
    }
    if (mark === "~") {
      $.interceptorsForUncacheableTags[tag] = interceptor;
      return interceptor;
    }
    if (mark === "-") {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    }
    if (mark === "+")
      return H.patchInteriorProto(obj, interceptor);
    if (mark === "*")
      throw H.wrapException(P.UnimplementedError$(tag));
    if (init.leafTags[tag] === true) {
      t1 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      return t1.i;
    } else
      return H.patchInteriorProto(obj, interceptor);
  },
  patchInteriorProto: function(obj, interceptor) {
    var proto, record;
    proto = Object.getPrototypeOf(obj);
    record = J.makeDispatchRecord(interceptor, proto, null, null);
    Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
    return interceptor;
  },
  makeLeafDispatchRecord: function(interceptor) {
    return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
  },
  makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
    var interceptor = interceptorClass.prototype;
    if (init.leafTags[tag] === true)
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    else
      return J.makeDispatchRecord(interceptor, proto, null, null);
  },
  initNativeDispatch: function() {
    if (true === $.initNativeDispatchFlag)
      return;
    $.initNativeDispatchFlag = true;
    H.initNativeDispatchContinue();
  },
  initNativeDispatchContinue: function() {
    var map, tags, fun, i, tag, proto, record, interceptorClass;
    $.dispatchRecordsForInstanceTags = Object.create(null);
    $.interceptorsForUncacheableTags = Object.create(null);
    H.initHooks();
    map = init.interceptorsByTag;
    tags = Object.getOwnPropertyNames(map);
    if (typeof window != "undefined") {
      window;
      fun = function() {
      };
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        proto = $.prototypeForTagFunction.call$1(tag);
        if (proto != null) {
          record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
          if (record != null) {
            Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            fun.prototype = proto;
          }
        }
      }
    }
    for (i = 0; i < tags.length; ++i) {
      tag = tags[i];
      if (/^[A-Za-z_]/.test(tag)) {
        interceptorClass = map[tag];
        map["!" + tag] = interceptorClass;
        map["~" + tag] = interceptorClass;
        map["-" + tag] = interceptorClass;
        map["+" + tag] = interceptorClass;
        map["*" + tag] = interceptorClass;
      }
    }
  },
  initHooks: function() {
    var hooks, transformers, i, transformer, getTag, getUnknownTag, prototypeForTag;
    hooks = C.JS_CONST_aQP();
    hooks = H.applyHooksTransformer(C.JS_CONST_0, H.applyHooksTransformer(C.JS_CONST_rr7, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_Fs4, H.applyHooksTransformer(C.JS_CONST_gkc, H.applyHooksTransformer(C.JS_CONST_4hp, H.applyHooksTransformer(C.JS_CONST_QJm(C.JS_CONST_8ZY), hooks)))))));
    if (typeof dartNativeDispatchHooksTransformer != "undefined") {
      transformers = dartNativeDispatchHooksTransformer;
      if (typeof transformers == "function")
        transformers = [transformers];
      if (transformers.constructor == Array)
        for (i = 0; i < transformers.length; ++i) {
          transformer = transformers[i];
          if (typeof transformer == "function")
            hooks = transformer(hooks) || hooks;
        }
    }
    getTag = hooks.getTag;
    getUnknownTag = hooks.getUnknownTag;
    prototypeForTag = hooks.prototypeForTag;
    $.getTagFunction = new H.initHooks_closure(getTag);
    $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
    $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
  },
  applyHooksTransformer: function(transformer, hooks) {
    return transformer(hooks) || hooks;
  },
  allMatchesInStringUnchecked: function(needle, haystack) {
    var result, $length, patternLength, startIndex, position, endIndex;
    result = H.setRuntimeTypeInfo([], [P.Match]);
    $length = haystack.length;
    patternLength = needle.length;
    for (startIndex = 0; true;) {
      position = C.JSString_methods.indexOf$2(haystack, needle, startIndex);
      if (position === -1)
        break;
      result.push(new H.StringMatch(position, haystack, needle));
      endIndex = position + patternLength;
      if (endIndex === $length)
        break;
      else
        startIndex = position === endIndex ? startIndex + 1 : endIndex;
    }
    return result;
  },
  stringContainsUnchecked: function(receiver, other, startIndex) {
    var t1, t2;
    if (typeof other === "string")
      return C.JSString_methods.indexOf$2(receiver, other, startIndex) !== -1;
    else {
      t1 = J.getInterceptor(other);
      if (!!t1.$isJSSyntaxRegExp) {
        t1 = C.JSString_methods.substring$1(receiver, startIndex);
        t2 = other._nativeRegExp;
        return t2.test(t1);
      } else
        return J.get$isNotEmpty$asx(t1.allMatches$1(other, C.JSString_methods.substring$1(receiver, startIndex)));
    }
  },
  stringReplaceAllUnchecked: function(receiver, from, to) {
    var result, $length, i, t1;
    if (from === "")
      if (receiver === "")
        return to;
      else {
        result = P.StringBuffer$("");
        $length = receiver.length;
        result.write$1(to);
        for (i = 0; i < $length; ++i) {
          t1 = receiver[i];
          t1 = result._contents += t1;
          result._contents = t1 + to;
        }
        return result._contents;
      }
    else
      return receiver.replace(new RegExp(from.replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), "\\$&"), 'g'), to.replace(/\$/g, "$$$$"));
  },
  stringReplaceFirstUnchecked: function(receiver, from, to) {
    return receiver.replace(from, to.replace(/\$/g, "$$$$"));
  },
  ConstantMap: {
    "^": "Object;",
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$isNotEmpty: function(_) {
      return !J.$eq(this.get$length(this), 0);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _throwUnmodifiable$0: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    $indexSet: function(_, key, val) {
      return this._throwUnmodifiable$0();
    },
    remove$1: function(_, key) {
      return this._throwUnmodifiable$0();
    },
    clear$0: function(_) {
      return this._throwUnmodifiable$0();
    },
    addAll$1: function(_, other) {
      return this._throwUnmodifiable$0();
    },
    $isMap: true
  },
  ConstantStringMap: {
    "^": "ConstantMap;length>,_jsObject,_keys",
    containsKey$1: function(key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[key];
    },
    forEach$1: function(_, f) {
      var keys, i, key;
      keys = this._keys;
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        f.call$2(key, this._fetch$1(key));
      }
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new H._ConstantMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(this._keys, new H.ConstantStringMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    $isEfficientLength: true
  },
  ConstantStringMap_values_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(key) {
      return this.this_0._fetch$1(key);
    }, "call$1", null, 2, 0, null, 59, "call"],
    $isFunction: true
  },
  _ConstantMapKeyIterable: {
    "^": "IterableBase;__js_helper$_map",
    get$iterator: function(_) {
      return J.get$iterator$ax(this.__js_helper$_map._keys);
    }
  },
  JSInvocationMirror: {
    "^": "Object;__js_helper$_memberName,_internalName,_kind,_arguments,_namedArgumentNames,_namedIndices",
    get$memberName: function() {
      return this.__js_helper$_memberName;
    },
    get$isMethod: function(_) {
      return this._kind === 0;
    },
    get$isGetter: function() {
      return this._kind === 1;
    },
    get$isSetter: function() {
      return this._kind === 2;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index;
      if (this._kind === 1)
        return C.List_empty;
      t1 = this._arguments;
      argumentCount = t1.length - this._namedArgumentNames.length;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      list.immutable$list = true;
      list.fixed$length = true;
      return list;
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, map, i, t3, t4;
      if (this._kind !== 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol0, null);
      t1 = this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount;
      if (namedArgumentCount === 0)
        return P.LinkedHashMap_LinkedHashMap$_empty(P.Symbol0, null);
      map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.Symbol0, null);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        t4 = namedArgumentsStartIndex + i;
        if (t4 < 0 || t4 >= t2.length)
          return H.ioore(t2, t4);
        map.$indexSet(0, new H.Symbol(t3), t2[t4]);
      }
      return map;
    },
    static: {"^": "JSInvocationMirror_METHOD,JSInvocationMirror_GETTER,JSInvocationMirror_SETTER"}
  },
  ReflectionInfo: {
    "^": "Object;jsFunction,data,isAccessor,requiredParameterCount,optionalParameterCount,areOptionalParametersNamed,functionType,cachedSortedIndices",
    parameterName$1: function(parameter) {
      var metadataIndex = this.data[parameter + this.optionalParameterCount + 3];
      return init.metadata[metadataIndex];
    },
    defaultValue$1: function(_, parameter) {
      var t1 = this.requiredParameterCount;
      if (typeof parameter !== "number")
        return parameter.$lt();
      if (parameter < t1)
        return;
      return this.data[3 + parameter - t1];
    },
    defaultValueInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.defaultValue$1(0, parameter);
      return this.defaultValue$1(0, this.sortedIndex$1(parameter - t1));
    },
    parameterNameInOrder$1: function(parameter) {
      var t1 = this.requiredParameterCount;
      if (parameter < t1)
        return;
      if (!this.areOptionalParametersNamed || this.optionalParameterCount === 1)
        return this.parameterName$1(parameter);
      return this.parameterName$1(this.sortedIndex$1(parameter - t1));
    },
    sortedIndex$1: function(unsortedIndex) {
      var t1, t2, positions, t3, i, index;
      t1 = {};
      if (this.cachedSortedIndices == null) {
        t2 = this.optionalParameterCount;
        this.cachedSortedIndices = Array(t2);
        positions = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.$int);
        for (t3 = this.requiredParameterCount, i = 0; i < t2; ++i) {
          index = t3 + i;
          positions.$indexSet(0, this.parameterName$1(index), index);
        }
        t1.index_0 = 0;
        t2 = positions.get$keys();
        t2 = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "IterableBase", 0));
        H.IterableMixinWorkaround_sortList(t2, null);
        H.IterableMixinWorkaround_forEach(t2, new H.ReflectionInfo_sortedIndex_closure(t1, this, positions));
      }
      t1 = this.cachedSortedIndices;
      if (unsortedIndex < 0 || unsortedIndex >= t1.length)
        return H.ioore(t1, unsortedIndex);
      return t1[unsortedIndex];
    },
    static: {"^": "ReflectionInfo_REQUIRED_PARAMETERS_INFO,ReflectionInfo_OPTIONAL_PARAMETERS_INFO,ReflectionInfo_FUNCTION_TYPE_INDEX,ReflectionInfo_FIRST_DEFAULT_ARGUMENT", ReflectionInfo_ReflectionInfo: function(jsFunction) {
        var data, requiredParametersInfo, optionalParametersInfo;
        data = jsFunction.$reflectionInfo;
        if (data == null)
          return;
        data.fixed$length = init;
        data = data;
        requiredParametersInfo = data[0];
        optionalParametersInfo = data[1];
        return new H.ReflectionInfo(jsFunction, data, (requiredParametersInfo & 1) === 1, requiredParametersInfo >> 1, optionalParametersInfo >> 1, (optionalParametersInfo & 1) === 1, data[2], null);
      }}
  },
  ReflectionInfo_sortedIndex_closure: {
    "^": "Closure0:2;box_0,this_1,positions_2",
    call$1: function($name) {
      var t1, t2, t3;
      t1 = this.this_1.cachedSortedIndices;
      t2 = this.box_0.index_0++;
      t3 = this.positions_2.$index(0, $name);
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = t3;
    },
    $isFunction: true
  },
  Primitives_functionNoSuchMethod_closure: {
    "^": "Closure0:60;box_0,arguments_1,namedArgumentList_2",
    call$2: function($name, argument) {
      var t1 = this.box_0;
      t1.names_1 = t1.names_1 + "$" + H.S($name);
      this.namedArgumentList_2.push($name);
      this.arguments_1.push(argument);
      ++t1.argumentCount_0;
    },
    $isFunction: true
  },
  Primitives_applyFunction_closure: {
    "^": "Closure0:60;box_0,defaultArguments_1",
    call$2: function(parameter, value) {
      var t1 = this.defaultArguments_1;
      if (t1.containsKey$1(parameter))
        t1.$indexSet(0, parameter, value);
      else
        this.box_0.bad_0 = true;
    },
    $isFunction: true
  },
  TypeErrorDecoder: {
    "^": "Object;_pattern,_arguments,_argumentsExpr,_expr,_method,_receiver",
    matchTypeError$1: function(message) {
      var match, result, t1;
      match = new RegExp(this._pattern).exec(message);
      if (match == null)
        return;
      result = {};
      t1 = this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    },
    static: {"^": "TypeErrorDecoder_noSuchMethodPattern,TypeErrorDecoder_notClosurePattern,TypeErrorDecoder_nullCallPattern,TypeErrorDecoder_nullLiteralCallPattern,TypeErrorDecoder_undefinedCallPattern,TypeErrorDecoder_undefinedLiteralCallPattern,TypeErrorDecoder_nullPropertyPattern,TypeErrorDecoder_nullLiteralPropertyPattern,TypeErrorDecoder_undefinedPropertyPattern,TypeErrorDecoder_undefinedLiteralPropertyPattern", TypeErrorDecoder_extractPattern: function(message) {
        var match, $arguments, argumentsExpr, expr, method, receiver;
        message = message.replace(String({}), '$receiver$').replace(new RegExp("[[\\]{}()*+?.\\\\^$|]", 'g'), '\\$&');
        match = message.match(/\\\$[a-zA-Z]+\\\$/g);
        if (match == null)
          match = [];
        $arguments = match.indexOf("\\$arguments\\$");
        argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
        expr = match.indexOf("\\$expr\\$");
        method = match.indexOf("\\$method\\$");
        receiver = match.indexOf("\\$receiver\\$");
        return new H.TypeErrorDecoder(message.replace('\\$arguments\\$', '((?:x|[^x])*)').replace('\\$argumentsExpr\\$', '((?:x|[^x])*)').replace('\\$expr\\$', '((?:x|[^x])*)').replace('\\$method\\$', '((?:x|[^x])*)').replace('\\$receiver\\$', '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
      }, TypeErrorDecoder_provokeCallErrorOn: function(expression) {
        return function($expr$) {
          var $argumentsExpr$ = '$arguments$';
          try {
            $expr$.$method$($argumentsExpr$);
          } catch (e) {
            return e.message;
          }

        }(expression);
      }, TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
        return function($expr$) {
          try {
            $expr$.$method$;
          } catch (e) {
            return e.message;
          }

        }(expression);
      }}
  },
  NullError: {
    "^": "Error;_message,_method",
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NullError: " + H.S(this._message);
      return "NullError: Cannot call \"" + H.S(t1) + "\" on null";
    },
    $isNoSuchMethodError: true,
    $isError: true
  },
  JsNoSuchMethodError: {
    "^": "Error;_message,_method,_receiver",
    toString$0: function(_) {
      var t1, t2;
      t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      t2 = this._receiver;
      if (t2 == null)
        return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" (" + H.S(this._message) + ")";
      return "NoSuchMethodError: Cannot call \"" + H.S(t1) + "\" on \"" + H.S(t2) + "\" (" + H.S(this._message) + ")";
    },
    $isNoSuchMethodError: true,
    $isError: true,
    static: {JsNoSuchMethodError$: function(_message, match) {
        var t1, t2;
        t1 = match == null;
        t2 = t1 ? null : match.method;
        t1 = t1 ? null : match.receiver;
        return new H.JsNoSuchMethodError(_message, t2, t1);
      }}
  },
  UnknownJsTypeError: {
    "^": "Error;_message",
    toString$0: function(_) {
      var t1 = this._message;
      return C.JSString_methods.get$isEmpty(t1) ? "Error" : "Error: " + t1;
    }
  },
  unwrapException_saveStackTrace: {
    "^": "Closure0:30;ex_0",
    call$1: function(error) {
      if (!!J.getInterceptor(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex_0;
      return error;
    },
    $isFunction: true
  },
  _StackTrace: {
    "^": "Object;_exception,_trace",
    toString$0: function(_) {
      var t1, trace;
      t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = typeof t1 === "object" ? t1.stack : null;
      t1 = trace == null ? "" : trace;
      this._trace = t1;
      return t1;
    }
  },
  invokeClosure_closure: {
    "^": "Closure0:11;closure_0",
    call$0: function() {
      return this.closure_0.call$0();
    },
    $isFunction: true
  },
  invokeClosure_closure0: {
    "^": "Closure0:11;closure_1,arg1_2",
    call$0: function() {
      return this.closure_1.call$1(this.arg1_2);
    },
    $isFunction: true
  },
  invokeClosure_closure1: {
    "^": "Closure0:11;closure_3,arg1_4,arg2_5",
    call$0: function() {
      return this.closure_3.call$2(this.arg1_4, this.arg2_5);
    },
    $isFunction: true
  },
  invokeClosure_closure2: {
    "^": "Closure0:11;closure_6,arg1_7,arg2_8,arg3_9",
    call$0: function() {
      return this.closure_6.call$3(this.arg1_7, this.arg2_8, this.arg3_9);
    },
    $isFunction: true
  },
  invokeClosure_closure3: {
    "^": "Closure0:11;closure_10,arg1_11,arg2_12,arg3_13,arg4_14",
    call$0: function() {
      return this.closure_10.call$4(this.arg1_11, this.arg2_12, this.arg3_13, this.arg4_14);
    },
    $isFunction: true
  },
  Closure0: {
    "^": "Object;",
    toString$0: function(_) {
      return "Closure";
    },
    $isFunction: true,
    get$$call: function() {
      return this;
    }
  },
  TearOffClosure: {
    "^": "Closure0;"
  },
  BoundClosure: {
    "^": "TearOffClosure;_self,_target,_receiver,__js_helper$_name",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isBoundClosure)
        return false;
      return this._self === other._self && this._target === other._target && this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var t1, receiverHashCode;
      t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return J.$xor$n(receiverHashCode, H.Primitives_objectHashCode(this._target));
    },
    $isBoundClosure: true,
    static: {"^": "BoundClosure_selfFieldNameCache,BoundClosure_receiverFieldNameCache", BoundClosure_selfOf: function(closure) {
        return closure._self;
      }, BoundClosure_receiverOf: function(closure) {
        return closure._receiver;
      }, BoundClosure_selfFieldName: function() {
        var t1 = $.BoundClosure_selfFieldNameCache;
        if (t1 == null) {
          t1 = H.BoundClosure_computeFieldNamed("self");
          $.BoundClosure_selfFieldNameCache = t1;
        }
        return t1;
      }, BoundClosure_computeFieldNamed: function(fieldName) {
        var template, t1, names, i, $name;
        template = new H.BoundClosure("self", "target", "receiver", "name");
        t1 = Object.getOwnPropertyNames(template);
        t1.fixed$length = init;
        names = t1;
        for (t1 = names.length, i = 0; i < t1; ++i) {
          $name = names[i];
          if (template[$name] === fieldName)
            return $name;
        }
      }}
  },
  CastErrorImplementation: {
    "^": "Error;message",
    toString$0: function(_) {
      return this.message;
    },
    $isError: true,
    static: {CastErrorImplementation$: function(actualType, expectedType) {
        return new H.CastErrorImplementation("CastError: Casting value of type " + H.S(actualType) + " to incompatible type " + H.S(expectedType));
      }}
  },
  RuntimeError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    },
    static: {RuntimeError$: function(message) {
        return new H.RuntimeError(message);
      }}
  },
  RuntimeType: {
    "^": "Object;"
  },
  RuntimeFunctionType: {
    "^": "RuntimeType;returnType<,parameterTypes,optionalParameterTypes,namedParameters",
    _isTest$1: function(expression) {
      var functionTypeObject = this._extractFunctionTypeObjectFrom$1(expression);
      return functionTypeObject == null ? false : H.isFunctionSubtype(functionTypeObject, this.toRti$0());
    },
    _extractFunctionTypeObjectFrom$1: function(o) {
      var interceptor = J.getInterceptor(o);
      return "$signature" in interceptor ? interceptor.$signature() : null;
    },
    toRti$0: function() {
      var result, t1, t2, namedRti, keys, i, $name;
      result = {func: "dynafunc"};
      t1 = this.returnType;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isVoidRuntimeType)
        result.void = true;
      else if (!t2.$isDynamicRuntimeType)
        result.ret = t1.toRti$0();
      t1 = this.parameterTypes;
      if (t1 != null && t1.length !== 0)
        result.args = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0)
        result.opt = H.RuntimeFunctionType_listToRti(t1);
      t1 = this.namedParameters;
      if (t1 != null) {
        namedRti = {};
        keys = H.extractKeys(t1);
        for (t2 = keys.length, i = 0; i < t2; ++i) {
          $name = keys[i];
          namedRti[$name] = t1[$name].toRti$0();
        }
        result.named = namedRti;
      }
      return result;
    },
    toString$0: function(_) {
      var t1, t2, result, needsComma, i, type, keys, $name;
      t1 = this.parameterTypes;
      if (t1 != null)
        for (t2 = t1.length, result = "(", needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
      else {
        result = "(";
        needsComma = false;
      }
      t1 = this.optionalParameterTypes;
      if (t1 != null && t1.length !== 0) {
        result = (needsComma ? result + ", " : result) + "[";
        for (t2 = t1.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
          type = t1[i];
          if (needsComma)
            result += ", ";
          result += H.S(type);
        }
        result += "]";
      } else {
        t1 = this.namedParameters;
        if (t1 != null) {
          result = (needsComma ? result + ", " : result) + "{";
          keys = H.extractKeys(t1);
          for (t2 = keys.length, needsComma = false, i = 0; i < t2; ++i, needsComma = true) {
            $name = keys[i];
            if (needsComma)
              result += ", ";
            result += H.S(t1[$name].toRti$0()) + " " + $name;
          }
          result += "}";
        }
      }
      return result + (") -> " + H.S(this.returnType));
    },
    static: {"^": "RuntimeFunctionType_inAssert", RuntimeFunctionType_listToRti: function(list) {
        var result, t1, i;
        list = list;
        result = [];
        for (t1 = list.length, i = 0; i < t1; ++i)
          result.push(list[i].toRti$0());
        return result;
      }}
  },
  DynamicRuntimeType: {
    "^": "RuntimeType;",
    toString$0: function(_) {
      return "dynamic";
    },
    toRti$0: function() {
      return;
    },
    $isDynamicRuntimeType: true
  },
  RuntimeTypePlain: {
    "^": "RuntimeType;name>",
    toRti$0: function() {
      var t1, rti;
      t1 = this.name;
      rti = init.allClasses[t1];
      if (rti == null)
        throw H.wrapException("no type for '" + H.S(t1) + "'");
      return rti;
    },
    toString$0: function(_) {
      return this.name;
    }
  },
  RuntimeTypeGeneric: {
    "^": "RuntimeType;name>,arguments<,rti",
    toRti$0: function() {
      var t1, result;
      t1 = this.rti;
      if (t1 != null)
        return t1;
      t1 = this.name;
      result = [init.allClasses[t1]];
      if (0 >= result.length)
        return H.ioore(result, 0);
      if (result[0] == null)
        throw H.wrapException("no type for '" + H.S(t1) + "<...>'");
      for (t1 = this.arguments, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        result.push(t1._current.toRti$0());
      this.rti = result;
      return result;
    },
    toString$0: function(_) {
      return H.S(this.name) + "<" + J.join$1$ax(this.arguments, ", ") + ">";
    }
  },
  TypeImpl: {
    "^": "Object;_typeName,_unmangledName",
    toString$0: function(_) {
      var t1, unmangledName;
      t1 = this._unmangledName;
      if (t1 != null)
        return t1;
      unmangledName = this._typeName.replace(/[^<,> ]+/g, function(m) {
        return init.mangledGlobalNames[m] || m;
      });
      this._unmangledName = unmangledName;
      return unmangledName;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._typeName);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isTypeImpl && J.$eq(this._typeName, other._typeName);
    },
    $isTypeImpl: true,
    $isType: true
  },
  initHooks_closure: {
    "^": "Closure0:30;getTag_0",
    call$1: function(o) {
      return this.getTag_0(o);
    },
    $isFunction: true
  },
  initHooks_closure0: {
    "^": "Closure0:61;getUnknownTag_1",
    call$2: function(o, tag) {
      return this.getUnknownTag_1(o, tag);
    },
    $isFunction: true
  },
  initHooks_closure1: {
    "^": "Closure0:2;prototypeForTag_2",
    call$1: function(tag) {
      return this.prototypeForTag_2(tag);
    },
    $isFunction: true
  },
  JSSyntaxRegExp: {
    "^": "Object;pattern,_nativeRegExp,_nativeGlobalRegExp,_nativeAnchoredRegExp",
    get$_nativeGlobalVersion: function() {
      var t1 = this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern, t1.multiline, !t1.ignoreCase, true);
      this._nativeGlobalRegExp = t1;
      return t1;
    },
    get$_nativeAnchoredVersion: function() {
      var t1 = this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = this._nativeRegExp;
      t1 = H.JSSyntaxRegExp_makeNative(this.pattern + "|()", t1.multiline, !t1.ignoreCase, true);
      this._nativeAnchoredRegExp = t1;
      return t1;
    },
    firstMatch$1: function(str) {
      var m;
      if (typeof str !== "string")
        H.throwExpression(P.ArgumentError$(str));
      m = this._nativeRegExp.exec(str);
      if (m == null)
        return;
      return H._MatchImplementation$(this, m);
    },
    hasMatch$1: function(str) {
      if (typeof str !== "string")
        H.throwExpression(P.ArgumentError$(str));
      return this._nativeRegExp.test(str);
    },
    allMatches$1: function(_, str) {
      return new H._AllMatchesIterable(this, str);
    },
    _execGlobal$2: function(string, start) {
      var regexp, match;
      regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return H._MatchImplementation$(this, match);
    },
    _execAnchored$2: function(string, start) {
      var regexp, match, t1, t2;
      regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      t1 = match.length;
      t2 = t1 - 1;
      if (t2 < 0)
        return H.ioore(match, t2);
      if (match[t2] != null)
        return;
      C.JSArray_methods.set$length(match, t2);
      return H._MatchImplementation$(this, match);
    },
    matchAsPrefix$2: function(_, string, start) {
      var t1;
      if (!(start < 0)) {
        t1 = J.get$length$asx(string);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = start > t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, J.get$length$asx(string)));
      return this._execAnchored$2(string, start);
    },
    $isJSSyntaxRegExp: true,
    $isRegExp: true,
    static: {JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
        var m, i, g, regexp, errorMessage;
        m = multiLine ? "m" : "";
        i = caseSensitive ? "" : "i";
        g = global ? "g" : "";
        regexp = function() {
          try {
            return new RegExp(source, m + i + g);
          } catch (e) {
            return e;
          }

        }();
        if (regexp instanceof RegExp)
          return regexp;
        errorMessage = String(regexp);
        throw H.wrapException(P.FormatException$("Illegal RegExp pattern: " + source + ", " + errorMessage));
      }}
  },
  _MatchImplementation: {
    "^": "Object;pattern,_match",
    $index: function(_, index) {
      var t1 = this._match;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    _MatchImplementation$2: function(pattern, _match) {
    },
    $isMatch: true,
    static: {_MatchImplementation$: function(pattern, _match) {
        var t1 = new H._MatchImplementation(pattern, _match);
        t1._MatchImplementation$2(pattern, _match);
        return t1;
      }}
  },
  _AllMatchesIterable: {
    "^": "IterableBase;_re,_string",
    get$iterator: function(_) {
      return new H._AllMatchesIterator(this._re, this._string, null);
    },
    $asIterableBase: function() {
      return [P.Match];
    },
    $asIterable: function() {
      return [P.Match];
    }
  },
  _AllMatchesIterator: {
    "^": "Object;_regExp,_string,__js_helper$_current",
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t1, t2, index;
      if (this._string == null)
        return false;
      t1 = this.__js_helper$_current;
      if (t1 != null) {
        t1 = t1._match;
        t2 = t1.index;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1 = J.get$length$asx(t1[0]);
        if (typeof t1 !== "number")
          return H.iae(t1);
        index = t2 + t1;
        if (this.__js_helper$_current._match.index === index)
          ++index;
      } else
        index = 0;
      t1 = this._regExp._execGlobal$2(this._string, index);
      this.__js_helper$_current = t1;
      if (t1 == null) {
        this._string = null;
        return false;
      }
      return true;
    }
  },
  StringMatch: {
    "^": "Object;start,input,pattern",
    $index: function(_, g) {
      if (!J.$eq(g, 0))
        H.throwExpression(P.RangeError$value(g));
      return this.pattern;
    },
    $isMatch: true
  }
}],
["app_bootstrap", "file:///Users/efortuna/Documents/internProject/dartdoc-viewer/client/web/index.html_bootstrap.dart", , E, {
  "^": "",
  main1: [function() {
    var t1, t2, t3, t4, t5;
    t1 = P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_accordionStyle, new E.main_closure(), C.Symbol_anchorHref, new E.main_closure0(), C.Symbol_annotations, new E.main_closure1(), C.Symbol_annotationsChanged, new E.main_closure2(), C.Symbol_breadcrumbName, new E.main_closure3(), C.Symbol_breadcrumbs, new E.main_closure4(), C.Symbol_camelCaseName, new E.main_closure5(), C.Symbol_caretStyle, new E.main_closure6(), C.Symbol_category, new E.main_closure7(), C.Symbol_categoryChanged, new E.main_closure8(), C.Symbol_categoryLink, new E.main_closure9(), C.Symbol_classes, new E.main_closure10(), C.Symbol_closure, new E.main_closure11(), C.Symbol_closureChanged, new E.main_closure12(), C.Symbol_kCz, new E.main_closure13(), C.Symbol_commentFrom, new E.main_closure14(), C.Symbol_constantModifier, new E.main_closure15(), C.Symbol_constructors, new E.main_closure16(), C.Symbol_currentPage, new E.main_closure17(), C.Symbol_decoratedName, new E.main_closure18(), C.Symbol_descriptiveName, new E.main_closure19(), C.Symbol_descriptiveType, new E.main_closure20(), C.Symbol_divClass, new E.main_closure21(), C.Symbol_dropdownOpen, new E.main_closure22(), C.Symbol_errors, new E.main_closure23(), C.Symbol_functions, new E.main_closure24(), C.Symbol_getter, new E.main_closure25(), C.Symbol_hasInheritedComment, new E.main_closure26(), C.Symbol_hasItems, new E.main_closure27(), C.Symbol_hideShow, new E.main_closure28(), C.Symbol_highLevelSdkVersion, new E.main_closure29(), C.Symbol_homePage, new E.main_closure30(), C.Symbol_idName, new E.main_closure31(), C.Symbol_inheritedFrom, new E.main_closure32(), C.Symbol_instanceFunctions, new E.main_closure33(), C.Symbol_instanceVariables, new E.main_closure34(), C.Symbol_isAbstract, new E.main_closure35(), C.Symbol_isClass, new E.main_closure36(), C.Symbol_isConstant, new E.main_closure37(), C.Symbol_isEmpty, new E.main_closure38(), C.Symbol_isFinal, new E.main_closure39(), C.Symbol_isFocused, new E.main_closure40(), C.Symbol_isHome, new E.main_closure41(), C.Symbol_isInherited, new E.main_closure42(), C.Symbol_isLibrary, new E.main_closure43(), C.Symbol_isMethod, new E.main_closure44(), C.Symbol_isNotConstructor, new E.main_closure45(), C.Symbol_isNotEmpty, new E.main_closure46(), C.Symbol_isNotSetter, new E.main_closure47(), C.Symbol_isOperator, new E.main_closure48(), C.Symbol_isSetter, new E.main_closure49(), C.Symbol_isStatic, new E.main_closure50(), C.Symbol_isTypedef, new E.main_closure51(), C.Symbol_item, new E.main_closure52(), C.Symbol_itemChanged, new E.main_closure53(), C.Symbol_items, new E.main_closure54(), C.Symbol_itemsChanged, new E.main_closure55(), C.Symbol_itemsToShow, new E.main_closure56(), C.Symbol_lastCrumb, new E.main_closure57(), C.Symbol_lazyClasses, new E.main_closure58(), C.Symbol_lazyConstructors, new E.main_closure59(), C.Symbol_lazyErrors, new E.main_closure60(), C.Symbol_lazyFunctions, new E.main_closure61(), C.Symbol_lazyInstanceFunctions, new E.main_closure62(), C.Symbol_lazyInstanceVariables, new E.main_closure63(), C.Symbol_lazyOperators, new E.main_closure64(), C.Symbol_lazyStaticFunctions, new E.main_closure65(), C.Symbol_lazyStaticVariables, new E.main_closure66(), C.Symbol_lazyTypedefs, new E.main_closure67(), C.Symbol_lazyVariables, new E.main_closure68(), C.Symbol_libraries, new E.main_closure69(), C.Symbol_lineHeight, new E.main_closure70(), C.Symbol_location, new E.main_closure71(), C.Symbol_methods, new E.main_closure72(), C.Symbol_methodsChanged, new E.main_closure73(), C.Symbol_modifiers, new E.main_closure74(), C.Symbol_name, new E.main_closure75(), C.Symbol_nameWithGeneric, new E.main_closure76(), C.Symbol_navHideShow, new E.main_closure77(), C.Symbol_operators, new E.main_closure78(), C.Symbol_outerLibrary, new E.main_closure79(), C.Symbol_pageContentClass, new E.main_closure80(), C.Symbol_parameters, new E.main_closure81(), C.Symbol_parametersChanged, new E.main_closure82(), C.Symbol_position, new E.main_closure83(), C.Symbol_prefixedAnchorHref, new E.main_closure84(), C.Symbol_prefixedLinkHref, new E.main_closure85(), C.Symbol_prefixedLocationWhenPossible, new E.main_closure86(), C.Symbol_preview, new E.main_closure87(), C.Symbol_previewChanged, new E.main_closure88(), C.Symbol_previewComment, new E.main_closure89(), C.Symbol_rerouteLink, new E.main_closure90(), C.Symbol_results, new E.main_closure91(), C.Symbol_sdkVersionString, new E.main_closure92(), C.Symbol_searchQuery, new E.main_closure93(), C.Symbol_searchQueryChanged, new E.main_closure94(), C.Symbol_selectDropDownItem, new E.main_closure95(), C.Symbol_shouldShowClassMinimap, new E.main_closure96(), C.Symbol_shouldShowComment, new E.main_closure97(), C.Symbol_shouldShowCommentFrom, new E.main_closure98(), C.Symbol_shouldShowLibraryMinimap, new E.main_closure99(), C.Symbol_shouldShowLibraryPanel, new E.main_closure100(), C.Symbol_showOrHideInherited, new E.main_closure101(), C.Symbol_showOrHideLibraries, new E.main_closure102(), C.Symbol_showOrHideMinimap, new E.main_closure103(), C.Symbol_showOrHideObjectMembers, new E.main_closure104(), C.Symbol_showOrHidePackages, new E.main_closure105(), C.Symbol_simpleType, new E.main_closure106(), C.Symbol_staticFunctions, new E.main_closure107(), C.Symbol_staticModifier, new E.main_closure108(), C.Symbol_staticVariables, new E.main_closure109(), C.Symbol_stylizedName, new E.main_closure110(), C.Symbol_title, new E.main_closure111(), C.Symbol_toggleInherited, new E.main_closure112(), C.Symbol_toggleMinimap, new E.main_closure113(), C.Symbol_toggleObjectMembers, new E.main_closure114(), C.Symbol_toggleOptionsMenu, new E.main_closure115(), C.Symbol_togglePanel, new E.main_closure116(), C.Symbol_togglePkg, new E.main_closure117(), C.Symbol_type, new E.main_closure118(), C.Symbol_typeChanged, new E.main_closure119(), C.Symbol_typedefs, new E.main_closure120(), C.Symbol_typedefsChanged, new E.main_closure121(), C.Symbol_url, new E.main_closure122(), C.Symbol_variables, new E.main_closure123(), C.Symbol_variablesChanged, new E.main_closure124(), C.Symbol_viewer, new E.main_closure125()], null, null);
    t2 = P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_accordionStyle, new E.main_closure126(), C.Symbol_annotations, new E.main_closure127(), C.Symbol_breadcrumbs, new E.main_closure128(), C.Symbol_camelCaseName, new E.main_closure129(), C.Symbol_caretStyle, new E.main_closure130(), C.Symbol_category, new E.main_closure131(), C.Symbol_categoryLink, new E.main_closure132(), C.Symbol_classes, new E.main_closure133(), C.Symbol_closure, new E.main_closure134(), C.Symbol_commentFrom, new E.main_closure135(), C.Symbol_constantModifier, new E.main_closure136(), C.Symbol_constructors, new E.main_closure137(), C.Symbol_currentPage, new E.main_closure138(), C.Symbol_descriptiveName, new E.main_closure139(), C.Symbol_descriptiveType, new E.main_closure140(), C.Symbol_divClass, new E.main_closure141(), C.Symbol_dropdownOpen, new E.main_closure142(), C.Symbol_errors, new E.main_closure143(), C.Symbol_functions, new E.main_closure144(), C.Symbol_getter, new E.main_closure145(), C.Symbol_hasInheritedComment, new E.main_closure146(), C.Symbol_hasItems, new E.main_closure147(), C.Symbol_idName, new E.main_closure148(), C.Symbol_inheritedFrom, new E.main_closure149(), C.Symbol_instanceFunctions, new E.main_closure150(), C.Symbol_instanceVariables, new E.main_closure151(), C.Symbol_isClass, new E.main_closure152(), C.Symbol_isFocused, new E.main_closure153(), C.Symbol_isHome, new E.main_closure154(), C.Symbol_isInherited, new E.main_closure155(), C.Symbol_isLibrary, new E.main_closure156(), C.Symbol_isMethod, new E.main_closure157(), C.Symbol_isNotConstructor, new E.main_closure158(), C.Symbol_isNotSetter, new E.main_closure159(), C.Symbol_isTypedef, new E.main_closure160(), C.Symbol_item, new E.main_closure161(), C.Symbol_items, new E.main_closure162(), C.Symbol_itemsToShow, new E.main_closure163(), C.Symbol_lastCrumb, new E.main_closure164(), C.Symbol_lazyClasses, new E.main_closure165(), C.Symbol_lazyConstructors, new E.main_closure166(), C.Symbol_lazyErrors, new E.main_closure167(), C.Symbol_lazyFunctions, new E.main_closure168(), C.Symbol_lazyInstanceFunctions, new E.main_closure169(), C.Symbol_lazyInstanceVariables, new E.main_closure170(), C.Symbol_lazyOperators, new E.main_closure171(), C.Symbol_lazyStaticFunctions, new E.main_closure172(), C.Symbol_lazyStaticVariables, new E.main_closure173(), C.Symbol_lazyTypedefs, new E.main_closure174(), C.Symbol_lazyVariables, new E.main_closure175(), C.Symbol_lineHeight, new E.main_closure176(), C.Symbol_methods, new E.main_closure177(), C.Symbol_modifiers, new E.main_closure178(), C.Symbol_name, new E.main_closure179(), C.Symbol_operators, new E.main_closure180(), C.Symbol_outerLibrary, new E.main_closure181(), C.Symbol_pageContentClass, new E.main_closure182(), C.Symbol_parameters, new E.main_closure183(), C.Symbol_preview, new E.main_closure184(), C.Symbol_results, new E.main_closure185(), C.Symbol_sdkVersionString, new E.main_closure186(), C.Symbol_searchQuery, new E.main_closure187(), C.Symbol_shouldShowClassMinimap, new E.main_closure188(), C.Symbol_shouldShowComment, new E.main_closure189(), C.Symbol_shouldShowCommentFrom, new E.main_closure190(), C.Symbol_shouldShowLibraryMinimap, new E.main_closure191(), C.Symbol_shouldShowLibraryPanel, new E.main_closure192(), C.Symbol_showOrHideInherited, new E.main_closure193(), C.Symbol_showOrHideLibraries, new E.main_closure194(), C.Symbol_showOrHideMinimap, new E.main_closure195(), C.Symbol_showOrHideObjectMembers, new E.main_closure196(), C.Symbol_showOrHidePackages, new E.main_closure197(), C.Symbol_staticFunctions, new E.main_closure198(), C.Symbol_staticModifier, new E.main_closure199(), C.Symbol_staticVariables, new E.main_closure200(), C.Symbol_stylizedName, new E.main_closure201(), C.Symbol_title, new E.main_closure202(), C.Symbol_type, new E.main_closure203(), C.Symbol_typedefs, new E.main_closure204(), C.Symbol_url, new E.main_closure205(), C.Symbol_variables, new E.main_closure206()], null, null);
    t3 = P.LinkedHashMap_LinkedHashMap$_literal([C.Type_EkK, C.Type_oyU, C.Type_q6V, C.Type_oyU, C.Type_8TW, C.Type_rxe, C.Type_Ybt, C.Type_0uu, C.Type_TBz, C.Type_oyU, C.Type_fzi, C.Type_EOZ, C.Type_EsU, C.Type_0uu, C.Type_rt6, C.Type_0uu, C.Type_QXN, C.Type_nVD, C.Type_sBE, C.Type_0uu, C.Type_2pn, C.Type_oyU, C.Type_Y5Q, C.Type_rxe, C.Type_ASc, C.Type_QGy, C.Type_VEs, C.Type_0uu, C.Type_81T, C.Type_oyU, C.Type_IRg, C.Type_0uu, C.Type_IFE, C.Type_rxe, C.Type_ECG, C.Type_rxe, C.Type_j7u, C.Type_HVx, C.Type_8Wd, C.Type_oyU, C.Type_MhD, C.Type_oyU, C.Type_EOZ0, C.Type_0uu, C.Type_ZMt, C.Type_Opy, C.Type_AHF, C.Type_QGy, C.Type_nVD, C.Type_I2I, C.Type_wtN, C.Type_Opy, C.Type_0uu, C.Type_rxe, C.Type_GNh, C.Type_6dg, C.Type_EOZ, C.Type_GNh, C.Type_oyU, C.Type_I2I, C.Type_rxe, C.Type_nVD, C.Type_Opy, C.Type_0uu, C.Type_QGy, C.Type_wtN, C.Type_CxZ, C.Type_NQk, C.Type_HVx, C.Type_CxZ], null, null);
    t4 = P.LinkedHashMap_LinkedHashMap$_literal([C.Type_EkK, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_annotations, C.Declaration_wsa, C.Symbol_annotationsChanged, C.Declaration_m3R], null, null), C.Type_q6V, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_breadcrumbs, C.Declaration_2p9, C.Symbol_lastCrumb, C.Declaration_oqK], null, null), C.Type_8TW, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_accordionStyle, C.Declaration_CTk, C.Symbol_caretStyle, C.Declaration_wsa0, C.Symbol_category, C.Declaration_if1, C.Symbol_categoryChanged, C.Declaration_MYA, C.Symbol_divClass, C.Declaration_vEP, C.Symbol_hasItems, C.Declaration_ilW, C.Symbol_items, C.Declaration_sYh, C.Symbol_itemsChanged, C.Declaration_23h, C.Symbol_lineHeight, C.Declaration_0Sa, C.Symbol_methods, C.Declaration_kyU, C.Symbol_methodsChanged, C.Declaration_Chj, C.Symbol_stylizedName, C.Declaration_oc4, C.Symbol_title, C.Declaration_GNx, C.Symbol_typedefs, C.Declaration_PqF, C.Symbol_typedefsChanged, C.Declaration_0, C.Symbol_variables, C.Declaration_YyH, C.Symbol_variablesChanged, C.Declaration_AHJ], null, null), C.Type_Ybt, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_itemChanged, C.Declaration_oRu], null, null), C.Type_TBz, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_closure, C.Declaration_Ecu, C.Symbol_closureChanged, C.Declaration_RWS], null, null), C.Type_fzi, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_item, C.Declaration_S49, C.Symbol_itemChanged, C.Declaration_oRu, C.Symbol_preview, C.Declaration_lYV, C.Symbol_previewChanged, C.Declaration_XR8], null, null), C.Type_EsU, C.Map_empty, C.Type_rt6, C.Map_empty, C.Type_QXN, C.Map_empty, C.Type_sBE, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_itemChanged, C.Declaration_oRu], null, null), C.Type_2pn, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_type, C.Declaration_ESz, C.Symbol_typeChanged, C.Declaration_BeS], null, null), C.Type_Y5Q, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_homePage, C.Declaration_Kvr, C.Symbol_pageContentClass, C.Declaration_VyH, C.Symbol_sdkVersionString, C.Declaration_gOk, C.Symbol_shouldShowClassMinimap, C.Declaration_OWn, C.Symbol_shouldShowLibraryMinimap, C.Declaration_IfQ, C.Symbol_shouldShowLibraryPanel, C.Declaration_mJb, C.Symbol_showOrHideInherited, C.Declaration_hvg, C.Symbol_showOrHideLibraries, C.Declaration_6L0, C.Symbol_showOrHideMinimap, C.Declaration_mou, C.Symbol_showOrHideObjectMembers, C.Declaration_6Vn, C.Symbol_showOrHidePackages, C.Declaration_YYR], null, null), C.Type_ASc, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_constantModifier, C.Declaration_aZ8, C.Symbol_isNotConstructor, C.Declaration_36D, C.Symbol_itemChanged, C.Declaration_oRu, C.Symbol_modifiers, C.Declaration_tsz, C.Symbol_staticModifier, C.Declaration_aoF], null, null), C.Type_VEs, C.Map_empty, C.Type_81T, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_camelCaseName, C.Declaration_4wd, C.Symbol_category, C.Declaration_if1, C.Symbol_categoryChanged, C.Declaration_MYA, C.Symbol_categoryLink, C.Declaration_VWS, C.Symbol_item, C.Declaration_EOZ, C.Symbol_itemChanged, C.Declaration_oRu, C.Symbol_itemsToShow, C.Declaration_Gds], null, null), C.Type_IRg, C.Map_empty, C.Type_IFE, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_isClass, C.Declaration_aZM, C.Symbol_isHome, C.Declaration_1R3, C.Symbol_isLibrary, C.Declaration_ffs, C.Symbol_isMethod, C.Declaration_qtW, C.Symbol_isTypedef, C.Declaration_QGk, C.Symbol_item, C.Declaration_EOZ, C.Symbol_itemChanged, C.Declaration_oRu], null, null), C.Type_ECG, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_parameters, C.Declaration_43h, C.Symbol_parametersChanged, C.Declaration_iGr], null, null), C.Type_j7u, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_descriptiveName, C.Declaration_4GC, C.Symbol_descriptiveType, C.Declaration_DCQ, C.Symbol_item, C.Declaration_oQz, C.Symbol_itemChanged, C.Declaration_oRu, C.Symbol_outerLibrary, C.Declaration_ESz0], null, null), C.Type_8Wd, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_dropdownOpen, C.Declaration_cUs, C.Symbol_isFocused, C.Declaration_mlf, C.Symbol_results, C.Declaration_ggw, C.Symbol_searchQuery, C.Declaration_rPg, C.Symbol_searchQueryChanged, C.Declaration_ewF], null, null), C.Type_MhD, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_type, C.Declaration_MSN, C.Symbol_typeChanged, C.Declaration_BeS], null, null), C.Type_EOZ0, C.Map_empty, C.Type_ZMt, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_getter, C.Declaration_cw1, C.Symbol_isNotSetter, C.Declaration_wEo, C.Symbol_itemChanged, C.Declaration_oRu, C.Symbol_name, C.Declaration_2T1], null, null), C.Type_AHF, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_annotations, C.Declaration_96m], null, null), C.Type_wtN, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_commentFrom, C.Declaration_iL9, C.Symbol_hasInheritedComment, C.Declaration_yHT, C.Symbol_inheritedFrom, C.Declaration_s6Q, C.Symbol_isInherited, C.Declaration_qBr, C.Symbol_itemChanged, C.Declaration_oRu, C.Symbol_shouldShowComment, C.Declaration_QHx, C.Symbol_shouldShowCommentFrom, C.Declaration_NYu], null, null), C.Type_0uu, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_idName, C.Declaration_DZ5, C.Symbol_item, C.Declaration_5l6, C.Symbol_itemChanged, C.Declaration_oRu], null, null), C.Type_Opy, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_item, C.Declaration_5l6], null, null)], null, null);
    t5 = O.GeneratedSymbolConverterService$(new O.StaticConfiguration(t1, t2, t3, t4, C.Map_empty, P.LinkedHashMap_LinkedHashMap$_literal([C.Symbol_accordionStyle, "accordionStyle", C.Symbol_anchorHref, "anchorHref", C.Symbol_annotations, "annotations", C.Symbol_annotationsChanged, "annotationsChanged", C.Symbol_breadcrumbName, "breadcrumbName", C.Symbol_breadcrumbs, "breadcrumbs", C.Symbol_camelCaseName, "camelCaseName", C.Symbol_caretStyle, "caretStyle", C.Symbol_category, "category", C.Symbol_categoryChanged, "categoryChanged", C.Symbol_categoryLink, "categoryLink", C.Symbol_classes, "classes", C.Symbol_closure, "closure", C.Symbol_closureChanged, "closureChanged", C.Symbol_kCz, "collapseSearchAndOptionsIfNeeded", C.Symbol_commentFrom, "commentFrom", C.Symbol_constantModifier, "constantModifier", C.Symbol_constructors, "constructors", C.Symbol_currentPage, "currentPage", C.Symbol_decoratedName, "decoratedName", C.Symbol_descriptiveName, "descriptiveName", C.Symbol_descriptiveType, "descriptiveType", C.Symbol_divClass, "divClass", C.Symbol_dropdownOpen, "dropdownOpen", C.Symbol_errors, "errors", C.Symbol_functions, "functions", C.Symbol_getter, "getter", C.Symbol_hasInheritedComment, "hasInheritedComment", C.Symbol_hasItems, "hasItems", C.Symbol_hideShow, "hideShow", C.Symbol_highLevelSdkVersion, "highLevelSdkVersion", C.Symbol_homePage, "homePage", C.Symbol_idName, "idName", C.Symbol_inheritedFrom, "inheritedFrom", C.Symbol_instanceFunctions, "instanceFunctions", C.Symbol_instanceVariables, "instanceVariables", C.Symbol_isAbstract, "isAbstract", C.Symbol_isClass, "isClass", C.Symbol_isConstant, "isConstant", C.Symbol_isEmpty, "isEmpty", C.Symbol_isFinal, "isFinal", C.Symbol_isFocused, "isFocused", C.Symbol_isHome, "isHome", C.Symbol_isInherited, "isInherited", C.Symbol_isLibrary, "isLibrary", C.Symbol_isMethod, "isMethod", C.Symbol_isNotConstructor, "isNotConstructor", C.Symbol_isNotEmpty, "isNotEmpty", C.Symbol_isNotSetter, "isNotSetter", C.Symbol_isOperator, "isOperator", C.Symbol_isSetter, "isSetter", C.Symbol_isStatic, "isStatic", C.Symbol_isTypedef, "isTypedef", C.Symbol_item, "item", C.Symbol_itemChanged, "itemChanged", C.Symbol_items, "items", C.Symbol_itemsChanged, "itemsChanged", C.Symbol_itemsToShow, "itemsToShow", C.Symbol_lastCrumb, "lastCrumb", C.Symbol_lazyClasses, "lazyClasses", C.Symbol_lazyConstructors, "lazyConstructors", C.Symbol_lazyErrors, "lazyErrors", C.Symbol_lazyFunctions, "lazyFunctions", C.Symbol_lazyInstanceFunctions, "lazyInstanceFunctions", C.Symbol_lazyInstanceVariables, "lazyInstanceVariables", C.Symbol_lazyOperators, "lazyOperators", C.Symbol_lazyStaticFunctions, "lazyStaticFunctions", C.Symbol_lazyStaticVariables, "lazyStaticVariables", C.Symbol_lazyTypedefs, "lazyTypedefs", C.Symbol_lazyVariables, "lazyVariables", C.Symbol_libraries, "libraries", C.Symbol_lineHeight, "lineHeight", C.Symbol_location, "location", C.Symbol_methods, "methods", C.Symbol_methodsChanged, "methodsChanged", C.Symbol_modifiers, "modifiers", C.Symbol_name, "name", C.Symbol_nameWithGeneric, "nameWithGeneric", C.Symbol_navHideShow, "navHideShow", C.Symbol_operators, "operators", C.Symbol_outerLibrary, "outerLibrary", C.Symbol_pageContentClass, "pageContentClass", C.Symbol_parameters, "parameters", C.Symbol_parametersChanged, "parametersChanged", C.Symbol_position, "position", C.Symbol_prefixedAnchorHref, "prefixedAnchorHref", C.Symbol_prefixedLinkHref, "prefixedLinkHref", C.Symbol_prefixedLocationWhenPossible, "prefixedLocationWhenPossible", C.Symbol_preview, "preview", C.Symbol_previewChanged, "previewChanged", C.Symbol_previewComment, "previewComment", C.Symbol_rerouteLink, "rerouteLink", C.Symbol_results, "results", C.Symbol_sdkVersionString, "sdkVersionString", C.Symbol_searchQuery, "searchQuery", C.Symbol_searchQueryChanged, "searchQueryChanged", C.Symbol_selectDropDownItem, "selectDropDownItem", C.Symbol_shouldShowClassMinimap, "shouldShowClassMinimap", C.Symbol_shouldShowComment, "shouldShowComment", C.Symbol_shouldShowCommentFrom, "shouldShowCommentFrom", C.Symbol_shouldShowLibraryMinimap, "shouldShowLibraryMinimap", C.Symbol_shouldShowLibraryPanel, "shouldShowLibraryPanel", C.Symbol_showOrHideInherited, "showOrHideInherited", C.Symbol_showOrHideLibraries, "showOrHideLibraries", C.Symbol_showOrHideMinimap, "showOrHideMinimap", C.Symbol_showOrHideObjectMembers, "showOrHideObjectMembers", C.Symbol_showOrHidePackages, "showOrHidePackages", C.Symbol_simpleType, "simpleType", C.Symbol_staticFunctions, "staticFunctions", C.Symbol_staticModifier, "staticModifier", C.Symbol_staticVariables, "staticVariables", C.Symbol_stylizedName, "stylizedName", C.Symbol_title, "title", C.Symbol_toggleInherited, "toggleInherited", C.Symbol_toggleMinimap, "toggleMinimap", C.Symbol_toggleObjectMembers, "toggleObjectMembers", C.Symbol_toggleOptionsMenu, "toggleOptionsMenu", C.Symbol_togglePanel, "togglePanel", C.Symbol_togglePkg, "togglePkg", C.Symbol_type, "type", C.Symbol_typeChanged, "typeChanged", C.Symbol_typedefs, "typedefs", C.Symbol_typedefsChanged, "typedefsChanged", C.Symbol_url, "url", C.Symbol_variables, "variables", C.Symbol_variablesChanged, "variablesChanged", C.Symbol_viewer, "viewer"], null, null), false));
    $.objectAccessor = new O.GeneratedObjectAccessorService(t1, t2, C.Map_empty);
    $.typeInspector = new O.GeneratedTypeInspectorService(t3, t4, false);
    $.symbolConverter = t5;
    A.startPolymer([new E.main_closure207(), new E.main_closure208(), new E.main_closure209(), new E.main_closure210(), new E.main_closure211(), new E.main_closure212(), new E.main_closure213(), new E.main_closure214(), new E.main_closure215(), X.registerMethodElement$closure(), new E.main_closure216(), new E.main_closure217(), new E.main_closure218(), new E.main_closure219(), new E.main_closure220(), new E.main_closure221(), new E.main_closure222(), new E.main_closure223(), new E.main_closure224(), new E.main_closure225(), new E.main_closure226(), new E.main_closure227(), new E.main_closure228(), new E.main_closure229(), L.main$closure()], true);
  }, "call$0", "main1$closure", 0, 0, 10],
  main_closure: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$accordionStyle$x(o);
    },
    $isFunction: true
  },
  main_closure0: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$anchorHref();
    },
    $isFunction: true
  },
  main_closure1: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$annotations$x(o);
    },
    $isFunction: true
  },
  main_closure2: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$annotationsChanged$x(o);
    },
    $isFunction: true
  },
  main_closure3: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$breadcrumbName();
    },
    $isFunction: true
  },
  main_closure4: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$breadcrumbs$x(o);
    },
    $isFunction: true
  },
  main_closure5: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$camelCaseName$x(o);
    },
    $isFunction: true
  },
  main_closure6: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$caretStyle$x(o);
    },
    $isFunction: true
  },
  main_closure7: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$category$x(o);
    },
    $isFunction: true
  },
  main_closure8: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$categoryChanged$x(o);
    },
    $isFunction: true
  },
  main_closure9: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$categoryLink$x(o);
    },
    $isFunction: true
  },
  main_closure10: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$classes$x(o);
    },
    $isFunction: true
  },
  main_closure11: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$closure$x(o);
    },
    $isFunction: true
  },
  main_closure12: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$closureChanged$x(o);
    },
    $isFunction: true
  },
  main_closure13: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$collapseSearchAndOptionsIfNeeded$x(o);
    },
    $isFunction: true
  },
  main_closure14: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$commentFrom$x(o);
    },
    $isFunction: true
  },
  main_closure15: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$constantModifier$x(o);
    },
    $isFunction: true
  },
  main_closure16: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$constructors();
    },
    $isFunction: true
  },
  main_closure17: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$currentPage();
    },
    $isFunction: true
  },
  main_closure18: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$decoratedName();
    },
    $isFunction: true
  },
  main_closure19: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$descriptiveName$x(o);
    },
    $isFunction: true
  },
  main_closure20: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$descriptiveType$x(o);
    },
    $isFunction: true
  },
  main_closure21: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$divClass$x(o);
    },
    $isFunction: true
  },
  main_closure22: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$dropdownOpen$x(o);
    },
    $isFunction: true
  },
  main_closure23: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$errors();
    },
    $isFunction: true
  },
  main_closure24: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$functions();
    },
    $isFunction: true
  },
  main_closure25: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$getter$x(o);
    },
    $isFunction: true
  },
  main_closure26: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$hasInheritedComment$x(o);
    },
    $isFunction: true
  },
  main_closure27: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$hasItems$x(o);
    },
    $isFunction: true
  },
  main_closure28: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$hideShow$x(o);
    },
    $isFunction: true
  },
  main_closure29: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$highLevelSdkVersion$x(o);
    },
    $isFunction: true
  },
  main_closure30: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$homePage$x(o);
    },
    $isFunction: true
  },
  main_closure31: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$idName$x(o);
    },
    $isFunction: true
  },
  main_closure32: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$inheritedFrom$x(o);
    },
    $isFunction: true
  },
  main_closure33: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$instanceFunctions();
    },
    $isFunction: true
  },
  main_closure34: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$instanceVariables();
    },
    $isFunction: true
  },
  main_closure35: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$isAbstract();
    },
    $isFunction: true
  },
  main_closure36: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isClass$x(o);
    },
    $isFunction: true
  },
  main_closure37: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$isConstant();
    },
    $isFunction: true
  },
  main_closure38: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isEmpty$asx(o);
    },
    $isFunction: true
  },
  main_closure39: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isFinal$x(o);
    },
    $isFunction: true
  },
  main_closure40: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isFocused$x(o);
    },
    $isFunction: true
  },
  main_closure41: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isHome$x(o);
    },
    $isFunction: true
  },
  main_closure42: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isInherited$x(o);
    },
    $isFunction: true
  },
  main_closure43: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isLibrary$x(o);
    },
    $isFunction: true
  },
  main_closure44: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isMethod$x(o);
    },
    $isFunction: true
  },
  main_closure45: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isNotConstructor$x(o);
    },
    $isFunction: true
  },
  main_closure46: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isNotEmpty$asx(o);
    },
    $isFunction: true
  },
  main_closure47: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isNotSetter$x(o);
    },
    $isFunction: true
  },
  main_closure48: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$isOperator();
    },
    $isFunction: true
  },
  main_closure49: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$isSetter();
    },
    $isFunction: true
  },
  main_closure50: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$isStatic();
    },
    $isFunction: true
  },
  main_closure51: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$isTypedef$x(o);
    },
    $isFunction: true
  },
  main_closure52: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$item$x(o);
    },
    $isFunction: true
  },
  main_closure53: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$itemChanged$x(o);
    },
    $isFunction: true
  },
  main_closure54: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$items$x(o);
    },
    $isFunction: true
  },
  main_closure55: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$itemsChanged$x(o);
    },
    $isFunction: true
  },
  main_closure56: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$itemsToShow$x(o);
    },
    $isFunction: true
  },
  main_closure57: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lastCrumb$x(o);
    },
    $isFunction: true
  },
  main_closure58: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyClasses$x(o);
    },
    $isFunction: true
  },
  main_closure59: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyConstructors$x(o);
    },
    $isFunction: true
  },
  main_closure60: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyErrors$x(o);
    },
    $isFunction: true
  },
  main_closure61: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyFunctions$x(o);
    },
    $isFunction: true
  },
  main_closure62: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyInstanceFunctions$x(o);
    },
    $isFunction: true
  },
  main_closure63: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyInstanceVariables$x(o);
    },
    $isFunction: true
  },
  main_closure64: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyOperators$x(o);
    },
    $isFunction: true
  },
  main_closure65: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyStaticFunctions$x(o);
    },
    $isFunction: true
  },
  main_closure66: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyStaticVariables$x(o);
    },
    $isFunction: true
  },
  main_closure67: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyTypedefs$x(o);
    },
    $isFunction: true
  },
  main_closure68: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lazyVariables$x(o);
    },
    $isFunction: true
  },
  main_closure69: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$libraries();
    },
    $isFunction: true
  },
  main_closure70: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$lineHeight$x(o);
    },
    $isFunction: true
  },
  main_closure71: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$location$x(o);
    },
    $isFunction: true
  },
  main_closure72: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$methods$x(o);
    },
    $isFunction: true
  },
  main_closure73: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$methodsChanged$x(o);
    },
    $isFunction: true
  },
  main_closure74: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$modifiers$x(o);
    },
    $isFunction: true
  },
  main_closure75: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$name$x(o);
    },
    $isFunction: true
  },
  main_closure76: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$nameWithGeneric();
    },
    $isFunction: true
  },
  main_closure77: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$navHideShow$x(o);
    },
    $isFunction: true
  },
  main_closure78: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$operators();
    },
    $isFunction: true
  },
  main_closure79: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$outerLibrary$x(o);
    },
    $isFunction: true
  },
  main_closure80: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$pageContentClass$x(o);
    },
    $isFunction: true
  },
  main_closure81: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$parameters$x(o);
    },
    $isFunction: true
  },
  main_closure82: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$parametersChanged$x(o);
    },
    $isFunction: true
  },
  main_closure83: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$position$x(o);
    },
    $isFunction: true
  },
  main_closure84: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$prefixedAnchorHref();
    },
    $isFunction: true
  },
  main_closure85: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$prefixedLinkHref();
    },
    $isFunction: true
  },
  main_closure86: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$prefixedLocationWhenPossible();
    },
    $isFunction: true
  },
  main_closure87: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$preview$x(o);
    },
    $isFunction: true
  },
  main_closure88: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$previewChanged$x(o);
    },
    $isFunction: true
  },
  main_closure89: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$previewComment();
    },
    $isFunction: true
  },
  main_closure90: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$rerouteLink$x(o);
    },
    $isFunction: true
  },
  main_closure91: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$results$x(o);
    },
    $isFunction: true
  },
  main_closure92: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$sdkVersionString$x(o);
    },
    $isFunction: true
  },
  main_closure93: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$searchQuery$x(o);
    },
    $isFunction: true
  },
  main_closure94: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$searchQueryChanged$x(o);
    },
    $isFunction: true
  },
  main_closure95: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$selectDropDownItem$x(o);
    },
    $isFunction: true
  },
  main_closure96: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$shouldShowClassMinimap$x(o);
    },
    $isFunction: true
  },
  main_closure97: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$shouldShowComment$x(o);
    },
    $isFunction: true
  },
  main_closure98: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$shouldShowCommentFrom$x(o);
    },
    $isFunction: true
  },
  main_closure99: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$shouldShowLibraryMinimap$x(o);
    },
    $isFunction: true
  },
  main_closure100: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$shouldShowLibraryPanel$x(o);
    },
    $isFunction: true
  },
  main_closure101: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$showOrHideInherited$x(o);
    },
    $isFunction: true
  },
  main_closure102: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$showOrHideLibraries$x(o);
    },
    $isFunction: true
  },
  main_closure103: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$showOrHideMinimap$x(o);
    },
    $isFunction: true
  },
  main_closure104: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$showOrHideObjectMembers$x(o);
    },
    $isFunction: true
  },
  main_closure105: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$showOrHidePackages$x(o);
    },
    $isFunction: true
  },
  main_closure106: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$simpleType();
    },
    $isFunction: true
  },
  main_closure107: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$staticFunctions();
    },
    $isFunction: true
  },
  main_closure108: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$staticModifier$x(o);
    },
    $isFunction: true
  },
  main_closure109: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return o.get$staticVariables();
    },
    $isFunction: true
  },
  main_closure110: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$stylizedName$x(o);
    },
    $isFunction: true
  },
  main_closure111: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$title$x(o);
    },
    $isFunction: true
  },
  main_closure112: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$toggleInherited$x(o);
    },
    $isFunction: true
  },
  main_closure113: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$toggleMinimap$x(o);
    },
    $isFunction: true
  },
  main_closure114: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$toggleObjectMembers$x(o);
    },
    $isFunction: true
  },
  main_closure115: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$toggleOptionsMenu$x(o);
    },
    $isFunction: true
  },
  main_closure116: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$togglePanel$x(o);
    },
    $isFunction: true
  },
  main_closure117: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$togglePkg$x(o);
    },
    $isFunction: true
  },
  main_closure118: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$type$x(o);
    },
    $isFunction: true
  },
  main_closure119: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$typeChanged$x(o);
    },
    $isFunction: true
  },
  main_closure120: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$typedefs$x(o);
    },
    $isFunction: true
  },
  main_closure121: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$typedefsChanged$x(o);
    },
    $isFunction: true
  },
  main_closure122: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$url$x(o);
    },
    $isFunction: true
  },
  main_closure123: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$variables$x(o);
    },
    $isFunction: true
  },
  main_closure124: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$variablesChanged$x(o);
    },
    $isFunction: true
  },
  main_closure125: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return J.get$viewer$x(o);
    },
    $isFunction: true
  },
  main_closure126: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$accordionStyle$x(o, v);
    },
    $isFunction: true
  },
  main_closure127: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$annotations$x(o, v);
    },
    $isFunction: true
  },
  main_closure128: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$breadcrumbs$x(o, v);
    },
    $isFunction: true
  },
  main_closure129: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$camelCaseName$x(o, v);
    },
    $isFunction: true
  },
  main_closure130: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$caretStyle$x(o, v);
    },
    $isFunction: true
  },
  main_closure131: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$category$x(o, v);
    },
    $isFunction: true
  },
  main_closure132: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$categoryLink$x(o, v);
    },
    $isFunction: true
  },
  main_closure133: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$classes$x(o, v);
    },
    $isFunction: true
  },
  main_closure134: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$closure$x(o, v);
    },
    $isFunction: true
  },
  main_closure135: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$commentFrom$x(o, v);
    },
    $isFunction: true
  },
  main_closure136: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$constantModifier$x(o, v);
    },
    $isFunction: true
  },
  main_closure137: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$constructors(v);
    },
    $isFunction: true
  },
  main_closure138: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$currentPage(v);
    },
    $isFunction: true
  },
  main_closure139: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$descriptiveName$x(o, v);
    },
    $isFunction: true
  },
  main_closure140: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$descriptiveType$x(o, v);
    },
    $isFunction: true
  },
  main_closure141: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$divClass$x(o, v);
    },
    $isFunction: true
  },
  main_closure142: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$dropdownOpen$x(o, v);
    },
    $isFunction: true
  },
  main_closure143: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$errors(v);
    },
    $isFunction: true
  },
  main_closure144: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$functions(v);
    },
    $isFunction: true
  },
  main_closure145: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$getter$x(o, v);
    },
    $isFunction: true
  },
  main_closure146: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$hasInheritedComment$x(o, v);
    },
    $isFunction: true
  },
  main_closure147: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$hasItems$x(o, v);
    },
    $isFunction: true
  },
  main_closure148: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$idName$x(o, v);
    },
    $isFunction: true
  },
  main_closure149: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$inheritedFrom$x(o, v);
    },
    $isFunction: true
  },
  main_closure150: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$instanceFunctions(v);
    },
    $isFunction: true
  },
  main_closure151: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$instanceVariables(v);
    },
    $isFunction: true
  },
  main_closure152: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isClass$x(o, v);
    },
    $isFunction: true
  },
  main_closure153: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isFocused$x(o, v);
    },
    $isFunction: true
  },
  main_closure154: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isHome$x(o, v);
    },
    $isFunction: true
  },
  main_closure155: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isInherited$x(o, v);
    },
    $isFunction: true
  },
  main_closure156: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isLibrary$x(o, v);
    },
    $isFunction: true
  },
  main_closure157: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isMethod$x(o, v);
    },
    $isFunction: true
  },
  main_closure158: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isNotConstructor$x(o, v);
    },
    $isFunction: true
  },
  main_closure159: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isNotSetter$x(o, v);
    },
    $isFunction: true
  },
  main_closure160: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$isTypedef$x(o, v);
    },
    $isFunction: true
  },
  main_closure161: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$item$x(o, v);
    },
    $isFunction: true
  },
  main_closure162: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$items$x(o, v);
    },
    $isFunction: true
  },
  main_closure163: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$itemsToShow$x(o, v);
    },
    $isFunction: true
  },
  main_closure164: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lastCrumb$x(o, v);
    },
    $isFunction: true
  },
  main_closure165: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyClasses$x(o, v);
    },
    $isFunction: true
  },
  main_closure166: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyConstructors$x(o, v);
    },
    $isFunction: true
  },
  main_closure167: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyErrors$x(o, v);
    },
    $isFunction: true
  },
  main_closure168: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyFunctions$x(o, v);
    },
    $isFunction: true
  },
  main_closure169: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyInstanceFunctions$x(o, v);
    },
    $isFunction: true
  },
  main_closure170: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyInstanceVariables$x(o, v);
    },
    $isFunction: true
  },
  main_closure171: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyOperators$x(o, v);
    },
    $isFunction: true
  },
  main_closure172: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyStaticFunctions$x(o, v);
    },
    $isFunction: true
  },
  main_closure173: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyStaticVariables$x(o, v);
    },
    $isFunction: true
  },
  main_closure174: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyTypedefs$x(o, v);
    },
    $isFunction: true
  },
  main_closure175: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lazyVariables$x(o, v);
    },
    $isFunction: true
  },
  main_closure176: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$lineHeight$x(o, v);
    },
    $isFunction: true
  },
  main_closure177: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$methods$x(o, v);
    },
    $isFunction: true
  },
  main_closure178: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$modifiers$x(o, v);
    },
    $isFunction: true
  },
  main_closure179: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$name$x(o, v);
    },
    $isFunction: true
  },
  main_closure180: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$operators(v);
    },
    $isFunction: true
  },
  main_closure181: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$outerLibrary$x(o, v);
    },
    $isFunction: true
  },
  main_closure182: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$pageContentClass$x(o, v);
    },
    $isFunction: true
  },
  main_closure183: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$parameters$x(o, v);
    },
    $isFunction: true
  },
  main_closure184: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$preview$x(o, v);
    },
    $isFunction: true
  },
  main_closure185: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$results$x(o, v);
    },
    $isFunction: true
  },
  main_closure186: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$sdkVersionString$x(o, v);
    },
    $isFunction: true
  },
  main_closure187: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$searchQuery$x(o, v);
    },
    $isFunction: true
  },
  main_closure188: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$shouldShowClassMinimap$x(o, v);
    },
    $isFunction: true
  },
  main_closure189: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$shouldShowComment$x(o, v);
    },
    $isFunction: true
  },
  main_closure190: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$shouldShowCommentFrom$x(o, v);
    },
    $isFunction: true
  },
  main_closure191: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$shouldShowLibraryMinimap$x(o, v);
    },
    $isFunction: true
  },
  main_closure192: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$shouldShowLibraryPanel$x(o, v);
    },
    $isFunction: true
  },
  main_closure193: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$showOrHideInherited$x(o, v);
    },
    $isFunction: true
  },
  main_closure194: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$showOrHideLibraries$x(o, v);
    },
    $isFunction: true
  },
  main_closure195: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$showOrHideMinimap$x(o, v);
    },
    $isFunction: true
  },
  main_closure196: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$showOrHideObjectMembers$x(o, v);
    },
    $isFunction: true
  },
  main_closure197: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$showOrHidePackages$x(o, v);
    },
    $isFunction: true
  },
  main_closure198: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$staticFunctions(v);
    },
    $isFunction: true
  },
  main_closure199: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$staticModifier$x(o, v);
    },
    $isFunction: true
  },
  main_closure200: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      o.set$staticVariables(v);
    },
    $isFunction: true
  },
  main_closure201: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$stylizedName$x(o, v);
    },
    $isFunction: true
  },
  main_closure202: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$title$x(o, v);
    },
    $isFunction: true
  },
  main_closure203: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$type$x(o, v);
    },
    $isFunction: true
  },
  main_closure204: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$typedefs$x(o, v);
    },
    $isFunction: true
  },
  main_closure205: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$url$x(o, v);
    },
    $isFunction: true
  },
  main_closure206: {
    "^": "Closure0:58;",
    call$2: function(o, v) {
      J.set$variables$x(o, v);
    },
    $isFunction: true
  },
  main_closure207: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-comment", C.Type_fzi);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure208: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-closure", C.Type_TBz);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure209: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-parameter", C.Type_ECG);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure210: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-item", C.Type_rt6);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure211: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-annotation", C.Type_EkK);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure212: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-link", C.Type_2pn);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure213: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-type", C.Type_MhD);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure214: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("variable-heading", C.Type_ZMt);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure215: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-variable", C.Type_AHF);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure216: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-typedef", C.Type_EOZ0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure217: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-category", C.Type_8TW);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure218: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-minimap", C.Type_81T);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure219: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-homepage", C.Type_EsU);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure220: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-class", C.Type_Ybt);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure221: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-library", C.Type_sBE);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure222: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-page", C.Type_IFE);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure223: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("search-result", C.Type_j7u);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure224: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("search-box", C.Type_8Wd);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure225: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-minimap-library", C.Type_IRg);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure226: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-library-panel", C.Type_QXN);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure227: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-minimap-class", C.Type_VEs);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure228: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-breadcrumbs", C.Type_q6V);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  main_closure229: {
    "^": "Closure0:11;",
    call$0: [function() {
      return A.Polymer_register("dartdoc-main", C.Type_Y5Q);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  }
},
1],
["category_item", "package:dartdoc_viewer/item.dart", , E, {
  "^": "",
  docsPath: function() {
    var resultStr, t1;
    resultStr = $.useHistory ? H.S(Y.docsEntryPoint()) + "/docs/" : "docs/";
    t1 = $._dartdocMain;
    if (t1 == null) {
      t1 = document.querySelector("#dartdoc-main");
      $._dartdocMain = t1;
    }
    if (J.get$hostDocsVersion$x(t1) !== "") {
      t1 = $._dartdocMain;
      if (t1 == null) {
        t1 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t1;
      }
      resultStr += "buildversion/" + J.get$hostDocsVersion$x(t1) + "/";
    }
    return resultStr;
  },
  _returnNull: [function() {
    return;
  }, "call$0", "_returnNull$closure", 0, 0, 11],
  _sort: function(items) {
    H.IterableMixinWorkaround_forEach(items, new E._sort_closure());
  },
  _compareLibraryNames: function(a, b) {
    var t1, aIsDart;
    t1 = J.getInterceptor$s(a);
    aIsDart = t1.startsWith$1(a, "dart");
    if (aIsDart === J.startsWith$1$s(b, "dart"))
      return t1.compareTo$1(a, b);
    return aIsDart ? -1 : 1;
  },
  buildHierarchy: function(page, previous) {
    var t1, t2;
    t1 = J.getInterceptor$x(page);
    if (J.get$isEmpty$asx(t1.get$path(page))) {
      t1 = t1.get$path(page);
      t2 = J.getInterceptor$ax(t1);
      t2.addAll$1(t1, previous.path);
      t2.add$1(t1, page);
    }
    page.addToHierarchy$0();
  },
  _boolFor: function(key, input) {
    var value, t1;
    value = J.$index$asx(input, key);
    t1 = J.getInterceptor(value);
    if (t1.$eq(value, true) || t1.$eq(value, "true"))
      return true;
    if (value == null || t1.$eq(value, false) || t1.$eq(value, "false"))
      return false;
    throw H.wrapException(P.FormatException$("Invalid format, expected boolean key: " + key + " value: " + H.S(value)));
  },
  Container: {
    "^": "ChangeNotifier;name>",
    get$comment: function() {
      return this._category_item$__$comment;
    },
    get$hasComment: function() {
      return !(J.$eq(this._category_item$__$comment, "<span></span>") || J.$eq(this._category_item$__$comment, "<div></div>"));
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRuntimeTypeString(this), null).toString$0(0) + "(" + H.S(this.get$name(this)) + ")";
    }
  },
  Category: {
    "^": "Container;content>,memberNames,inheritedCounter,memberCounter,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    memberNamed$2$orElse: function($name, orElse) {
      return H.IterableMixinWorkaround_firstWhere(this.content, new E.Category_memberNamed_closure($name), orElse);
    },
    memberNamed$1: function(name) {
      return this.memberNamed$2$orElse(name, E._returnNull$closure());
    },
    addInheritedItem$2: function(clazz, item) {
      if (!this.memberNames.contains$1(0, item.name)) {
        ++this.memberCounter;
        ++this.inheritedCounter;
        this.content.push(item);
      } else
        H.IterableMixinWorkaround_firstWhere(this.content, new E.Category_addInheritedItem_closure(item), null).addInheritedComment$1(item);
    },
    filteredContent$1: function(filter) {
      var t1;
      if (filter.showInherited === true && filter.showObjectMembers === true)
        return this.content;
      t1 = H.setRuntimeTypeInfo(new H.WhereIterable(this.content, new E.Category_filteredContent_closure(filter)), [null]);
      return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    },
    Category$forStaticMembers$2: function(members, $name) {
      var t1, t2, member;
      for (t1 = J.get$iterator$ax(members), t2 = this.memberNames; t1.moveNext$0();) {
        member = t1._current;
        if (member.get$isStatic()) {
          t2.add$1(0, J.get$name$x(member));
          ++this.memberCounter;
          this.content.push(member);
        }
      }
    },
    Category$forTypedefs$1: function(json) {
      if (json != null)
        J.forEach$1$ax(json.get$keys(), new E.Category$forTypedefs_closure(this, json));
    },
    Category$forClasses$3$isAbstract: function(classes, $name, isAbstract) {
      if (classes != null)
        J.forEach$1$ax(classes, new E.Category$forClasses_closure(this));
    },
    Category$forVariables$3: function(variables, getters, setters) {
      if (variables != null)
        J.forEach$1$ax(variables.get$keys(), new E.Category$forVariables_closure(this, variables));
      if (getters != null)
        J.forEach$1$ax(getters.get$keys(), new E.Category$forVariables_closure0(this, getters));
      if (setters != null)
        J.forEach$1$ax(setters.get$keys(), new E.Category$forVariables_closure1(this, setters));
    },
    Category$forFunctions$6$className$isConstructor$isOperator$owner: function(json, $name, className, isConstructor, isOperator, owner) {
      if (json != null)
        J.forEach$1$ax(json.get$keys(), new E.Category$forFunctions_closure(this, json, isConstructor, className, isOperator, owner));
    },
    Category$forInstanceMembers$2: function(members, $name) {
      var t1, t2, member, t3;
      for (t1 = J.get$iterator$ax(members), t2 = this.memberNames; t1.moveNext$0();) {
        member = t1._current;
        if (!member.get$isStatic()) {
          t3 = J.getInterceptor$x(member);
          t2.add$1(0, t3.get$name(member));
          ++this.memberCounter;
          if (t3.get$isInherited(member) === true)
            ++this.inheritedCounter;
          this.content.push(member);
        }
      }
    },
    static: {Category$forClasses: function(classes, $name, isAbstract) {
        var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), 0, 0, $name, null, null, null);
        t1.Category$forClasses$3$isAbstract(classes, $name, isAbstract);
        return t1;
      }, Category$forVariables: function(variables, getters, setters) {
        var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), 0, 0, "Properties", null, null, null);
        t1.Category$forVariables$3(variables, getters, setters);
        return t1;
      }, Category$forInstanceMembers: function(members, $name) {
        var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), 0, 0, $name, null, null, null);
        t1.Category$forInstanceMembers$2(members, $name);
        return t1;
      }, Category$forStaticMembers: function(members, $name) {
        var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), 0, 0, $name, null, null, null);
        t1.Category$forStaticMembers$2(members, $name);
        return t1;
      }, Category$forFunctions: function(json, $name, className, isConstructor, isOperator, owner) {
        var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), 0, 0, $name, null, null, null);
        t1.Category$forFunctions$6$className$isConstructor$isOperator$owner(json, $name, className, isConstructor, isOperator, owner);
        return t1;
      }, Category$forTypedefs: function(json) {
        var t1 = new E.Category([], P.LinkedHashSet_LinkedHashSet(null, null, null, P.String), 0, 0, "Typedefs", null, null, null);
        t1.Category$forTypedefs$1(json);
        return t1;
      }}
  },
  Category_memberNamed_closure: {
    "^": "Closure0:30;name_0",
    call$1: function(x) {
      return J.$eq(J.get$name$x(x), this.name_0);
    },
    $isFunction: true
  },
  Category$forClasses_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(clazz) {
      var t1 = J.getInterceptor$asx(clazz);
      return this.this_0.content.push(E.Class$forPlaceholder(t1.$index(clazz, "qualifiedName"), t1.$index(clazz, "preview")));
    }, "call$1", null, 2, 0, null, 62, "call"],
    $isFunction: true
  },
  Category$forVariables_closure: {
    "^": "Closure0:30;this_0,variables_1",
    call$1: function(key) {
      var t1 = this.this_0;
      t1.memberNames.add$1(0, key);
      ++t1.memberCounter;
      t1.content.push(E.Variable$(J.$index$asx(this.variables_1, key), "", "", false, false, null));
    },
    $isFunction: true
  },
  Category$forVariables_closure0: {
    "^": "Closure0:30;this_2,getters_3",
    call$1: function(key) {
      var t1 = this.this_2;
      t1.memberNames.add$1(0, key);
      ++t1.memberCounter;
      t1.content.push(E.Variable$(J.$index$asx(this.getters_3, key), "", "", true, false, null));
    },
    $isFunction: true
  },
  Category$forVariables_closure1: {
    "^": "Closure0:30;this_4,setters_5",
    call$1: function(key) {
      var t1 = this.this_4;
      t1.memberNames.add$1(0, key);
      ++t1.memberCounter;
      t1.content.push(E.Variable$(J.$index$asx(this.setters_5, key), "", "", false, true, null));
    },
    $isFunction: true
  },
  Category$forFunctions_closure: {
    "^": "Closure0:30;this_0,json_1,isConstructor_2,className_3,isOperator_4,owner_5",
    call$1: function(key) {
      var t1 = this.this_0;
      t1.memberNames.add$1(0, key);
      ++t1.memberCounter;
      t1.content.push(E.Method$(J.$index$asx(this.json_1, key), this.className_3, "", "", this.isConstructor_2, this.isOperator_4, this.owner_5));
    },
    $isFunction: true
  },
  Category$forTypedefs_closure: {
    "^": "Closure0:30;this_0,json_1",
    call$1: function(key) {
      return this.this_0.content.push(E.Typedef$(J.$index$asx(this.json_1, key)));
    },
    $isFunction: true
  },
  Category_addInheritedItem_closure: {
    "^": "Closure0:30;item_0",
    call$1: function(innerItem) {
      return J.$eq(J.get$name$x(innerItem), this.item_0.name);
    },
    $isFunction: true
  },
  Category_filteredContent_closure: {
    "^": "Closure0:30;filter_0",
    call$1: function(c) {
      return this.filter_0.shouldShow$1(c);
    },
    $isFunction: true
  },
  Filter: {
    "^": "Object;showInherited,showObjectMembers",
    shouldShow$1: function(item) {
      var t1 = J.getInterceptor$x(item);
      if (t1.get$isInherited(item) !== true)
        return true;
      if (J.startsWith$1$s(t1.get$inheritedFrom(item), "dart-core.Object"))
        return this.showInherited === true && this.showObjectMembers === true;
      else
        return this.showInherited;
    }
  },
  Item: {
    "^": "Container_ChangeNotifier;path>,qualifiedName<",
    get$decoratedName: function() {
      return this.get$name(this);
    },
    get$hashDecoratedName: function() {
      return this.get$name(this);
    },
    addToHierarchy$0: function() {
      $.get$pageIndex().$indexSet(0, this.qualifiedName, this);
    },
    load$0: function(_) {
      return P._Future$immediate(this, null);
    },
    addInheritedComment$1: function(item) {
    },
    get$isInherited: function(_) {
      return false;
    },
    get$linkHref: function() {
      return P.Uri__uriEncode(C.List_CVk, this.qualifiedName, C.Utf8Codec_false, false);
    },
    get$prefixedLinkHref: function() {
      var t1, t2;
      t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(this.qualifiedName);
      t2 = this.get$linkHref();
      if ($.get$viewer().redirectToDartlang) {
        t1 = t1.libraryName;
        t1 = t1 != null && J.startsWith$1$s(t1, "dart-");
      } else
        t1 = false;
      if (t1)
        t1 = Y.fullDartlangLocation(t2);
      else {
        t1 = H.S(Y.entryPoint());
        t1 = t1 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t2;
      }
      return t1;
    },
    get$location: function(_) {
      var t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(this.qualifiedName);
      return t1;
    },
    get$anchorHrefLocation: function() {
      var t1, $parent;
      t1 = this.get$localLocation().get$componentNames();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
      $parent = Y.DocsLocation$fromList(t1);
      if ($parent.get$isEmpty($parent))
        return $parent;
      $parent.anchor = C.JSString_methods.$add("id_", this.get$hashDecoratedName());
      return $parent;
    },
    get$localLocation: function() {
      var t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(this.qualifiedName);
      return t1;
    },
    get$anchorHref: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.get$anchorHrefLocation();
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = t1.subMemberName;
      return P.Uri__uriEncode(C.List_CVk, C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "") + t1.get$anchorPlus(), C.Utf8Codec_false, false);
    },
    get$prefixedAnchorHref: function() {
      var t1, t2;
      t1 = this.get$anchorHrefLocation();
      t2 = this.get$anchorHref();
      if ($.get$viewer().redirectToDartlang) {
        t1 = t1.libraryName;
        t1 = t1 != null && J.startsWith$1$s(t1, "dart-");
      } else
        t1 = false;
      if (t1)
        t1 = Y.fullDartlangLocation(t2);
      else {
        t1 = H.S(Y.entryPoint());
        t1 = t1 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t2;
      }
      return t1;
    },
    memberNamed$2$orElse: function($name, orElse) {
      return;
    },
    memberNamed$1: function(name) {
      return this.memberNamed$2$orElse(name, E._returnNull$closure());
    },
    get$owner: function() {
      var t1, t2, t3, t4, t5;
      t1 = this._owner;
      if (t1 == null) {
        t1 = $.get$pageIndex();
        t2 = new Y.DocsLocation(null, null, null, null, null);
        t2._extractPieces$1(this.qualifiedName);
        t2 = t2.get$componentNames();
        if (0 >= t2.length)
          return H.ioore(t2, 0);
        t2.pop();
        t2 = Y.DocsLocation$fromList(t2);
        t3 = t2.get$packagePlus();
        t4 = t2.libraryName;
        if (t4 == null)
          t4 = "";
        t5 = t2.memberName;
        t5 = t5 == null ? "" : "." + H.S(t5);
        t2 = t2.subMemberName;
        t1 = t1.$index(0, C.JSArray_methods.join$1([t3, t4, t5, t2 == null ? "" : "." + H.S(t2)], ""));
        this._owner = t1;
      }
      return t1;
    },
    isOwnedBy$1: function(possibleOwner) {
      var t1;
      if (this.get$owner() == null || possibleOwner == null)
        return false;
      t1 = this.get$owner();
      if (t1 == null ? possibleOwner == null : t1 === possibleOwner)
        return true;
      return this.get$owner().isOwnedBy$1(possibleOwner);
    },
    get$firstItemUsableAsPage: function() {
      return this;
    },
    get$home: function() {
      return this.get$owner() == null ? null : this.get$owner().get$home();
    },
    get$breadcrumbName: function() {
      return this.get$decoratedName();
    },
    $isItem: true
  },
  Container_ChangeNotifier: {
    "^": "Container+ChangeNotifier;",
    $isObservable: true
  },
  _sort_closure: {
    "^": "Closure0:30;",
    call$1: function(item) {
      J.sort$1$ax(item, new E._sort__closure());
    },
    $isFunction: true
  },
  _sort__closure: {
    "^": "Closure0:63;",
    call$2: [function(a, b) {
      return E._compareLibraryNames(a.get$decoratedName(), b.get$decoratedName());
    }, "call$2", null, 4, 0, null, 20, 21, "call"],
    $isFunction: true
  },
  Home: {
    "^": "Item;owner<,libraries<,path,qualifiedName,_owner,_category_item$__$version,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$home: function() {
      return this;
    },
    get$anchorHrefLocation: function() {
      var t1, t2;
      t1 = this.name;
      if (t1 == null)
        t1 = "home";
      t2 = new Y.DocsLocation(null, null, null, null, null);
      t2._extractPieces$1(t1);
      return t2;
    },
    get$breadcrumbName: function() {
      var t1 = this._category_item$__$version;
      return t1 != null && !J.$eq(t1, "") ? this._category_item$__$version : E.Item.prototype.get$breadcrumbName.call(this);
    },
    makeMainLibrarySpecial$1: function(json) {
      var mainLib, t1, intro;
      mainLib = H.IterableMixinWorkaround_firstWhere(this.libraries, new E.Home_makeMainLibrarySpecial_closure(this), new E.Home_makeMainLibrarySpecial_closure0(this));
      if (mainLib != null) {
        t1 = this.libraries;
        C.JSArray_methods.remove$1(t1, mainLib);
        C.JSArray_methods.insert$2(t1, 0, mainLib);
        intro = J.$index$asx(J.firstWhere$1$ax(J.$index$asx(json, "libraries"), new E.Home_makeMainLibrarySpecial_closure1(mainLib)), "packageIntro");
        t1 = intro == null;
        if (!t1 && J.get$isEmpty$asx(intro) !== true) {
          t1 = t1 ? "<div></div>" : "<div>" + H.S(intro) + "</div>";
          this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t1);
        }
      }
    },
    memberNamed$2$orElse: function($name, orElse) {
      return H.IterableMixinWorkaround_firstWhere(this.libraries, new E.Home_memberNamed_closure($name), orElse);
    },
    memberNamed$1: function(name) {
      return this.memberNamed$2$orElse(name, E._returnNull$closure());
    },
    Home$1: function(json) {
      var t1, t2, libraryList, packages, t3, library, t4, t5, t6, newLibrary;
      t1 = J.getInterceptor$asx(json);
      t2 = t1.$index(json, "version");
      this._category_item$__$version = F.notifyPropertyChangeHelper(this, C.Symbol_version, this._category_item$__$version, t2);
      libraryList = t1.$index(json, "libraries");
      packages = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
      t1 = this.name;
      t2 = J.getInterceptor(t1);
      if (t2.$eq(t1, "home"))
        J.forEach$1$ax(libraryList, new E.Home_closure(packages));
      for (t3 = J.get$iterator$ax(t2.$eq(t1, "home") ? packages.$index(0, "") : libraryList); t3.moveNext$0();) {
        library = t3.get$current();
        t4 = J.getInterceptor$asx(library);
        t4.$index(library, "name");
        t5 = t4.$index(library, "qualifiedName");
        t6 = t4.$index(library, "name");
        newLibrary = new E.Library(null, null, null, null, null, null, null, false, t4.$index(library, "preview"), [], t5, null, null, null, null, t6, null, null, null);
        newLibrary.home = this;
        this.libraries.push(newLibrary);
        $.get$pageIndex().$indexSet(0, t5, newLibrary);
      }
      packages.remove$1(0, "");
      packages.forEach$1(0, new E.Home_closure0(this));
      E._sort([this.libraries]);
      this.makeMainLibrarySpecial$1(json);
      t3 = $.get$pageIndex();
      t3.$indexSet(0, this.qualifiedName, this);
      if (t2.$eq(t1, "home"))
        t3.$indexSet(0, "", this);
    },
    $isHome: true,
    static: {Home__nameFromJson: function(json) {
        var $package = J.$index$asx(json, "packageName");
        return $package == null ? "home" : $package;
      }, Home$: function(json) {
        var t1, t2, t3;
        t1 = E.Home__nameFromJson(json);
        t2 = E.Home__nameFromJson(json);
        t3 = J.$index$asx(json, "introduction");
        t3 = t3 == null ? "<div></div>" : "<div>" + H.S(t3) + "</div>";
        t3 = new E.Home(null, [], [], t2, null, null, null, null, t1, t3, null, null);
        t3.Home$1(json);
        return t3;
      }}
  },
  Home_closure: {
    "^": "Closure0:30;packages_0",
    call$1: [function(each) {
      return J.add$1$ax(this.packages_0.putIfAbsent$2(J.$index$asx(each, "packageName"), new E.Home__closure1()), each);
    }, "call$1", null, 2, 0, null, 64, "call"],
    $isFunction: true
  },
  Home__closure1: {
    "^": "Closure0:11;",
    call$0: function() {
      return [];
    },
    $isFunction: true
  },
  Home_closure0: {
    "^": "Closure0:58;this_1",
    call$2: function(packageName, libraries) {
      var t1, $package;
      t1 = J.getInterceptor$ax(libraries);
      t1.firstWhere$2$orElse(libraries, new E.Home__closure(packageName), new E.Home__closure0(libraries));
      $package = E.Home$(P.LinkedHashMap_LinkedHashMap$_literal(["libraries", libraries, "packageName", packageName, "version", J.$gt$n(t1.get$length(libraries), 0) ? J.$index$asx(t1.get$first(libraries), "version") : null], null, null));
      t1 = this.this_1;
      $package.owner = t1;
      t1.libraries.push($package);
    },
    $isFunction: true
  },
  Home__closure: {
    "^": "Closure0:30;packageName_2",
    call$1: function(each) {
      return J.$eq(J.$index$asx(each, "name"), this.packageName_2);
    },
    $isFunction: true
  },
  Home__closure0: {
    "^": "Closure0:11;libraries_3",
    call$0: function() {
      return J.get$first$ax(this.libraries_3);
    },
    $isFunction: true
  },
  Home_makeMainLibrarySpecial_closure: {
    "^": "Closure0:30;this_0",
    call$1: function(each) {
      return J.$eq(J.get$name$x(each), this.this_0.name);
    },
    $isFunction: true
  },
  Home_makeMainLibrarySpecial_closure0: {
    "^": "Closure0:11;this_1",
    call$0: function() {
      var t1 = this.this_1.libraries;
      return t1.length === 0 ? null : C.JSArray_methods.get$first(t1);
    },
    $isFunction: true
  },
  Home_makeMainLibrarySpecial_closure1: {
    "^": "Closure0:30;mainLib_2",
    call$1: function(each) {
      return J.$eq(J.$index$asx(each, "name"), J.get$name$x(this.mainLib_2));
    },
    $isFunction: true
  },
  Home_memberNamed_closure: {
    "^": "Closure0:30;name_0",
    call$1: function(each) {
      var t1 = this.name_0;
      return J.$eq(J.get$name$x(each), t1) || J.$eq(each.get$decoratedName(), t1);
    },
    $isFunction: true
  },
  LazyItem: {
    "^": "Item;previewComment<",
    load$0: function(_) {
      if (this.isLoaded)
        return P._Future$immediate(this, null);
      return W.HttpRequest_getString(P.Uri__uriEncode(C.List_CVk, E.docsPath() + H.S(this.qualifiedName) + ".json", C.Utf8Codec_false, false), null, null).then$1(new E.LazyItem_load_closure(this)).catchError$1(this.get$_loadError());
    },
    _loadError$1: [function($event) {
      var t1;
      if (!!J.getInterceptor($event).$isProgressEvent)
        if (J.get$status$x(W._convertNativeToDart_EventTarget($event.target)) === 404) {
          t1 = $._dartdocMain;
          if (t1 == null) {
            t1 = document.querySelector("#dartdoc-main");
            $._dartdocMain = t1;
          }
          t1 = J.get$hostDocsVersion$x(t1) !== "";
        } else
          t1 = false;
      else
        t1 = false;
      if (t1) {
        t1 = $._dartdocMain;
        if (t1 == null) {
          t1 = document.querySelector("#dartdoc-main");
          $._dartdocMain = t1;
        }
        J.set$hostDocsVersion$x(t1, "");
        return this.load$0(0);
      } else
        throw H.wrapException($event);
    }, "call$1", "get$_loadError", 2, 0, 65, 47],
    $isLazyItem: true
  },
  LazyItem_load_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(response) {
      var t1 = this.this_0;
      t1.loadValues$1(C.JsonCodec_null_null.decode$1(response));
      E.buildHierarchy(t1, t1);
      return P._Future$immediate(t1, null);
    }, "call$1", null, 2, 0, null, 66, "call"],
    $isFunction: true
  },
  Library: {
    "^": "LazyItem;classes*,errors@,typedefs*,variables*,functions@,operators@,home<,isLoaded,previewComment,path,qualifiedName,_owner,_category_item$__$version,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    addToHierarchy$0: function() {
      var t1, t2, t3, clazz, t4, t5;
      E.Item.prototype.addToHierarchy$0.call(this);
      for (t1 = [this.classes, this.typedefs, this.errors, this.functions], t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, 4, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = this.path; t1.moveNext$0();)
        for (t3 = J.get$iterator$ax(J.get$content$x(t1._current)); t3.moveNext$0();) {
          clazz = t3._current;
          t4 = J.getInterceptor$x(clazz);
          if (J.get$isEmpty$asx(t4.get$path(clazz))) {
            t4 = t4.get$path(clazz);
            t5 = J.getInterceptor$ax(t4);
            t5.addAll$1(t4, t2);
            t5.add$1(t4, clazz);
          }
          clazz.addToHierarchy$0();
        }
    },
    loadValues$1: function(json) {
      var t1, t2, allClasses, classes, exceptions, typedefs, allFunctions, setters, getters, methods, operators;
      t1 = J.getInterceptor$asx(json);
      t2 = t1.$index(json, "comment");
      t2 = t2 == null ? "<div></div>" : "<div>" + H.S(t2) + "</div>";
      this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t2);
      allClasses = t1.$index(json, "classes");
      if (allClasses != null) {
        t2 = J.getInterceptor$asx(allClasses);
        classes = t2.$index(allClasses, "class");
        exceptions = t2.$index(allClasses, "error");
        typedefs = t2.$index(allClasses, "typedef");
      } else {
        classes = null;
        exceptions = null;
        typedefs = null;
      }
      this.typedefs = E.Category$forTypedefs(typedefs);
      this.errors = E.Category$forClasses(exceptions, "Exceptions", false);
      this.classes = E.Category$forClasses(classes, "Classes", false);
      allFunctions = t1.$index(json, "functions");
      if (allFunctions != null) {
        t2 = J.getInterceptor$asx(allFunctions);
        setters = t2.$index(allFunctions, "setters");
        getters = t2.$index(allFunctions, "getters");
        methods = t2.$index(allFunctions, "methods");
        operators = t2.$index(allFunctions, "operators");
      } else {
        setters = null;
        getters = null;
        methods = null;
        operators = null;
      }
      this.variables = E.Category$forVariables(t1.$index(json, "variables"), getters, setters);
      this.functions = E.Category$forFunctions(methods, "Functions", "", false, false, null);
      this.operators = E.Category$forFunctions(operators, "Operators", "", false, true, null);
      E._sort([J.get$content$x(this.classes), J.get$content$x(this.errors), J.get$content$x(this.typedefs), J.get$content$x(this.variables), J.get$content$x(this.functions), J.get$content$x(this.operators)]);
      this.isLoaded = true;
    },
    get$decoratedName: function() {
      var t1, t2;
      t1 = this.home;
      t1 = t1 != null && J.$eq(t1.name, "home");
      t2 = this.name;
      return t1 ? C.JSString_methods.replaceAll$2(J.replaceAll$2$s(t2, "-dom-", "-"), "-", ":") : J.replaceAll$2$s(t2, "-", ".");
    },
    memberNamed$2$orElse: function($name, orElse) {
      var t1, member;
      if ($name == null || !this.isLoaded)
        return orElse.call$0();
      for (t1 = [this.classes, this.functions, this.variables, this.operators, this.typedefs, this.errors], t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, 6, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        member = t1._current.memberNamed$2$orElse($name, E._returnNull$closure());
        if (member != null)
          return member;
      }
      return orElse.call$0();
    },
    memberNamed$1: function(name) {
      return this.memberNamed$2$orElse(name, E._returnNull$closure());
    },
    $isLibrary: true,
    static: {Library$forPlaceholder: function(map) {
        var t1, t2, t3;
        t1 = J.getInterceptor$asx(map);
        t2 = t1.$index(map, "qualifiedName");
        t3 = t1.$index(map, "name");
        return new E.Library(null, null, null, null, null, null, null, false, t1.$index(map, "preview"), [], t2, null, null, null, null, t3, null, null, null);
      }}
  },
  Class: {
    "^": "LazyItem;functions@,variables*,constructs,operators@,superClass<,isAbstract<,annotations*,interfaces<,subclasses<,generics,_instanceVariables,_staticVariables,_instanceFunctions,_staticFunctions,isLoaded,previewComment,path,qualifiedName,_owner,_category_item$__$version,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$constructors: function() {
      return this.constructs;
    },
    get$instanceVariables: function() {
      var t1 = this._instanceVariables;
      if (t1 == null) {
        t1 = E.Category$forInstanceMembers(J.get$content$x(this.variables), "Properties");
        this._instanceVariables = t1;
      }
      return t1;
    },
    get$staticVariables: function() {
      var t1 = this._staticVariables;
      if (t1 == null) {
        t1 = E.Category$forStaticMembers(J.get$content$x(this.variables), "Static properties");
        this._staticVariables = t1;
      }
      return t1;
    },
    get$instanceFunctions: function() {
      var t1 = this._instanceFunctions;
      if (t1 == null) {
        t1 = E.Category$forInstanceMembers(J.get$content$x(this.functions), "Methods");
        this._instanceFunctions = t1;
      }
      return t1;
    },
    get$staticFunctions: function() {
      var t1 = this._staticFunctions;
      if (t1 == null) {
        t1 = E.Category$forStaticMembers(J.get$content$x(this.functions), "Static methods");
        this._staticFunctions = t1;
      }
      return t1;
    },
    get$categories: function() {
      return [this.constructs, this.operators, this.get$instanceFunctions(), this.get$staticFunctions(), this.get$instanceVariables(), this.get$staticVariables()];
    },
    get$anchorHrefLocation: function() {
      var t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(this.qualifiedName);
      return t1;
    },
    addToHierarchy$0: function() {
      E.Item.prototype.addToHierarchy$0.call(this);
      if (this.isLoaded)
        H.IterableMixinWorkaround_forEach([this.functions, this.constructs, this.operators], new E.Class_addToHierarchy_closure());
    },
    loadValues$1: function(json) {
      var t1, t2, genericValues, allMethods, setters, getters, methods, operates, constructors, inheritedMethods, inheritedVariables;
      this._instanceVariables = null;
      this._staticVariables = null;
      this._instanceFunctions = null;
      this._staticFunctions = null;
      t1 = J.getInterceptor$asx(json);
      t2 = t1.$index(json, "comment");
      t2 = t2 == null ? "<div></div>" : "<div>" + H.S(t2) + "</div>";
      this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t2);
      this.isAbstract = E._boolFor("isAbstract", json);
      t2 = new Y.DocsLocation(null, null, null, null, null);
      t2._extractPieces$1(t1.$index(json, "superclass"));
      this.superClass = new E.LinkableType(t2);
      this.subclasses = t1.$index(json, "subclass") == null ? [] : J.toList$0$ax(J.map$1$ax(t1.$index(json, "subclass"), new E.Class_loadValues_closure()));
      this.annotations = E.AnnotationGroup$(t1.$index(json, "annotations"));
      this.interfaces = t1.$index(json, "implements") == null ? [] : J.toList$0$ax(J.map$1$ax(t1.$index(json, "implements"), new E.Class_loadValues_closure0()));
      genericValues = t1.$index(json, "generics");
      if (genericValues != null)
        J.forEach$1$ax(genericValues.get$keys(), new E.Class_loadValues_closure1(this));
      allMethods = t1.$index(json, "methods");
      if (allMethods != null) {
        t2 = J.getInterceptor$asx(allMethods);
        setters = t2.$index(allMethods, "setters");
        getters = t2.$index(allMethods, "getters");
        methods = t2.$index(allMethods, "methods");
        operates = t2.$index(allMethods, "operators");
        constructors = t2.$index(allMethods, "constructors");
      } else {
        setters = null;
        getters = null;
        methods = null;
        operates = null;
        constructors = null;
      }
      this.variables = E.Category$forVariables(t1.$index(json, "variables"), getters, setters);
      t2 = this.name;
      this.functions = E.Category$forFunctions(methods, "Methods", t2, false, false, this);
      this.operators = E.Category$forFunctions(operates, "Operators", t2, false, true, this);
      this.constructs = E.Category$forFunctions(constructors, "Constructors", t2, true, false, this);
      inheritedMethods = t1.$index(json, "inheritedMethods");
      inheritedVariables = t1.$index(json, "inheritedVariables");
      if (inheritedMethods != null) {
        t1 = J.getInterceptor$asx(inheritedMethods);
        setters = t1.$index(inheritedMethods, "setters");
        getters = t1.$index(inheritedMethods, "getters");
        methods = t1.$index(inheritedMethods, "methods");
        operates = t1.$index(inheritedMethods, "operators");
      }
      this._addVariable$1(inheritedVariables);
      this._addVariable$2$isSetter(setters, true);
      this._addVariable$2$isGetter(getters, true);
      this._addMethod$1(methods);
      this._addMethod$2$isOperator(operates, true);
      E._sort([J.get$content$x(this.functions), J.get$content$x(this.variables), this.constructs.content, J.get$content$x(this.operators)]);
      this.isLoaded = true;
    },
    _addVariable$3$isGetter$isSetter: function(items, isGetter, isSetter) {
      if (items != null)
        J.forEach$1$ax(J.get$values$x(items), new E.Class__addVariable_closure(this, isSetter, isGetter));
    },
    _addVariable$1: function(items) {
      return this._addVariable$3$isGetter$isSetter(items, false, false);
    },
    _addVariable$2$isSetter: function(items, isSetter) {
      return this._addVariable$3$isGetter$isSetter(items, false, isSetter);
    },
    _addVariable$2$isGetter: function(items, isGetter) {
      return this._addVariable$3$isGetter$isSetter(items, isGetter, false);
    },
    _addMethod$2$isOperator: function(items, isOperator) {
      if (items != null)
        J.forEach$1$ax(J.get$values$x(items), new E.Class__addMethod_closure(this, isOperator));
    },
    _addMethod$1: function(items) {
      return this._addMethod$2$isOperator(items, false);
    },
    get$nameWithGeneric: function() {
      var out, t1;
      out = P.StringBuffer$("");
      out.write$1(this.name);
      t1 = this.generics;
      if (t1.length !== 0)
        out.writeAll$1(["<", C.JSArray_methods.join$1(t1, ",\u00a0"), ">"]);
      return out._contents;
    },
    memberNamed$2$orElse: function($name, orElse) {
      var t1, category, member;
      if ($name == null)
        return orElse.call$0();
      for (t1 = [this.constructs, this.functions, this.operators, this.variables], t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, 4, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        category = t1._current;
        member = category == null ? null : category.memberNamed$2$orElse($name, E._returnNull$closure());
        if (member != null)
          return member;
      }
      return orElse.call$0();
    },
    memberNamed$1: function(name) {
      return this.memberNamed$2$orElse(name, E._returnNull$closure());
    },
    Class$forPlaceholder$2: function($location, previewComment) {
      this.operators = E.Category$forFunctions(null, "placeholder", "", false, false, null);
      this.variables = E.Category$forVariables(null, null, null);
      this.constructs = E.Category$forFunctions(null, "placeholder", "", false, false, null);
      this.functions = E.Category$forFunctions(null, "placeholder", "", false, false, null);
    },
    $isClass: true,
    static: {Class$forPlaceholder: function($location, previewComment) {
        var t1 = new Y.DocsLocation(null, null, null, null, null);
        t1._extractPieces$1($location);
        t1 = new E.Class(null, null, null, null, null, null, null, [], [], [], null, null, null, null, false, previewComment, [], $location, null, null, null, null, t1.memberName, null, null, null);
        t1.Class$forPlaceholder$2($location, previewComment);
        return t1;
      }}
  },
  Class_addToHierarchy_closure: {
    "^": "Closure0:30;",
    call$1: function(category) {
      J.forEach$1$ax(J.get$content$x(category), new E.Class_addToHierarchy__closure());
    },
    $isFunction: true
  },
  Class_addToHierarchy__closure: {
    "^": "Closure0:30;",
    call$1: function(clazz) {
    },
    $isFunction: true
  },
  Class_loadValues_closure: {
    "^": "Closure0:30;",
    call$1: [function(item) {
      var t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(item);
      return new E.LinkableType(t1);
    }, "call$1", null, 2, 0, null, 67, "call"],
    $isFunction: true
  },
  Class_loadValues_closure0: {
    "^": "Closure0:30;",
    call$1: [function(item) {
      var t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(item);
      return new E.LinkableType(t1);
    }, "call$1", null, 2, 0, null, 67, "call"],
    $isFunction: true
  },
  Class_loadValues_closure1: {
    "^": "Closure0:30;this_0",
    call$1: function(generic) {
      return this.this_0.generics.push(generic);
    },
    $isFunction: true
  },
  Class__addVariable_closure: {
    "^": "Closure0:30;this_0,isSetter_1,isGetter_2",
    call$1: function(item) {
      var t1, t2, t3, object;
      t1 = J.getInterceptor$asx(item);
      t2 = t1.$index(item, "inheritedFrom");
      t3 = this.this_0;
      object = E.Variable$(item, t1.$index(item, "commentFrom"), t2, this.isGetter_2, this.isSetter_1, t3);
      t3.variables.addInheritedItem$2(t3, object);
    },
    $isFunction: true
  },
  Class__addMethod_closure: {
    "^": "Closure0:30;this_0,isOperator_1",
    call$1: function(item) {
      var t1, t2, t3, t4, object;
      t1 = this.isOperator_1;
      t2 = J.getInterceptor$asx(item);
      t3 = t2.$index(item, "inheritedFrom");
      t4 = this.this_0;
      object = E.Method$(item, t4.name, t2.$index(item, "commentFrom"), t3, false, t1, t4);
      (t1 ? t4.operators : t4.functions).addInheritedItem$2(t4, object);
    },
    $isFunction: true
  },
  AnnotationGroup: {
    "^": "Object;supportedBrowsers<,annotations*,domName",
    _stripOffQuotes$1: function(s) {
      var t1 = J.getInterceptor$s(s);
      return t1.startsWith$1(s, "'") || t1.startsWith$1(s, "\"") ? t1.substring$2(s, 1, J.$sub$n(t1.get$length(s), 1)) : s;
    },
    AnnotationGroup$1: function(annotes) {
      var set, t1;
      set = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      if (annotes != null) {
        J.forEach$1$ax(annotes, new E.AnnotationGroup_closure(this, set));
        t1 = set.toList$0(0);
        H.IterableMixinWorkaround_sortList(t1, new E.AnnotationGroup_closure0());
        this.annotations = t1;
      }
    },
    static: {AnnotationGroup$: function(annotes) {
        var t1 = new E.AnnotationGroup([], [], null);
        t1.AnnotationGroup$1(annotes);
        return t1;
      }}
  },
  AnnotationGroup_closure: {
    "^": "Closure0:30;this_0,set_1",
    call$1: [function(annotation) {
      var t1, t2, t3;
      t1 = J.getInterceptor$asx(annotation);
      if (J.endsWith$1$s(t1.$index(annotation, "name"), ".SupportedBrowser")) {
        t2 = this.this_0;
        t2.supportedBrowsers.push(H.setRuntimeTypeInfo(new H.MappedListIterable(J.map$1$ax(J.toList$0$ax(t1.$index(annotation, "parameters")), new E.AnnotationGroup__closure(t2)), new E.AnnotationGroup__closure0(t2)), [null, null]).join$1(0, " "));
      } else if (J.endsWith$1$s(t1.$index(annotation, "name"), ".DomName")) {
        t2 = this.this_0;
        t1 = J.get$first$ax(t1.$index(annotation, "parameters"));
        t2.domName = t1;
        t2.domName = t2._stripOffQuotes$1(t1);
      } else {
        t2 = t1.$index(annotation, "name");
        t3 = new Y.DocsLocation(null, null, null, null, null);
        t3._extractPieces$1(t1.$index(annotation, "name"));
        t1 = t1.$index(annotation, "parameters") == null ? [] : t1.$index(annotation, "parameters");
        this.set_1.add$1(0, new E.Annotation(t2, new E.LinkableType(t3), t1));
      }
    }, "call$1", null, 2, 0, null, 68, "call"],
    $isFunction: true
  },
  AnnotationGroup__closure: {
    "^": "Closure0:30;this_2",
    call$1: [function(e) {
      return this.this_2._stripOffQuotes$1(e);
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  AnnotationGroup__closure0: {
    "^": "Closure0:30;this_3",
    call$1: [function(e) {
      var s = C.JSString_methods.toLowerCase$0(J.replaceAll$2$s(e, "SupportedBrowser.", ""));
      if (0 >= s.length)
        return H.ioore(s, 0);
      return s[0].toUpperCase() + C.JSString_methods.substring$1(s, 1);
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  AnnotationGroup_closure0: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.compareTo$1$ns(a.get$shortName(), b.get$shortName());
    },
    $isFunction: true
  },
  Annotation: {
    "^": "Object;qualifiedName<,link<,parameters>",
    get$hashCode: function(_) {
      return J.fold$2$ax(this.parameters, J.get$hashCode$(this.qualifiedName), new E.Annotation_hashCode_closure());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isAnnotation && J.$eq(this.qualifiedName, other.qualifiedName) && C.ListEquality_DefaultEquality.equals$2(this.parameters, other.parameters);
    },
    get$shortName: function() {
      var t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(this.qualifiedName);
      return t1.get$lastName();
    },
    toString$0: function(_) {
      var t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(this.qualifiedName);
      return "Annotation(" + H.S(t1.get$lastName()) + ")";
    },
    $isAnnotation: true
  },
  Annotation_hashCode_closure: {
    "^": "Closure0:58;",
    call$2: function(a, param) {
      return J.$xor$n(a, J.get$hashCode$(param));
    },
    $isFunction: true
  },
  Parameterized: {
    "^": "Item;parameters*",
    getParameters$1: function(parameters) {
      var values = H.setRuntimeTypeInfo([], [E.Parameter]);
      if (parameters != null)
        J.forEach$1$ax(parameters, new E.Parameterized_getParameters_closure(this, values));
      return values;
    },
    parameterNamed$1: function($name) {
      return J.firstWhere$2$orElse$ax(this.get$parameters(this), new E.Parameterized_parameterNamed_closure($name), new E.Parameterized_parameterNamed_closure0());
    },
    memberNamed$2$orElse: function($name, orElse) {
      var result = this.parameterNamed$1($name);
      return result == null ? orElse.call$0() : result;
    },
    memberNamed$1: function(name) {
      return this.memberNamed$2$orElse(name, E._returnNull$closure());
    }
  },
  Parameterized_getParameters_closure: {
    "^": "Closure0:58;this_0,values_1",
    call$2: [function($name, data) {
      this.values_1.push(E.Parameter$($name, data, this.this_0));
    }, "call$2", null, 4, 0, null, 33, 69, "call"],
    $isFunction: true
  },
  Parameterized_parameterNamed_closure: {
    "^": "Closure0:30;name_0",
    call$1: function(x) {
      return J.$eq(J.get$name$x(x), this.name_0);
    },
    $isFunction: true
  },
  Parameterized_parameterNamed_closure0: {
    "^": "Closure0:11;",
    call$0: function() {
      return;
    },
    $isFunction: true
  },
  Typedef: {
    "^": "Parameterized;type>,annotations>,previewComment<,parameters,path,qualifiedName,_owner,_category_item$__$version,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    Typedef$1: function(json) {
      this.parameters = this.getParameters$1(J.$index$asx(json, "parameters"));
    },
    $isTypedef: true,
    static: {Typedef$: function(json) {
        var t1, t2, t3, t4, t5, t6;
        t1 = J.getInterceptor$asx(json);
        t2 = new Y.DocsLocation(null, null, null, null, null);
        t2._extractPieces$1(t1.$index(json, "return"));
        t3 = E.AnnotationGroup$(t1.$index(json, "annotations"));
        t4 = t1.$index(json, "preview");
        t5 = t1.$index(json, "name");
        t6 = t1.$index(json, "qualifiedName");
        t1 = t1.$index(json, "comment");
        t1 = t1 == null ? "<div></div>" : "<div>" + H.S(t1) + "</div>";
        t1 = new E.Typedef(new E.LinkableType(t2), t3, t4, null, [], t6, null, null, null, null, t5, t1, null, null);
        t1.Typedef$1(json);
        return t1;
      }}
  },
  Method: {
    "^": "Parameterized;isStatic<,isAbstract<,isConstant<,isConstructor<,inheritedFrom>,className>,isOperator<,annotations>,type>,commentFrom*,parameters,path,qualifiedName,_owner,_category_item$__$version,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    addToHierarchy$0: function() {
    },
    addInheritedComment$1: function(item) {
      var t1;
      if (J.$eq(this._category_item$__$comment, "<span></span>") || J.$eq(this._category_item$__$comment, "<div></div>")) {
        t1 = item._category_item$__$comment;
        this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t1);
        this.commentFrom = item.get$commentFrom(item);
      }
    },
    get$isInherited: function(_) {
      var t1 = this.inheritedFrom;
      return !J.$eq(t1, "") && t1 != null;
    },
    get$decoratedName: function() {
      var t1, t2;
      if (this.isConstructor) {
        t1 = this.name;
        t2 = this.className;
        t1 = !J.$eq(t1, "") ? H.S(t2) + "." + H.S(t1) : t2;
      } else
        t1 = this.name;
      return t1;
    },
    get$hashDecoratedName: function() {
      var t1 = this.name;
      return this.isConstructor ? H.S(this.className) + "-" + H.S(t1) : t1;
    },
    get$linkHref: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.get$anchorHrefLocation();
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = t1.subMemberName;
      return P.Uri__uriEncode(C.List_CVk, C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "") + t1.get$anchorPlus(), C.Utf8Codec_false, false);
    },
    get$localLocation: function() {
      var t1 = this.inheritedFrom;
      if (!(!J.$eq(t1, "") && t1 != null) || this.get$owner() == null) {
        t1 = new Y.DocsLocation(null, null, null, null, null);
        t1._extractPieces$1(this.qualifiedName);
        return t1;
      }
      t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(this.get$owner().qualifiedName);
      t1.subMemberName = this.name;
      return t1;
    },
    toString$0: function(_) {
      return this.get$decoratedName();
    },
    Method$7$className$commentFrom$inheritedFrom$isConstructor$isOperator$owner: function(json, className, commentFrom, inheritedFrom, isConstructor, isOperator, owner) {
      if (J.$eq(commentFrom, ""))
        J.$index$asx(json, "commentFrom");
      this.parameters = this.getParameters$1(J.$index$asx(json, "parameters"));
      this._owner = owner;
    },
    $isMethod: true,
    static: {Method$: function(json, className, commentFrom, inheritedFrom, isConstructor, isOperator, owner) {
        var t1, t2, t3, t4, t5, t6, t7, t8;
        t1 = E._boolFor("static", json);
        t2 = E._boolFor("abstract", json);
        t3 = E._boolFor("constant", json);
        t4 = J.getInterceptor$asx(json);
        t5 = E.NestedType_NestedType(J.get$first$ax(t4.$index(json, "return")));
        t6 = E.AnnotationGroup$(t4.$index(json, "annotations"));
        t7 = t4.$index(json, "name");
        t8 = t4.$index(json, "qualifiedName");
        t4 = t4.$index(json, "comment");
        t4 = t4 == null ? "<div></div>" : "<div>" + H.S(t4) + "</div>";
        t4 = new E.Method(t1, t2, t3, isConstructor, inheritedFrom, className, isOperator, t6, t5, null, null, [], t8, null, null, null, null, t7, t4, null, null);
        t4.Method$7$className$commentFrom$inheritedFrom$isConstructor$isOperator$owner(json, className, commentFrom, inheritedFrom, isConstructor, isOperator, owner);
        return t4;
      }}
  },
  Closure: {
    "^": "Parameterized;parameters:category_item$Closure$parameters*,returnType<,name:category_item$Closure$name>,parameters,path,qualifiedName,_owner,_category_item$__$version,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$anchorHrefLocation: function() {
      var ownerLocation, ownerAnchor, t1;
      if (this.get$owner() == null)
        return;
      ownerLocation = this.get$owner().get$anchorHrefLocation();
      ownerAnchor = ownerLocation.anchor;
      t1 = this.category_item$Closure$name;
      ownerLocation.anchor = ownerAnchor == null ? "," + H.S(t1) : H.S(ownerAnchor) + ("," + H.S(t1));
      return ownerLocation;
    },
    get$anchorHref: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.get$anchorHrefLocation();
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = t1.subMemberName;
      return C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "") + t1.get$anchorPlus();
    },
    get$hashDecoratedName: function() {
      return "," + H.S(this.category_item$Closure$name);
    },
    Closure$3: function($name, json, owner) {
      this.category_item$Closure$parameters = this.getParameters$1(J.$index$asx(json, "parameters"));
      this._owner = owner;
    }
  },
  Parameter: {
    "^": "Item;isOptional<,isNamed<,hasDefault,type>,defaultValue,annotations>,functionDeclaration<,path,qualifiedName,_owner,_category_item$__$version,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$decoratedName: function() {
      return H.S(this.name) + this.get$decoration();
    },
    get$decoration: function() {
      if (this.hasDefault) {
        var t1 = this.defaultValue;
        return this.isNamed ? ": " + H.S(t1) : "=" + H.S(t1);
      }
      return "";
    },
    isOwnedBy$1: function(possibleOwner) {
      var t1;
      if (this.get$owner() == null || possibleOwner == null)
        return false;
      t1 = this.get$owner();
      if (t1 == null ? possibleOwner == null : t1 === possibleOwner)
        return true;
      return this.get$owner().isOwnedBy$1(possibleOwner);
    },
    get$anchorHrefLocation: function() {
      var ownerLocation, ownerAnchor, t1;
      if (this.get$owner() == null)
        return;
      ownerLocation = this.get$owner().get$anchorHrefLocation();
      ownerAnchor = ownerLocation.anchor;
      t1 = this.name;
      ownerLocation.anchor = ownerAnchor == null ? "," + H.S(t1) : H.S(ownerAnchor) + ("," + H.S(t1));
      return ownerLocation;
    },
    get$hashDecoratedName: function() {
      return "," + H.S(this.name);
    },
    get$anchorHref: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.get$anchorHrefLocation();
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = t1.subMemberName;
      return C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "") + t1.get$anchorPlus();
    },
    get$firstItemUsableAsPage: function() {
      return this.get$owner();
    },
    toString$0: function(_) {
      return "Parameter named " + H.S(this.name) + " in " + H.S(this.get$owner());
    },
    Parameter$3: function($name, json, owner) {
      this._owner = owner;
    },
    $isParameter: true,
    static: {Parameter$: function($name, json, owner) {
        var t1, t2, t3, t4, t5, t6, t7, t8;
        t1 = E._boolFor("optional", json);
        t2 = E._boolFor("named", json);
        t3 = E._boolFor("default", json);
        t4 = J.getInterceptor$asx(json);
        t5 = E.NestedType_NestedType(J.get$first$ax(t4.$index(json, "type")));
        t6 = t4.$index(json, "value");
        t7 = E.AnnotationGroup$(t4.$index(json, "annotations"));
        if (t4.$index(json, "functionDeclaration") == null)
          t4 = null;
        else {
          t4 = t4.$index(json, "functionDeclaration");
          t8 = new E.Closure(null, E.NestedType_NestedType(J.get$first$ax(J.$index$asx(t4, "return"))), $name, null, [], null, null, null, null, null, "closure", null, null, null);
          t8.Closure$3($name, t4, owner);
          t4 = t8;
        }
        t4 = new E.Parameter(t1, t2, t3, t5, t6, t7, t4, [], null, null, null, null, null, $name, null, null, null);
        t4.Parameter$3($name, json, owner);
        return t4;
      }}
  },
  Variable: {
    "^": "Parameterized;isFinal>,isStatic<,isAbstract<,isConstant<,isGetter<,isSetter<,inheritedFrom>,annotations>,commentFrom*,setterParameter,type*,parameters,path,qualifiedName,_owner,_category_item$__$version,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,name,_category_item$__$comment,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    addInheritedComment$1: function(item) {
      var t1;
      if (J.$eq(this._category_item$__$comment, "<span></span>") || J.$eq(this._category_item$__$comment, "<div></div>")) {
        t1 = item._category_item$__$comment;
        this._category_item$__$comment = F.notifyPropertyChangeHelper(this, C.Symbol_comment, this._category_item$__$comment, t1);
        if (!!item.$isVariable)
          this.commentFrom = item.commentFrom;
      }
    },
    get$isInherited: function(_) {
      var t1 = this.inheritedFrom;
      return !J.$eq(t1, "") && t1 != null;
    },
    addToHierarchy$0: function() {
      if (!J.$eq(this.inheritedFrom, ""))
        E.Item.prototype.addToHierarchy$0.call(this);
    },
    get$localLocation: function() {
      var t1 = this.inheritedFrom;
      if (!(!J.$eq(t1, "") && t1 != null) || this.get$owner() == null) {
        t1 = new Y.DocsLocation(null, null, null, null, null);
        t1._extractPieces$1(this.qualifiedName);
        return t1;
      }
      t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(this.get$owner().qualifiedName);
      t1.subMemberName = this.name;
      return t1;
    },
    get$parameters: function(_) {
      var t1 = this.setterParameter;
      return t1 == null ? C.List_empty : [t1];
    },
    get$firstItemUsableAsPage: function() {
      return this.get$owner();
    },
    Variable$6$commentFrom$inheritedFrom$isGetter$isSetter$owner: function(json, commentFrom, inheritedFrom, isGetter, isSetter, owner) {
      var t1, parameters, parameterName;
      this.commentFrom = J.$eq(commentFrom, "") ? J.$index$asx(json, "commentFrom") : commentFrom;
      this._owner = owner;
      if (this.isGetter)
        this.type = E.NestedType_NestedType(J.get$first$ax(J.$index$asx(json, "return")));
      else {
        t1 = J.getInterceptor$asx(json);
        if (this.isSetter) {
          this.type = E.NestedType_NestedType(J.get$first$ax(t1.$index(json, "return")));
          parameters = t1.$index(json, "parameters");
          parameterName = J.get$first$ax(parameters.get$keys());
          this.setterParameter = E.Parameter$(parameterName, J.$index$asx(parameters, parameterName), this);
        } else
          this.type = E.NestedType_NestedType(J.get$first$ax(t1.$index(json, "type")));
      }
    },
    $isVariable: true,
    static: {Variable$: function(json, commentFrom, inheritedFrom, isGetter, isSetter, owner) {
        var t1, t2, t3, t4, t5, t6, t7, t8;
        t1 = E._boolFor("final", json);
        t2 = E._boolFor("static", json);
        t3 = E._boolFor("constant", json);
        t4 = E._boolFor("abstract", json);
        t5 = J.getInterceptor$asx(json);
        t6 = E.AnnotationGroup$(t5.$index(json, "annotations"));
        t7 = t5.$index(json, "name");
        t8 = t5.$index(json, "qualifiedName");
        t5 = t5.$index(json, "comment");
        t5 = t5 == null ? "<div></div>" : "<div>" + H.S(t5) + "</div>";
        t5 = new E.Variable(t1, t2, t4, t3, isGetter, isSetter, inheritedFrom, t6, null, null, null, null, [], t8, null, null, null, null, t7, t5, null, null);
        t5.Variable$6$commentFrom$inheritedFrom$isGetter$isSetter$owner(json, commentFrom, inheritedFrom, isGetter, isSetter, owner);
        return t5;
      }}
  },
  NestedType: {
    "^": "Object;outer<,inner<",
    get$isDynamic: function() {
      var t1 = Y.DocsLocation$clone(this.outer.loc);
      t1.anchor = null;
      return J.$eq(t1.get$name(t1), "dynamic");
    },
    toString$0: function(_) {
      var t1, t2, t3, t4;
      t1 = this.outer.loc;
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      return "NestedType: " + C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], "");
    },
    $isNestedType: true,
    static: {NestedType_NestedType: function(json) {
        var inner, t1, outer, t2, innerMap;
        inner = H.setRuntimeTypeInfo([], [E.NestedType]);
        if (json == null) {
          t1 = new Y.DocsLocation(null, null, null, null, null);
          t1._extractPieces$1("void");
          outer = new E.LinkableType(t1);
        } else {
          t1 = J.getInterceptor$asx(json);
          t2 = new Y.DocsLocation(null, null, null, null, null);
          t2._extractPieces$1(t1.$index(json, "outer"));
          outer = new E.LinkableType(t2);
          innerMap = t1.$index(json, "inner");
          if (innerMap != null)
            J.forEach$1$ax(innerMap, new E.NestedType_NestedType_closure(inner));
        }
        return new E.NestedType(outer, inner);
      }}
  },
  NestedType_NestedType_closure: {
    "^": "Closure0:30;inner_0",
    call$1: [function(element) {
      return this.inner_0.push(E.NestedType_NestedType(element));
    }, "call$1", null, 2, 0, null, 27, "call"],
    $isFunction: true
  },
  LinkableType: {
    "^": "Object;loc<",
    get$simpleType: function() {
      var t1 = Y.DocsLocation$clone(this.loc);
      t1.anchor = null;
      return t1.get$name(t1);
    },
    get$location: function(_) {
      var t1, t2, t3, t4;
      t1 = this.loc;
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      return C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], "");
    },
    get$prefixedLocation: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.loc;
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = t1.subMemberName;
      t2 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
      if ($.get$viewer().redirectToDartlang) {
        t1 = t1.libraryName;
        t1 = t1 != null && J.startsWith$1$s(t1, "dart-");
      } else
        t1 = false;
      if (t1)
        t1 = Y.fullDartlangLocation(t2);
      else {
        t1 = H.S(Y.entryPoint());
        t1 = t1 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t2;
      }
      return t1;
    },
    get$qualifiedName: function() {
      var t1, t2, t3, t4;
      t1 = this.loc;
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      return C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], "");
    },
    get$isDynamic: function() {
      var t1 = Y.DocsLocation$clone(this.loc);
      t1.anchor = null;
      return J.$eq(t1.get$name(t1), "dynamic");
    },
    toString$0: function(_) {
      var t1, t2, t3, t4;
      t1 = this.loc;
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      return "LinkableType: " + C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], "");
    }
  }
}],
["dart._internal", "dart:_internal", , H, {
  "^": "",
  IterableMixinWorkaround_forEach: function(iterable, f) {
    var t1;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(iterable, iterable.length, 0, null), [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      f.call$1(t1._current);
  },
  IterableMixinWorkaround_any: function(iterable, f) {
    var t1;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(iterable, iterable.length, 0, null), [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      if (f.call$1(t1._current) === true)
        return true;
    return false;
  },
  IterableMixinWorkaround_fold: function(iterable, initialValue, combine) {
    var t1;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(iterable, iterable.length, 0, null), [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();)
      initialValue = combine.call$2(initialValue, t1._current);
    return initialValue;
  },
  IterableMixinWorkaround_firstWhere: function(iterable, test, orElse) {
    var t1, element;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(iterable, iterable.length, 0, null), [H.getTypeArgumentByIndex(iterable, 0)]); t1.moveNext$0();) {
      element = t1._current;
      if (test.call$1(element) === true)
        return element;
    }
    if (orElse != null)
      return orElse.call$0();
    throw H.wrapException(H.IterableElementError_noElement());
  },
  IterableMixinWorkaround_toStringIterable: function(iterable, leftDelimiter, rightDelimiter) {
    var result, i, t1;
    for (i = 0; t1 = $.get$IterableMixinWorkaround__toStringList(), i < t1.length; ++i)
      if (t1[i] === iterable)
        return H.S(leftDelimiter) + "..." + H.S(rightDelimiter);
    result = P.StringBuffer$("");
    try {
      $.get$IterableMixinWorkaround__toStringList().push(iterable);
      result.write$1(leftDelimiter);
      result.writeAll$2(iterable, ", ");
      result.write$1(rightDelimiter);
    } finally {
      t1 = $.get$IterableMixinWorkaround__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  IterableMixinWorkaround_sortList: function(list, compare) {
    if (compare == null)
      compare = P.Comparable_compare$closure();
    H.Sort__doSort(list, 0, list.length - 1, compare);
  },
  IterableMixinWorkaround__rangeCheck: function(list, start, end) {
    var t1 = J.getInterceptor$n(start);
    if (t1.$lt(start, 0) || t1.$gt(start, list.length))
      throw H.wrapException(P.RangeError$range(start, 0, list.length));
    t1 = J.getInterceptor$n(end);
    if (t1.$lt(end, start) || t1.$gt(end, list.length))
      throw H.wrapException(P.RangeError$range(end, start, list.length));
  },
  IterableMixinWorkaround_setRangeList: function(list, start, end, from, skipCount) {
    var $length, t1, otherStart, otherList;
    H.IterableMixinWorkaround__rangeCheck(list, start, end);
    $length = J.$sub$n(end, start);
    if (J.$eq($length, 0))
      return;
    if (J.$lt$n(skipCount, 0))
      throw H.wrapException(P.ArgumentError$(skipCount));
    t1 = J.getInterceptor(from);
    if (!!t1.$isList) {
      otherStart = skipCount;
      otherList = from;
    } else {
      otherList = t1.skip$1(from, skipCount).toList$1$growable(0, false);
      otherStart = 0;
    }
    if (J.$gt$n(J.$add$ns(otherStart, $length), J.get$length$asx(otherList)))
      throw H.wrapException(H.IterableElementError_tooFew());
    H.Lists_copy(otherList, otherStart, list, start, $length);
  },
  IterableMixinWorkaround_insertAllList: function(list, index, iterable) {
    var t1, t2, insertionLength, t3, element, index0;
    t1 = J.getInterceptor$n(index);
    if (t1.$lt(index, 0) || t1.$gt(index, list.length))
      throw H.wrapException(P.RangeError$range(index, 0, list.length));
    t2 = J.getInterceptor$asx(iterable);
    insertionLength = t2.get$length(iterable);
    t3 = list.length;
    if (typeof insertionLength !== "number")
      return H.iae(insertionLength);
    C.JSArray_methods.set$length(list, t3 + insertionLength);
    t1 = t1.$add(index, insertionLength);
    t3 = list.length;
    if (!!list.immutable$list)
      H.throwExpression(P.UnsupportedError$("set range"));
    H.IterableMixinWorkaround_setRangeList(list, t1, t3, list, index);
    for (t1 = t2.get$iterator(iterable); t1.moveNext$0(); index = index0) {
      element = t1._current;
      index0 = J.$add$ns(index, 1);
      C.JSArray_methods.$indexSet(list, index, element);
    }
  },
  IterableElementError_noElement: function() {
    return new P.StateError("No element");
  },
  IterableElementError_tooMany: function() {
    return new P.StateError("Too many elements");
  },
  IterableElementError_tooFew: function() {
    return new P.StateError("Too few elements");
  },
  Lists_copy: function(src, srcStart, dst, dstStart, count) {
    var t1, i, j, t2, t3;
    t1 = J.getInterceptor$n(srcStart);
    if (t1.$lt(srcStart, dstStart))
      for (i = J.$sub$n(t1.$add(srcStart, count), 1), j = J.$sub$n(J.$add$ns(dstStart, count), 1), t1 = J.getInterceptor$asx(src); t2 = J.getInterceptor$n(i), t2.$ge(i, srcStart); i = t2.$sub(i, 1), j = J.$sub$n(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t1.$index(src, i));
    else
      for (t2 = J.getInterceptor$asx(src), j = dstStart, i = srcStart; t3 = J.getInterceptor$n(i), t3.$lt(i, t1.$add(srcStart, count)); i = t3.$add(i, 1), j = J.$add$ns(j, 1))
        C.JSArray_methods.$indexSet(dst, j, t2.$index(src, i));
  },
  Lists_indexOf: function(a, element, startIndex, endIndex) {
    var t1, i;
    t1 = a.length;
    if (typeof startIndex !== "number")
      return startIndex.$ge();
    if (startIndex >= t1)
      return -1;
    if (startIndex < 0)
      startIndex = 0;
    for (i = startIndex; i < endIndex; ++i) {
      if (i < 0 || i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Lists_lastIndexOf: function(a, element, startIndex) {
    var t1, i;
    if (typeof startIndex !== "number")
      return startIndex.$lt();
    if (startIndex < 0)
      return -1;
    t1 = a.length;
    if (startIndex >= t1)
      startIndex = t1 - 1;
    for (i = startIndex; i >= 0; --i) {
      if (i >= a.length)
        return H.ioore(a, i);
      if (J.$eq(a[i], element))
        return i;
    }
    return -1;
  },
  Sort__doSort: function(a, left, right, compare) {
    if (right - left <= 32)
      H.Sort__insertionSort(a, left, right, compare);
    else
      H.Sort__dualPivotQuicksort(a, left, right, compare);
  },
  Sort__insertionSort: function(a, left, right, compare) {
    var i, t1, el, j, j0;
    for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
      el = t1.$index(a, i);
      j = i;
      while (true) {
        if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
          break;
        j0 = j - 1;
        t1.$indexSet(a, j, t1.$index(a, j0));
        j = j0;
      }
      t1.$indexSet(a, j, el);
    }
  },
  Sort__dualPivotQuicksort: function(a, left, right, compare) {
    var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, t2, great0, less0, pivots_are_equal;
    sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
    index1 = left + sixth;
    index5 = right - sixth;
    index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
    index2 = index3 - sixth;
    index4 = index3 + sixth;
    t1 = J.getInterceptor$asx(a);
    el1 = t1.$index(a, index1);
    el2 = t1.$index(a, index2);
    el3 = t1.$index(a, index3);
    el4 = t1.$index(a, index4);
    el5 = t1.$index(a, index5);
    if (J.$gt$n(compare.call$2(el1, el2), 0)) {
      t0 = el2;
      el2 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el3), 0)) {
      t0 = el3;
      el3 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el1, el4), 0)) {
      t0 = el4;
      el4 = el1;
      el1 = t0;
    }
    if (J.$gt$n(compare.call$2(el3, el4), 0)) {
      t0 = el4;
      el4 = el3;
      el3 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el5), 0)) {
      t0 = el5;
      el5 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el2, el3), 0)) {
      t0 = el3;
      el3 = el2;
      el2 = t0;
    }
    if (J.$gt$n(compare.call$2(el4, el5), 0)) {
      t0 = el5;
      el5 = el4;
      el4 = t0;
    }
    t1.$indexSet(a, index1, el1);
    t1.$indexSet(a, index3, el3);
    t1.$indexSet(a, index5, el5);
    t1.$indexSet(a, index2, t1.$index(a, left));
    t1.$indexSet(a, index4, t1.$index(a, right));
    less = left + 1;
    great = right - 1;
    if (J.$eq(compare.call$2(el2, el4), 0)) {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        comp = compare.call$2(ak, el2);
        t2 = J.getInterceptor(comp);
        if (t2.$eq(comp, 0))
          continue;
        if (t2.$lt(comp, 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else
          for (; true;) {
            comp = compare.call$2(t1.$index(a, great), el2);
            t2 = J.getInterceptor$n(comp);
            if (t2.$gt(comp, 0)) {
              --great;
              continue;
            } else {
              great0 = great - 1;
              if (t2.$lt(comp, 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
                break;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                break;
              }
            }
          }
      }
      pivots_are_equal = true;
    } else {
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$lt$n(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$gt$n(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$gt$n(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      pivots_are_equal = false;
    }
    t2 = less - 1;
    t1.$indexSet(a, left, t1.$index(a, t2));
    t1.$indexSet(a, t2, el2);
    t2 = great + 1;
    t1.$indexSet(a, right, t1.$index(a, t2));
    t1.$indexSet(a, t2, el4);
    H.Sort__doSort(a, left, less - 2, compare);
    H.Sort__doSort(a, great + 2, right, compare);
    if (pivots_are_equal)
      return;
    if (less < index1 && great > index5) {
      for (; J.$eq(compare.call$2(t1.$index(a, less), el2), 0);)
        ++less;
      for (; J.$eq(compare.call$2(t1.$index(a, great), el4), 0);)
        --great;
      for (k = less; k <= great; ++k) {
        ak = t1.$index(a, k);
        if (J.$eq(compare.call$2(ak, el2), 0)) {
          if (k !== less) {
            t1.$indexSet(a, k, t1.$index(a, less));
            t1.$indexSet(a, less, ak);
          }
          ++less;
        } else if (J.$eq(compare.call$2(ak, el4), 0))
          for (; true;)
            if (J.$eq(compare.call$2(t1.$index(a, great), el4), 0)) {
              --great;
              if (great < k)
                break;
              continue;
            } else {
              great0 = great - 1;
              if (J.$lt$n(compare.call$2(t1.$index(a, great), el2), 0)) {
                t1.$indexSet(a, k, t1.$index(a, less));
                less0 = less + 1;
                t1.$indexSet(a, less, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
                less = less0;
              } else {
                t1.$indexSet(a, k, t1.$index(a, great));
                t1.$indexSet(a, great, ak);
                great = great0;
              }
              break;
            }
      }
      H.Sort__doSort(a, less, great, compare);
    } else
      H.Sort__doSort(a, less, great, compare);
  },
  ListIterable: {
    "^": "IterableBase;",
    get$iterator: function(_) {
      return H.setRuntimeTypeInfo(new H.ListIterator(this, this.get$length(this), 0, null), [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
    },
    forEach$1: function(_, action) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return J.$eq(this.get$length(this), 0);
    },
    get$first: function(_) {
      if (J.$eq(this.get$length(this), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, 0);
    },
    get$last: function(_) {
      if (J.$eq(this.get$length(this), 0))
        throw H.wrapException(H.IterableElementError_noElement());
      return this.elementAt$1(0, J.$sub$n(this.get$length(this), 1));
    },
    contains$1: function(_, element) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq(this.elementAt$1(0, i), element))
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    any$1: function(_, test) {
      var $length, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (test.call$1(this.elementAt$1(0, i)) === true)
          return true;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return false;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var $length, i, element;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        element = this.elementAt$1(0, i);
        if (test.call$1(element) === true)
          return element;
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    join$1: function(_, separator) {
      var $length, t1, first, buffer, i, str;
      $length = this.get$length(this);
      if (separator.length !== 0) {
        t1 = J.getInterceptor($length);
        if (t1.$eq($length, 0))
          return "";
        first = H.S(this.elementAt$1(0, 0));
        if (!t1.$eq($length, this.get$length(this)))
          throw H.wrapException(P.ConcurrentModificationError$(this));
        buffer = P.StringBuffer$(first);
        if (typeof $length !== "number")
          return H.iae($length);
        i = 1;
        for (; i < $length; ++i) {
          buffer._contents += separator;
          str = this.elementAt$1(0, i);
          buffer._contents += typeof str === "string" ? str : H.S(str);
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return buffer._contents;
      } else {
        buffer = P.StringBuffer$("");
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        for (; i < $length; ++i) {
          str = this.elementAt$1(0, i);
          buffer._contents += typeof str === "string" ? str : H.S(str);
          if ($length !== this.get$length(this))
            throw H.wrapException(P.ConcurrentModificationError$(this));
        }
        return buffer._contents;
      }
    },
    where$1: function(_, test) {
      return P.IterableBase.prototype.where$1.call(this, this, test);
    },
    map$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this, f), [null, null]);
    },
    fold$2: function(_, initialValue, combine) {
      var $length, value, i;
      $length = this.get$length(this);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, this.elementAt$1(0, i));
        if ($length !== this.get$length(this))
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
      return value;
    },
    toList$1$growable: function(_, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = Array(t1);
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(this, "ListIterable", 0)]);
      }
      i = 0;
      while (true) {
        t1 = this.get$length(this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        t1 = this.elementAt$1(0, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    $isEfficientLength: true
  },
  SubListIterable: {
    "^": "ListIterable;_iterable,_start,_endOrLength",
    get$_endIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._endOrLength;
      if (t1 == null || J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length, t1;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$gt$n(t1, $length))
        return $length;
      return t1;
    },
    get$length: function(_) {
      var $length, t1, t2;
      $length = J.get$length$asx(this._iterable);
      t1 = this._start;
      if (J.$ge$n(t1, $length))
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || J.$ge$n(t2, $length))
        return J.$sub$n($length, t1);
      return J.$sub$n(t2, t1);
    },
    elementAt$1: function(_, index) {
      var realIndex = J.$add$ns(this.get$_startIndex(), index);
      if (J.$lt$n(index, 0) || J.$ge$n(realIndex, this.get$_endIndex()))
        throw H.wrapException(P.RangeError$range(index, 0, this.get$length(this)));
      return J.elementAt$1$ax(this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      if (J.$lt$n(count, 0))
        throw H.wrapException(P.RangeError$value(count));
      return H.SubListIterable$(this._iterable, J.$add$ns(this._start, count), this._endOrLength, null);
    },
    take$1: function(_, count) {
      var t1, t2, newEnd;
      if (count < 0)
        throw H.wrapException(P.RangeError$value(count));
      t1 = this._endOrLength;
      t2 = this._start;
      if (t1 == null)
        return H.SubListIterable$(this._iterable, t2, J.$add$ns(t2, count), null);
      else {
        newEnd = J.$add$ns(t2, count);
        if (J.$lt$n(t1, newEnd))
          return this;
        return H.SubListIterable$(this._iterable, t2, newEnd, null);
      }
    },
    SubListIterable$3: function(_iterable, _start, _endOrLength, $E) {
      var t1, t2, t3;
      t1 = this._start;
      t2 = J.getInterceptor$n(t1);
      if (t2.$lt(t1, 0))
        throw H.wrapException(P.RangeError$value(t1));
      t3 = this._endOrLength;
      if (t3 != null) {
        if (J.$lt$n(t3, 0))
          throw H.wrapException(P.RangeError$value(t3));
        if (t2.$gt(t1, t3))
          throw H.wrapException(P.RangeError$range(t1, 0, t3));
      }
    },
    static: {SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
        var t1 = H.setRuntimeTypeInfo(new H.SubListIterable(_iterable, _start, _endOrLength), [$E]);
        t1.SubListIterable$3(_iterable, _start, _endOrLength, $E);
        return t1;
      }}
  },
  ListIterator: {
    "^": "Object;_iterable,_length,_index,_current",
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, $length, t3;
      t1 = this._iterable;
      t2 = J.getInterceptor$asx(t1);
      $length = t2.get$length(t1);
      if (!J.$eq(this._length, $length))
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = this._index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        this._current = null;
        return false;
      }
      this._current = t2.elementAt$1(t1, t3);
      ++this._index;
      return true;
    }
  },
  MappedIterable: {
    "^": "IterableBase;_iterable,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$iterator: function(_) {
      var t1 = new H.MappedIterator(null, J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    get$first: function(_) {
      return this._f$1(J.get$first$ax(this._iterable));
    },
    get$last: function(_) {
      return this._f$1(J.get$last$ax(this._iterable));
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    static: {MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
        if (!!J.getInterceptor(iterable).$isEfficientLength)
          return H.setRuntimeTypeInfo(new H.EfficientLengthMappedIterable(iterable, $function), [$S, $T]);
        return H.setRuntimeTypeInfo(new H.MappedIterable(iterable, $function), [$S, $T]);
      }}
  },
  EfficientLengthMappedIterable: {
    "^": "MappedIterable;_iterable,_f",
    $isEfficientLength: true
  },
  MappedIterator: {
    "^": "Iterator;_current,_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      var t1 = this._iterator;
      if (t1.moveNext$0()) {
        this._current = this._f$1(t1.get$current());
        return true;
      }
      this._current = null;
      return false;
    },
    get$current: function() {
      return this._current;
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  },
  MappedListIterable: {
    "^": "ListIterable;_source,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f$1(J.elementAt$1$ax(this._source, index));
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    },
    $isEfficientLength: true
  },
  WhereIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    }
  },
  WhereIterator: {
    "^": "Iterator;_iterator,_f",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    moveNext$0: function() {
      for (var t1 = this._iterator; t1.moveNext$0();)
        if (this._f$1(t1.get$current()) === true)
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  },
  ExpandIterable: {
    "^": "IterableBase;_iterable,_f",
    get$iterator: function(_) {
      var t1 = new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  },
  ExpandIterator: {
    "^": "Object;_iterator,_f,_currentExpansion,_current",
    _f$1: function(arg0) {
      return this._f.call$1(arg0);
    },
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2;
      t1 = this._currentExpansion;
      if (t1 == null)
        return false;
      for (t2 = this._iterator; !t1.moveNext$0();) {
        this._current = null;
        if (t2.moveNext$0()) {
          this._currentExpansion = null;
          t1 = J.get$iterator$ax(this._f$1(t2.get$current()));
          this._currentExpansion = t1;
        } else
          return false;
      }
      this._current = this._currentExpansion.get$current();
      return true;
    }
  },
  EmptyIterator: {
    "^": "Object;",
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    }
  },
  FixedLengthListMixin: {
    "^": "Object;",
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1: function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    clear$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear a fixed-length list"));
    }
  },
  UnmodifiableListMixin: {
    "^": "Object;",
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    addAll$1: function(_, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    remove$1: function(_, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    clear$0: function(_) {
      throw H.wrapException(P.UnsupportedError$("Cannot clear an unmodifiable list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  UnmodifiableListBase: {
    "^": "ListBase+UnmodifiableListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  ReversedListIterable: {
    "^": "ListIterable;_source",
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3;
      t1 = this._source;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.get$length(t1);
      if (typeof index !== "number")
        return H.iae(index);
      return t2.elementAt$1(t1, t3 - 1 - index);
    }
  },
  Symbol: {
    "^": "Object;_name<",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isSymbol && J.$eq(this._name, other._name);
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this._name);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 536870911 & 664597 * t1;
    },
    toString$0: function(_) {
      return "Symbol(\"" + H.S(this._name) + "\")";
    },
    $isSymbol: true,
    $isSymbol0: true,
    static: {"^": "Symbol_reservedWordRE,Symbol_publicIdentifierRE,Symbol_identifierRE,Symbol_operatorRE,Symbol_publicSymbolPattern,Symbol_symbolPattern"}
  }
}],
["dart._js_names", "dart:_js_names", , H, {
  "^": "",
  extractKeys: function(victim) {
    var t1 = H.setRuntimeTypeInfo(function(victim, hasOwnProperty) {
      var result = [];
      for (var key in victim) {
        if (hasOwnProperty.call(victim, key))
          result.push(key);
      }
      return result;
    }(victim, Object.prototype.hasOwnProperty), [null]);
    t1.fixed$length = init;
    return t1;
  }
}],
["dart.async", "dart:async", , P, {
  "^": "",
  _AsyncRun__initializeScheduleImmediate: function() {
    if ($.get$globalThis().scheduleImmediate != null)
      return P._AsyncRun__scheduleImmediateJsOverride$closure();
    return P._AsyncRun__scheduleImmediateWithTimer$closure();
  },
  _AsyncRun__scheduleImmediateJsOverride: [function(callback) {
    ++init.globalState.topEventLoop._activeJsAsyncCount;
    $.get$globalThis().scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(callback), 0));
  }, "call$1", "_AsyncRun__scheduleImmediateJsOverride$closure", 2, 0, 12],
  _AsyncRun__scheduleImmediateWithTimer: [function(callback) {
    P._createTimer(C.Duration_0, callback);
  }, "call$1", "_AsyncRun__scheduleImmediateWithTimer$closure", 2, 0, 12],
  _registerErrorHandler: function(errorHandler, zone) {
    var t1 = H.getDynamicRuntimeType();
    t1 = H.buildFunctionType(t1, [t1, t1])._isTest$1(errorHandler);
    if (t1) {
      zone.toString;
      return errorHandler;
    } else {
      zone.toString;
      return errorHandler;
    }
  },
  Future_wait: function(futures, eagerError) {
    var t1, t2, t3, values, completer;
    t1 = {};
    t1.completer_0 = null;
    t1.values_1 = null;
    t1.remaining_2 = 0;
    t1.error_3 = null;
    t1.stackTrace_4 = null;
    t2 = new P.Future_wait_handleError(t1, eagerError);
    for (t3 = H.setRuntimeTypeInfo(new H.ListIterator(futures, futures.length, 0, null), [H.getTypeArgumentByIndex(futures, 0)]); t3.moveNext$0();)
      t3._current.then$2$onError(new P.Future_wait_closure(t1, eagerError, t1.remaining_2++), t2);
    t2 = t1.remaining_2;
    if (t2 === 0)
      return P._Future$immediate(C.List_empty, null);
    values = Array(t2);
    values.fixed$length = init;
    t1.values_1 = values;
    t2 = P.List;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t2)), [t2]);
    t1.completer_0 = completer;
    return completer.future;
  },
  _asyncRunCallbackLoop: function() {
    var entry = $._nextCallback;
    for (; entry != null;) {
      entry.callback$0();
      entry = entry.get$next();
      $._nextCallback = entry;
    }
    $._lastCallback = null;
  },
  _asyncRunCallback: [function() {
    var exception;
    try {
      P._asyncRunCallbackLoop();
    } catch (exception) {
      H.unwrapException(exception);
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
      $._nextCallback = $._nextCallback.get$next();
      throw exception;
    }

  }, "call$0", "_asyncRunCallback$closure", 0, 0, 10],
  _scheduleAsyncCallback: function(callback) {
    var t1, t2;
    t1 = $._lastCallback;
    if (t1 == null) {
      t1 = new P._AsyncCallbackEntry(callback, null);
      $._lastCallback = t1;
      $._nextCallback = t1;
      $.get$_AsyncRun_scheduleImmediateClosure().call$1(P._asyncRunCallback$closure());
    } else {
      t2 = new P._AsyncCallbackEntry(callback, null);
      t1.next = t2;
      $._lastCallback = t2;
    }
  },
  scheduleMicrotask: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, callback);
      return;
    }
    P._rootScheduleMicrotask(t1, null, t1, t1.bindCallback$2$runGuarded(callback, true));
  },
  StreamController_StreamController$broadcast: function(onCancel, onListen, sync, $T) {
    var t1;
    if (sync) {
      t1 = H.setRuntimeTypeInfo(new P._SyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
    } else {
      t1 = H.setRuntimeTypeInfo(new P._AsyncBroadcastStreamController(onListen, onCancel, 0, null, null, null, null), [$T]);
      t1._async$_previous = t1;
      t1._async$_next = t1;
    }
    return t1;
  },
  _runGuarded: function(notificationHandler) {
    var result, e, s, exception, t1;
    if (notificationHandler == null)
      return;
    try {
      result = notificationHandler.call$0();
      if (!!J.getInterceptor(result).$isFuture)
        return result;
      return;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(t1, null, t1, e, s);
    }

  },
  _nullDataHandler: [function(value) {
  }, "call$1", "_nullDataHandler$closure", 2, 0, 13, 14],
  _nullErrorHandler: [function(error, stackTrace) {
    var t1 = $.Zone__current;
    t1.toString;
    P._rootHandleUncaughtError(t1, null, t1, error, stackTrace);
  }, function(error) {
    return P._nullErrorHandler(error, null);
  }, null, "call$2", "call$1", "_nullErrorHandler$closure", 2, 2, 15, 16, 17, 18],
  _nullDoneHandler: [function() {
  }, "call$0", "_nullDoneHandler$closure", 0, 0, 10],
  _runUserCode: function(userCode, onSuccess, onError) {
    var e, s, exception, t1;
    try {
      onSuccess.call$1(userCode.call$0());
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      s = new H._StackTrace(exception, null);
      onError.call$2(e, s);
    }

  },
  _cancelAndError: function(subscription, future, error, stackTrace) {
    subscription.cancel$0();
    future._completeError$2(error, stackTrace);
  },
  _cancelAndErrorClosure: function(subscription, future) {
    return new P._cancelAndErrorClosure_closure(subscription, future);
  },
  _cancelAndValue: function(subscription, future, value) {
    subscription.cancel$0();
    future._complete$1(value);
  },
  Timer_Timer: function(duration, callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone) {
      t1.toString;
      return P._rootCreateTimer(t1, null, t1, duration, callback);
    }
    return P._rootCreateTimer(t1, null, t1, duration, t1.bindCallback$2$runGuarded(callback, true));
  },
  _createTimer: function(duration, callback) {
    var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
    return H.TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
  },
  Zone__enter: function(zone) {
    var previous = $.Zone__current;
    $.Zone__current = zone;
    return previous;
  },
  _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
    P._rootRun($self, null, $self, new P._rootHandleUncaughtError_closure(error, stackTrace));
  },
  _rootRun: function($self, $parent, zone, f) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$0();
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$0();
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunUnary: function($self, $parent, zone, f, arg) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$1(arg);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$1(arg);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootRunBinary: function($self, $parent, zone, f, arg1, arg2) {
    var old, t1;
    if ($.Zone__current === zone)
      return f.call$2(arg1, arg2);
    old = P.Zone__enter(zone);
    try {
      t1 = f.call$2(arg1, arg2);
      return t1;
    } finally {
      $.Zone__current = old;
    }
  },
  _rootScheduleMicrotask: function($self, $parent, zone, f) {
    P._scheduleAsyncCallback(C.C__RootZone !== zone ? zone.bindCallback$1(f) : f);
  },
  _rootCreateTimer: function($self, $parent, zone, duration, callback) {
    return P._createTimer(duration, C.C__RootZone !== zone ? zone.bindCallback$1(callback) : callback);
  },
  _AsyncRun__scheduleImmediateJsOverride_internalCallback: {
    "^": "Closure0:11;callback_0",
    call$0: [function() {
      H.leaveJsAsync();
      this.callback_0.call$0();
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _AsyncError: {
    "^": "Object;error>,stackTrace<",
    $isError: true
  },
  _BroadcastStream: {
    "^": "_ControllerStream;_async$_controller"
  },
  _BroadcastSubscription: {
    "^": "_ControllerSubscription;_eventState@,_async$_next@,_async$_previous@,_async$_controller,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    get$_async$_controller: function() {
      return this._async$_controller;
    },
    _expectsEvent$1: function(eventId) {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 1) === eventId;
    },
    _toggleEventId$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$xor();
      this._eventState = t1 ^ 1;
    },
    get$_isFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 2) !== 0;
    },
    _setRemoveAfterFiring$0: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$or();
      this._eventState = t1 | 4;
    },
    get$_removeAfterFiring: function() {
      var t1 = this._eventState;
      if (typeof t1 !== "number")
        return t1.$and();
      return (t1 & 4) !== 0;
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 10],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 10],
    static: {"^": "_BroadcastSubscription__STATE_EVENT_ID,_BroadcastSubscription__STATE_FIRING,_BroadcastSubscription__STATE_REMOVE_AFTER_FIRING"}
  },
  _BroadcastStreamController: {
    "^": "Object;_async$_next@,_async$_previous@",
    get$isPaused: function() {
      return false;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 != null)
        return t1;
      t1 = P._Future$(null);
      this._doneFuture = t1;
      return t1;
    },
    _removeListener$1: function(subscription) {
      var previous, next;
      previous = subscription.get$_async$_previous();
      next = subscription.get$_async$_next();
      previous.set$_async$_next(next);
      next.set$_async$_previous(previous);
      subscription.set$_async$_previous(subscription);
      subscription.set$_async$_next(subscription);
    },
    _recordCancel$1: function(subscription) {
      if (subscription.get$_async$_next() === subscription)
        return;
      if (subscription.get$_isFiring())
        subscription._setRemoveAfterFiring$0();
      else {
        this._removeListener$1(subscription);
        if ((this._state & 2) === 0 && this._async$_next === this)
          this._callOnCancel$0();
      }
    },
    _addEventError$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add new events after calling close");
      return new P.StateError("Cannot add new events while doing an addStream");
    },
    add$1: [function(_, data) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendData$1(data);
    }, "call$1", "get$add", 2, 0, function() {
      return H.computeSignature(function(T) {
        return {func: "void__T", void: true, args: [T]};
      }, this.$receiver, "_BroadcastStreamController");
    }, 69],
    addError$2: [function(error, stackTrace) {
      if (this._state >= 4)
        throw H.wrapException(this._addEventError$0());
      this._sendError$2(error, stackTrace);
    }, function(error) {
      return this.addError$2(error, null);
    }, "addError$1", "call$2", "call$1", "get$addError", 2, 2, 70, 16, 17, 18],
    close$0: function(_) {
      var t1, doneFuture;
      t1 = this._state;
      if ((t1 & 4) !== 0)
        return this._doneFuture;
      if (t1 >= 4)
        throw H.wrapException(this._addEventError$0());
      this._state = t1 | 4;
      doneFuture = this._ensureDoneFuture$0();
      this._sendDone$0();
      return doneFuture;
    },
    _async$_add$1: function(_, data) {
      this._sendData$1(data);
    },
    _addError$2: function(error, stackTrace) {
      this._sendError$2(error, stackTrace);
    },
    _close$0: function() {
      var addState = this._addStreamState;
      this._addStreamState = null;
      this._state &= 4294967287;
      C.JSNull_methods.complete$0(addState);
    },
    _forEachListener$1: function(action) {
      var t1, link, id, link0;
      t1 = this._state;
      if ((t1 & 2) !== 0)
        throw H.wrapException(P.StateError$("Cannot fire new event. Controller is already firing an event"));
      link = this._async$_next;
      if (link === this)
        return;
      id = t1 & 1;
      this._state = t1 ^ 3;
      for (; link !== this;)
        if (link._expectsEvent$1(id)) {
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$or();
          link.set$_eventState(t1 | 2);
          action.call$1(link);
          link._toggleEventId$0();
          link0 = link.get$_async$_next();
          if (link.get$_removeAfterFiring())
            this._removeListener$1(link);
          t1 = link.get$_eventState();
          if (typeof t1 !== "number")
            return t1.$and();
          link.set$_eventState(t1 & 4294967293);
          link = link0;
        } else
          link = link.get$_async$_next();
      this._state &= 4294967293;
      if (this._async$_next === this)
        this._callOnCancel$0();
    },
    _callOnCancel$0: function() {
      if ((this._state & 4) !== 0 && this._doneFuture._state === 0)
        this._doneFuture._asyncComplete$1(null);
      P._runGuarded(this._onCancel);
    }
  },
  _SyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var t1 = this._async$_next;
      if (t1 === this)
        return;
      if (t1.get$_async$_next() === this) {
        this._state |= 2;
        this._async$_next._async$_add$1(0, data);
        this._state &= 4294967293;
        if (this._async$_next === this)
          this._callOnCancel$0();
        return;
      }
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendData_closure(this, data));
    },
    _sendError$2: function(error, stackTrace) {
      if (this._async$_next === this)
        return;
      this._forEachListener$1(new P._SyncBroadcastStreamController__sendError_closure(this, error, stackTrace));
    },
    _sendDone$0: function() {
      if (this._async$_next !== this)
        this._forEachListener$1(new P._SyncBroadcastStreamController__sendDone_closure(this));
      else
        this._doneFuture._asyncComplete$1(null);
    }
  },
  _SyncBroadcastStreamController__sendData_closure: {
    "^": "Closure0;this_0,data_1",
    call$1: function(subscription) {
      subscription._async$_add$1(0, this.data_1);
    },
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _SyncBroadcastStreamController__sendError_closure: {
    "^": "Closure0;this_0,error_1,stackTrace_2",
    call$1: function(subscription) {
      subscription._addError$2(this.error_1, this.stackTrace_2);
    },
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BufferingStreamSubscription", args: [[P._BufferingStreamSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _SyncBroadcastStreamController__sendDone_closure: {
    "^": "Closure0;this_0",
    call$1: function(subscription) {
      subscription._close$0();
    },
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic___BroadcastSubscription", args: [[P._BroadcastSubscription, T]]};
      }, this.this_0, "_SyncBroadcastStreamController");
    }
  },
  _AsyncBroadcastStreamController: {
    "^": "_BroadcastStreamController;_onListen,_onCancel,_state,_async$_next,_async$_previous,_addStreamState,_doneFuture",
    _sendData$1: function(data) {
      var link, t1;
      for (link = this._async$_next; link !== this; link = link.get$_async$_next()) {
        t1 = new P._DelayedData(data, null);
        t1.$builtinTypeInfo = [null];
        link._addPending$1(t1);
      }
    },
    _sendError$2: function(error, stackTrace) {
      var link;
      for (link = this._async$_next; link !== this; link = link.get$_async$_next())
        link._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _sendDone$0: function() {
      var link = this._async$_next;
      if (link !== this)
        for (; link !== this; link = link.get$_async$_next())
          link._addPending$1(C.C__DelayedDone);
      else
        this._doneFuture._asyncComplete$1(null);
    }
  },
  Future: {
    "^": "Object;",
    $isFuture: true
  },
  Future_wait_handleError: {
    "^": "Closure0:58;box_0,eagerError_1",
    call$2: [function(theError, theStackTrace) {
      var t1, t2, t3;
      t1 = this.box_0;
      t2 = t1.values_1;
      t1.values_1 = null;
      t3 = --t1.remaining_2;
      if (t2 != null)
        if (t3 === 0 || this.eagerError_1)
          t1.completer_0.completeError$2(theError, theStackTrace);
        else {
          t1.error_3 = theError;
          t1.stackTrace_4 = theStackTrace;
        }
      else if (t3 === 0 && !this.eagerError_1)
        t1.completer_0.completeError$2(t1.error_3, t1.stackTrace_4);
    }, "call$2", null, 4, 0, null, 71, 72, "call"],
    $isFunction: true
  },
  Future_wait_closure: {
    "^": "Closure0:73;box_0,eagerError_2,pos_3",
    call$1: [function(value) {
      var t1, t2, t3, t4;
      t1 = this.box_0;
      t2 = --t1.remaining_2;
      t3 = t1.values_1;
      if (t3 != null) {
        t4 = this.pos_3;
        if (t4 < 0 || t4 >= t3.length)
          return H.ioore(t3, t4);
        t3[t4] = value;
        if (t2 === 0) {
          t1 = t1.completer_0.future;
          if (t1._state !== 0)
            H.throwExpression(P.StateError$("Future already completed"));
          t1._asyncComplete$1(t3);
        }
      } else if (t2 === 0 && !this.eagerError_2)
        t1.completer_0.completeError$2(t1.error_3, t1.stackTrace_4);
    }, "call$1", null, 2, 0, null, 14, "call"],
    $isFunction: true
  },
  _Completer: {
    "^": "Object;"
  },
  _AsyncCompleter: {
    "^": "_Completer;future",
    completeError$2: [function(error, stackTrace) {
      var t1;
      if (error == null)
        throw H.wrapException(P.ArgumentError$("Error must not be null"));
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, stackTrace);
    }, function(error) {
      return this.completeError$2(error, null);
    }, "completeError$1", "call$2", "call$1", "get$completeError", 2, 2, 70, 16, 17, 18]
  },
  _SyncCompleter: {
    "^": "_Completer;future"
  },
  _Future: {
    "^": "Object;_state,_zone<,_resultOrListeners,_nextListener@,_onValueCallback,_errorTestCallback,_onErrorCallback,_whenCompleteActionCallback",
    get$_isComplete: function() {
      return this._state >= 4;
    },
    get$_hasValue: function() {
      return this._state === 4;
    },
    get$_hasError: function() {
      return this._state === 8;
    },
    set$_isChained: function(value) {
      if (value)
        this._state = 2;
      else
        this._state = 0;
    },
    get$_onValue: function() {
      return this._state === 2 ? null : this._onValueCallback;
    },
    get$_errorTest: function() {
      return this._state === 2 ? null : this._errorTestCallback;
    },
    get$_onError: function() {
      return this._state === 2 ? null : this._onErrorCallback;
    },
    get$_whenCompleteAction: function() {
      return this._state === 2 ? null : this._whenCompleteActionCallback;
    },
    then$2$onError: function(f, onError) {
      var t1, result;
      t1 = $.Zone__current;
      t1.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, f, null, P._registerErrorHandler(onError, t1), null), [null]);
      this._addListener$1(result);
      return result;
    },
    then$1: function(f) {
      return this.then$2$onError(f, null);
    },
    catchError$2$test: function(onError, test) {
      var t1, t2, result;
      t1 = $.Zone__current;
      t2 = P._registerErrorHandler(onError, t1);
      $.Zone__current.toString;
      result = H.setRuntimeTypeInfo(new P._Future(0, t1, null, null, null, test, t2, null), [null]);
      this._addListener$1(result);
      return result;
    },
    catchError$1: function(onError) {
      return this.catchError$2$test(onError, null);
    },
    get$_async$_value: function() {
      return this._resultOrListeners;
    },
    get$_error: function() {
      return this._resultOrListeners;
    },
    _setValue$1: function(value) {
      this._state = 4;
      this._resultOrListeners = value;
    },
    _setError$2: function(error, stackTrace) {
      this._state = 8;
      this._resultOrListeners = new P._AsyncError(error, stackTrace);
    },
    _addListener$1: function(listener) {
      var t1;
      if (this._state >= 4) {
        t1 = this._zone;
        t1.toString;
        P._rootScheduleMicrotask(t1, null, t1, new P._Future__addListener_closure(this, listener));
      } else {
        listener.set$_nextListener(this._resultOrListeners);
        this._resultOrListeners = listener;
      }
    },
    _removeListeners$0: function() {
      var current, prev, next;
      current = this._resultOrListeners;
      this._resultOrListeners = null;
      for (prev = null; current != null; prev = current, current = next) {
        next = current.get$_nextListener();
        current.set$_nextListener(prev);
      }
      return prev;
    },
    _complete$1: function(value) {
      var t1, listeners;
      t1 = J.getInterceptor(value);
      if (!!t1.$isFuture)
        if (!!t1.$is_Future)
          P._Future__chainCoreFuture(value, this);
        else
          P._Future__chainForeignFuture(value, this);
      else {
        listeners = this._removeListeners$0();
        this._setValue$1(value);
        P._Future__propagateToListeners(this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners = this._removeListeners$0();
      this._setValue$1(value);
      P._Future__propagateToListeners(this, listeners);
    },
    _completeError$2: [function(error, stackTrace) {
      var listeners = this._removeListeners$0();
      this._setError$2(error, stackTrace);
      P._Future__propagateToListeners(this, listeners);
    }, function(error) {
      return this._completeError$2(error, null);
    }, "_completeError$1", "call$2", "call$1", "get$_completeError", 2, 2, 15, 16, 17, 18],
    _asyncComplete$1: function(value) {
      var t1;
      if (value == null)
        ;
      else {
        t1 = J.getInterceptor(value);
        if (!!t1.$isFuture) {
          if (!!t1.$is_Future) {
            t1 = value._state;
            if (t1 >= 4 && t1 === 8) {
              if (this._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              this._state = 1;
              t1 = this._zone;
              t1.toString;
              P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure(this, value));
            } else
              P._Future__chainCoreFuture(value, this);
          } else
            P._Future__chainForeignFuture(value, this);
          return;
        }
      }
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncComplete_closure0(this, value));
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      if (this._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(t1, null, t1, new P._Future__asyncCompleteError_closure(this, error, stackTrace));
    },
    _async$_Future$immediate$1: function(value, $T) {
      this._asyncComplete$1(value);
    },
    $is_Future: true,
    $isFuture: true,
    static: {"^": "_Future__INCOMPLETE,_Future__PENDING_COMPLETE,_Future__CHAINED,_Future__VALUE,_Future__ERROR", _Future$: function($T) {
        return H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
      }, _Future$immediate: function(value, $T) {
        var t1 = H.setRuntimeTypeInfo(new P._Future(0, $.Zone__current, null, null, null, null, null, null), [$T]);
        t1._async$_Future$immediate$1(value, $T);
        return t1;
      }, _Future__chainForeignFuture: function(source, target) {
        target.set$_isChained(true);
        source.then$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target));
      }, _Future__chainCoreFuture: function(source, target) {
        target.set$_isChained(true);
        if (source._state >= 4)
          P._Future__propagateToListeners(source, target);
        else
          source._addListener$1(target);
      }, _Future__propagateMultipleListeners: function(source, listeners) {
        var listeners0;
        do {
          listeners0 = listeners.get$_nextListener();
          listeners.set$_nextListener(null);
          P._Future__propagateToListeners(source, listeners);
          if (listeners0 != null) {
            listeners = listeners0;
            continue;
          } else
            break;
        } while (true);
      }, _Future__propagateToListeners: function(source, listeners) {
        var t1, t2, t3, hasError, asyncError, t4, sourceValue, zone, oldZone, chainSource, listeners0;
        t1 = {};
        t1.source_4 = source;
        for (t2 = source; true;) {
          t3 = {};
          if (!t2.get$_isComplete())
            return;
          hasError = t1.source_4.get$_hasError();
          if (hasError && listeners == null) {
            asyncError = t1.source_4.get$_error();
            t2 = t1.source_4.get$_zone();
            t3 = J.get$error$x(asyncError);
            t4 = asyncError.get$stackTrace();
            t2.toString;
            P._rootHandleUncaughtError(t2, null, t2, t3, t4);
            return;
          }
          if (listeners == null)
            return;
          if (listeners.get$_nextListener() != null) {
            P._Future__propagateMultipleListeners(t1.source_4, listeners);
            return;
          }
          t3.listenerHasValue_1 = true;
          sourceValue = t1.source_4.get$_hasValue() ? t1.source_4.get$_async$_value() : null;
          t3.listenerValueOrError_2 = sourceValue;
          t3.isPropagationAborted_3 = false;
          t2 = !hasError;
          if (!t2 || listeners.get$_onValue() != null || listeners.get$_whenCompleteAction() != null) {
            zone = listeners.get$_zone();
            if (hasError) {
              t4 = t1.source_4.get$_zone();
              t4.toString;
              zone.toString;
              t4 = zone == null ? t4 != null : zone !== t4;
            } else
              t4 = false;
            if (t4) {
              asyncError = t1.source_4.get$_error();
              t2 = t1.source_4.get$_zone();
              t3 = J.get$error$x(asyncError);
              t4 = asyncError.get$stackTrace();
              t2.toString;
              P._rootHandleUncaughtError(t2, null, t2, t3, t4);
              return;
            }
            oldZone = $.Zone__current;
            if (oldZone == null ? zone != null : oldZone !== zone)
              $.Zone__current = zone;
            else
              oldZone = null;
            if (t2) {
              if (listeners.get$_onValue() != null)
                t3.listenerHasValue_1 = new P._Future__propagateToListeners_handleValueCallback(t3, listeners, sourceValue, zone).call$0();
            } else
              new P._Future__propagateToListeners_handleError(t1, t3, listeners, zone).call$0();
            if (listeners.get$_whenCompleteAction() != null)
              new P._Future__propagateToListeners_handleWhenCompleteCallback(t1, t3, hasError, listeners, zone).call$0();
            if (oldZone != null)
              $.Zone__current = oldZone;
            if (t3.isPropagationAborted_3)
              return;
            if (t3.listenerHasValue_1 === true) {
              t2 = t3.listenerValueOrError_2;
              t2 = (sourceValue == null ? t2 != null : sourceValue !== t2) && !!J.getInterceptor(t2).$isFuture;
            } else
              t2 = false;
            if (t2) {
              chainSource = t3.listenerValueOrError_2;
              if (!!J.getInterceptor(chainSource).$is_Future)
                if (chainSource._state >= 4) {
                  listeners.set$_isChained(true);
                  t1.source_4 = chainSource;
                  t2 = chainSource;
                  continue;
                } else
                  P._Future__chainCoreFuture(chainSource, listeners);
              else
                P._Future__chainForeignFuture(chainSource, listeners);
              return;
            }
          }
          if (t3.listenerHasValue_1 === true) {
            listeners0 = listeners._removeListeners$0();
            listeners._setValue$1(t3.listenerValueOrError_2);
          } else {
            listeners0 = listeners._removeListeners$0();
            asyncError = t3.listenerValueOrError_2;
            listeners._setError$2(J.get$error$x(asyncError), asyncError.get$stackTrace());
          }
          t1.source_4 = listeners;
          t2 = listeners;
          listeners = listeners0;
        }
      }}
  },
  _Future__addListener_closure: {
    "^": "Closure0:11;this_0,listener_1",
    call$0: [function() {
      P._Future__propagateToListeners(this.this_0, this.listener_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__chainForeignFuture_closure: {
    "^": "Closure0:30;target_0",
    call$1: [function(value) {
      this.target_0._completeWithValue$1(value);
    }, "call$1", null, 2, 0, null, 14, "call"],
    $isFunction: true
  },
  _Future__chainForeignFuture_closure0: {
    "^": "Closure0:74;target_1",
    call$2: [function(error, stackTrace) {
      this.target_1._completeError$2(error, stackTrace);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 16, 17, 18, "call"],
    $isFunction: true
  },
  _Future__asyncComplete_closure: {
    "^": "Closure0:11;this_0,coreFuture_1",
    call$0: [function() {
      P._Future__chainCoreFuture(this.coreFuture_1, this.this_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__asyncComplete_closure0: {
    "^": "Closure0:11;this_2,value_3",
    call$0: [function() {
      this.this_2._completeWithValue$1(this.value_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__asyncCompleteError_closure: {
    "^": "Closure0:11;this_0,error_1,stackTrace_2",
    call$0: [function() {
      this.this_0._completeError$2(this.error_1, this.stackTrace_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleValueCallback: {
    "^": "Closure0:75;box_1,listener_3,sourceValue_4,zone_5",
    call$0: function() {
      var e, s, t1, t2, exception;
      try {
        t1 = this.zone_5;
        t2 = this.listener_3.get$_onValue();
        t1.toString;
        this.box_1.listenerValueOrError_2 = P._rootRunUnary(t1, null, t1, t2, this.sourceValue_4);
        return true;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        this.box_1.listenerValueOrError_2 = new P._AsyncError(e, s);
        return false;
      }

    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleError: {
    "^": "Closure0:10;box_2,box_1,listener_6,zone_7",
    call$0: function() {
      var asyncError, test, matchesTest, e, s, errorCallback, e0, s0, t1, t2, t3, exception, listenerValueOrError, t4;
      asyncError = this.box_2.source_4.get$_error();
      t1 = this.listener_6;
      test = t1.get$_errorTest();
      matchesTest = true;
      if (test != null)
        try {
          t2 = this.zone_7;
          t3 = J.get$error$x(asyncError);
          t2.toString;
          matchesTest = P._rootRunUnary(t2, null, t2, test, t3);
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e, s);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

      errorCallback = t1.get$_onError();
      if (matchesTest === true && errorCallback != null) {
        try {
          t1 = errorCallback;
          t2 = H.getDynamicRuntimeType();
          t2 = H.buildFunctionType(t2, [t2, t2])._isTest$1(t1);
          t3 = this.zone_7;
          t4 = this.box_1;
          if (t2) {
            t1 = J.get$error$x(asyncError);
            t2 = asyncError.get$stackTrace();
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunBinary(t3, null, t3, errorCallback, t1, t2);
          } else {
            t1 = J.get$error$x(asyncError);
            t3.toString;
            t4.listenerValueOrError_2 = P._rootRunUnary(t3, null, t3, errorCallback, t1);
          }
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e0 = t1;
          s0 = new H._StackTrace(exception, null);
          t1 = J.get$error$x(asyncError);
          t2 = e0;
          listenerValueOrError = (t1 == null ? t2 == null : t1 === t2) ? asyncError : new P._AsyncError(e0, s0);
          t1 = this.box_1;
          t1.listenerValueOrError_2 = listenerValueOrError;
          t1.listenerHasValue_1 = false;
          return;
        }

        this.box_1.listenerHasValue_1 = true;
      } else {
        t1 = this.box_1;
        t1.listenerValueOrError_2 = asyncError;
        t1.listenerHasValue_1 = false;
      }
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback: {
    "^": "Closure0:10;box_2,box_1,hasError_8,listener_9,zone_10",
    call$0: function() {
      var t1, e, s, t2, t3, exception;
      t1 = {};
      t1.completeResult_0 = null;
      try {
        t2 = this.zone_10;
        t3 = this.listener_9.get$_whenCompleteAction();
        t2.toString;
        t1.completeResult_0 = P._rootRun(t2, null, t2, t3);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        if (this.hasError_8) {
          t2 = J.get$error$x(this.box_2.source_4.get$_error());
          t3 = e;
          t3 = t2 == null ? t3 == null : t2 === t3;
          t2 = t3;
        } else
          t2 = false;
        t3 = this.box_1;
        if (t2)
          t3.listenerValueOrError_2 = this.box_2.source_4.get$_error();
        else
          t3.listenerValueOrError_2 = new P._AsyncError(e, s);
        t3.listenerHasValue_1 = false;
      }

      if (!!J.getInterceptor(t1.completeResult_0).$isFuture) {
        t2 = this.listener_9;
        t2.set$_isChained(true);
        this.box_1.isPropagationAborted_3 = true;
        t1.completeResult_0.then$2$onError(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(this.box_2, t2), new P._Future__propagateToListeners_handleWhenCompleteCallback_closure0(t1, t2));
      }
    },
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure: {
    "^": "Closure0:30;box_2,listener_11",
    call$1: [function(ignored) {
      P._Future__propagateToListeners(this.box_2.source_4, this.listener_11);
    }, "call$1", null, 2, 0, null, 76, "call"],
    $isFunction: true
  },
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0: {
    "^": "Closure0:74;box_0,listener_12",
    call$2: [function(error, stackTrace) {
      var t1, completeResult;
      t1 = this.box_0;
      if (!J.getInterceptor(t1.completeResult_0).$is_Future) {
        completeResult = P._Future$(null);
        t1.completeResult_0 = completeResult;
        completeResult._setError$2(error, stackTrace);
      }
      P._Future__propagateToListeners(t1.completeResult_0, this.listener_12);
    }, function(error) {
      return this.call$2(error, null);
    }, "call$1", "call$2", null, null, 2, 2, null, 16, 17, 18, "call"],
    $isFunction: true
  },
  _AsyncCallbackEntry: {
    "^": "Object;callback,next@",
    callback$0: function() {
      return this.callback.call$0();
    }
  },
  Stream: {
    "^": "Object;",
    where$1: function(_, test) {
      return H.setRuntimeTypeInfo(new P._WhereStream(test, this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    },
    map$1: function(_, convert) {
      return H.setRuntimeTypeInfo(new P._MapStream(convert, this), [H.getRuntimeTypeArgument(this, "Stream", 0), null]);
    },
    fold$2: function(_, initialValue, combine) {
      var t1, result;
      t1 = {};
      result = P._Future$(null);
      t1.value_0 = initialValue;
      t1.subscription_1 = null;
      t1.subscription_1 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_fold_closure(t1, this, combine, result), true, new P.Stream_fold_closure0(t1, result), new P.Stream_fold_closure1(result));
      return result;
    },
    join$1: function(_, separator) {
      var t1, result, buffer;
      t1 = {};
      result = P._Future$(P.String);
      buffer = P.StringBuffer$("");
      t1.subscription_0 = null;
      t1.first_1 = true;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_join_closure(t1, this, separator, result, buffer), true, new P.Stream_join_closure0(result, buffer), new P.Stream_join_closure1(result));
      return result;
    },
    contains$1: function(_, needle) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.bool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_contains_closure(t1, this, needle, future), true, new P.Stream_contains_closure0(future), future.get$_completeError());
      return future;
    },
    forEach$1: function(_, action) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_forEach_closure(t1, this, action, future), true, new P.Stream_forEach_closure0(future), future.get$_completeError());
      return future;
    },
    any$1: function(_, test) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.bool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_any_closure(t1, this, test, future), true, new P.Stream_any_closure0(future), future.get$_completeError());
      return future;
    },
    get$length: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.$int);
      t1.count_0 = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    get$isEmpty: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(P.bool);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_isEmpty_closure(t1, future), true, new P.Stream_isEmpty_closure0(future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var result, future;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      future = P._Future$([P.List, H.getRuntimeTypeArgument(this, "Stream", 0)]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(result, future), future.get$_completeError());
      return future;
    },
    get$first: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_first_closure(t1, this, future), true, new P.Stream_first_closure0(future), future.get$_completeError());
      return future;
    },
    get$last: function(_) {
      var t1, future;
      t1 = {};
      future = P._Future$(H.getRuntimeTypeArgument(this, "Stream", 0));
      t1.result_0 = null;
      t1.foundResult_1 = false;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
      return future;
    },
    firstWhere$2$defaultValue: function(_, test, defaultValue) {
      var t1, future;
      t1 = {};
      future = P._Future$(null);
      t1.subscription_0 = null;
      t1.subscription_0 = this.listen$4$cancelOnError$onDone$onError(new P.Stream_firstWhere_closure(t1, this, test, future), true, new P.Stream_firstWhere_closure0(defaultValue, future), future.get$_completeError());
      return future;
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$defaultValue($receiver, test, null);
    },
    $isStream: true
  },
  Stream_fold_closure: {
    "^": "Closure0;box_0,this_1,combine_2,result_3",
    call$1: [function(element) {
      var t1 = this.box_0;
      P._runUserCode(new P.Stream_fold__closure(t1, this.combine_2, element), new P.Stream_fold__closure0(t1), P._cancelAndErrorClosure(t1.subscription_1, this.result_3));
    }, "call$1", null, 2, 0, null, 27, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_fold__closure: {
    "^": "Closure0:11;box_0,combine_4,element_5",
    call$0: function() {
      return this.combine_4.call$2(this.box_0.value_0, this.element_5);
    },
    $isFunction: true
  },
  Stream_fold__closure0: {
    "^": "Closure0:30;box_0",
    call$1: function(newValue) {
      this.box_0.value_0 = newValue;
    },
    $isFunction: true
  },
  Stream_fold_closure1: {
    "^": "Closure0:58;result_6",
    call$2: [function(e, st) {
      this.result_6._completeError$2(e, st);
    }, "call$2", null, 4, 0, null, 1, 77, "call"],
    $isFunction: true
  },
  Stream_fold_closure0: {
    "^": "Closure0:11;box_0,result_7",
    call$0: [function() {
      this.result_7._complete$1(this.box_0.value_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_join_closure: {
    "^": "Closure0;box_0,this_1,separator_2,result_3,buffer_4",
    call$1: [function(element) {
      var e, s, t1, exception, t2;
      t1 = this.box_0;
      if (!t1.first_1)
        this.buffer_4.write$1(this.separator_2);
      t1.first_1 = false;
      try {
        this.buffer_4.write$1(element);
      } catch (exception) {
        t2 = H.unwrapException(exception);
        e = t2;
        s = new H._StackTrace(exception, null);
        P._cancelAndError(t1.subscription_0, this.result_3, e, s);
      }

    }, "call$1", null, 2, 0, null, 27, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_join_closure1: {
    "^": "Closure0:30;result_5",
    call$1: [function(e) {
      this.result_5._completeError$1(e);
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  Stream_join_closure0: {
    "^": "Closure0:11;result_6,buffer_7",
    call$0: [function() {
      this.result_6._complete$1(this.buffer_7._contents);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_contains_closure: {
    "^": "Closure0;box_0,this_1,needle_2,future_3",
    call$1: [function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_contains__closure(this.needle_2, element), new P.Stream_contains__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 27, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_contains__closure: {
    "^": "Closure0:11;needle_4,element_5",
    call$0: function() {
      return J.$eq(this.element_5, this.needle_4);
    },
    $isFunction: true
  },
  Stream_contains__closure0: {
    "^": "Closure0:78;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    },
    $isFunction: true
  },
  Stream_contains_closure0: {
    "^": "Closure0:11;future_7",
    call$0: [function() {
      this.future_7._complete$1(false);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_forEach_closure: {
    "^": "Closure0;box_0,this_1,action_2,future_3",
    call$1: [function(element) {
      P._runUserCode(new P.Stream_forEach__closure(this.action_2, element), new P.Stream_forEach__closure0(), P._cancelAndErrorClosure(this.box_0.subscription_0, this.future_3));
    }, "call$1", null, 2, 0, null, 27, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_forEach__closure: {
    "^": "Closure0:11;action_4,element_5",
    call$0: function() {
      return this.action_4.call$1(this.element_5);
    },
    $isFunction: true
  },
  Stream_forEach__closure0: {
    "^": "Closure0:30;",
    call$1: function(_) {
    },
    $isFunction: true
  },
  Stream_forEach_closure0: {
    "^": "Closure0:11;future_6",
    call$0: [function() {
      this.future_6._complete$1(null);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_any_closure: {
    "^": "Closure0;box_0,this_1,test_2,future_3",
    call$1: [function(element) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_any__closure(this.test_2, element), new P.Stream_any__closure0(t1, t2), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 27, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_any__closure: {
    "^": "Closure0:11;test_4,element_5",
    call$0: function() {
      return this.test_4.call$1(this.element_5);
    },
    $isFunction: true
  },
  Stream_any__closure0: {
    "^": "Closure0:78;box_0,future_6",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, true);
    },
    $isFunction: true
  },
  Stream_any_closure0: {
    "^": "Closure0:11;future_7",
    call$0: [function() {
      this.future_7._complete$1(false);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_length_closure: {
    "^": "Closure0:30;box_0",
    call$1: [function(_) {
      ++this.box_0.count_0;
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  Stream_length_closure0: {
    "^": "Closure0:11;box_0,future_1",
    call$0: [function() {
      this.future_1._complete$1(this.box_0.count_0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_isEmpty_closure: {
    "^": "Closure0:30;box_0,future_1",
    call$1: [function(_) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_1, false);
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  Stream_isEmpty_closure0: {
    "^": "Closure0:11;future_2",
    call$0: [function() {
      this.future_2._complete$1(true);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_toList_closure: {
    "^": "Closure0;this_0,result_1",
    call$1: [function(data) {
      this.result_1.push(data);
    }, "call$1", null, 2, 0, null, 69, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_0, "Stream");
    }
  },
  Stream_toList_closure0: {
    "^": "Closure0:11;result_2,future_3",
    call$0: [function() {
      this.future_3._complete$1(this.result_2);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_first_closure: {
    "^": "Closure0;box_0,this_1,future_2",
    call$1: [function(value) {
      P._cancelAndValue(this.box_0.subscription_0, this.future_2, value);
    }, "call$1", null, 2, 0, null, 14, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_first_closure0: {
    "^": "Closure0:11;future_3",
    call$0: [function() {
      this.future_3._completeError$1(new P.StateError("No elements"));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_last_closure: {
    "^": "Closure0;box_0,this_1",
    call$1: [function(value) {
      var t1 = this.box_0;
      t1.foundResult_1 = true;
      t1.result_0 = value;
    }, "call$1", null, 2, 0, null, 14, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_last_closure0: {
    "^": "Closure0:11;box_0,future_2",
    call$0: [function() {
      var t1 = this.box_0;
      if (t1.foundResult_1) {
        this.future_2._complete$1(t1.result_0);
        return;
      }
      this.future_2._completeError$1(new P.StateError("No elements"));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Stream_firstWhere_closure: {
    "^": "Closure0;box_0,this_1,test_2,future_3",
    call$1: [function(value) {
      var t1, t2;
      t1 = this.box_0;
      t2 = this.future_3;
      P._runUserCode(new P.Stream_firstWhere__closure(this.test_2, value), new P.Stream_firstWhere__closure0(t1, t2, value), P._cancelAndErrorClosure(t1.subscription_0, t2));
    }, "call$1", null, 2, 0, null, 14, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T", args: [T]};
      }, this.this_1, "Stream");
    }
  },
  Stream_firstWhere__closure: {
    "^": "Closure0:11;test_4,value_5",
    call$0: function() {
      return this.test_4.call$1(this.value_5);
    },
    $isFunction: true
  },
  Stream_firstWhere__closure0: {
    "^": "Closure0:78;box_0,future_6,value_7",
    call$1: function(isMatch) {
      if (isMatch === true)
        P._cancelAndValue(this.box_0.subscription_0, this.future_6, this.value_7);
    },
    $isFunction: true
  },
  Stream_firstWhere_closure0: {
    "^": "Closure0:11;defaultValue_8,future_9",
    call$0: [function() {
      this.future_9._completeError$1(new P.StateError("firstMatch ended without match"));
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  StreamSubscription: {
    "^": "Object;",
    $isStreamSubscription: true
  },
  _ControllerStream: {
    "^": "_StreamImpl;",
    _createSubscription$1: function(cancelOnError) {
      var t1, t2, t3, subscription;
      t1 = this._async$_controller;
      if ((t1._state & 4) !== 0)
        H.throwExpression(P.StateError$("Subscribing to closed stream"));
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      subscription = H.setRuntimeTypeInfo(new P._BroadcastSubscription(null, null, null, t1, null, null, null, t2, t3, null, null), [H.getTypeArgumentByIndex(t1, 0)]);
      subscription._async$_previous = subscription;
      subscription._async$_next = subscription;
      t3 = t1._async$_previous;
      subscription._async$_previous = t3;
      subscription._async$_next = t1;
      t3.set$_async$_next(subscription);
      t1._async$_previous = subscription;
      subscription._eventState = t1._state & 1;
      if (t1._async$_next === subscription)
        P._runGuarded(t1._onListen);
      return subscription;
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$is_ControllerStream)
        return false;
      return other._async$_controller === this._async$_controller;
    },
    $is_ControllerStream: true
  },
  _ControllerSubscription: {
    "^": "_BufferingStreamSubscription;_async$_controller<",
    _onCancel$0: function() {
      return this.get$_async$_controller()._recordCancel$1(this);
    },
    _onPause$0: [function() {
      this.get$_async$_controller();
    }, "call$0", "get$_onPause", 0, 0, 10],
    _onResume$0: [function() {
      this.get$_async$_controller();
    }, "call$0", "get$_onResume", 0, 0, 10]
  },
  _EventSink: {
    "^": "Object;"
  },
  _BufferingStreamSubscription: {
    "^": "Object;_async$_onData,_onError<,_onDone,_zone<,_state,_cancelFuture,_pending",
    onData$1: function(handleData) {
      this._zone.toString;
      this._async$_onData = handleData;
    },
    onError$1: function(_, handleError) {
      if (handleError == null)
        handleError = P._nullErrorHandler$closure();
      this._onError = P._registerErrorHandler(handleError, this._zone);
    },
    onDone$1: function(handleDone) {
      if (handleDone == null)
        handleDone = P._nullDoneHandler$closure();
      this._zone.toString;
      this._onDone = handleDone;
    },
    pause$1: function(_, resumeSignal) {
      var t1, t2, t3;
      t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      this._state = t2;
      if (t1 < 128 && this._pending != null) {
        t3 = this._pending;
        if (t3._state === 1)
          t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        this._guardCallback$1(this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 -= 128;
        this._state = t1;
        if (t1 < 128)
          if ((t1 & 64) !== 0 && this._pending.lastPendingEvent != null)
            this._pending.schedule$1(this);
          else {
            t1 = (t1 & 4294967291) >>> 0;
            this._state = t1;
            if ((t1 & 32) === 0)
              this._guardCallback$1(this.get$_onResume());
          }
      }
    },
    cancel$0: function() {
      var t1 = (this._state & 4294967279) >>> 0;
      this._state = t1;
      if ((t1 & 8) !== 0)
        return this._cancelFuture;
      this._cancel$0();
      return this._cancelFuture;
    },
    get$isPaused: function() {
      return this._state >= 128;
    },
    _cancel$0: function() {
      var t1, t2;
      t1 = (this._state | 8) >>> 0;
      this._state = t1;
      if ((t1 & 64) !== 0) {
        t2 = this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        this._pending = null;
      this._cancelFuture = this._onCancel$0();
    },
    _async$_add$1: function(_, data) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendData$1(data);
      else
        this._addPending$1(H.setRuntimeTypeInfo(new P._DelayedData(data, null), [null]));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace, null));
    },
    _close$0: function() {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      this._state = t1;
      if (t1 < 32)
        this._sendDone$0();
      else
        this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: [function() {
    }, "call$0", "get$_onPause", 0, 0, 10],
    _onResume$0: [function() {
    }, "call$0", "get$_onResume", 0, 0, 10],
    _onCancel$0: function() {
    },
    _addPending$1: function($event) {
      var pending, t1;
      pending = this._pending;
      if (pending == null) {
        pending = new P._StreamImplEvents(null, null, 0);
        this._pending = pending;
      }
      pending.add$1(0, $event);
      t1 = this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        this._state = t1;
        if (t1 < 128)
          this._pending.schedule$1(this);
      }
    },
    _sendData$1: function(data) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      this._zone.runUnaryGuarded$2(this._async$_onData, data);
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2;
      t1 = this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        this._state = (t1 | 16) >>> 0;
        this._cancel$0();
        t2.call$0();
      } else {
        t2.call$0();
        this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      this._cancel$0();
      this._state = (this._state | 16) >>> 0;
      new P._BufferingStreamSubscription__sendDone_sendDone(this).call$0();
    },
    _guardCallback$1: function(callback) {
      var t1 = this._state;
      this._state = (t1 | 32) >>> 0;
      callback.call$0();
      this._state = (this._state & 4294967263) >>> 0;
      this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, t2, isInputPaused;
      t1 = this._state;
      if ((t1 & 64) !== 0 && this._pending.lastPendingEvent == null) {
        t1 = (t1 & 4294967231) >>> 0;
        this._state = t1;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t2 = this._pending;
            t2 = t2 == null || t2.lastPendingEvent == null;
          } else
            t2 = false;
        else
          t2 = false;
        if (t2) {
          t1 = (t1 & 4294967291) >>> 0;
          this._state = t1;
        }
      }
      for (; true; wasInputPaused = isInputPaused) {
        if ((t1 & 8) !== 0) {
          this._pending = null;
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          this._onPause$0();
        else
          this._onResume$0();
        t1 = (this._state & 4294967263) >>> 0;
        this._state = t1;
      }
      if ((t1 & 64) !== 0 && t1 < 128)
        this._pending.schedule$1(this);
    },
    $isStreamSubscription: true,
    static: {"^": "_BufferingStreamSubscription__STATE_CANCEL_ON_ERROR,_BufferingStreamSubscription__STATE_CLOSED,_BufferingStreamSubscription__STATE_INPUT_PAUSED,_BufferingStreamSubscription__STATE_CANCELED,_BufferingStreamSubscription__STATE_WAIT_FOR_CANCEL,_BufferingStreamSubscription__STATE_IN_CALLBACK,_BufferingStreamSubscription__STATE_HAS_PENDING,_BufferingStreamSubscription__STATE_PAUSE_COUNT,_BufferingStreamSubscription__STATE_PAUSE_COUNT_SHIFT"}
  },
  _BufferingStreamSubscription__sendError_sendError: {
    "^": "Closure0:10;this_0,error_1,stackTrace_2",
    call$0: function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      t2 = t1._zone;
      t3 = $.Zone__current;
      t2.toString;
      t3.toString;
      if (t3 == null ? t2 != null : t3 !== t2)
        P._rootHandleUncaughtError(t3, null, t3, this.error_1, this.stackTrace_2);
      else {
        t3 = t1._onError;
        t4 = H.getDynamicRuntimeType();
        t4 = H.buildFunctionType(t4, [t4, t4])._isTest$1(t3);
        t5 = t1._onError;
        t6 = this.error_1;
        if (t4)
          t2.runBinaryGuarded$3(t5, t6, this.stackTrace_2);
        else
          t2.runUnaryGuarded$2(t5, t6);
      }
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $isFunction: true
  },
  _BufferingStreamSubscription__sendDone_sendDone: {
    "^": "Closure0:10;this_0",
    call$0: function() {
      var t1, t2;
      t1 = this.this_0;
      t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $isFunction: true
  },
  _StreamImpl: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var subscription = this._createSubscription$1(true === cancelOnError);
      subscription.onData$1(onData);
      subscription.onError$1(0, onError);
      subscription.onDone$1(onDone);
      return subscription;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    _createSubscription$1: function(cancelOnError) {
      var t1, t2;
      t1 = $.Zone__current;
      t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(null, null, null, t1, t2, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      return t2;
    }
  },
  _DelayedEvent: {
    "^": "Object;next@"
  },
  _DelayedData: {
    "^": "_DelayedEvent;value>,next",
    perform$1: function(dispatch) {
      dispatch._sendData$1(this.value);
    }
  },
  _DelayedError: {
    "^": "_DelayedEvent;error>,stackTrace<,next",
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    }
  },
  _DelayedDone: {
    "^": "Object;",
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function() {
      return;
    },
    set$next: function(_) {
      throw H.wrapException(P.StateError$("No events after a done."));
    }
  },
  _PendingEvents: {
    "^": "Object;",
    schedule$1: function(dispatch) {
      var t1 = this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(this, dispatch));
      this._state = 1;
    }
  },
  _PendingEvents_schedule_closure: {
    "^": "Closure0:11;this_0,dispatch_1",
    call$0: [function() {
      var t1, oldState;
      t1 = this.this_0;
      oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _StreamImplEvents: {
    "^": "_PendingEvents;firstPendingEvent,lastPendingEvent,_state",
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var t1 = this.lastPendingEvent;
      if (t1 == null) {
        this.lastPendingEvent = $event;
        this.firstPendingEvent = $event;
      } else {
        t1.set$next($event);
        this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1;
      $event = this.firstPendingEvent;
      t1 = $event.get$next();
      this.firstPendingEvent = t1;
      if (t1 == null)
        this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    },
    clear$0: function(_) {
      if (this._state === 1)
        this._state = 3;
      this.lastPendingEvent = null;
      this.firstPendingEvent = null;
    }
  },
  _cancelAndError_closure: {
    "^": "Closure0:11;future_0,error_1,stackTrace_2",
    call$0: function() {
      return this.future_0._completeError$2(this.error_1, this.stackTrace_2);
    },
    $isFunction: true
  },
  _cancelAndErrorClosure_closure: {
    "^": "Closure0:80;subscription_0,future_1",
    call$2: function(error, stackTrace) {
      return P._cancelAndError(this.subscription_0, this.future_1, error, stackTrace);
    },
    $isFunction: true
  },
  _cancelAndValue_closure: {
    "^": "Closure0:11;future_0,value_1",
    call$0: function() {
      return this.future_0._complete$1(this.value_1);
    },
    $isFunction: true
  },
  _ForwardingStream: {
    "^": "Stream;",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1, t2, t3, t4, result;
      cancelOnError = true === cancelOnError;
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 0);
      t2 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      t3 = $.Zone__current;
      t4 = cancelOnError ? 1 : 0;
      result = H.setRuntimeTypeInfo(new P._ForwardingStreamSubscription(this, null, null, null, null, t3, t4, null, null), [t1, t2]);
      result._ForwardingStreamSubscription$2(this, cancelOnError, t1, t2);
      result.onData$1(onData);
      result.onError$1(0, onError);
      result.onDone$1(onDone);
      return result;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    _handleData$2: function(data, sink) {
      sink._async$_add$1(0, data);
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  },
  _ForwardingStreamSubscription: {
    "^": "_BufferingStreamSubscription;_stream,_subscription,_async$_onData,_onError,_onDone,_zone,_state,_cancelFuture,_pending",
    _async$_add$1: function(_, data) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._async$_add$1.call(this, this, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      P._BufferingStreamSubscription.prototype._addError$2.call(this, error, stackTrace);
    },
    _onPause$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    }, "call$0", "get$_onPause", 0, 0, 10],
    _onResume$0: [function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0();
    }, "call$0", "get$_onResume", 0, 0, 10],
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this._subscription = null;
        t1.cancel$0();
      }
      return;
    },
    _handleData$1: [function(data) {
      this._stream._handleData$2(data, this);
    }, "call$1", "get$_handleData", 2, 0, function() {
      return H.computeSignature(function(S, T) {
        return {func: "void__S", void: true, args: [S]};
      }, this.$receiver, "_ForwardingStreamSubscription");
    }, 69],
    _handleError$2: [function(error, stackTrace) {
      this._addError$2(error, stackTrace);
    }, "call$2", "get$_handleError", 4, 0, 81, 17, 18],
    _handleDone$0: [function() {
      this._close$0();
    }, "call$0", "get$_handleDone", 0, 0, 10],
    _ForwardingStreamSubscription$2: function(_stream, cancelOnError, $S, $T) {
      var t1, t2;
      t1 = this.get$_handleData();
      t2 = this.get$_handleError();
      this._subscription = this._stream._async$_source.listen$3$onDone$onError(t1, this.get$_handleDone(), t2);
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    },
    $asStreamSubscription: function($S, $T) {
      return [$T];
    }
  },
  _WhereStream: {
    "^": "_ForwardingStream;_test,_async$_source",
    _test$1: function(arg0) {
      return this._test.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var satisfies, e, s, exception, t1;
      satisfies = null;
      try {
        satisfies = this._test$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      if (satisfies === true)
        J._async$_add$1$x(sink, inputEvent);
    },
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    },
    $asStream: null
  },
  _MapStream: {
    "^": "_ForwardingStream;_transform,_async$_source",
    _transform$1: function(arg0) {
      return this._transform.call$1(arg0);
    },
    _handleData$2: function(inputEvent, sink) {
      var outputEvent, e, s, exception, t1;
      outputEvent = null;
      try {
        outputEvent = this._transform$1(inputEvent);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        sink._addError$2(e, s);
        return;
      }

      J._async$_add$1$x(sink, outputEvent);
    }
  },
  _BaseZone: {
    "^": "Object;",
    runGuarded$1: function(f) {
      var e, s, t1, exception;
      try {
        t1 = this.run$1(f);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runUnaryGuarded$2: function(f, arg) {
      var e, s, t1, exception;
      try {
        t1 = this.runUnary$2(f, arg);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    runBinaryGuarded$3: function(f, arg1, arg2) {
      var e, s, t1, exception;
      try {
        t1 = this.runBinary$3(f, arg1, arg2);
        return t1;
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        return this.handleUncaughtError$2(e, s);
      }

    },
    bindCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindCallback_closure(this, registered);
      else
        return new P._BaseZone_bindCallback_closure0(this, registered);
    },
    bindCallback$1: function(f) {
      return this.bindCallback$2$runGuarded(f, true);
    },
    bindUnaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerUnaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindUnaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindUnaryCallback_closure0(this, registered);
    },
    bindBinaryCallback$2$runGuarded: function(f, runGuarded) {
      var registered = this.registerBinaryCallback$1(f);
      if (runGuarded)
        return new P._BaseZone_bindBinaryCallback_closure(this, registered);
      else
        return new P._BaseZone_bindBinaryCallback_closure0(this, registered);
    }
  },
  _BaseZone_bindCallback_closure: {
    "^": "Closure0:11;this_0,registered_1",
    call$0: [function() {
      return this.this_0.runGuarded$1(this.registered_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseZone_bindCallback_closure0: {
    "^": "Closure0:11;this_2,registered_3",
    call$0: [function() {
      return this.this_2.run$1(this.registered_3);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _BaseZone_bindUnaryCallback_closure: {
    "^": "Closure0:30;this_0,registered_1",
    call$1: [function(arg) {
      return this.this_0.runUnaryGuarded$2(this.registered_1, arg);
    }, "call$1", null, 2, 0, null, 82, "call"],
    $isFunction: true
  },
  _BaseZone_bindUnaryCallback_closure0: {
    "^": "Closure0:30;this_2,registered_3",
    call$1: [function(arg) {
      return this.this_2.runUnary$2(this.registered_3, arg);
    }, "call$1", null, 2, 0, null, 82, "call"],
    $isFunction: true
  },
  _BaseZone_bindBinaryCallback_closure: {
    "^": "Closure0:58;this_0,registered_1",
    call$2: [function(arg1, arg2) {
      return this.this_0.runBinaryGuarded$3(this.registered_1, arg1, arg2);
    }, "call$2", null, 4, 0, null, 6, 7, "call"],
    $isFunction: true
  },
  _BaseZone_bindBinaryCallback_closure0: {
    "^": "Closure0:58;this_2,registered_3",
    call$2: [function(arg1, arg2) {
      return this.this_2.runBinary$3(this.registered_3, arg1, arg2);
    }, "call$2", null, 4, 0, null, 6, 7, "call"],
    $isFunction: true
  },
  _rootHandleUncaughtError_closure: {
    "^": "Closure0:11;error_0,stackTrace_1",
    call$0: function() {
      P._scheduleAsyncCallback(new P._rootHandleUncaughtError__closure(this.error_0, this.stackTrace_1));
    },
    $isFunction: true
  },
  _rootHandleUncaughtError__closure: {
    "^": "Closure0:11;error_2,stackTrace_3",
    call$0: function() {
      var t1, trace;
      t1 = this.error_2;
      P.print("Uncaught Error: " + H.S(t1));
      trace = this.stackTrace_3;
      if (trace == null && !!J.getInterceptor(t1).$isError)
        trace = t1.get$stackTrace();
      if (trace != null)
        P.print("Stack Trace: \n" + H.S(trace) + "\n");
      throw H.wrapException(t1);
    },
    $isFunction: true
  },
  _RootZone: {
    "^": "_BaseZone;",
    get$parent: function(_) {
      return;
    },
    $index: function(_, key) {
      return;
    },
    handleUncaughtError$2: function(error, stackTrace) {
      return P._rootHandleUncaughtError(this, null, this, error, stackTrace);
    },
    run$1: function(f) {
      return P._rootRun(this, null, this, f);
    },
    runUnary$2: function(f, arg) {
      return P._rootRunUnary(this, null, this, f, arg);
    },
    runBinary$3: function(f, arg1, arg2) {
      return P._rootRunBinary(this, null, this, f, arg1, arg2);
    },
    registerCallback$1: function(f) {
      return f;
    },
    registerUnaryCallback$1: function(f) {
      return f;
    },
    registerBinaryCallback$1: function(f) {
      return f;
    }
  }
}],
["dart.collection", "dart:collection", , P, {
  "^": "",
  LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
    return H.fillLiteralMap(keyValuePairs, H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]));
  },
  LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  _defaultEquals: [function(a, b) {
    return J.$eq(a, b);
  }, "call$2", "_defaultEquals$closure", 4, 0, 19, 20, 21],
  _defaultHashCode: [function(a) {
    return J.get$hashCode$(a);
  }, "call$1", "_defaultHashCode$closure", 2, 0, 22, 20],
  HashMap_HashMap: function(equals, hashCode, isValidKey, $K, $V) {
    var t1;
    if (equals == null) {
      t1 = new P._HashMap(0, null, null, null, null);
      t1.$builtinTypeInfo = [$K, $V];
      return t1;
    }
    hashCode = P._defaultHashCode$closure();
    return P._CustomHashMap$(equals, hashCode, isValidKey, $K, $V);
  },
  HashMap_HashMap$identity: function($K, $V) {
    return H.setRuntimeTypeInfo(new P._IdentityHashMap(0, null, null, null, null), [$K, $V]);
  },
  HashSet_HashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._HashSet(0, null, null, null, null), [$E]);
  },
  HashSet_HashSet$identity: function($E) {
    return H.setRuntimeTypeInfo(new P._IdentityHashSet(0, null, null, null, null), [$E]);
  },
  _iterableToString: function(iterable) {
    var parts, t1;
    if ($.get$_toStringVisiting().contains$1(0, iterable))
      return "(...)";
    $.get$_toStringVisiting().add$1(0, iterable);
    parts = [];
    try {
      P._iterablePartsToStrings(iterable, parts);
    } finally {
      $.get$_toStringVisiting().remove$1(0, iterable);
    }
    t1 = P.StringBuffer$("(");
    t1.writeAll$2(parts, ", ");
    t1.write$1(")");
    return t1._contents;
  },
  _iterablePartsToStrings: function(iterable, parts) {
    var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
    it = iterable.get$iterator(iterable);
    $length = 0;
    count = 0;
    while (true) {
      if (!($length < 80 || count < 3))
        break;
      if (!it.moveNext$0())
        return;
      next = H.S(it.get$current());
      parts.push(next);
      $length += next.length + 2;
      ++count;
    }
    if (!it.moveNext$0()) {
      if (count <= 5)
        return;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      ultimateString = parts.pop();
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      penultimateString = parts.pop();
    } else {
      penultimate = it.get$current();
      ++count;
      if (!it.moveNext$0()) {
        if (count <= 4) {
          parts.push(H.S(penultimate));
          return;
        }
        ultimateString = H.S(penultimate);
        if (0 >= parts.length)
          return H.ioore(parts, 0);
        penultimateString = parts.pop();
        $length += ultimateString.length + 2;
      } else {
        ultimate = it.get$current();
        ++count;
        for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
          ultimate0 = it.get$current();
          ++count;
          if (count > 100) {
            while (true) {
              if (!($length > 75 && count > 3))
                break;
              if (0 >= parts.length)
                return H.ioore(parts, 0);
              $length -= parts.pop().length + 2;
              --count;
            }
            parts.push("...");
            return;
          }
        }
        penultimateString = H.S(penultimate);
        ultimateString = H.S(ultimate);
        $length += ultimateString.length + penultimateString.length + 4;
      }
    }
    if (count > parts.length + 2) {
      $length += 5;
      elision = "...";
    } else
      elision = null;
    while (true) {
      if (!($length > 80 && parts.length > 3))
        break;
      if (0 >= parts.length)
        return H.ioore(parts, 0);
      $length -= parts.pop().length + 2;
      if (elision == null) {
        $length += 5;
        elision = "...";
      }
    }
    if (elision != null)
      parts.push(elision);
    parts.push(penultimateString);
    parts.push(ultimateString);
  },
  LinkedHashMap_LinkedHashMap: function(equals, hashCode, isValidKey, $K, $V) {
    return H.setRuntimeTypeInfo(new P._LinkedHashMap(0, null, null, null, null, null, 0), [$K, $V]);
  },
  LinkedHashSet_LinkedHashSet: function(equals, hashCode, isValidKey, $E) {
    return H.setRuntimeTypeInfo(new P._LinkedHashSet(0, null, null, null, null, null, 0), [$E]);
  },
  Maps_mapToString: function(m) {
    var t1, result, i, t2;
    t1 = {};
    for (i = 0; t2 = $.get$Maps__toStringList(), i < t2.length; ++i)
      if (t2[i] === m)
        return "{...}";
    result = P.StringBuffer$("");
    try {
      $.get$Maps__toStringList().push(m);
      result.write$1("{");
      t1.first_0 = true;
      J.forEach$1$ax(m, new P.Maps_mapToString_closure(t1, result));
      result.write$1("}");
    } finally {
      t1 = $.get$Maps__toStringList();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
    }
    return result.get$_contents();
  },
  _HashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_collection$_keys",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.HashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._HashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      H.IterableMixinWorkaround_forEach(other, new P._HashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, t1, entry, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          t1 = null;
        else {
          entry = strings[key];
          t1 = entry === strings ? null : entry;
        }
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          t1 = null;
        else {
          entry = nums[key];
          t1 = entry === nums ? null : entry;
        }
        return t1;
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._HashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._HashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++this._collection$_length;
        this._collection$_keys = null;
      } else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++this._collection$_length;
          this._collection$_keys = null;
        }
      }
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      --this._collection$_length;
      this._collection$_keys = null;
      return bucket.splice(index, 2)[1];
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._collection$_keys = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key;
      keys = this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(key, this.$index(0, key));
        if (keys !== this._collection$_keys)
          throw H.wrapException(P.ConcurrentModificationError$(this));
      }
    },
    _computeKeys$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._collection$_keys;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._collection$_keys = result;
      return result;
    },
    _addHashTableEntry$3: function(table, key, value) {
      if (table[key] == null) {
        ++this._collection$_length;
        this._collection$_keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var value;
      if (table != null && table[key] != null) {
        value = P._HashMap__getTableEntry(table, key);
        delete table[key];
        --this._collection$_length;
        this._collection$_keys = null;
        return value;
      } else
        return;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq(bucket[i], key))
          return i;
      return -1;
    },
    $isMap: true,
    static: {_HashMap__getTableEntry: function(table, key) {
        var entry = table[key];
        return entry === table ? null : entry;
      }, _HashMap__setTableEntry: function(table, key, value) {
        if (value == null)
          table[key] = table;
        else
          table[key] = value;
      }, _HashMap__newHashTable: function() {
        var table = Object.create(null);
        P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _HashMap_values_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 64, "call"],
    $isFunction: true
  },
  _HashMap_addAll_closure: {
    "^": "Closure0;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 59, 14, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V", args: [K, V]};
      }, this.this_0, "_HashMap");
    }
  },
  _IdentityHashMap: {
    "^": "_HashMap;_collection$_length,_strings,_nums,_rest,_collection$_keys",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2) {
        t1 = bucket[i];
        if (t1 == null ? key == null : t1 === key)
          return i;
      }
      return -1;
    }
  },
  _CustomHashMap: {
    "^": "_HashMap;_equals,_hashCode,_validKey,_collection$_length,_strings,_nums,_rest,_collection$_keys",
    _equals$2: function(arg0, arg1) {
      return this._equals.call$2(arg0, arg1);
    },
    _hashCode$1: function(arg0) {
      return this._hashCode.call$1(arg0);
    },
    _validKey$1: function(arg0) {
      return this._validKey.call$1(arg0);
    },
    $index: function(_, key) {
      if (this._validKey$1(key) !== true)
        return;
      return P._HashMap.prototype._get$1.call(this, key);
    },
    $indexSet: function(_, key, value) {
      P._HashMap.prototype._set$2.call(this, key, value);
    },
    containsKey$1: function(key) {
      if (this._validKey$1(key) !== true)
        return false;
      return P._HashMap.prototype._containsKey$1.call(this, key);
    },
    remove$1: function(_, key) {
      if (this._validKey$1(key) !== true)
        return;
      return P._HashMap.prototype._remove$1.call(this, key);
    },
    _computeHashCode$1: function(key) {
      return this._hashCode$1(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (this._equals$2(bucket[i], key) === true)
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    static: {_CustomHashMap$: function(_equals, _hashCode, validKey, $K, $V) {
        var t1 = new P._CustomHashMap_closure($K);
        return H.setRuntimeTypeInfo(new P._CustomHashMap(_equals, _hashCode, t1, 0, null, null, null, null), [$K, $V]);
      }}
  },
  _CustomHashMap_closure: {
    "^": "Closure0:30;K_0",
    call$1: function(v) {
      var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
      return t1;
    },
    $isFunction: true
  },
  HashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map;
      t1 = new P.HashMapKeyIterator(t1, t1._computeKeys$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      t1 = this._map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._collection$_keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    },
    $isEfficientLength: true
  },
  HashMapKeyIterator: {
    "^": "Object;_map,_collection$_keys,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var keys, offset, t1;
      keys = this._collection$_keys;
      offset = this._offset;
      t1 = this._map;
      if (keys !== t1._collection$_keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = keys[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashMap: {
    "^": "Object;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      return H.MappedIterable_MappedIterable(H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]), new P._LinkedHashMap_values_closure(this), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    containsKey$1: function(key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[key] != null;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(key)], key) >= 0;
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new P._LinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return;
        cell = strings[key];
        return cell == null ? null : cell.get$_value();
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null)
          return;
        cell = nums[key];
        return cell == null ? null : cell.get$_value();
      } else
        return this._get$1(key);
    },
    _get$1: function(key) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].get$_value();
    },
    $indexSet: function(_, key, value) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          strings = P._LinkedHashMap__newHashTable();
          this._strings = strings;
        }
        this._addHashTableEntry$3(strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = this._nums;
        if (nums == null) {
          nums = P._LinkedHashMap__newHashTable();
          this._nums = nums;
        }
        this._addHashTableEntry$3(nums, key, value);
      } else
        this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashMap__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$2(key, value)];
      else {
        index = this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].set$_value(value);
        else
          bucket.push(this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      if (this.containsKey$1(key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      if (typeof key === "string" && key !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return this._removeHashTableEntry$2(this._nums, key);
      else
        return this._remove$1(key);
    },
    _remove$1: function(key) {
      var rest, bucket, index, cell;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(key)];
      index = this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      this._unlinkCell$1(cell);
      return cell.get$_value();
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$2(cell.get$_key(), cell.get$_value());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell = table[key];
      if (cell == null)
        table[key] = this._newLinkedCell$2(key, value);
      else
        cell.set$_value(value);
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = table[key];
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      delete table[key];
      return cell.get$_value();
    },
    _newLinkedCell$2: function(key, value) {
      var cell, last;
      cell = new P.LinkedHashMapCell(key, value, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_key(), key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isLinkedHashMap: true,
    $isMap: true,
    static: {_LinkedHashMap__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _LinkedHashMap_values_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(each) {
      return this.this_0.$index(0, each);
    }, "call$1", null, 2, 0, null, 64, "call"],
    $isFunction: true
  },
  _LinkedHashMap_addAll_closure: {
    "^": "Closure0;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 59, 14, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V0", args: [K, V]};
      }, this.this_0, "_LinkedHashMap");
    }
  },
  LinkedHashMapCell: {
    "^": "Object;_key<,_value@,_next@,_previous@"
  },
  LinkedHashMapKeyIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.get$_key());
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.get$_next();
      }
    },
    $isEfficientLength: true
  },
  LinkedHashMapKeyIterator: {
    "^": "Object;_map,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._map;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_key();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  _HashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_elements",
    get$iterator: function(_) {
      var t1 = new P.HashSetIterator(this, this._computeElements$0(), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index);
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._HashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(objects, objects.length, 0, null), [H.getTypeArgumentByIndex(objects, 0)]); t1.moveNext$0();)
        this.add$1(0, t1._current);
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --this._collection$_length;
      this._elements = null;
      bucket.splice(index, 1);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._elements = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
      }
    },
    _computeElements$0: function() {
      var t1, result, strings, names, entries, index, i, nums, rest, bucket, $length, i0;
      t1 = this._elements;
      if (t1 != null)
        return t1;
      result = Array(this._collection$_length);
      result.fixed$length = init;
      strings = this._strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = this._nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = this._rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      this._elements = result;
      return result;
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._elements = null;
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        --this._collection$_length;
        this._elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i], element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_HashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  _IdentityHashSet: {
    "^": "_HashSet;_collection$_length,_strings,_nums,_rest,_elements",
    _computeHashCode$1: function(key) {
      return H.objectHashCode(key) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i, t1;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i) {
        t1 = bucket[i];
        if (t1 == null ? element == null : t1 === element)
          return i;
      }
      return -1;
    }
  },
  HashSetIterator: {
    "^": "Object;_set,_elements,_offset,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var elements, offset, t1;
      elements = this._elements;
      offset = this._offset;
      t1 = this._set;
      if (elements !== t1._elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        this._collection$_current = null;
        return false;
      } else {
        this._collection$_current = elements[offset];
        this._offset = offset + 1;
        return true;
      }
    }
  },
  _LinkedHashSet: {
    "^": "_HashSetBase;_collection$_length,_strings,_nums,_rest,_first,_last,_modifications",
    get$iterator: function(_) {
      var t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(this, this._modifications, null, null), [null]);
      t1._cell = t1._set._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._strings;
        if (strings == null)
          return false;
        return strings[object] != null;
      } else if (typeof object === "number" && (object & 0x3ffffff) === object) {
        nums = this._nums;
        if (nums == null)
          return false;
        return nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(rest[this._computeHashCode$1(object)], object) >= 0;
    },
    lookup$1: function(object) {
      var t1;
      if (!(typeof object === "string" && object !== "__proto__"))
        t1 = typeof object === "number" && (object & 0x3ffffff) === object;
      else
        t1 = true;
      if (t1)
        return this.contains$1(0, object) ? object : null;
      else
        return this._lookup$1(object);
    },
    _lookup$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return;
      return J.$index$asx(bucket, index).get$_element();
    },
    forEach$1: function(_, action) {
      var cell, modifications;
      cell = this._first;
      modifications = this._modifications;
      for (; cell != null;) {
        action.call$1(cell.get$_element());
        if (modifications !== this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(this));
        cell = cell.get$_next();
      }
    },
    get$first: function(_) {
      var t1 = this._first;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1.get$_element();
    },
    get$last: function(_) {
      var t1 = this._last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return t1.get$_element();
    },
    add$1: function(_, element) {
      var strings, table, nums;
      if (typeof element === "string" && element !== "__proto__") {
        strings = this._strings;
        if (strings == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._strings = table;
          strings = table;
        }
        return this._addHashTableEntry$2(strings, element);
      } else if (typeof element === "number" && (element & 0x3ffffff) === element) {
        nums = this._nums;
        if (nums == null) {
          table = Object.create(null);
          table["<non-identifier-key>"] = table;
          delete table["<non-identifier-key>"];
          this._nums = table;
          nums = table;
        }
        return this._addHashTableEntry$2(nums, element);
      } else
        return this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket;
      rest = this._rest;
      if (rest == null) {
        rest = P._LinkedHashSet__newHashTable();
        this._rest = rest;
      }
      hash = this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [this._newLinkedCell$1(element)];
      else {
        if (this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(this._newLinkedCell$1(element));
      }
      return true;
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(objects); t1.moveNext$0();)
        this.add$1(0, t1.get$current());
    },
    remove$1: function(_, object) {
      if (typeof object === "string" && object !== "__proto__")
        return this._removeHashTableEntry$2(this._strings, object);
      else if (typeof object === "number" && (object & 0x3ffffff) === object)
        return this._removeHashTableEntry$2(this._nums, object);
      else
        return this._remove$1(object);
    },
    _remove$1: function(object) {
      var rest, bucket, index;
      rest = this._rest;
      if (rest == null)
        return false;
      bucket = rest[this._computeHashCode$1(object)];
      index = this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      if (this._collection$_length > 0) {
        this._last = null;
        this._first = null;
        this._rest = null;
        this._nums = null;
        this._strings = null;
        this._collection$_length = 0;
        this._modifications = this._modifications + 1 & 67108863;
      }
    },
    _addHashTableEntry$2: function(table, element) {
      if (table[element] != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = table[element];
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _newLinkedCell$1: function(element) {
      var cell, last;
      cell = new P.LinkedHashSetCell(element, null, null);
      if (this._first == null) {
        this._last = cell;
        this._first = cell;
      } else {
        last = this._last;
        cell._previous = last;
        last.set$_next(cell);
        this._last = cell;
      }
      ++this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var previous, next;
      previous = cell.get$_previous();
      next = cell.get$_next();
      if (previous == null)
        this._first = next;
      else
        previous.set$_next(next);
      if (next == null)
        this._last = previous;
      else
        next.set$_previous(previous);
      --this._collection$_length;
      this._modifications = this._modifications + 1 & 67108863;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 0x3ffffff;
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq(bucket[i].get$_element(), element))
          return i;
      return -1;
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_LinkedHashSet__newHashTable: function() {
        var table = Object.create(null);
        table["<non-identifier-key>"] = table;
        delete table["<non-identifier-key>"];
        return table;
      }}
  },
  LinkedHashSetCell: {
    "^": "Object;_element<,_next@,_previous@"
  },
  LinkedHashSetIterator: {
    "^": "Object;_set,_modifications,_cell,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1 = this._set;
      if (this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = this._cell;
        if (t1 == null) {
          this._collection$_current = null;
          return false;
        } else {
          this._collection$_current = t1.get$_element();
          this._cell = this._cell.get$_next();
          return true;
        }
      }
    }
  },
  UnmodifiableListView: {
    "^": "UnmodifiableListBase;_collection$_source",
    get$length: function(_) {
      return this._collection$_source.length;
    },
    $index: function(_, index) {
      var t1 = this._collection$_source;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }
  },
  _HashSetBase: {
    "^": "IterableBase;",
    toList$1$growable: function(_, growable) {
      var result, t1, i, element, i0;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(result, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      for (t1 = this.get$iterator(this), i = 0; t1.moveNext$0(); i = i0) {
        element = t1.get$current();
        i0 = i + 1;
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = element;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  IterableBase: {
    "^": "Object;",
    map$1: function(_, f) {
      return H.MappedIterable_MappedIterable(this, f, H.getRuntimeTypeArgument(this, "IterableBase", 0), null);
    },
    where$1: function(_, f) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(this, f), [H.getRuntimeTypeArgument(this, "IterableBase", 0)]);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq(t1.get$current(), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    fold$2: function(_, initialValue, combine) {
      var t1, value;
      for (t1 = this.get$iterator(this), value = initialValue; t1.moveNext$0();)
        value = combine.call$2(value, t1.get$current());
      return value;
    },
    join$1: function(_, separator) {
      var iterator, buffer, t1;
      iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      buffer = P.StringBuffer$("");
      if (separator === "")
        do {
          t1 = H.S(iterator.get$current());
          buffer._contents += t1;
        } while (iterator.moveNext$0());
      else {
        buffer.write$1(H.S(iterator.get$current()));
        for (; iterator.moveNext$0();) {
          buffer._contents += separator;
          t1 = H.S(iterator.get$current());
          buffer._contents += t1;
        }
      }
      return buffer._contents;
    },
    any$1: function(_, f) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (f.call$1(t1.get$current()) === true)
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "IterableBase", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var it, count;
      it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return this.get$isEmpty(this) !== true;
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    get$last: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current();
      while (it.moveNext$0());
      return result;
    },
    get$single: function(_) {
      var it, result;
      it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current();
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      var t1, element;
      for (t1 = this.get$iterator(this); t1.moveNext$0();) {
        element = t1.get$current();
        if (test.call$1(element) === true)
          return element;
      }
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    elementAt$1: function(_, index) {
      var t1, remaining, element, t2;
      if (typeof index !== "number" || Math.floor(index) !== index || index < 0)
        throw H.wrapException(P.RangeError$value(index));
      for (t1 = this.get$iterator(this), remaining = index; t1.moveNext$0();) {
        element = t1.get$current();
        t2 = J.getInterceptor(remaining);
        if (t2.$eq(remaining, 0))
          return element;
        remaining = t2.$sub(remaining, 1);
      }
      throw H.wrapException(P.RangeError$value(index));
    },
    toString$0: function(_) {
      return P._iterableToString(this);
    },
    $isIterable: true,
    $asIterable: null
  },
  ListBase: {
    "^": "Object+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  ListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new H.ListIterator(receiver, this.get$length(receiver), 0, null), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(P.StateError$("No elements"));
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    contains$1: function(receiver, element) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < this.get$length(receiver); ++i) {
        if (J.$eq(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    any$1: function(receiver, test) {
      var $length, i;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (test.call$1(this.$index(receiver, i)) === true)
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      var $length, i, element;
      $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        element = this.$index(receiver, i);
        if (test.call$1(element) === true)
          return element;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(P.StateError$("No matching element"));
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    join$1: function(receiver, separator) {
      var buffer;
      if (this.get$length(receiver) === 0)
        return "";
      buffer = P.StringBuffer$("");
      buffer.writeAll$2(receiver, separator);
      return buffer._contents;
    },
    where$1: function(receiver, test) {
      return H.setRuntimeTypeInfo(new H.WhereIterable(receiver, test), [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
    },
    map$1: function(receiver, f) {
      return H.setRuntimeTypeInfo(new H.MappedListIterable(receiver, f), [null, null]);
    },
    fold$2: function(receiver, initialValue, combine) {
      var $length, value, i;
      $length = this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, this.$index(receiver, i));
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, null);
    },
    toList$1$growable: function(receiver, growable) {
      var result, t1, i;
      if (growable) {
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
        C.JSArray_methods.set$length(result, this.get$length(receiver));
      } else {
        t1 = Array(this.get$length(receiver));
        t1.fixed$length = init;
        result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      }
      for (i = 0; i < this.get$length(receiver); ++i) {
        t1 = this.$index(receiver, i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1 = this.get$length(receiver);
      this.set$length(receiver, t1 + 1);
      this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var t1, element, t2;
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        element = t1.get$current();
        t2 = this.get$length(receiver);
        this.set$length(receiver, t2 + 1);
        this.$indexSet(receiver, t2, element);
      }
    },
    remove$1: function(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element)) {
          this.setRange$4(receiver, i, this.get$length(receiver) - 1, receiver, i + 1);
          this.set$length(receiver, this.get$length(receiver) - 1);
          return true;
        }
      return false;
    },
    clear$0: function(receiver) {
      this.set$length(receiver, 0);
    },
    sort$1: function(receiver, compare) {
      H.Sort__doSort(receiver, 0, this.get$length(receiver) - 1, compare);
    },
    _rangeCheck$2: function(receiver, start, end) {
      var t1 = J.getInterceptor$n(start);
      if (t1.$lt(start, 0) || t1.$gt(start, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(start, 0, this.get$length(receiver)));
      t1 = J.getInterceptor$n(end);
      if (t1.$lt(end, start) || t1.$gt(end, this.get$length(receiver)))
        throw H.wrapException(P.RangeError$range(end, start, this.get$length(receiver)));
    },
    sublist$2: function(receiver, start, end) {
      var $length, result, i, t1;
      this._rangeCheck$2(receiver, start, end);
      $length = end - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i) {
        t1 = this.$index(receiver, start + i);
        if (i >= result.length)
          return H.ioore(result, i);
        result[i] = t1;
      }
      return result;
    },
    getRange$2: function(receiver, start, end) {
      this._rangeCheck$2(receiver, start, end);
      return H.SubListIterable$(receiver, start, end, null);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, t1, i;
      if (start > this.get$length(receiver))
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(receiver)));
      if (end < start || end > this.get$length(receiver))
        H.throwExpression(P.RangeError$range(end, start, this.get$length(receiver)));
      $length = end - start;
      if ($length === 0)
        return;
      t1 = J.getInterceptor$asx(iterable);
      if (skipCount + $length > t1.get$length(iterable))
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount < start)
        for (i = $length - 1; i >= 0; --i)
          this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
      else
        for (i = 0; i < $length; ++i)
          this.$indexSet(receiver, start + i, t1.$index(iterable, skipCount + i));
    },
    indexOf$2: function(receiver, element, startIndex) {
      var t1, i;
      t1 = this.get$length(receiver);
      if (typeof startIndex !== "number")
        return startIndex.$ge();
      if (startIndex >= t1)
        return -1;
      if (startIndex < 0)
        startIndex = 0;
      for (i = startIndex; i < this.get$length(receiver); ++i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    indexOf$1: function($receiver, element) {
      return this.indexOf$2($receiver, element, 0);
    },
    lastIndexOf$2: function(receiver, element, startIndex) {
      var i;
      startIndex = this.get$length(receiver) - 1;
      for (i = startIndex; i >= 0; --i)
        if (J.$eq(this.$index(receiver, i), element))
          return i;
      return -1;
    },
    lastIndexOf$1: function($receiver, element) {
      return this.lastIndexOf$2($receiver, element, null);
    },
    get$reversed: function(receiver) {
      return H.setRuntimeTypeInfo(new H.ReversedListIterable(receiver), [null]);
    },
    toString$0: function(receiver) {
      var result;
      if ($.get$_toStringVisiting().contains$1(0, receiver))
        return "[...]";
      result = P.StringBuffer$("");
      try {
        $.get$_toStringVisiting().add$1(0, receiver);
        result.write$1("[");
        result.writeAll$2(receiver, ", ");
        result.write$1("]");
      } finally {
        $.get$_toStringVisiting().remove$1(0, receiver);
      }
      return result.get$_contents();
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  Maps_mapToString_closure: {
    "^": "Closure0:58;box_0,result_1",
    call$2: function(k, v) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1(", ");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(k);
      t1.write$1(": ");
      t1.write$1(v);
    },
    $isFunction: true
  },
  ListQueue: {
    "^": "IterableBase;_table,_head,_tail,_modificationCount",
    get$iterator: function(_) {
      var t1 = new P._ListQueueIterator(this, this._tail, this._modificationCount, this._head, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    forEach$1: function(_, action) {
      var modificationCount, i, t1;
      modificationCount = this._modificationCount;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        action.call$1(t1[i]);
        if (modificationCount !== this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first: function(_) {
      var t1, t2;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    get$last: function(_) {
      var t1, t2, t3;
      t1 = this._head;
      t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(P.StateError$("No elements"));
      t1 = this._table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    toList$1$growable: function(_, growable) {
      var list, t1;
      if (growable) {
        list = H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(this, 0)]);
        C.JSArray_methods.set$length(list, this.get$length(this));
      } else {
        t1 = Array(this.get$length(this));
        t1.fixed$length = init;
        list = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      }
      this._writeToList$1(list);
      return list;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(_, element) {
      this._add$1(0, element);
    },
    addAll$1: function(_, elements) {
      var addCount, $length, t1, t2, t3, newCapacity, newTable, endSpace, preSpace;
      addCount = elements.length;
      $length = this.get$length(this);
      t1 = $length + addCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3) {
        newCapacity = P.ListQueue__nextPowerOf2(t1);
        if (typeof newCapacity !== "number")
          return H.iae(newCapacity);
        t2 = Array(newCapacity);
        t2.fixed$length = init;
        newTable = H.setRuntimeTypeInfo(t2, [H.getTypeArgumentByIndex(this, 0)]);
        this._tail = this._writeToList$1(newTable);
        this._table = newTable;
        this._head = 0;
        H.IterableMixinWorkaround_setRangeList(newTable, $length, t1, elements, 0);
        this._tail += addCount;
      } else {
        t1 = this._tail;
        endSpace = t3 - t1;
        if (addCount < endSpace) {
          H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + addCount, elements, 0);
          this._tail += addCount;
        } else {
          preSpace = addCount - endSpace;
          H.IterableMixinWorkaround_setRangeList(t2, t1, t1 + endSpace, elements, 0);
          t1 = this._table;
          H.IterableMixinWorkaround_setRangeList(t1, 0, preSpace, elements, endSpace);
          this._tail = preSpace;
        }
      }
      ++this._modificationCount;
    },
    remove$1: function(_, object) {
      var i, t1;
      for (i = this._head; i !== this._tail; i = (i + 1 & this._table.length - 1) >>> 0) {
        t1 = this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        if (J.$eq(t1[i], object)) {
          this._remove$1(i);
          ++this._modificationCount;
          return true;
        }
      }
      return false;
    },
    clear$0: function(_) {
      var i, t1, t2, t3, t4;
      i = this._head;
      t1 = this._tail;
      if (i !== t1) {
        for (t2 = this._table, t3 = t2.length, t4 = t3 - 1; i !== t1; i = (i + 1 & t4) >>> 0) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = null;
        }
        this._tail = 0;
        this._head = 0;
        ++this._modificationCount;
      }
    },
    toString$0: function(_) {
      return H.IterableMixinWorkaround_toStringIterable(this, "{", "}");
    },
    removeFirst$0: function() {
      var t1, t2, t3, result;
      t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(P.StateError$("No elements"));
      ++this._modificationCount;
      t2 = this._table;
      t3 = t2.length;
      if (t1 >= t3)
        return H.ioore(t2, t1);
      result = t2[t1];
      t2[t1] = null;
      this._head = (t1 + 1 & t3 - 1) >>> 0;
      return result;
    },
    _add$1: function(_, element) {
      var t1, t2, t3;
      t1 = this._table;
      t2 = this._tail;
      t3 = t1.length;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      t1[t2] = element;
      t3 = (t2 + 1 & t3 - 1) >>> 0;
      this._tail = t3;
      if (this._head === t3)
        this._grow$0();
      ++this._modificationCount;
    },
    _remove$1: function(offset) {
      var t1, t2, mask, t3, t4, i, prevOffset, nextOffset;
      t1 = this._table;
      t2 = t1.length;
      mask = t2 - 1;
      t3 = this._head;
      t4 = this._tail;
      if ((offset - t3 & mask) >>> 0 < (t4 - offset & mask) >>> 0) {
        for (i = offset; i !== t3; i = prevOffset) {
          prevOffset = (i - 1 & mask) >>> 0;
          if (prevOffset < 0 || prevOffset >= t2)
            return H.ioore(t1, prevOffset);
          t4 = t1[prevOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        this._head = (t3 + 1 & mask) >>> 0;
        return (offset + 1 & mask) >>> 0;
      } else {
        t3 = (t4 - 1 & mask) >>> 0;
        this._tail = t3;
        for (i = offset; i !== t3; i = nextOffset) {
          nextOffset = (i + 1 & mask) >>> 0;
          if (nextOffset < 0 || nextOffset >= t2)
            return H.ioore(t1, nextOffset);
          t4 = t1[nextOffset];
          if (i < 0 || i >= t2)
            return H.ioore(t1, i);
          t1[i] = t4;
        }
        if (t3 < 0 || t3 >= t2)
          return H.ioore(t1, t3);
        t1[t3] = null;
        return offset;
      }
    },
    _grow$0: function() {
      var t1, newTable, t2, split;
      t1 = Array(this._table.length * 2);
      t1.fixed$length = init;
      newTable = H.setRuntimeTypeInfo(t1, [H.getTypeArgumentByIndex(this, 0)]);
      t1 = this._table;
      t2 = this._head;
      split = t1.length - t2;
      H.IterableMixinWorkaround_setRangeList(newTable, 0, split, t1, t2);
      t1 = this._head;
      t2 = this._table;
      H.IterableMixinWorkaround_setRangeList(newTable, split, split + t1, t2, 0);
      this._head = 0;
      this._tail = this._table.length;
      this._table = newTable;
    },
    _writeToList$1: function(target) {
      var t1, t2, t3, $length, firstPartSize;
      t1 = this._head;
      t2 = this._tail;
      t3 = this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        H.IterableMixinWorkaround_setRangeList(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        H.IterableMixinWorkaround_setRangeList(target, 0, firstPartSize, t3, t1);
        t1 = this._tail;
        t2 = this._table;
        H.IterableMixinWorkaround_setRangeList(target, firstPartSize, firstPartSize + t1, t2, 0);
        return this._tail + firstPartSize;
      }
    },
    ListQueue$1: function(initialCapacity, $E) {
      var t1 = Array(8);
      t1.fixed$length = init;
      this._table = H.setRuntimeTypeInfo(t1, [$E]);
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {"^": "ListQueue__INITIAL_CAPACITY", ListQueue__nextPowerOf2: function(number) {
        var nextNumber;
        if (typeof number !== "number")
          return number.$shl();
        number = (number << 2 >>> 0) - 1;
        for (; true; number = nextNumber) {
          nextNumber = (number & number - 1) >>> 0;
          if (nextNumber === 0)
            return number;
        }
      }}
  },
  _ListQueueIterator: {
    "^": "Object;_queue,_end,_modificationCount,_collection$_position,_collection$_current",
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._queue;
      if (this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = this._collection$_position;
      if (t2 === this._end) {
        this._collection$_current = null;
        return false;
      }
      t1 = t1._table;
      t3 = t1.length;
      if (t2 >= t3)
        return H.ioore(t1, t2);
      this._collection$_current = t1[t2];
      this._collection$_position = (t2 + 1 & t3 - 1) >>> 0;
      return true;
    }
  },
  _SplayTreeNode: {
    "^": "Object;key>,left>,right>",
    $is_SplayTreeNode: true
  },
  _SplayTreeMapNode: {
    "^": "_SplayTreeNode;value*,key,left,right",
    $as_SplayTreeNode: function($K, $V) {
      return [$K];
    }
  },
  _SplayTree: {
    "^": "Object;",
    _splay$1: function(key) {
      var current, left, right, left0, comp, t1, tmp, current0;
      current = this._root;
      if (current == null)
        return -1;
      left = this._dummy;
      for (right = left, left0 = right, comp = null; true;) {
        comp = this._compare$2(current.key, key);
        t1 = J.getInterceptor$n(comp);
        if (t1.$gt(comp, 0)) {
          t1 = current.left;
          if (t1 == null)
            break;
          comp = this._compare$2(t1.key, key);
          if (J.$gt$n(comp, 0)) {
            tmp = current.left;
            current.left = tmp.right;
            tmp.right = current;
            if (tmp.left == null) {
              current = tmp;
              break;
            }
            current = tmp;
          }
          right.left = current;
          current0 = current.left;
          right = current;
          current = current0;
        } else {
          if (t1.$lt(comp, 0)) {
            t1 = current.right;
            if (t1 == null)
              break;
            comp = this._compare$2(t1.key, key);
            if (J.$lt$n(comp, 0)) {
              tmp = current.right;
              current.right = tmp.left;
              tmp.left = current;
              if (tmp.right == null) {
                current = tmp;
                break;
              }
              current = tmp;
            }
            left0.right = current;
            current0 = current.right;
          } else
            break;
          left0 = current;
          current = current0;
        }
      }
      left0.right = current.left;
      right.left = current.right;
      current.left = left.right;
      current.right = left.left;
      this._root = current;
      left.right = null;
      left.left = null;
      ++this._splayCount;
      return comp;
    },
    _splayMax$1: function(node) {
      var current, current0;
      for (current = node; current0 = current.right, current0 != null; current = current0) {
        current.right = current0.left;
        current0.left = current;
      }
      return current;
    },
    _remove$1: function(key) {
      var result, t1, right;
      if (this._root == null)
        return;
      if (!J.$eq(this._splay$1(key), 0))
        return;
      result = this._root;
      --this._count;
      t1 = result.left;
      if (t1 == null)
        this._root = result.right;
      else {
        right = result.right;
        t1 = this._splayMax$1(t1);
        this._root = t1;
        t1.right = right;
      }
      ++this._modificationCount;
      return result;
    },
    _addNewRoot$2: function(node, comp) {
      var t1, t2;
      ++this._count;
      ++this._modificationCount;
      if (this._root == null) {
        this._root = node;
        return;
      }
      t1 = J.$lt$n(comp, 0);
      t2 = this._root;
      if (t1) {
        node.left = t2;
        node.right = t2.right;
        t2.right = null;
      } else {
        node.right = t2;
        node.left = t2.left;
        t2.left = null;
      }
      this._root = node;
    }
  },
  SplayTreeMap: {
    "^": "_SplayTree;_comparator,_validKey,_root,_dummy,_count,_modificationCount,_splayCount",
    _comparator$2: function(arg0, arg1) {
      return this._comparator.call$2(arg0, arg1);
    },
    _validKey$1: function(arg0) {
      return this._validKey.call$1(arg0);
    },
    _compare$2: function(key1, key2) {
      return this._comparator$2(key1, key2);
    },
    $index: function(_, key) {
      if (key == null)
        throw H.wrapException(P.ArgumentError$(key));
      if (this._validKey$1(key) !== true)
        return;
      if (this._root != null)
        if (J.$eq(this._splay$1(key), 0))
          return this._root.value;
      return;
    },
    remove$1: function(_, key) {
      var mapRoot;
      if (this._validKey$1(key) !== true)
        return;
      mapRoot = this._remove$1(key);
      if (mapRoot != null)
        return mapRoot.value;
      return;
    },
    $indexSet: function(_, key, value) {
      var comp;
      if (key == null)
        throw H.wrapException(P.ArgumentError$(key));
      comp = this._splay$1(key);
      if (J.$eq(comp, 0)) {
        this._root.value = value;
        return;
      }
      this._addNewRoot$2(H.setRuntimeTypeInfo(new P._SplayTreeMapNode(value, key, null, null), [null, null]), comp);
    },
    addAll$1: function(_, other) {
      H.IterableMixinWorkaround_forEach(other, new P.SplayTreeMap_addAll_closure(this));
    },
    get$isEmpty: function(_) {
      return this._root == null;
    },
    get$isNotEmpty: function(_) {
      return this._root != null;
    },
    forEach$1: function(_, f) {
      var t1, nodes, node;
      t1 = H.getTypeArgumentByIndex(this, 0);
      nodes = H.setRuntimeTypeInfo(new P._SplayTreeNodeIterator(this, H.setRuntimeTypeInfo([], [P._SplayTreeNode]), this._modificationCount, this._splayCount, null), [t1]);
      nodes._SplayTreeIterator$1(this, [P._SplayTreeNode, t1]);
      for (; nodes.moveNext$0();) {
        node = nodes.get$current();
        t1 = J.getInterceptor$x(node);
        f.call$2(t1.get$key(node), t1.get$value(node));
      }
    },
    get$length: function(_) {
      return this._count;
    },
    clear$0: function(_) {
      this._root = null;
      this._count = 0;
      ++this._modificationCount;
    },
    containsKey$1: function(key) {
      return this._validKey$1(key) === true && J.$eq(this._splay$1(key), 0);
    },
    get$keys: function() {
      return H.setRuntimeTypeInfo(new P._SplayTreeKeyIterable(this), [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var t1 = new P._SplayTreeValueIterable(this);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    $isSplayTreeMap: true,
    $as_SplayTree: function($K, $V) {
      return [$K];
    },
    $asMap: null,
    $isMap: true,
    static: {SplayTreeMap$: function(compare, isValidKey, $K, $V) {
        var t1, t2;
        t1 = P.Comparable_compare$closure();
        t2 = new P.SplayTreeMap_closure($K);
        return H.setRuntimeTypeInfo(new P.SplayTreeMap(t1, t2, null, H.setRuntimeTypeInfo(new P._SplayTreeNode(null, null, null), [$K]), 0, 0, 0), [$K, $V]);
      }}
  },
  SplayTreeMap_closure: {
    "^": "Closure0:30;K_0",
    call$1: function(v) {
      var t1 = H.checkSubtypeOfRuntimeType(v, this.K_0);
      return t1;
    },
    $isFunction: true
  },
  SplayTreeMap_addAll_closure: {
    "^": "Closure0;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 59, 14, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V1", args: [K, V]};
      }, this.this_0, "SplayTreeMap");
    }
  },
  _SplayTreeIterator: {
    "^": "Object;",
    get$current: function() {
      var t1 = this._currentNode;
      if (t1 == null)
        return;
      return this._getValue$1(t1);
    },
    _findLeftMostDescendent$1: function(node) {
      var t1;
      for (t1 = this._workList; node != null;) {
        t1.push(node);
        node = node.left;
      }
    },
    moveNext$0: function() {
      var t1, t2, t3;
      t1 = this._tree;
      if (this._modificationCount !== t1._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = this._workList;
      if (t2.length === 0) {
        this._currentNode = null;
        return false;
      }
      if (t1._splayCount !== this._splayCount && this._currentNode != null) {
        t3 = this._currentNode;
        C.JSArray_methods.set$length(t2, 0);
        if (t3 == null)
          this._findLeftMostDescendent$1(t1._root);
        else {
          t1._splay$1(t3.key);
          this._findLeftMostDescendent$1(t1._root.right);
        }
      }
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t1 = t2.pop();
      this._currentNode = t1;
      this._findLeftMostDescendent$1(t1.right);
      return true;
    },
    _SplayTreeIterator$1: function(tree, $T) {
      this._findLeftMostDescendent$1(tree._root);
    }
  },
  _SplayTreeKeyIterable: {
    "^": "IterableBase;_tree",
    get$length: function(_) {
      return this._tree._count;
    },
    get$isEmpty: function(_) {
      return this._tree._count === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._tree;
      t2 = new P._SplayTreeKeyIterator(t1, H.setRuntimeTypeInfo([], [P._SplayTreeNode]), t1._modificationCount, t1._splayCount, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._SplayTreeIterator$1(t1, H.getTypeArgumentByIndex(this, 0));
      return t2;
    },
    $isEfficientLength: true
  },
  _SplayTreeValueIterable: {
    "^": "IterableBase;_map",
    get$length: function(_) {
      return this._map._count;
    },
    get$isEmpty: function(_) {
      return this._map._count === 0;
    },
    get$iterator: function(_) {
      var t1, t2;
      t1 = this._map;
      t2 = new P._SplayTreeValueIterator(t1, H.setRuntimeTypeInfo([], [P._SplayTreeNode]), t1._modificationCount, t1._splayCount, null);
      t2.$builtinTypeInfo = this.$builtinTypeInfo;
      t2._SplayTreeIterator$1(t1, H.getTypeArgumentByIndex(this, 1));
      return t2;
    },
    $asIterableBase: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    },
    $isEfficientLength: true
  },
  _SplayTreeKeyIterator: {
    "^": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
    _getValue$1: function(node) {
      return node.key;
    }
  },
  _SplayTreeValueIterator: {
    "^": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
    _getValue$1: function(node) {
      return node.value;
    },
    $as_SplayTreeIterator: function($K, $V) {
      return [$V];
    }
  },
  _SplayTreeNodeIterator: {
    "^": "_SplayTreeIterator;_tree,_workList,_modificationCount,_splayCount,_currentNode",
    _getValue$1: function(node) {
      return node;
    },
    $as_SplayTreeIterator: function($K) {
      return [[P._SplayTreeNode, $K]];
    }
  }
}],
["dart.convert", "dart:convert", , P, {
  "^": "",
  _convertJsonToDart: function(json, reviver) {
    var revive = new P._convertJsonToDart_closure();
    return revive.call$2(null, new P._convertJsonToDart_walk(revive).call$1(json));
  },
  _parseJson: function(source, reviver) {
    var parsed, e, t1, exception;
    t1 = source;
    if (typeof t1 !== "string")
      throw H.wrapException(P.ArgumentError$(source));
    parsed = null;
    try {
      parsed = JSON.parse(source);
    } catch (exception) {
      t1 = H.unwrapException(exception);
      e = t1;
      throw H.wrapException(P.FormatException$(String(e)));
    }

    return P._convertJsonToDart(parsed, reviver);
  },
  _convertJsonToDart_closure: {
    "^": "Closure0:58;",
    call$2: function(key, value) {
      return value;
    },
    $isFunction: true
  },
  _convertJsonToDart_walk: {
    "^": "Closure0:30;revive_0",
    call$1: function(e) {
      var list, t1, i, keys, map, key, proto;
      if (e == null || typeof e != "object")
        return e;
      if (Object.getPrototypeOf(e) === Array.prototype) {
        list = e;
        for (t1 = this.revive_0, i = 0; i < list.length; ++i)
          list[i] = t1.call$2(i, this.call$1(list[i]));
        return list;
      }
      keys = Object.keys(e);
      map = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      for (t1 = this.revive_0, i = 0; i < keys.length; ++i) {
        key = keys[i];
        map.$indexSet(0, key, t1.call$2(key, this.call$1(e[key])));
      }
      proto = e.__proto__;
      if (typeof proto !== "undefined" && proto !== Object.prototype)
        map.$indexSet(0, "__proto__", t1.call$2("__proto__", this.call$1(proto)));
      return map;
    },
    $isFunction: true
  },
  Codec: {
    "^": "Object;"
  },
  Converter: {
    "^": "Object;"
  },
  Encoding: {
    "^": "Codec;",
    $asCodec: function() {
      return [P.String, [P.List, P.$int]];
    }
  },
  JsonCodec: {
    "^": "Codec;_reviver,_toEncodable",
    decode$2$reviver: function(source, reviver) {
      return P._parseJson(source, this.get$decoder()._reviver);
    },
    decode$1: function(source) {
      return this.decode$2$reviver(source, null);
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  },
  JsonDecoder: {
    "^": "Converter;_reviver",
    $asConverter: function() {
      return [P.String, P.Object];
    }
  },
  Utf8Codec: {
    "^": "Encoding;_allowMalformed",
    get$name: function(_) {
      return "utf-8";
    },
    get$encoder: function() {
      return new P.Utf8Encoder();
    }
  },
  Utf8Encoder: {
    "^": "Converter;",
    convert$1: function(string) {
      var t1, t2, encoder;
      t1 = J.getInterceptor$asx(string);
      t2 = J.$mul$ns(t1.get$length(string), 3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = H.setRuntimeTypeInfo(Array(t2), [P.$int]);
      encoder = new P._Utf8Encoder(0, 0, t2);
      if (encoder._fillBuffer$3(string, 0, t1.get$length(string)) !== t1.get$length(string))
        encoder._writeSurrogate$2(t1.codeUnitAt$1(string, J.$sub$n(t1.get$length(string), 1)), 0);
      return C.JSArray_methods.sublist$2(t2, 0, encoder._bufferIndex);
    },
    $asConverter: function() {
      return [P.String, [P.List, P.$int]];
    }
  },
  _Utf8Encoder: {
    "^": "Object;_carry,_bufferIndex,_buffer",
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var t1, t2, rune, t3, t4;
      t1 = this._buffer;
      t2 = this._bufferIndex;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10 >>> 0) | nextCodeUnit & 1023;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = (240 | rune >>> 18) >>> 0;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = t2 + 1;
        this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        t3 = t2 + 1;
        this._bufferIndex = t3;
        t4 = t1.length;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = t3 + 1;
        this._bufferIndex = t2;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, t3, stringIndex, codeUnit, t4, stringIndex0, t5;
      if (start !== end && (J.codeUnitAt$1$s(str, J.$sub$n(end, 1)) & 64512) === 55296)
        end = J.$sub$n(end, 1);
      if (typeof end !== "number")
        return H.iae(end);
      t1 = this._buffer;
      t2 = t1.length;
      t3 = J.getInterceptor$s(str);
      stringIndex = start;
      for (; stringIndex < end; ++stringIndex) {
        codeUnit = t3.codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t4 = this._bufferIndex;
          if (t4 >= t2)
            break;
          this._bufferIndex = t4 + 1;
          t1[t4] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (this._writeSurrogate$2(codeUnit, t3.codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t4 = this._bufferIndex;
          t5 = t4 + 1;
          if (t5 >= t2)
            break;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 192 | codeUnit >>> 6;
          this._bufferIndex = t5 + 1;
          t1[t5] = 128 | codeUnit & 63;
        } else {
          t4 = this._bufferIndex;
          if (t4 + 2 >= t2)
            break;
          t5 = t4 + 1;
          this._bufferIndex = t5;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 224 | codeUnit >>> 12;
          t4 = t5 + 1;
          this._bufferIndex = t4;
          if (t5 >= t2)
            return H.ioore(t1, t5);
          t1[t5] = 128 | codeUnit >>> 6 & 63;
          this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    },
    static: {"^": "_Utf8Encoder__DEFAULT_BYTE_BUFFER_SIZE"}
  },
  Utf8Decoder: {
    "^": "Converter;_allowMalformed",
    convert$1: function(codeUnits) {
      var buffer, decoder;
      buffer = P.StringBuffer$("");
      decoder = new P._Utf8Decoder(this._allowMalformed, buffer, true, 0, 0, 0);
      decoder.convert$3(codeUnits, 0, J.get$length$asx(codeUnits));
      decoder.flush$0();
      return buffer._contents;
    },
    $asConverter: function() {
      return [[P.List, P.$int], P.String];
    }
  },
  _Utf8Decoder: {
    "^": "Object;_allowMalformed,_stringSink,_isFirstCharacter,_convert$_value,_expectedUnits,_extraUnits",
    close$0: function(_) {
      this.flush$0();
    },
    flush$0: function() {
      if (this._expectedUnits > 0) {
        if (this._allowMalformed !== true)
          throw H.wrapException(P.FormatException$("Unfinished UTF-8 octet sequence"));
        this._stringSink.write$1(H.Primitives_stringFromCharCode(65533));
        this._convert$_value = 0;
        this._expectedUnits = 0;
        this._extraUnits = 0;
      }
    },
    convert$3: function(codeUnits, startIndex, endIndex) {
      var t1, value, expectedUnits, extraUnits, t2, t3, t4, t5, i, unit, t6, i0, t7, to;
      t1 = {};
      value = this._convert$_value;
      expectedUnits = this._expectedUnits;
      extraUnits = this._extraUnits;
      t1.singleBytesCount_0 = 0;
      this._convert$_value = 0;
      this._expectedUnits = 0;
      this._extraUnits = 0;
      t2 = new P._Utf8Decoder_convert_addSingleBytes(t1, this, codeUnits);
      $loop$0:
        for (t3 = this._stringSink, t4 = this._allowMalformed !== true, t5 = J.getInterceptor$asx(codeUnits), i = startIndex; true; i = i0) {
          $multibyte$2: {
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $loop$0;
                unit = t5.$index(codeUnits, i);
                t6 = J.getInterceptor$n(unit);
                if (t6.$and(unit, 192) !== 128) {
                  if (t4)
                    throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16)));
                  this._isFirstCharacter = false;
                  t6 = H.Primitives_stringFromCharCode(65533);
                  t3._contents += t6;
                  expectedUnits = 0;
                  break $multibyte$2;
                } else {
                  value = (value << 6 | t6.$and(unit, 63)) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t6 = extraUnits - 1;
              if (t6 < 0 || t6 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t6);
              if (value <= C.List_127_2047_65535_1114111[t6]) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
                expectedUnits = 0;
                extraUnits = 0;
              }
              if (value > 1114111) {
                if (t4)
                  throw H.wrapException(P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16)));
                value = 65533;
              }
              if (!this._isFirstCharacter || value !== 65279) {
                t6 = H.Primitives_stringFromCharCode(value);
                t3._contents += t6;
              }
              this._isFirstCharacter = false;
            }
          }
          for (; i < endIndex; i = i0) {
            i0 = i + 1;
            unit = t5.$index(codeUnits, i);
            t6 = J.getInterceptor$n(unit);
            if (t6.$lt(unit, 0)) {
              t7 = t1.singleBytesCount_0;
              if (t7 > 0) {
                to = i0 - 1;
                t2.call$2(to - t7, to);
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Negative UTF-8 code unit: -0x" + C.JSNumber_methods.toRadixString$1(t6.$negate(unit), 16)));
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
            } else if (t6.$le(unit, 127)) {
              this._isFirstCharacter = false;
              ++t1.singleBytesCount_0;
            } else {
              t7 = t1.singleBytesCount_0;
              if (t7 > 0) {
                to = i0 - 1;
                t2.call$2(to - t7, to);
              }
              if (t6.$and(unit, 224) === 192) {
                value = t6.$and(unit, 31);
                expectedUnits = 1;
                extraUnits = 1;
                continue $loop$0;
              }
              if (t6.$and(unit, 240) === 224) {
                value = t6.$and(unit, 15);
                expectedUnits = 2;
                extraUnits = 2;
                continue $loop$0;
              }
              if (t6.$and(unit, 248) === 240 && t6.$lt(unit, 245)) {
                value = t6.$and(unit, 7);
                expectedUnits = 3;
                extraUnits = 3;
                continue $loop$0;
              }
              if (t4)
                throw H.wrapException(P.FormatException$("Bad UTF-8 encoding 0x" + t6.toRadixString$1(unit, 16)));
              this._isFirstCharacter = false;
              t6 = H.Primitives_stringFromCharCode(65533);
              t3._contents += t6;
              value = 65533;
              expectedUnits = 0;
              extraUnits = 0;
            }
          }
          break $loop$0;
        }
      t1 = t1.singleBytesCount_0;
      if (t1 > 0)
        t2.call$2(i - t1, endIndex);
      if (expectedUnits > 0) {
        this._convert$_value = value;
        this._expectedUnits = expectedUnits;
        this._extraUnits = extraUnits;
      }
    },
    static: {"^": "_Utf8Decoder__LIMITS"}
  },
  _Utf8Decoder_convert_addSingleBytes: {
    "^": "Closure0:83;box_0,this_1,codeUnits_2",
    call$2: function(from, to) {
      var t1, t2, t3;
      t1 = from === 0 && to === J.get$length$asx(this.codeUnits_2);
      t2 = this.this_1;
      t3 = this.codeUnits_2;
      if (t1)
        t2._stringSink.write$1(P.String_String$fromCharCodes(t3));
      else
        t2._stringSink.write$1(P.String_String$fromCharCodes(J.sublist$2$ax(t3, from, to)));
      this.box_0.singleBytesCount_0 = 0;
    },
    $isFunction: true
  }
}],
["dart.core", "dart:core", , P, {
  "^": "",
  Function__toMangledNames: function(namedArguments) {
    return;
  },
  Comparable_compare: [function(a, b) {
    return J.compareTo$1$ns(a, b);
  }, "call$2", "Comparable_compare$closure", 4, 0, 23, 20, 21],
  Error_safeToString: function(object) {
    var buffer, t1, i, t2, codeUnit;
    if (typeof object === "number" || typeof object === "boolean" || null == object)
      return J.toString$0(object);
    if (typeof object === "string") {
      buffer = new P.StringBuffer("");
      buffer._contents = "\"";
      for (t1 = object.length, i = 0, t2 = "\""; i < t1; ++i) {
        codeUnit = C.JSString_methods.codeUnitAt$1(object, i);
        if (codeUnit <= 31)
          if (codeUnit === 10)
            t2 = buffer._contents += "\\n";
          else if (codeUnit === 13)
            t2 = buffer._contents += "\\r";
          else if (codeUnit === 9)
            t2 = buffer._contents += "\\t";
          else {
            t2 = buffer._contents += "\\x";
            if (codeUnit < 16)
              buffer._contents = t2 + "0";
            else {
              buffer._contents = t2 + "1";
              codeUnit -= 16;
            }
            t2 = H.Primitives_stringFromCharCode(codeUnit < 10 ? 48 + codeUnit : 87 + codeUnit);
            t2 = buffer._contents += t2;
          }
        else if (codeUnit === 92)
          t2 = buffer._contents += "\\\\";
        else if (codeUnit === 34)
          t2 = buffer._contents += "\\\"";
        else {
          t2 = H.Primitives_stringFromCharCode(codeUnit);
          t2 = buffer._contents += t2;
        }
      }
      t1 = t2 + "\"";
      buffer._contents = t1;
      return t1;
    }
    return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
  },
  Exception_Exception: function(message) {
    return new P._ExceptionImplementation(message);
  },
  identical: [function(a, b) {
    return a == null ? b == null : a === b;
  }, "call$2", "identical$closure", 4, 0, 24],
  identityHashCode: [function(object) {
    return H.objectHashCode(object);
  }, "call$1", "identityHashCode$closure", 2, 0, 25],
  List_List$filled: function($length, fill, $E) {
    var result, t1, i;
    result = J.JSArray_JSArray$fixed($length, $E);
    if ($length !== 0 && true)
      for (t1 = result.length, i = 0; i < t1; ++i)
        result[i] = fill;
    return result;
  },
  List_List$from: function(other, growable, $E) {
    var list, t1;
    list = H.setRuntimeTypeInfo([], [$E]);
    for (t1 = J.get$iterator$ax(other); t1.moveNext$0();)
      list.push(t1.get$current());
    if (growable)
      return list;
    list.fixed$length = init;
    return list;
  },
  print: function(object) {
    var line = H.S(object);
    H.printString(line);
  },
  String_String$fromCharCodes: function(charCodes) {
    return H.Primitives_stringFromCharCodes(charCodes.constructor !== Array ? P.List_List$from(charCodes, true, null) : charCodes);
  },
  Function__toMangledNames_closure: {
    "^": "Closure0:58;result_0",
    call$2: function(symbol, value) {
      this.result_0.$indexSet(0, symbol.get$_name(), value);
    },
    $isFunction: true
  },
  NoSuchMethodError_toString_closure: {
    "^": "Closure0:84;box_0",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (t1.i_1 > 0)
        t1.sb_0.write$1(", ");
      t1.sb_0.write$1(key.get$_name());
      t1.sb_0.write$1(": ");
      t1.sb_0.write$1(P.Error_safeToString(value));
      ++t1.i_1;
    },
    $isFunction: true
  },
  bool: {
    "^": "Object;",
    $isbool: true
  },
  "+bool": 0,
  Comparable: {
    "^": "Object;"
  },
  DateTime: {
    "^": "Object;millisecondsSinceEpoch<,isUtc",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDateTime)
        return false;
      return this.millisecondsSinceEpoch === other.millisecondsSinceEpoch && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSNumber_methods.compareTo$1(this.millisecondsSinceEpoch, other.get$millisecondsSinceEpoch());
    },
    get$hashCode: function(_) {
      return this.millisecondsSinceEpoch;
    },
    toString$0: function(_) {
      var t1, y, m, d, h, min, sec, ms;
      t1 = this.isUtc;
      y = P.DateTime__fourDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(this).getFullYear() + 0);
      m = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(this).getMonth() + 1);
      d = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(this).getDate() + 0);
      h = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(this).getHours() + 0);
      min = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(this).getMinutes() + 0);
      sec = P.DateTime__twoDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(this).getSeconds() + 0);
      ms = P.DateTime__threeDigits(t1 ? H.Primitives_lazyAsJsDate(this).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(this).getMilliseconds() + 0);
      if (t1)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    add$1: function(_, duration) {
      return P.DateTime$fromMillisecondsSinceEpoch(this.millisecondsSinceEpoch + duration.get$inMilliseconds(), this.isUtc);
    },
    DateTime$_now$0: function() {
      H.Primitives_lazyAsJsDate(this);
    },
    DateTime$fromMillisecondsSinceEpoch$2$isUtc: function(millisecondsSinceEpoch, isUtc) {
      if (Math.abs(millisecondsSinceEpoch) > 8640000000000000)
        throw H.wrapException(P.ArgumentError$(millisecondsSinceEpoch));
    },
    $isDateTime: true,
    static: {"^": "DateTime_MONDAY,DateTime_TUESDAY,DateTime_WEDNESDAY,DateTime_THURSDAY,DateTime_FRIDAY,DateTime_SATURDAY,DateTime_SUNDAY,DateTime_DAYS_PER_WEEK,DateTime_JANUARY,DateTime_FEBRUARY,DateTime_MARCH,DateTime_APRIL,DateTime_MAY,DateTime_JUNE,DateTime_JULY,DateTime_AUGUST,DateTime_SEPTEMBER,DateTime_OCTOBER,DateTime_NOVEMBER,DateTime_DECEMBER,DateTime_MONTHS_PER_YEAR,DateTime__MAX_MILLISECONDS_SINCE_EPOCH", DateTime_parse: function(formattedString) {
        var match, t1, t2, years, month, day, hour, minute, second, millisecond, addOneMillisecond, t3, sign, hourDifference, minuteDifference, isUtc, millisecondsSinceEpoch;
        match = new H.JSSyntaxRegExp("^([+-]?\\d{4,5})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", H.JSSyntaxRegExp_makeNative("^([+-]?\\d{4,5})-?(\\d\\d)-?(\\d\\d)(?:[ T](\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(.\\d{1,6})?)?)?( ?[zZ]| ?([-+])(\\d\\d)(?::?(\\d\\d))?)?)?$", false, true, false), null, null).firstMatch$1(formattedString);
        if (match != null) {
          t1 = new P.DateTime_parse_parseIntOrZero();
          t2 = match._match;
          if (1 >= t2.length)
            return H.ioore(t2, 1);
          years = H.Primitives_parseInt(t2[1], null, null);
          if (2 >= t2.length)
            return H.ioore(t2, 2);
          month = H.Primitives_parseInt(t2[2], null, null);
          if (3 >= t2.length)
            return H.ioore(t2, 3);
          day = H.Primitives_parseInt(t2[3], null, null);
          if (4 >= t2.length)
            return H.ioore(t2, 4);
          hour = t1.call$1(t2[4]);
          if (5 >= t2.length)
            return H.ioore(t2, 5);
          minute = t1.call$1(t2[5]);
          if (6 >= t2.length)
            return H.ioore(t2, 6);
          second = t1.call$1(t2[6]);
          if (7 >= t2.length)
            return H.ioore(t2, 7);
          millisecond = J.round$0$n(J.$mul$ns(new P.DateTime_parse_parseDoubleOrZero().call$1(t2[7]), 1000));
          if (millisecond === 1000) {
            addOneMillisecond = true;
            millisecond = 999;
          } else
            addOneMillisecond = false;
          t3 = t2.length;
          if (8 >= t3)
            return H.ioore(t2, 8);
          if (t2[8] != null) {
            if (9 >= t3)
              return H.ioore(t2, 9);
            t3 = t2[9];
            if (t3 != null) {
              sign = J.$eq(t3, "-") ? -1 : 1;
              if (10 >= t2.length)
                return H.ioore(t2, 10);
              hourDifference = H.Primitives_parseInt(t2[10], null, null);
              if (11 >= t2.length)
                return H.ioore(t2, 11);
              minuteDifference = t1.call$1(t2[11]);
              if (typeof hourDifference !== "number")
                return H.iae(hourDifference);
              minuteDifference = J.$add$ns(minuteDifference, 60 * hourDifference);
              if (typeof minuteDifference !== "number")
                return H.iae(minuteDifference);
              minute = J.$sub$n(minute, sign * minuteDifference);
            }
            isUtc = true;
          } else
            isUtc = false;
          millisecondsSinceEpoch = H.Primitives_valueFromDecomposedDate(years, month, day, hour, minute, second, millisecond, isUtc);
          return P.DateTime$fromMillisecondsSinceEpoch(addOneMillisecond ? millisecondsSinceEpoch + 1 : millisecondsSinceEpoch, isUtc);
        } else
          throw H.wrapException(P.FormatException$(formattedString));
      }, DateTime$fromMillisecondsSinceEpoch: function(millisecondsSinceEpoch, isUtc) {
        var t1 = new P.DateTime(millisecondsSinceEpoch, isUtc);
        t1.DateTime$fromMillisecondsSinceEpoch$2$isUtc(millisecondsSinceEpoch, isUtc);
        return t1;
      }, DateTime__fourDigits: function(n) {
        var absN, sign;
        absN = Math.abs(n);
        sign = n < 0 ? "-" : "";
        if (absN >= 1000)
          return "" + n;
        if (absN >= 100)
          return sign + "0" + H.S(absN);
        if (absN >= 10)
          return sign + "00" + H.S(absN);
        return sign + "000" + H.S(absN);
      }, DateTime__threeDigits: function(n) {
        if (n >= 100)
          return "" + n;
        if (n >= 10)
          return "0" + n;
        return "00" + n;
      }, DateTime__twoDigits: function(n) {
        if (n >= 10)
          return "" + n;
        return "0" + n;
      }}
  },
  DateTime_parse_parseIntOrZero: {
    "^": "Closure0:85;",
    call$1: function(matched) {
      if (matched == null)
        return 0;
      return H.Primitives_parseInt(matched, null, null);
    },
    $isFunction: true
  },
  DateTime_parse_parseDoubleOrZero: {
    "^": "Closure0:86;",
    call$1: function(matched) {
      if (matched == null)
        return 0;
      return H.Primitives_parseDouble(matched, null);
    },
    $isFunction: true
  },
  $double: {
    "^": "num;",
    $is$double: true
  },
  "+double": 0,
  Duration: {
    "^": "Object;_duration<",
    $add: function(_, other) {
      return P.Duration$(0, 0, this._duration + other.get$_duration(), 0, 0, 0);
    },
    $sub: function(_, other) {
      return P.Duration$(0, 0, this._duration - other.get$_duration(), 0, 0, 0);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return P.Duration$(0, 0, C.JSNumber_methods.toInt$0(C.JSNumber_methods.roundToDouble$0(this._duration * factor)), 0, 0, 0);
    },
    $tdiv: function(_, quotient) {
      if (quotient === 0)
        throw H.wrapException(P.IntegerDivisionByZeroException$());
      return P.Duration$(0, 0, C.JSInt_methods.$tdiv(this._duration, quotient), 0, 0, 0);
    },
    $lt: function(_, other) {
      return this._duration < other.get$_duration();
    },
    $gt: function(_, other) {
      return this._duration > other.get$_duration();
    },
    $le: function(_, other) {
      return this._duration <= other.get$_duration();
    },
    $ge: function(_, other) {
      return this._duration >= other.get$_duration();
    },
    get$inMilliseconds: function() {
      return C.JSInt_methods._tdivFast$1(this._duration, 1000);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDuration)
        return false;
      return this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return this._duration & 0x1FFFFFFF;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, other.get$_duration());
    },
    toString$0: function(_) {
      var t1, t2, twoDigitMinutes, twoDigitSeconds, sixDigitUs;
      t1 = new P.Duration_toString_twoDigits();
      t2 = this._duration;
      if (t2 < 0)
        return "-" + P.Duration$(0, 0, -t2, 0, 0, 0).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 60000000), 60));
      twoDigitSeconds = t1.call$1(C.JSInt_methods.remainder$1(C.JSInt_methods._tdivFast$1(t2, 1000000), 60));
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(C.JSInt_methods.remainder$1(t2, 1000000));
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isDuration: true,
    static: {"^": "Duration_MICROSECONDS_PER_MILLISECOND,Duration_MILLISECONDS_PER_SECOND,Duration_SECONDS_PER_MINUTE,Duration_MINUTES_PER_HOUR,Duration_HOURS_PER_DAY,Duration_MICROSECONDS_PER_SECOND,Duration_MICROSECONDS_PER_MINUTE,Duration_MICROSECONDS_PER_HOUR,Duration_MICROSECONDS_PER_DAY,Duration_MILLISECONDS_PER_MINUTE,Duration_MILLISECONDS_PER_HOUR,Duration_MILLISECONDS_PER_DAY,Duration_SECONDS_PER_HOUR,Duration_SECONDS_PER_DAY,Duration_MINUTES_PER_DAY,Duration_ZERO", Duration$: function(days, hours, microseconds, milliseconds, minutes, seconds) {
        return new P.Duration(days * 86400000000 + hours * 3600000000 + minutes * 60000000 + seconds * 1000000 + milliseconds * 1000 + microseconds);
      }}
  },
  Duration_toString_sixDigits: {
    "^": "Closure0:48;",
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $isFunction: true
  },
  Duration_toString_twoDigits: {
    "^": "Closure0:48;",
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $isFunction: true
  },
  Error: {
    "^": "Object;",
    get$stackTrace: function() {
      return new H._StackTrace(this.$thrownJsError, null);
    },
    $isError: true
  },
  NullThrownError: {
    "^": "Error;",
    toString$0: function(_) {
      return "Throw of null.";
    }
  },
  ArgumentError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 != null)
        return "Illegal argument(s): " + H.S(t1);
      return "Illegal argument(s)";
    },
    static: {ArgumentError$: function(message) {
        return new P.ArgumentError(message);
      }}
  },
  RangeError: {
    "^": "ArgumentError;message",
    toString$0: function(_) {
      return "RangeError: " + H.S(this.message);
    },
    static: {RangeError$: function(message) {
        return new P.RangeError(message);
      }, RangeError$value: function(value) {
        return new P.RangeError("value " + H.S(value));
      }, RangeError$range: function(value, start, end) {
        return new P.RangeError("value " + H.S(value) + " not in range " + H.S(start) + ".." + H.S(end));
      }}
  },
  NoSuchMethodError: {
    "^": "Error;_core$_receiver,_memberName,_core$_arguments,_namedArguments,_existingArgumentNames",
    toString$0: function(_) {
      var t1, t2, t3, t4, t5, str;
      t1 = {};
      t1.sb_0 = P.StringBuffer$("");
      t1.i_1 = 0;
      for (t2 = this._core$_arguments, t3 = 0; t4 = t2.length, t3 < t4; t3 = ++t1.i_1) {
        if (t3 > 0) {
          t5 = t1.sb_0;
          t5._contents += ", ";
        }
        t5 = t1.sb_0;
        if (t3 < 0)
          return H.ioore(t2, t3);
        str = P.Error_safeToString(t2[t3]);
        t5._contents += typeof str === "string" ? str : H.S(str);
      }
      this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(t1));
      return "NoSuchMethodError : method not found: '" + H.S(this._memberName) + "'\nReceiver: " + H.S(P.Error_safeToString(this._core$_receiver)) + "\nArguments: [" + t1.sb_0._contents + "]";
    },
    $isNoSuchMethodError: true,
    static: {NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames) {
        return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments, existingArgumentNames);
      }}
  },
  UnsupportedError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    },
    static: {UnsupportedError$: function(message) {
        return new P.UnsupportedError(message);
      }}
  },
  UnimplementedError: {
    "^": "Error;message",
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + H.S(t1) : "UnimplementedError";
    },
    $isError: true,
    static: {UnimplementedError$: function(message) {
        return new P.UnimplementedError(message);
      }}
  },
  StateError: {
    "^": "Error;message",
    toString$0: function(_) {
      return "Bad state: " + this.message;
    },
    static: {StateError$: function(message) {
        return new P.StateError(message);
      }}
  },
  ConcurrentModificationError: {
    "^": "Error;modifiedObject",
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + H.S(P.Error_safeToString(t1)) + ".";
    },
    static: {ConcurrentModificationError$: function(modifiedObject) {
        return new P.ConcurrentModificationError(modifiedObject);
      }}
  },
  OutOfMemoryError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Out of Memory";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  StackOverflowError: {
    "^": "Object;",
    toString$0: function(_) {
      return "Stack Overflow";
    },
    get$stackTrace: function() {
      return;
    },
    $isError: true
  },
  CyclicInitializationError: {
    "^": "Error;variableName",
    toString$0: function(_) {
      return "Reading static variable '" + this.variableName + "' during its initialization";
    },
    static: {CyclicInitializationError$: function(variableName) {
        return new P.CyclicInitializationError(variableName);
      }}
  },
  _ExceptionImplementation: {
    "^": "Object;message",
    toString$0: function(_) {
      var t1 = this.message;
      if (t1 == null)
        return "Exception";
      return "Exception: " + H.S(t1);
    }
  },
  FormatException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "FormatException: " + H.S(this.message);
    },
    static: {FormatException$: function(message) {
        return new P.FormatException(message);
      }}
  },
  IntegerDivisionByZeroException: {
    "^": "Object;",
    toString$0: function(_) {
      return "IntegerDivisionByZeroException";
    },
    static: {IntegerDivisionByZeroException$: function() {
        return new P.IntegerDivisionByZeroException();
      }}
  },
  Expando: {
    "^": "Object;name>",
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    },
    $index: function(_, object) {
      var values = H.Primitives_getProperty(object, "expando$values");
      return values == null ? null : H.Primitives_getProperty(values, this._getKey$0());
    },
    $indexSet: function(_, object, value) {
      var values = H.Primitives_getProperty(object, "expando$values");
      if (values == null) {
        values = new P.Object();
        H.Primitives_setProperty(object, "expando$values", values);
      }
      H.Primitives_setProperty(values, this._getKey$0(), value);
    },
    _getKey$0: function() {
      var key, t1;
      key = H.Primitives_getProperty(this, "expando$key");
      if (key == null) {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        key = "expando$key$" + t1;
        H.Primitives_setProperty(this, "expando$key", key);
      }
      return key;
    },
    static: {"^": "Expando__KEY_PROPERTY_NAME,Expando__EXPANDO_PROPERTY_NAME,Expando__keyCount"}
  },
  Function: {
    "^": "Object;",
    $isFunction: true
  },
  $int: {
    "^": "num;",
    $is$int: true
  },
  "+int": 0,
  Iterable: {
    "^": "Object;",
    $isIterable: true,
    $asIterable: null
  },
  Iterator: {
    "^": "Object;"
  },
  List: {
    "^": "Object;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  "+List": 0,
  Map: {
    "^": "Object;",
    $isMap: true
  },
  Null: {
    "^": "Object;",
    toString$0: function(_) {
      return "null";
    }
  },
  "+Null": 0,
  num: {
    "^": "Object;",
    $isnum: true
  },
  "+num": 0,
  Object: {
    "^": ";",
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return H.Primitives_objectToString(this);
    },
    noSuchMethod$1: function(_, invocation) {
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments(), null));
    },
    get$runtimeType: function(_) {
      return new H.TypeImpl(H.getRuntimeTypeString(this), null);
    },
    $isObject: true
  },
  Match: {
    "^": "Object;",
    $isMatch: true
  },
  StackTrace: {
    "^": "Object;"
  },
  Stopwatch: {
    "^": "Object;frequency,_core$_start,_stop",
    start$0: function(_) {
      var t1, t2, t3;
      t1 = this._core$_start == null;
      if (!t1 && this._stop == null)
        return;
      if (t1)
        this._core$_start = H.Primitives_numMicroseconds();
      else {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._stop;
        t3 = this._core$_start;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        this._core$_start = t1 - (t2 - t3);
        this._stop = null;
      }
    },
    get$elapsedTicks: function() {
      var t1, t2;
      t1 = this._core$_start;
      if (t1 == null)
        return 0;
      t2 = this._stop;
      if (t2 == null) {
        t1 = H.Primitives_numMicroseconds();
        t2 = this._core$_start;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 - t2;
        t1 = t2;
      } else {
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = t2 - t1;
      }
      return t1;
    }
  },
  String: {
    "^": "Object;",
    $isString: true
  },
  "+String": 0,
  RuneIterator: {
    "^": "Object;string,_core$_position,_nextPosition,_currentCodePoint",
    get$current: function() {
      return this._currentCodePoint;
    },
    moveNext$0: function() {
      var t1, t2, t3, codeUnit, nextPosition, nextCodeUnit;
      t1 = this._nextPosition;
      this._core$_position = t1;
      t2 = this.string;
      t3 = t2.length;
      if (t1 === t3) {
        this._currentCodePoint = null;
        return false;
      }
      codeUnit = C.JSString_methods.codeUnitAt$1(t2, t1);
      nextPosition = this._core$_position + 1;
      if ((codeUnit & 64512) === 55296 && nextPosition < t3) {
        nextCodeUnit = C.JSString_methods.codeUnitAt$1(t2, nextPosition);
        if ((nextCodeUnit & 64512) === 56320) {
          this._nextPosition = nextPosition + 1;
          this._currentCodePoint = 65536 + ((codeUnit & 1023) << 10 >>> 0) + (nextCodeUnit & 1023);
          return true;
        }
      }
      this._nextPosition = nextPosition;
      this._currentCodePoint = codeUnit;
      return true;
    }
  },
  StringBuffer: {
    "^": "Object;_contents<",
    get$length: function(_) {
      return this._contents.length;
    },
    get$isEmpty: function(_) {
      return this._contents.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._contents.length !== 0;
    },
    write$1: function(obj) {
      this._contents += typeof obj === "string" ? obj : H.S(obj);
    },
    writeAll$2: function(objects, separator) {
      var iterator, str;
      iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return;
      if (separator.length === 0)
        do {
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        } while (iterator.moveNext$0());
      else {
        this.write$1(iterator.get$current());
        for (; iterator.moveNext$0();) {
          this._contents += separator;
          str = iterator.get$current();
          this._contents += typeof str === "string" ? str : H.S(str);
        }
      }
    },
    writeAll$1: function(objects) {
      return this.writeAll$2(objects, "");
    },
    clear$0: function(_) {
      this._contents = "";
    },
    toString$0: function(_) {
      return this._contents;
    },
    StringBuffer$1: function($content) {
      if (typeof $content === "string")
        this._contents = $content;
      else
        this.write$1($content);
    },
    static: {StringBuffer$: function($content) {
        var t1 = new P.StringBuffer("");
        t1.StringBuffer$1($content);
        return t1;
      }}
  },
  Symbol0: {
    "^": "Object;",
    $isSymbol0: true
  },
  Type: {
    "^": "Object;",
    $isType: true
  },
  Uri: {
    "^": "Object;_host,_port,_path,scheme,userInfo,query,fragment,_pathSegments,_queryParameters",
    get$host: function(_) {
      var t1;
      if (C.JSString_methods.startsWith$1(this._host, "[")) {
        t1 = this._host;
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      }
      return this._host;
    },
    get$port: function(_) {
      var t1;
      if (J.$eq(this._port, 0)) {
        t1 = this.scheme;
        if (t1 === "http")
          return 80;
        if (t1 === "https")
          return 443;
      }
      return this._port;
    },
    get$path: function(_) {
      return this._path;
    },
    _makePath$2: function(path, pathSegments) {
      var t1, result;
      t1 = path == null;
      if (t1 && true)
        return "";
      t1 = !t1;
      if (t1)
        ;
      result = t1 ? P.Uri__normalize(path) : C.JSNull_methods.map$1(pathSegments, new P.Uri__makePath_closure()).join$1(0, "/");
      if ((this.get$host(this) !== "" || this.scheme === "file") && J.getInterceptor$asx(result).get$isNotEmpty(result) && !C.JSString_methods.startsWith$1(result, "/"))
        return "/" + H.S(result);
      return result;
    },
    toString$0: function(_) {
      var sb, t1;
      sb = P.StringBuffer$("");
      t1 = this.scheme;
      if ("" !== t1) {
        sb.write$1(t1);
        sb.write$1(":");
      }
      if (this.get$host(this) !== "" || t1 === "file") {
        sb.write$1("//");
        t1 = this.userInfo;
        if ("" !== t1) {
          sb.write$1(t1);
          sb.write$1("@");
        }
        sb.write$1(this._host);
        if (!J.$eq(this._port, 0)) {
          sb.write$1(":");
          sb.write$1(J.toString$0(this._port));
        }
      }
      sb.write$1(this._path);
      t1 = this.query;
      if ("" !== t1) {
        sb.write$1("?");
        sb.write$1(t1);
      }
      t1 = this.fragment;
      if ("" !== t1) {
        sb.write$1("#");
        sb.write$1(t1);
      }
      return sb._contents;
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isUri)
        return false;
      t2 = this.scheme;
      t3 = other.scheme;
      if (t2 == null ? t3 == null : t2 === t3)
        if (this.userInfo === other.userInfo)
          if (this.get$host(this) === t1.get$host(other))
            if (J.$eq(this.get$port(this), t1.get$port(other))) {
              t1 = this._path;
              t2 = other._path;
              if (t1 == null ? t2 == null : t1 === t2) {
                t1 = this.query;
                t2 = other.query;
                if (t1 == null ? t2 == null : t1 === t2) {
                  t1 = this.fragment;
                  t2 = other.fragment;
                  t2 = t1 == null ? t2 == null : t1 === t2;
                  t1 = t2;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = new P.Uri_hashCode_combine();
      return t1.call$2(this.scheme, t1.call$2(this.userInfo, t1.call$2(this.get$host(this), t1.call$2(this.get$port(this), t1.call$2(this._path, t1.call$2(this.query, t1.call$2(this.fragment, 1)))))));
    },
    Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
      if (scheme === "http" && J.$eq(port, 80))
        this._port = 0;
      else if (scheme === "https" && J.$eq(port, 443))
        this._port = 0;
      else
        this._port = port;
      this._path = this._makePath$2(path, pathSegments);
    },
    $isUri: true,
    static: {"^": "Uri__SPACE,Uri__DOUBLE_QUOTE,Uri__NUMBER_SIGN,Uri__PERCENT,Uri__ASTERISK,Uri__PLUS,Uri__SLASH,Uri__ZERO,Uri__NINE,Uri__COLON,Uri__LESS,Uri__GREATER,Uri__QUESTION,Uri__AT_SIGN,Uri__UPPER_CASE_A,Uri__UPPER_CASE_F,Uri__UPPER_CASE_Z,Uri__LEFT_BRACKET,Uri__BACKSLASH,Uri__RIGHT_BRACKET,Uri__LOWER_CASE_A,Uri__LOWER_CASE_F,Uri__LOWER_CASE_Z,Uri__BAR,Uri__unreservedTable,Uri__unreserved2396Table,Uri__encodeFullTable,Uri__schemeTable,Uri__schemeLowerTable,Uri__subDelimitersTable,Uri__regNameTable,Uri__pathCharTable,Uri__queryCharTable", Uri_parse: function(uri) {
        var port, portStr, t1, t2, $length, index, schemeEndIndex, index0, codeUnit, t3, authorityEndIndex, portIndex, userInfoEndIndex, authorityEndIndex0, pathEndIndex, pathEndIndex0, queryEndIndex, queryEndIndex0, scheme, startIndex, userInfo, exception, host, path, query, fragment;
        t1 = new P.Uri_parse_isRegName();
        t2 = new P.Uri_parse_ipV6Address(uri);
        $length = uri.length;
        if ($length === 0)
          return P.Uri$("", "", null, null, 0, null, null, null, "");
        if (J.codeUnitAt$1$s(uri, 0) !== 47)
          for (index = 0; schemeEndIndex = 0, index < $length; index = index0) {
            index0 = index + 1;
            if (index >= $length)
              H.throwExpression(P.RangeError$value(index));
            codeUnit = uri.charCodeAt(index);
            if (codeUnit < 128) {
              t3 = codeUnit >>> 4;
              if (t3 >= 8)
                return H.ioore(C.List_JYB, t3);
              t3 = (C.List_JYB[t3] & C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t3 = false;
            if (!t3) {
              if (codeUnit === 58) {
                schemeEndIndex = index0;
                index = schemeEndIndex;
              } else {
                index = index0 - 1;
                schemeEndIndex = 0;
              }
              break;
            }
          }
        else {
          index = 0;
          schemeEndIndex = 0;
        }
        if (schemeEndIndex === index) {
          t3 = schemeEndIndex + 1;
          t3 = t3 < $length && C.JSString_methods.codeUnitAt$1(uri, schemeEndIndex) === 47 && C.JSString_methods.codeUnitAt$1(uri, t3) === 47;
        } else
          t3 = false;
        if (t3) {
          authorityEndIndex = schemeEndIndex + 2;
          for (portIndex = -1; t3 = J.getInterceptor$n(authorityEndIndex), userInfoEndIndex = -1, t3.$lt(authorityEndIndex, $length);) {
            authorityEndIndex0 = t3.$add(authorityEndIndex, 1);
            if (typeof authorityEndIndex !== "number" || Math.floor(authorityEndIndex) !== authorityEndIndex)
              H.throwExpression(P.ArgumentError$(authorityEndIndex));
            if (t3.$lt(authorityEndIndex, 0))
              H.throwExpression(P.RangeError$value(authorityEndIndex));
            if (t3.$ge(authorityEndIndex, $length))
              H.throwExpression(P.RangeError$value(authorityEndIndex));
            codeUnit = uri.charCodeAt(authorityEndIndex);
            if (t1.call$1(codeUnit) !== true)
              if (codeUnit === 91)
                authorityEndIndex = t2.call$1(authorityEndIndex0);
              else {
                if (J.$eq(portIndex, -1) && codeUnit === 58)
                  ;
                else {
                  t3 = codeUnit === 64 || codeUnit === 58;
                  authorityEndIndex = authorityEndIndex0 - 1;
                  if (t3) {
                    userInfoEndIndex = C.JSString_methods.indexOf$2(uri, "@", authorityEndIndex);
                    if (userInfoEndIndex === -1) {
                      authorityEndIndex = index;
                      break;
                    }
                    authorityEndIndex = userInfoEndIndex + 1;
                    for (portIndex = -1; t3 = J.getInterceptor$n(authorityEndIndex), t3.$lt(authorityEndIndex, $length);) {
                      authorityEndIndex0 = t3.$add(authorityEndIndex, 1);
                      if (typeof authorityEndIndex !== "number" || Math.floor(authorityEndIndex) !== authorityEndIndex)
                        H.throwExpression(P.ArgumentError$(authorityEndIndex));
                      if (t3.$lt(authorityEndIndex, 0))
                        H.throwExpression(P.RangeError$value(authorityEndIndex));
                      if (t3.$ge(authorityEndIndex, $length))
                        H.throwExpression(P.RangeError$value(authorityEndIndex));
                      codeUnit = uri.charCodeAt(authorityEndIndex);
                      if (t1.call$1(codeUnit) !== true)
                        if (codeUnit === 91)
                          authorityEndIndex = t2.call$1(authorityEndIndex0);
                        else {
                          if (codeUnit === 58) {
                            if (!J.$eq(portIndex, -1))
                              throw H.wrapException(P.FormatException$("Double port in host"));
                          } else {
                            authorityEndIndex = authorityEndIndex0 - 1;
                            break;
                          }
                          authorityEndIndex = authorityEndIndex0;
                          portIndex = authorityEndIndex;
                        }
                      else
                        authorityEndIndex = authorityEndIndex0;
                    }
                    break;
                  } else {
                    userInfoEndIndex = -1;
                    break;
                  }
                }
                authorityEndIndex = authorityEndIndex0;
                portIndex = authorityEndIndex;
              }
            else
              authorityEndIndex = authorityEndIndex0;
          }
        } else {
          authorityEndIndex = schemeEndIndex;
          userInfoEndIndex = -1;
          portIndex = -1;
        }
        for (pathEndIndex = authorityEndIndex; t1 = J.getInterceptor$n(pathEndIndex), t1.$lt(pathEndIndex, $length); pathEndIndex = pathEndIndex0) {
          pathEndIndex0 = t1.$add(pathEndIndex, 1);
          if (typeof pathEndIndex !== "number" || Math.floor(pathEndIndex) !== pathEndIndex)
            H.throwExpression(P.ArgumentError$(pathEndIndex));
          if (t1.$lt(pathEndIndex, 0))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          if (t1.$ge(pathEndIndex, $length))
            H.throwExpression(P.RangeError$value(pathEndIndex));
          codeUnit = uri.charCodeAt(pathEndIndex);
          if (codeUnit === 63 || codeUnit === 35) {
            pathEndIndex = pathEndIndex0 - 1;
            break;
          }
        }
        t1 = J.getInterceptor$n(pathEndIndex);
        if (t1.$lt(pathEndIndex, $length) && C.JSString_methods.codeUnitAt$1(uri, pathEndIndex) === 63)
          for (queryEndIndex = pathEndIndex; t2 = J.getInterceptor$n(queryEndIndex), t2.$lt(queryEndIndex, $length); queryEndIndex = queryEndIndex0) {
            queryEndIndex0 = t2.$add(queryEndIndex, 1);
            if (typeof queryEndIndex !== "number" || Math.floor(queryEndIndex) !== queryEndIndex)
              H.throwExpression(P.ArgumentError$(queryEndIndex));
            if (t2.$lt(queryEndIndex, 0))
              H.throwExpression(P.RangeError$value(queryEndIndex));
            if (t2.$ge(queryEndIndex, $length))
              H.throwExpression(P.RangeError$value(queryEndIndex));
            if (uri.charCodeAt(queryEndIndex) === 35) {
              queryEndIndex = queryEndIndex0 - 1;
              break;
            }
          }
        else
          queryEndIndex = pathEndIndex;
        scheme = schemeEndIndex > 0 ? C.JSString_methods.substring$2(uri, 0, schemeEndIndex - 1) : null;
        port = 0;
        if (schemeEndIndex !== authorityEndIndex) {
          startIndex = schemeEndIndex + 2;
          if (userInfoEndIndex > 0) {
            userInfo = C.JSString_methods.substring$2(uri, startIndex, userInfoEndIndex);
            startIndex = userInfoEndIndex + 1;
          } else
            userInfo = "";
          t2 = J.getInterceptor$n(portIndex);
          if (t2.$gt(portIndex, 0)) {
            portStr = C.JSString_methods.substring$2(uri, portIndex, authorityEndIndex);
            try {
              port = H.Primitives_parseInt(portStr, null, null);
            } catch (exception) {
              H.unwrapException(exception);
              throw H.wrapException(P.FormatException$("Invalid port: '" + H.S(portStr) + "'"));
            }

            host = C.JSString_methods.substring$2(uri, startIndex, t2.$sub(portIndex, 1));
          } else
            host = C.JSString_methods.substring$2(uri, startIndex, authorityEndIndex);
        } else {
          host = "";
          userInfo = "";
        }
        path = C.JSString_methods.substring$2(uri, authorityEndIndex, pathEndIndex);
        query = t1.$lt(pathEndIndex, queryEndIndex) ? C.JSString_methods.substring$2(uri, t1.$add(pathEndIndex, 1), queryEndIndex) : "";
        t1 = J.getInterceptor$n(queryEndIndex);
        fragment = t1.$lt(queryEndIndex, $length) ? C.JSString_methods.substring$2(uri, t1.$add(queryEndIndex, 1), $length) : "";
        return P.Uri$(fragment, host, path, null, port, query, null, scheme, userInfo);
      }, Uri$: function(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo) {
        var t1 = P.Uri__makeScheme(scheme);
        t1 = new P.Uri(P.Uri__makeHost(host), null, null, t1, userInfo, P.Uri__makeQuery(query, queryParameters), P.Uri__makeFragment(fragment), null, null);
        t1.Uri$9$fragment$host$path$pathSegments$port$query$queryParameters$scheme$userInfo(fragment, host, path, pathSegments, port, query, queryParameters, scheme, userInfo);
        return t1;
      }, Uri__makeHost: function(host) {
        var t1, i;
        if (host.length === 0)
          return host;
        if (C.JSString_methods.codeUnitAt$1(host, 0) === 91) {
          t1 = host.length - 1;
          if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
            throw H.wrapException(P.FormatException$("Missing end `]` to match `[` in host"));
          P.Uri_parseIPv6Address(C.JSString_methods.substring$2(host, 1, t1));
          return host;
        }
        for (t1 = host.length, i = 0; i < t1; ++i) {
          if (i >= t1)
            H.throwExpression(P.RangeError$value(i));
          if (host.charCodeAt(i) === 58) {
            P.Uri_parseIPv6Address(host);
            return "[" + host + "]";
          }
        }
        return host;
      }, Uri__makeScheme: function(scheme) {
        var t1, $length, allLowercase, i, codeUnit, t2;
        t1 = new P.Uri__makeScheme_isSchemeLowerCharacter();
        if (scheme == null)
          return "";
        $length = scheme.length;
        for (allLowercase = true, i = 0; i < $length; ++i) {
          if (i >= $length)
            H.throwExpression(P.RangeError$value(i));
          codeUnit = scheme.charCodeAt(i);
          if (i === 0) {
            if (!(codeUnit >= 97 && codeUnit <= 122))
              t2 = codeUnit >= 65 && codeUnit <= 90;
            else
              t2 = true;
            t2 = !t2;
          } else
            t2 = false;
          if (t2)
            throw H.wrapException(P.ArgumentError$("Illegal scheme: " + scheme));
          if (t1.call$1(codeUnit) !== true) {
            if (codeUnit < 128) {
              t2 = codeUnit >>> 4;
              if (t2 >= 8)
                return H.ioore(C.List_JYB, t2);
              t2 = (C.List_JYB[t2] & C.JSInt_methods._shlPositive$1(1, codeUnit & 15)) !== 0;
            } else
              t2 = false;
            if (t2)
              ;
            else
              throw H.wrapException(P.ArgumentError$("Illegal scheme: " + scheme));
            allLowercase = false;
          }
        }
        return allLowercase ? scheme : scheme.toLowerCase();
      }, Uri__makeQuery: function(query, queryParameters) {
        var t1, t2, result;
        t1 = {};
        t2 = query == null;
        if (t2 && true)
          return "";
        t2 = !t2;
        if (t2)
          ;
        if (t2)
          return P.Uri__normalize(query);
        result = P.StringBuffer$("");
        t1.first_0 = true;
        C.JSNull_methods.forEach$1(queryParameters, new P.Uri__makeQuery_closure(t1, result));
        return result._contents;
      }, Uri__makeFragment: function(fragment) {
        return P.Uri__normalize(fragment);
      }, Uri__normalize: function(component) {
        var t1, index, t2, t3, t4, t5, $length, t6, t7, codeUnit1, codeUnit2, decodedCodeUnit, t8, next;
        t1 = {};
        index = J.getInterceptor$asx(component).indexOf$1(component, "%");
        t1.index_0 = index;
        if (index < 0)
          return component;
        t2 = new P.Uri__normalize_isNormalizedHexDigit();
        t3 = new P.Uri__normalize_isUnreserved();
        t4 = new P.Uri__normalize_normalizeHexDigit(component, t2, new P.Uri__normalize_isLowerCaseHexDigit());
        t5 = new P.Uri__normalize_decodeHexDigitPair(component);
        t1.result_1 = null;
        $length = component.length;
        t1.prevIndex_2 = 0;
        t6 = new P.Uri__normalize_fillResult(t1, component);
        for (t7 = index; t7 < $length;) {
          if ($length < t7 + 2)
            throw H.wrapException(P.ArgumentError$("Invalid percent-encoding in URI component: " + component));
          ++t7;
          if (t7 < 0)
            H.throwExpression(P.RangeError$value(t7));
          if (t7 >= $length)
            H.throwExpression(P.RangeError$value(t7));
          codeUnit1 = component.charCodeAt(t7);
          t7 = t1.index_0 + 2;
          if (t7 < 0)
            H.throwExpression(P.RangeError$value(t7));
          if (t7 >= $length)
            H.throwExpression(P.RangeError$value(t7));
          codeUnit2 = component.charCodeAt(t7);
          decodedCodeUnit = t5.call$1(t1.index_0 + 1);
          if (t2.call$1(codeUnit1) === true && t2.call$1(codeUnit2) === true && t3.call$1(decodedCodeUnit) !== true)
            t7 = t1.index_0 += 3;
          else {
            t6.call$0();
            t7 = t3.call$1(decodedCodeUnit);
            t8 = t1.result_1;
            if (t7 === true) {
              t8.toString;
              t7 = H.Primitives_stringFromCharCode(decodedCodeUnit);
              t8._contents += t7;
            } else {
              t8.toString;
              t8._contents += "%";
              t7 = t4.call$1(t1.index_0 + 1);
              t8.toString;
              t7 = H.Primitives_stringFromCharCode(t7);
              t8._contents += t7;
              t7 = t1.result_1;
              t8 = t4.call$1(t1.index_0 + 2);
              t7.toString;
              t8 = H.Primitives_stringFromCharCode(t8);
              t7._contents += t8;
            }
            t7 = t1.index_0 += 3;
            t1.prevIndex_2 = t7;
          }
          next = C.JSString_methods.indexOf$2(component, "%", t7);
          if (next >= t1.index_0) {
            t1.index_0 = next;
            t7 = next;
          } else {
            t1.index_0 = $length;
            t7 = $length;
          }
        }
        if (t1.result_1 == null)
          return component;
        if (t1.prevIndex_2 !== t7)
          t6.call$0();
        return J.toString$0(t1.result_1);
      }, Uri_parseIPv4Address: function(host) {
        var t1, bytes;
        t1 = new P.Uri_parseIPv4Address_error();
        bytes = host.split(".");
        if (bytes.length !== 4)
          t1.call$1("IPv4 address should contain exactly 4 parts");
        return H.setRuntimeTypeInfo(new H.MappedListIterable(bytes, new P.Uri_parseIPv4Address_closure(t1)), [null, null]).toList$0(0);
      }, Uri_parseIPv6Address: function(host) {
        var error, parseHex, parts, partStart, last, wildcardSeen, i, t1, t2, atEnd, isLastWildcard, exception;
        error = new P.Uri_parseIPv6Address_error();
        parseHex = new P.Uri_parseIPv6Address_parseHex(host, error);
        if (J.get$length$asx(host) < 2)
          error.call$1("address is too short");
        parts = [];
        partStart = 0;
        wildcardSeen = false;
        i = 0;
        while (true) {
          t1 = J.get$length$asx(host);
          if (typeof t1 !== "number")
            return H.iae(t1);
          if (!(i < t1))
            break;
          t1 = host;
          t2 = J.get$length$asx(t1);
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (i >= t2)
            H.throwExpression(P.RangeError$value(i));
          if (t1.charCodeAt(i) === 58) {
            if (i === 0) {
              ++i;
              t1 = host;
              if (i >= J.get$length$asx(t1))
                H.throwExpression(P.RangeError$value(i));
              if (t1.charCodeAt(i) !== 58)
                error.call$1("invalid start colon.");
              partStart = i;
            }
            if (i === partStart) {
              if (wildcardSeen)
                error.call$1("only one wildcard `::` is allowed");
              J.add$1$ax(parts, -1);
              wildcardSeen = true;
            } else
              J.add$1$ax(parts, parseHex.call$2(partStart, i));
            partStart = i + 1;
          }
          ++i;
        }
        if (J.get$length$asx(parts) === 0)
          error.call$1("too few parts");
        atEnd = J.$eq(partStart, J.get$length$asx(host));
        isLastWildcard = J.$eq(J.get$last$ax(parts), -1);
        if (atEnd && !isLastWildcard)
          error.call$1("expected a part after last `:`");
        if (!atEnd)
          try {
            J.add$1$ax(parts, parseHex.call$2(partStart, J.get$length$asx(host)));
          } catch (exception) {
            H.unwrapException(exception);
            try {
              last = P.Uri_parseIPv4Address(J.substring$1$s(host, partStart));
              t1 = J.$shl$n(J.$index$asx(last, 0), 8);
              t2 = J.$index$asx(last, 1);
              if (typeof t2 !== "number")
                return H.iae(t2);
              J.add$1$ax(parts, (t1 | t2) >>> 0);
              t2 = J.$shl$n(J.$index$asx(last, 2), 8);
              t1 = J.$index$asx(last, 3);
              if (typeof t1 !== "number")
                return H.iae(t1);
              J.add$1$ax(parts, (t2 | t1) >>> 0);
            } catch (exception) {
              H.unwrapException(exception);
              error.call$1("invalid end of IPv6 address.");
            }

          }

        if (wildcardSeen) {
          if (J.get$length$asx(parts) > 7)
            error.call$1("an address with a wildcard must have less than 7 parts");
        } else if (J.get$length$asx(parts) !== 8)
          error.call$1("an address without a wildcard must contain exactly 8 parts");
        t1 = new H.ExpandIterable(parts, new P.Uri_parseIPv6Address_closure(parts));
        t1.$builtinTypeInfo = [null, null];
        return P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
      }, Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
        var t1, result, bytes, i, $byte, t2, t3;
        t1 = new P.Uri__uriEncode_byteToHex();
        result = P.StringBuffer$("");
        bytes = encoding.get$encoder().convert$1(text);
        for (i = 0; i < bytes.length; ++i) {
          $byte = bytes[i];
          t2 = J.getInterceptor$n($byte);
          if (t2.$lt($byte, 128)) {
            t3 = t2.$shr($byte, 4);
            if (t3 >= 8)
              return H.ioore(canonicalTable, t3);
            t3 = (canonicalTable[t3] & C.JSInt_methods._shlPositive$1(1, t2.$and($byte, 15))) !== 0;
          } else
            t3 = false;
          if (t3) {
            t2 = H.Primitives_stringFromCharCode($byte);
            result._contents += t2;
          } else if (spaceToPlus && t2.$eq($byte, 32)) {
            t2 = H.Primitives_stringFromCharCode(43);
            result._contents += t2;
          } else {
            t2 = H.Primitives_stringFromCharCode(37);
            result._contents += t2;
            t1.call$2($byte, result);
          }
        }
        return result._contents;
      }, Uri__hexCharPairToByte: function(s, pos) {
        var t1, $byte, i, charCode;
        for (t1 = J.getInterceptor$s(s), $byte = 0, i = 0; i < 2; ++i) {
          charCode = t1.codeUnitAt$1(s, pos + i);
          if (48 <= charCode && charCode <= 57)
            $byte = $byte * 16 + charCode - 48;
          else {
            charCode |= 32;
            if (97 <= charCode && charCode <= 102)
              $byte = $byte * 16 + charCode - 87;
            else
              throw H.wrapException(P.ArgumentError$("Invalid URL encoding"));
          }
        }
        return $byte;
      }, Uri__uriDecode: function(text, encoding, plusToSpace) {
        var t1, simple, i, codeUnit, bytes, allowMalformed;
        t1 = text.length;
        simple = true;
        i = 0;
        while (true) {
          if (!(i < t1 && simple))
            break;
          codeUnit = C.JSString_methods.codeUnitAt$1(text, i);
          simple = codeUnit !== 37 && codeUnit !== 43;
          ++i;
        }
        if (simple)
          if (encoding === C.Utf8Codec_false || false)
            return text;
          else
            bytes = C.JSString_methods.get$codeUnits(text);
        else {
          bytes = [];
          for (i = 0; i < t1; ++i) {
            codeUnit = C.JSString_methods.codeUnitAt$1(text, i);
            if (codeUnit > 127)
              throw H.wrapException(P.ArgumentError$("Illegal percent encoding in URI"));
            if (codeUnit === 37) {
              if (i + 3 > t1)
                throw H.wrapException(P.ArgumentError$("Truncated URI"));
              bytes.push(P.Uri__hexCharPairToByte(text, i + 1));
              i += 2;
            } else if (plusToSpace && codeUnit === 43)
              bytes.push(32);
            else
              bytes.push(codeUnit);
          }
        }
        allowMalformed = encoding._allowMalformed;
        return new P.Utf8Decoder(allowMalformed).convert$1(bytes);
      }}
  },
  Uri_parse_isRegName: {
    "^": "Closure0:87;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_qNA, t1);
        t1 = (C.List_qNA[t1] & C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    },
    $isFunction: true
  },
  Uri_parse_ipV6Address: {
    "^": "Closure0:88;uri_0",
    call$1: function(index) {
      index = J.indexOf$2$asx(this.uri_0, "]", index);
      if (index === -1)
        throw H.wrapException(P.FormatException$("Bad end of IPv6 host"));
      return index + 1;
    },
    $isFunction: true
  },
  Uri__makeScheme_isSchemeLowerCharacter: {
    "^": "Closure0:87;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = ch >>> 4;
        if (t1 >= 8)
          return H.ioore(C.List_6Pr, t1);
        t1 = (C.List_6Pr[t1] & C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    },
    $isFunction: true
  },
  Uri__makePath_closure: {
    "^": "Closure0:30;",
    call$1: function(s) {
      return P.Uri__uriEncode(C.List_qg4, s, C.Utf8Codec_false, false);
    },
    $isFunction: true
  },
  Uri__makeQuery_closure: {
    "^": "Closure0:58;box_0,result_1",
    call$2: function(key, value) {
      var t1 = this.box_0;
      if (!t1.first_0)
        this.result_1.write$1("&");
      t1.first_0 = false;
      t1 = this.result_1;
      t1.write$1(P.Uri__uriEncode(C.List_nxB, key, C.Utf8Codec_false, true));
      value.get$isEmpty(value);
      t1.write$1("=");
      t1.write$1(P.Uri__uriEncode(C.List_nxB, value, C.Utf8Codec_false, true));
    },
    $isFunction: true
  },
  Uri__normalize_isNormalizedHexDigit: {
    "^": "Closure0:87;",
    call$1: function(digit) {
      var t1;
      if (!(48 <= digit && digit <= 57))
        t1 = 65 <= digit && digit <= 70;
      else
        t1 = true;
      return t1;
    },
    $isFunction: true
  },
  Uri__normalize_isLowerCaseHexDigit: {
    "^": "Closure0:87;",
    call$1: function(digit) {
      return 97 <= digit && digit <= 102;
    },
    $isFunction: true
  },
  Uri__normalize_isUnreserved: {
    "^": "Closure0:87;",
    call$1: function(ch) {
      var t1;
      if (ch < 128) {
        t1 = C.JSInt_methods._shrOtherPositive$1(ch, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = (C.List_nxB[t1] & C.JSInt_methods._shlPositive$1(1, ch & 15)) !== 0;
      } else
        t1 = false;
      return t1;
    },
    $isFunction: true
  },
  Uri__normalize_normalizeHexDigit: {
    "^": "Closure0:88;component_1,isNormalizedHexDigit_2,isLowerCaseHexDigit_3",
    call$1: function(index) {
      var t1, codeUnit;
      t1 = this.component_1;
      codeUnit = J.codeUnitAt$1$s(t1, index);
      if (this.isLowerCaseHexDigit_3.call$1(codeUnit) === true)
        return codeUnit - 32;
      else if (this.isNormalizedHexDigit_2.call$1(codeUnit) !== true)
        throw H.wrapException(P.ArgumentError$("Invalid URI component: " + t1));
      else
        return codeUnit;
    },
    $isFunction: true
  },
  Uri__normalize_decodeHexDigitPair: {
    "^": "Closure0:88;component_4",
    call$1: function(index) {
      var t1, $byte, i, t2, codeUnit;
      for (t1 = this.component_4, $byte = 0, i = 0; i < 2; ++i) {
        t2 = index + i;
        t1.toString;
        if (t2 < 0)
          H.throwExpression(P.RangeError$value(t2));
        if (t2 >= t1.length)
          H.throwExpression(P.RangeError$value(t2));
        codeUnit = t1.charCodeAt(t2);
        if (48 <= codeUnit && codeUnit <= 57)
          $byte = $byte * 16 + codeUnit - 48;
        else {
          codeUnit |= 32;
          if (97 <= codeUnit && codeUnit <= 102)
            $byte = $byte * 16 + codeUnit - 97 + 10;
          else
            throw H.wrapException(P.ArgumentError$("Invalid percent-encoding in URI component: " + H.S(t1)));
        }
      }
      return $byte;
    },
    $isFunction: true
  },
  Uri__normalize_fillResult: {
    "^": "Closure0:10;box_0,component_5",
    call$0: function() {
      var t1, t2, t3, t4, t5;
      t1 = this.box_0;
      t2 = t1.result_1;
      t3 = t1.prevIndex_2;
      t4 = this.component_5;
      t5 = t1.index_0;
      if (t2 == null)
        t1.result_1 = P.StringBuffer$(J.substring$2$s(t4, t3, t5));
      else
        t2.write$1(J.substring$2$s(t4, t3, t5));
    },
    $isFunction: true
  },
  Uri_hashCode_combine: {
    "^": "Closure0:89;",
    call$2: function(part, current) {
      var t1 = J.get$hashCode$(part);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return current * 31 + t1 & 1073741823;
    },
    $isFunction: true
  },
  Uri_parseIPv4Address_error: {
    "^": "Closure0:90;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg));
    },
    $isFunction: true
  },
  Uri_parseIPv4Address_closure: {
    "^": "Closure0:30;error_0",
    call$1: [function(byteString) {
      var $byte, t1;
      $byte = H.Primitives_parseInt(byteString, null, null);
      t1 = J.getInterceptor$n($byte);
      if (t1.$lt($byte, 0) || t1.$gt($byte, 255))
        this.error_0.call$1("each part must be in the range of `0..255`");
      return $byte;
    }, "call$1", null, 2, 0, null, 91, "call"],
    $isFunction: true
  },
  Uri_parseIPv6Address_error: {
    "^": "Closure0:90;",
    call$1: function(msg) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg));
    },
    $isFunction: true
  },
  Uri_parseIPv6Address_parseHex: {
    "^": "Closure0:92;host_0,error_1",
    call$2: function(start, end) {
      var value, t1;
      if (end - start > 4)
        this.error_1.call$1("an IPv6 part can only contain a maximum of 4 hex digits");
      value = H.Primitives_parseInt(C.JSString_methods.substring$2(this.host_0, start, end), 16, null);
      t1 = J.getInterceptor$n(value);
      if (t1.$lt(value, 0) || t1.$gt(value, 65535))
        this.error_1.call$1("each part must be in the range of `0x0..0xFFFF`");
      return value;
    },
    $isFunction: true
  },
  Uri_parseIPv6Address_closure: {
    "^": "Closure0:30;parts_2",
    call$1: function(value) {
      var t1 = J.getInterceptor(value);
      if (t1.$eq(value, -1))
        return P.List_List$filled((9 - this.parts_2.length) * 2, 0, null);
      else
        return [t1.$shr(value, 8) & 255, t1.$and(value, 255)];
    },
    $isFunction: true
  },
  Uri__uriEncode_byteToHex: {
    "^": "Closure0:58;",
    call$2: function($byte, buffer) {
      var t1 = J.getInterceptor$n($byte);
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$shr($byte, 4))));
      buffer.write$1(H.Primitives_stringFromCharCode(C.JSString_methods.codeUnitAt$1("0123456789ABCDEF", t1.$and($byte, 15))));
    },
    $isFunction: true
  }
}],
["dart.dom.html", "dart:html", , W, {
  "^": "",
  AnchorElement_AnchorElement: function(href) {
    var e = document.createElement("a", null);
    return e;
  },
  CustomEvent_CustomEvent: function(type, canBubble, cancelable, detail) {
    var e, t1, exception;
    e = document.createEvent("CustomEvent");
    J.set$_dartDetail$x(e, detail);
    if (!J.getInterceptor(detail).$isList)
      if (!J.getInterceptor(detail).$isMap) {
        t1 = detail;
        if (typeof t1 !== "string") {
          t1 = detail;
          t1 = typeof t1 === "number";
        } else
          t1 = true;
      } else
        t1 = true;
    else
      t1 = true;
    if (t1)
      try {
        detail = P._convertDartToNative_PrepareForStructuredClone(detail);
        J._initCustomEvent$4$x(e, type, canBubble, cancelable, detail);
      } catch (exception) {
        H.unwrapException(exception);
        J._initCustomEvent$4$x(e, type, canBubble, cancelable, null);
      }

    else
      J._initCustomEvent$4$x(e, type, canBubble, cancelable, null);
    return e;
  },
  Element_Element$html: function(html, treeSanitizer, validator) {
    var fragment, t1;
    fragment = J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator);
    fragment.toString;
    t1 = new W._ChildNodeListLazy(fragment);
    t1 = t1.where$1(t1, new W.Element_Element$html_closure());
    return t1.get$single(t1);
  },
  _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
    return document.createElement(tag);
  },
  HttpRequest_getString: function(url, onProgress, withCredentials) {
    return W.HttpRequest_request(url, null, null, onProgress, null, null, null, withCredentials).then$1(new W.HttpRequest_getString_closure());
  },
  HttpRequest_request: function(url, method, mimeType, onProgress, requestHeaders, responseType, sendData, withCredentials) {
    var t1, completer, xhr;
    t1 = W.HttpRequest;
    completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(t1)), [t1]);
    xhr = new XMLHttpRequest();
    C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, C.EventStreamProvider_load._eventType, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new W.HttpRequest_request_closure(completer, xhr)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    t1 = H.setRuntimeTypeInfo(new W._EventStream(xhr, C.EventStreamProvider_error._eventType, false), [null]);
    H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(completer.get$completeError()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    xhr.send();
    return completer.future;
  },
  InputElement_InputElement: function(type) {
    var e, exception;
    e = document.createElement("input", null);
    if (type != null)
      try {
        J.set$type$x(e, type);
      } catch (exception) {
        H.unwrapException(exception);
      }

    return e;
  },
  _JenkinsSmiHash_combine: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _convertNativeToDart_Window: function(win) {
    if (win == null)
      return;
    return W._DOMWindowCrossFrame__createSafe(win);
  },
  _convertNativeToDart_EventTarget: function(e) {
    var $window;
    if (e == null)
      return;
    if ("setInterval" in e) {
      $window = W._DOMWindowCrossFrame__createSafe(e);
      if (!!J.getInterceptor($window).$isEventTarget)
        return $window;
      return;
    } else
      return e;
  },
  _convertDartToNative_EventTarget: function(e) {
    return e;
  },
  _callConstructor: function($constructor, interceptor) {
    return new W._callConstructor_closure($constructor, interceptor);
  },
  _callAttached: [function(receiver) {
    return J.attached$0$x(receiver);
  }, "call$1", "_callAttached$closure", 2, 0, 30, 31],
  _callDetached: [function(receiver) {
    return J.detached$0$x(receiver);
  }, "call$1", "_callDetached$closure", 2, 0, 30, 31],
  _callAttributeChanged: [function(receiver, $name, oldValue, newValue) {
    return J.attributeChanged$3$x(receiver, $name, oldValue, newValue);
  }, "call$4", "_callAttributeChanged$closure", 8, 0, 32, 31, 33, 34, 35],
  _wrapZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    if (callback == null)
      return;
    return t1.bindUnaryCallback$2$runGuarded(callback, true);
  },
  _wrapBinaryZone: function(callback) {
    var t1 = $.Zone__current;
    if (t1 === C.C__RootZone)
      return callback;
    return t1.bindBinaryCallback$2$runGuarded(callback, true);
  },
  HtmlElement: {
    "^": "Element;",
    "%": "HTMLAppletElement|HTMLBRElement|HTMLCanvasElement|HTMLDListElement|HTMLDataListElement|HTMLDirectoryElement|HTMLFontElement|HTMLFrameElement|HTMLHRElement|HTMLHeadElement|HTMLHeadingElement|HTMLHtmlElement|HTMLImageElement|HTMLMarqueeElement|HTMLMenuElement|HTMLModElement|HTMLOptGroupElement|HTMLPreElement|HTMLQuoteElement|HTMLShadowElement|HTMLSpanElement|HTMLTableCaptionElement|HTMLTableCellElement|HTMLTableColElement|HTMLTableDataCellElement|HTMLTableHeaderCellElement|HTMLTitleElement|HTMLUListElement|HTMLUnknownElement;HTMLElement;HtmlElement_Polymer|HtmlElement_Polymer_ChangeNotifier|PolymerElement|PolymerElement_ChangeNotifier|AnnotationElement|PolymerElement_ChangeNotifier0|Breadcrumbs|DartdocElement|DartdocElement_ChangeNotifier|CategoryElement|DartdocElement_ChangeNotifier0|MemberElement|ClassElement|PolymerElement_ChangeNotifier1|ClosureElement|HomeElement|ItemElement|LibraryElement|LibraryPanel|PolymerElement_ChangeNotifier2|LinkElement|DartdocElement_ChangeNotifier1|MainElement|MemberElement_ChangeNotifier|InheritedElement|InheritedElement_ChangeNotifier|MethodElement|MinimapElementClass|PolymerElement_ChangeNotifier3|MinimapElement|MinimapElementLibrary|DartdocElement_ChangeNotifier2|PageElement|DartdocElement_ChangeNotifier3|ParameterElement|PolymerElement_ChangeNotifier4|Search|PolymerElement_ChangeNotifier5|TypeElement|TypedefElement|InheritedElement_ChangeNotifier0|VariableElement|MemberElement_ChangeNotifier0|VariableHeading"
  },
  _EntryArray: {
    "^": "Interceptor;",
    $isList: true,
    $asList: function() {
      return [W.Entry];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Entry];
    },
    "%": "EntryArray"
  },
  AnchorElement: {
    "^": "HtmlElement;target=,type%,hostname=,href%,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isAnchorElement: true,
    "%": ";HTMLAnchorElement;AnchorElement_Polymer|AnchorElement_Polymer_ChangeNotifier|Result"
  },
  AreaElement: {
    "^": "HtmlElement;target=,hostname=,href%,port=,protocol=",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "HTMLAreaElement"
  },
  BaseElement: {
    "^": "HtmlElement;href%,target=",
    "%": "HTMLBaseElement"
  },
  BeforeLoadEvent: {
    "^": "Event;url=",
    "%": "BeforeLoadEvent"
  },
  Blob: {
    "^": "Interceptor;type=",
    $isBlob: true,
    "%": ";Blob"
  },
  BodyElement: {
    "^": "HtmlElement;",
    $isBodyElement: true,
    $isEventTarget: true,
    "%": "HTMLBodyElement"
  },
  ButtonElement: {
    "^": "HtmlElement;form=,name%,type%,value%",
    "%": "HTMLButtonElement"
  },
  CharacterData: {
    "^": "Node;length=",
    "%": "Comment;CharacterData"
  },
  ContentElement: {
    "^": "HtmlElement;",
    select$0: function($receiver) {
      return $receiver.select.call$0();
    },
    "%": "HTMLContentElement"
  },
  CssStyleDeclaration: {
    "^": "Interceptor_CssStyleDeclarationBase;length=",
    getPropertyValue$1: function(receiver, propertyName) {
      var propValue = receiver.getPropertyValue(propertyName);
      return propValue != null ? propValue : "";
    },
    setProperty$3: function(receiver, propertyName, value, priority) {
      var exception;
      try {
        if (priority == null)
          priority = "";
        receiver.setProperty(propertyName, value, priority);
        if (!!receiver.setAttribute)
          receiver.setAttribute(propertyName, value);
      } catch (exception) {
        H.unwrapException(exception);
      }

    },
    item$1: [function(receiver, index) {
      return receiver.item(index);
    }, "call$1", "get$item", 2, 0, 48, 49],
    "%": "CSS2Properties|CSSStyleDeclaration|MSStyleCSSProperties"
  },
  CustomEvent: {
    "^": "Event;_dartDetail}",
    get$detail: function(receiver) {
      var t1 = receiver._dartDetail;
      if (t1 != null)
        return t1;
      return P.convertNativeToDart_AcceptStructuredClone(receiver.detail, true);
    },
    _initCustomEvent$4: function(receiver, typeArg, canBubbleArg, cancelableArg, detailArg) {
      return receiver.initCustomEvent(typeArg, canBubbleArg, cancelableArg, detailArg);
    },
    $isCustomEvent: true,
    "%": "CustomEvent"
  },
  DetailsElement: {
    "^": "HtmlElement;",
    open$1: function($receiver, arg0) {
      return $receiver.open.call$1(arg0);
    },
    "%": "HTMLDetailsElement"
  },
  DialogElement: {
    "^": "HtmlElement;",
    open$1: function($receiver, arg0) {
      return $receiver.open.call$1(arg0);
    },
    "%": "HTMLDialogElement"
  },
  DivElement: {
    "^": "HtmlElement;",
    "%": ";HTMLDivElement;DivElement_Polymer|DivElement_Polymer_ChangeNotifier|CommentElement"
  },
  Document: {
    "^": "Node;",
    createDocumentFragment$0: function(receiver) {
      return receiver.createDocumentFragment();
    },
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    importNode$2: function(receiver, node, deep) {
      return receiver.importNode(node, deep);
    },
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    get$onChange: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    },
    get$onClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false), [null]);
    },
    get$onInput: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_input._eventType, false), [null]);
    },
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    $isDocument: true,
    "%": "XMLDocument;Document"
  },
  DocumentFragment: {
    "^": "Node;",
    get$children: function(receiver) {
      if (receiver._docChildren == null)
        receiver._docChildren = H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [null]);
      return receiver._docChildren;
    },
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    get$innerHtml: function(receiver) {
      var e, t1;
      e = W._ElementFactoryProvider_createElement_tag("div", null);
      t1 = J.getInterceptor$x(e);
      t1.append$1(e, this.clone$1(receiver, true));
      return t1.get$innerHtml(e);
    },
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      this._clearChildren$0(receiver);
      receiver.appendChild(J.createFragment$3$treeSanitizer$validator$x(document.body, html, treeSanitizer, validator));
    },
    setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    appendHtml$1: function(receiver, text) {
      receiver.appendChild(J.createFragment$3$treeSanitizer$validator$x(document.body, text, null, null));
    },
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    "%": ";DocumentFragment"
  },
  DomError: {
    "^": "Interceptor;name=",
    "%": "DOMError|FileError"
  },
  DomException: {
    "^": "Interceptor;",
    get$name: function(receiver) {
      var errorName = receiver.name;
      if (P.Device_isWebKit() === true && errorName === "SECURITY_ERR")
        return "SecurityError";
      if (P.Device_isWebKit() === true && errorName === "SYNTAX_ERR")
        return "SyntaxError";
      return errorName;
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    $isDomException: true,
    "%": "DOMException"
  },
  Element: {
    "^": "Node;title%,className%,id=,offsetHeight=,offsetWidth=,tagName=",
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    querySelectorAll$1: function(receiver, selectors) {
      return W._FrozenElementList$_wrap(receiver.querySelectorAll(selectors), null);
    },
    get$classes: function(receiver) {
      return new W._ElementCssClassSet(receiver);
    },
    set$classes: function(receiver, value) {
      var classSet = this.get$classes(receiver);
      classSet.clear$0(0);
      classSet.addAll$1(0, value);
    },
    getComputedStyle$1: function(receiver, pseudoElement) {
      return window.getComputedStyle(receiver, "");
    },
    getComputedStyle$0: function($receiver) {
      return this.getComputedStyle$1($receiver, null);
    },
    appendHtml$1: function(receiver, text) {
      this.insertAdjacentHtml$2(receiver, "beforeend", text);
    },
    attached$0: function(receiver) {
      this.enteredView$0(receiver);
    },
    detached$0: function(receiver) {
      this.leftView$0(receiver);
    },
    enteredView$0: function(receiver) {
    },
    leftView$0: function(receiver) {
    },
    attributeChanged$3: function(receiver, $name, oldValue, newValue) {
    },
    get$localName: function(receiver) {
      return receiver.localName;
    },
    get$namespaceUri: function(receiver) {
      return receiver.namespaceURI;
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    scrollIntoView$1: function(receiver, alignment) {
      var hasScrollIntoViewIfNeeded = !!receiver.scrollIntoViewIfNeeded;
      if (hasScrollIntoViewIfNeeded)
        receiver.scrollIntoViewIfNeeded();
      else
        receiver.scrollIntoView();
    },
    scrollIntoView$0: function($receiver) {
      return this.scrollIntoView$1($receiver, null);
    },
    insertAdjacentText$2: function(receiver, where, text) {
      if (!!receiver.insertAdjacentText)
        receiver.insertAdjacentText(where, text);
      else
        this._insertAdjacentNode$2(receiver, where, document.createTextNode(text));
    },
    insertAdjacentHtml$2: function(receiver, where, html) {
      if (!!receiver.insertAdjacentHTML)
        receiver.insertAdjacentHTML(where, html);
      else
        this._insertAdjacentNode$2(receiver, where, J.createFragment$3$treeSanitizer$validator$x(document.body, html, null, null));
    },
    _insertAdjacentNode$2: function(receiver, where, node) {
      var t1, first;
      switch (where.toLowerCase()) {
        case "beforebegin":
          receiver.parentNode.insertBefore(node, receiver);
          break;
        case "afterbegin":
          if (receiver.childNodes.length > 0) {
            t1 = receiver.childNodes;
            if (0 >= t1.length)
              return H.ioore(t1, 0);
            first = t1[0];
          } else
            first = null;
          receiver.insertBefore(node, first);
          break;
        case "beforeend":
          receiver.appendChild(node);
          break;
        case "afterend":
          receiver.parentNode.insertBefore(node, receiver.nextSibling);
          break;
        default:
          throw H.wrapException(P.ArgumentError$("Invalid position " + where));
      }
    },
    matches$1: function(receiver, selectors) {
      if (!!receiver.matches)
        return receiver.matches(selectors);
      else if (!!receiver.webkitMatchesSelector)
        return receiver.webkitMatchesSelector(selectors);
      else if (!!receiver.mozMatchesSelector)
        return receiver.mozMatchesSelector(selectors);
      else if (!!receiver.msMatchesSelector)
        return receiver.msMatchesSelector(selectors);
      else if (!!receiver.oMatchesSelector)
        return receiver.oMatchesSelector(selectors);
      else
        throw H.wrapException(P.UnsupportedError$("Not supported on this platform"));
    },
    matchesWithAncestors$1: function(receiver, selectors) {
      var elem = receiver;
      do {
        if (J.matches$1$x(elem, selectors))
          return true;
        elem = elem.parentElement;
      } while (elem != null);
      return false;
    },
    createShadowRoot$0: function(receiver) {
      return (receiver.createShadowRoot || receiver.webkitCreateShadowRoot).call(receiver);
    },
    get$shadowRoot: function(receiver) {
      return receiver.shadowRoot || receiver.webkitShadowRoot;
    },
    get$marginEdge: function(receiver) {
      return new W._MarginCssRect(receiver, 0, 0, 0, 0);
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, base, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          t1.push(W._Html5NodeValidator$(null));
          t1.push(W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document.implementation.createHTMLDocument("");
        $.Element__parseDocument = t1;
        $.Element__parseRange = t1.createRange();
        base = $.Element__parseDocument.createElement("base", null);
        J.set$href$x(base, document.baseURI);
        $.Element__parseDocument.head.appendChild(base);
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName, null);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator));
    },
    setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    get$innerHtml: function(receiver) {
      return receiver.innerHTML;
    },
    get$on: function(receiver) {
      return new W.ElementEvents(receiver, receiver);
    },
    focus$0: function(receiver) {
      return receiver.focus();
    },
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    querySelector$1: function(receiver, selectors) {
      return receiver.querySelector(selectors);
    },
    get$onChange: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    },
    get$onClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false), [null]);
    },
    get$onInput: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_input._eventType, false), [null]);
    },
    Element$created$0: function(receiver) {
    },
    $isElement: true,
    $isEventTarget: true,
    "%": ";Element"
  },
  EmbedElement: {
    "^": "HtmlElement;name%,type%",
    "%": "HTMLEmbedElement"
  },
  ErrorEvent: {
    "^": "Event;error=",
    "%": "ErrorEvent"
  },
  Event: {
    "^": "Interceptor;_selector},bubbles=,path=,timeStamp=,type=",
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    preventDefault$0: function(receiver) {
      return receiver.preventDefault();
    },
    $isEvent: true,
    "%": "AudioProcessingEvent|AutocompleteErrorEvent|BeforeUnloadEvent|CSSFontFaceLoadEvent|CloseEvent|DeviceMotionEvent|DeviceOrientationEvent|HashChangeEvent|IDBVersionChangeEvent|InstallEvent|InstallPhaseEvent|MIDIConnectionEvent|MIDIMessageEvent|MediaKeyEvent|MediaKeyMessageEvent|MediaKeyNeededEvent|MediaStreamEvent|MediaStreamTrackEvent|MessageEvent|MutationEvent|OfflineAudioCompletionEvent|OverflowEvent|PageTransitionEvent|RTCDTMFToneChangeEvent|RTCDataChannelEvent|RTCIceCandidateEvent|SecurityPolicyViolationEvent|TrackEvent|TransitionEvent|WebGLContextEvent|WebKitAnimationEvent|WebKitTransitionEvent;Event"
  },
  EventTarget: {
    "^": "Interceptor;",
    get$on: function(receiver) {
      return new W.Events(receiver);
    },
    addEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    dispatchEvent$1: function(receiver, $event) {
      return receiver.dispatchEvent($event);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(listener, 1), useCapture);
    },
    $isEventTarget: true,
    "%": ";EventTarget"
  },
  FieldSetElement: {
    "^": "HtmlElement;form=,name%,type=",
    "%": "HTMLFieldSetElement"
  },
  File: {
    "^": "Blob;name=",
    $isFile: true,
    "%": "File"
  },
  FormElement: {
    "^": "HtmlElement;length=,method=,name%,target=",
    "%": "HTMLFormElement"
  },
  History: {
    "^": "Interceptor;length=",
    "%": "History"
  },
  HtmlCollection: {
    "^": "Interceptor_ListMixin_ImmutableListMixin;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    item$1: [function(receiver, index) {
      return receiver.item(index);
    }, "call$1", "get$item", 2, 0, 50, 49],
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "HTMLCollection|HTMLFormControlsCollection|HTMLOptionsCollection"
  },
  HtmlDocument: {
    "^": "Document;",
    get$title: function(receiver) {
      return receiver.title;
    },
    set$title: function(receiver, value) {
      receiver.title = value;
    },
    "%": "HTMLDocument"
  },
  HttpRequest: {
    "^": "HttpRequestEventTarget;responseText=,status=",
    open$5$async$password$user: function(receiver, method, url, async, password, user) {
      return receiver.open(method, url, async, user, password);
    },
    open$3$async: function($receiver, method, url, async) {
      return $receiver.open(method, url, async);
    },
    send$1: function(receiver, data) {
      return receiver.send(data);
    },
    $isHttpRequest: true,
    "%": "XMLHttpRequest"
  },
  HttpRequestEventTarget: {
    "^": "EventTarget;",
    "%": ";XMLHttpRequestEventTarget"
  },
  IFrameElement: {
    "^": "HtmlElement;name%",
    "%": "HTMLIFrameElement"
  },
  ImageData: {
    "^": "Interceptor;",
    $isImageData: true,
    "%": "ImageData"
  },
  InputElement: {
    "^": "HtmlElement;checked%,form=,name%,type%,value%",
    accept$1: function($receiver, arg0) {
      return $receiver.accept.call$1(arg0);
    },
    select$0: function(receiver) {
      return receiver.select();
    },
    $isInputElement: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true,
    "%": "HTMLInputElement"
  },
  KeyboardEvent: {
    "^": "UIEvent;ctrlKey=,location=",
    get$keyCode: function(receiver) {
      return receiver.keyCode;
    },
    $isKeyboardEvent: true,
    "%": "KeyboardEvent"
  },
  KeygenElement: {
    "^": "HtmlElement;form=,name%,type=",
    "%": "HTMLKeygenElement"
  },
  LIElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLLIElement"
  },
  LabelElement: {
    "^": "HtmlElement;form=",
    "%": "HTMLLabelElement"
  },
  LegendElement: {
    "^": "HtmlElement;form=",
    "%": "HTMLLegendElement"
  },
  LinkElement0: {
    "^": "HtmlElement;href%,type%",
    "%": "HTMLLinkElement"
  },
  Location: {
    "^": "Interceptor;href%",
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Location"
  },
  MapElement: {
    "^": "HtmlElement;name%",
    "%": "HTMLMapElement"
  },
  MediaElement: {
    "^": "HtmlElement;error=",
    load$0: function(receiver) {
      return receiver.load();
    },
    "%": "HTMLAudioElement|HTMLMediaElement|HTMLVideoElement"
  },
  MediaStream: {
    "^": "EventTarget;id=",
    "%": "MediaStream"
  },
  MediaStreamTrack: {
    "^": "EventTarget;id=,kind=",
    "%": "MediaStreamTrack"
  },
  MetaElement: {
    "^": "HtmlElement;content=,name%",
    "%": "HTMLMetaElement"
  },
  MeterElement: {
    "^": "HtmlElement;value%",
    "%": "HTMLMeterElement"
  },
  MidiOutput: {
    "^": "MidiPort;",
    send$2: function(receiver, data, timestamp) {
      return receiver.send(data, timestamp);
    },
    send$1: function($receiver, data) {
      return $receiver.send(data);
    },
    "%": "MIDIOutput"
  },
  MidiPort: {
    "^": "EventTarget;id=,name=,type=",
    "%": "MIDIInput;MIDIPort"
  },
  MouseEvent: {
    "^": "UIEvent;ctrlKey=",
    _initMouseEvent$15: function(receiver, type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, relatedTarget) {
      receiver.initMouseEvent(type, canBubble, cancelable, view, detail, screenX, screenY, clientX, clientY, ctrlKey, altKey, shiftKey, metaKey, button, W._convertDartToNative_EventTarget(relatedTarget));
      return;
    },
    $isMouseEvent: true,
    "%": "DragEvent|MSPointerEvent|MouseEvent|MouseScrollEvent|MouseWheelEvent|PointerEvent|WheelEvent"
  },
  MutationObserver: {
    "^": "Interceptor;",
    disconnect$0: function(receiver) {
      return receiver.disconnect();
    },
    observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree: function(receiver, target, attributeFilter, attributeOldValue, attributes, characterData, characterDataOldValue, childList, subtree) {
      var parsedOptions, t1;
      parsedOptions = {};
      t1 = new W.MutationObserver_observe_override(parsedOptions);
      t1.call$2("childList", childList);
      t1.call$2("attributes", attributes);
      t1.call$2("characterData", characterData);
      t1.call$2("subtree", subtree);
      t1.call$2("attributeOldValue", attributeOldValue);
      t1.call$2("characterDataOldValue", characterDataOldValue);
      receiver.observe(target, parsedOptions);
    },
    observe$3$childList$subtree: function($receiver, target, childList, subtree) {
      return this.observe$8$attributeFilter$attributeOldValue$attributes$characterData$characterDataOldValue$childList$subtree($receiver, target, null, null, null, null, null, childList, subtree);
    },
    "%": "MutationObserver|WebKitMutationObserver"
  },
  MutationRecord: {
    "^": "Interceptor;target=,type=",
    "%": "MutationRecord"
  },
  NavigatorUserMediaError: {
    "^": "Interceptor;name=",
    "%": "NavigatorUserMediaError"
  },
  Node: {
    "^": "EventTarget;firstChild=,nextNode:nextSibling=,ownerDocument=,parent:parentElement=,parentNode=,text:textContent%",
    get$nodes: function(receiver) {
      return new W._ChildNodeListLazy(receiver);
    },
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }

      return receiver;
    },
    _clearChildren$0: function(receiver) {
      var t1;
      for (; t1 = receiver.firstChild, t1 != null;)
        receiver.removeChild(t1);
    },
    toString$0: function(receiver) {
      var t1 = receiver.nodeValue;
      return t1 == null ? J.Interceptor.prototype.toString$0.call(this, receiver) : t1;
    },
    append$1: [function(receiver, newChild) {
      return receiver.appendChild(newChild);
    }, "call$1", "get$append", 2, 0, 51, 52],
    clone$1: function(receiver, deep) {
      return receiver.cloneNode(deep);
    },
    contains$1: function(receiver, other) {
      return receiver.contains(other);
    },
    insertBefore$2: function(receiver, newChild, refChild) {
      return receiver.insertBefore(newChild, refChild);
    },
    _replaceChild$2: function(receiver, newChild, oldChild) {
      return receiver.replaceChild(newChild, oldChild);
    },
    $isNode: true,
    "%": "DocumentType|Notation;Node"
  },
  NodeList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin0;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "NodeList|RadioNodeList"
  },
  OListElement: {
    "^": "HtmlElement;reversed=,type%",
    "%": "HTMLOListElement"
  },
  ObjectElement: {
    "^": "HtmlElement;form=,name%,type%",
    "%": "HTMLObjectElement"
  },
  OptionElement: {
    "^": "HtmlElement;form=,index=,value%",
    $isOptionElement: true,
    "%": "HTMLOptionElement"
  },
  OutputElement: {
    "^": "HtmlElement;form=,name%,type=,value%",
    "%": "HTMLOutputElement"
  },
  ParagraphElement: {
    "^": "HtmlElement;",
    $isParagraphElement: true,
    "%": "HTMLParagraphElement"
  },
  ParamElement: {
    "^": "HtmlElement;name%,value%",
    "%": "HTMLParamElement"
  },
  PopStateEvent: {
    "^": "Event;",
    $isPopStateEvent: true,
    "%": "PopStateEvent"
  },
  ProcessingInstruction: {
    "^": "CharacterData;target=",
    "%": "ProcessingInstruction"
  },
  ProgressElement: {
    "^": "HtmlElement;position=,value%",
    "%": "HTMLProgressElement"
  },
  ProgressEvent: {
    "^": "Event;",
    $isProgressEvent: true,
    "%": "XMLHttpRequestProgressEvent;ProgressEvent"
  },
  Range: {
    "^": "Interceptor;",
    getBoundingClientRect$0: function(receiver) {
      return receiver.getBoundingClientRect();
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    "%": "Range"
  },
  ResourceProgressEvent: {
    "^": "ProgressEvent;url=",
    "%": "ResourceProgressEvent"
  },
  ScriptElement0: {
    "^": "HtmlElement;type%",
    "%": "HTMLScriptElement"
  },
  SelectElement: {
    "^": "HtmlElement;form=,length%,name%,selectedIndex%,type=,value%",
    item$1: [function(receiver, index) {
      return receiver.item(index);
    }, "call$1", "get$item", 2, 0, 50, 49],
    $isSelectElement: true,
    "%": "HTMLSelectElement"
  },
  ShadowRoot: {
    "^": "DocumentFragment;innerHtml:innerHTML=",
    clone$1: function(receiver, deep) {
      return receiver.cloneNode(deep);
    },
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    $isShadowRoot: true,
    "%": "ShadowRoot"
  },
  SourceElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLSourceElement"
  },
  SpeechInputEvent: {
    "^": "Event;results=",
    "%": "SpeechInputEvent"
  },
  SpeechInputResult: {
    "^": "Interceptor;",
    "%": "SpeechInputResult"
  },
  SpeechRecognitionAlternative: {
    "^": "Interceptor;",
    "%": "SpeechRecognitionAlternative"
  },
  SpeechRecognitionError: {
    "^": "Event;error=",
    "%": "SpeechRecognitionError"
  },
  SpeechRecognitionEvent: {
    "^": "Event;results=",
    "%": "SpeechRecognitionEvent"
  },
  SpeechRecognitionResult: {
    "^": "Interceptor;isFinal=,length=",
    item$1: [function(receiver, index) {
      return receiver.item(index);
    }, "call$1", "get$item", 2, 0, 53, 49],
    "%": "SpeechRecognitionResult"
  },
  SpeechSynthesisEvent: {
    "^": "Event;name=",
    "%": "SpeechSynthesisEvent"
  },
  StorageEvent: {
    "^": "Event;key=,url=",
    "%": "StorageEvent"
  },
  StyleElement: {
    "^": "HtmlElement;type%",
    "%": "HTMLStyleElement"
  },
  TableElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + H.S(html) + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, J.get$nodes$x(table));
      return fragment;
    },
    "%": "HTMLTableElement"
  },
  TableRowElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    },
    "%": "HTMLTableRowElement"
  },
  TableSectionElement: {
    "^": "HtmlElement;",
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment, t1, section;
      if ("createContextualFragment" in window.Range.prototype)
        return W.Element.prototype.createFragment$3$treeSanitizer$validator.call(this, receiver, html, treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      t1 = J.createFragment$3$treeSanitizer$validator$x(document.createElement("table", null), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    },
    "%": "HTMLTableSectionElement"
  },
  TemplateElement: {
    "^": "HtmlElement;content=",
    setInnerHtml$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var fragment;
      receiver.textContent = null;
      fragment = this.createFragment$3$treeSanitizer$validator(receiver, html, treeSanitizer, validator);
      receiver.content.appendChild(fragment);
    },
    setInnerHtml$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.setInnerHtml$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    $isTemplateElement: true,
    "%": "HTMLTemplateElement"
  },
  Text: {
    "^": "CharacterData;",
    $isText: true,
    "%": "CDATASection|Text"
  },
  TextAreaElement: {
    "^": "HtmlElement;form=,name%,type=,value%",
    select$0: function(receiver) {
      return receiver.select();
    },
    $isTextAreaElement: true,
    "%": "HTMLTextAreaElement"
  },
  TextTrack: {
    "^": "EventTarget;id=,kind=",
    "%": "TextTrack"
  },
  TouchEvent: {
    "^": "UIEvent;ctrlKey=",
    "%": "TouchEvent"
  },
  TrackElement: {
    "^": "HtmlElement;kind=",
    "%": "HTMLTrackElement"
  },
  UIEvent: {
    "^": "Event;",
    "%": "CompositionEvent|FocusEvent|SVGZoomEvent|TextEvent;UIEvent"
  },
  Window: {
    "^": "EventTarget;name%,status=",
    get$animationFrame: function(receiver) {
      var t1, completer;
      t1 = P.num;
      completer = H.setRuntimeTypeInfo(new P._SyncCompleter(P._Future$(t1)), [t1]);
      this._ensureRequestAnimationFrame$0(receiver);
      this._requestAnimationFrame$1(receiver, W._wrapZone(new W.Window_animationFrame_closure(completer)));
      return completer.future;
    },
    get$location: function(receiver) {
      return receiver.location;
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(callback, 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    get$parent: function(receiver) {
      return W._convertNativeToDart_Window(receiver.parent);
    },
    close$0: function(receiver) {
      return receiver.close();
    },
    scrollBy$3: function(receiver, x, y, scrollOptions) {
      receiver.scrollBy(x, y);
      return;
    },
    scrollBy$2: function($receiver, x, y) {
      return this.scrollBy$3($receiver, x, y, null);
    },
    scrollTo$3: function(receiver, x, y, scrollOptions) {
      receiver.scrollTo(x, y);
      return;
    },
    scrollTo$2: function($receiver, x, y) {
      return this.scrollTo$3($receiver, x, y, null);
    },
    toString$0: function(receiver) {
      return receiver.toString();
    },
    get$onChange: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    },
    get$onClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_click._eventType, false), [null]);
    },
    get$onInput: function(receiver) {
      return H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_input._eventType, false), [null]);
    },
    $isWindow: true,
    $isEventTarget: true,
    "%": "DOMWindow|Window"
  },
  _Attr: {
    "^": "Node;name=,value%",
    "%": "Attr"
  },
  _ClientRect: {
    "^": "Interceptor;bottom=,height=,left=,right=,top=,width=",
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = receiver.left;
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = receiver.top;
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = receiver.width;
          t3 = t1.get$width(other);
          if (t2 == null ? t3 == null : t2 === t3) {
            t2 = receiver.height;
            t1 = t1.get$height(other);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(receiver) {
      var t1, t2, t3, t4, hash;
      t1 = J.get$hashCode$(receiver.left);
      t2 = J.get$hashCode$(receiver.top);
      t3 = J.get$hashCode$(receiver.width);
      t4 = J.get$hashCode$(receiver.height);
      t4 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, t1), t2), t3), t4);
      hash = 536870911 & t4 + ((67108863 & t4) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    $isRectangle: true,
    $asRectangle: function() {
      return [null];
    },
    "%": "ClientRect|DOMRect"
  },
  _HTMLFrameSetElement: {
    "^": "HtmlElement;",
    $isEventTarget: true,
    "%": "HTMLFrameSetElement"
  },
  _NamedNodeMap: {
    "^": "Interceptor_ListMixin_ImmutableListMixin1;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    item$1: [function(receiver, index) {
      return receiver.item(index);
    }, "call$1", "get$item", 2, 0, 54, 49],
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "MozNamedAttrMap|NamedNodeMap"
  },
  _SpeechInputResultList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin2;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    item$1: [function(receiver, index) {
      return receiver.item(index);
    }, "call$1", "get$item", 2, 0, 55, 49],
    $isList: true,
    $asList: function() {
      return [W.SpeechInputResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechInputResult];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "SpeechInputResultList"
  },
  _SpeechRecognitionResultList: {
    "^": "Interceptor_ListMixin_ImmutableListMixin3;",
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        throw H.wrapException(P.RangeError$range(index, 0, t1));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    item$1: [function(receiver, index) {
      return receiver.item(index);
    }, "call$1", "get$item", 2, 0, 56, 49],
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: true,
    "%": "SpeechRecognitionResultList"
  },
  Interceptor_CssStyleDeclarationBase: {
    "^": "Interceptor+CssStyleDeclarationBase;"
  },
  CssStyleDeclarationBase: {
    "^": "Object;",
    get$clear: function(receiver) {
      return this.getPropertyValue$1(receiver, "clear");
    },
    clear$0: function($receiver) {
      return this.get$clear($receiver).call$0();
    },
    get$content: function(receiver) {
      return this.getPropertyValue$1(receiver, "content");
    },
    get$display: function(receiver) {
      return this.getPropertyValue$1(receiver, "display");
    },
    set$display: function(receiver, value) {
      this.setProperty$3(receiver, "display", value, "");
    },
    get$left: function(receiver) {
      return this.getPropertyValue$1(receiver, "left");
    },
    get$lineHeight: function(receiver) {
      return this.getPropertyValue$1(receiver, "line-height");
    },
    set$lineHeight: function(receiver, value) {
      this.setProperty$3(receiver, "line-height", value, "");
    },
    set$paddingTop: function(receiver, value) {
      this.setProperty$3(receiver, "padding-top", value, "");
    },
    get$position: function(receiver) {
      return this.getPropertyValue$1(receiver, "position");
    },
    set$position: function(receiver, value) {
      this.setProperty$3(receiver, "position", value, "");
    },
    get$right: function(receiver) {
      return this.getPropertyValue$1(receiver, "right");
    }
  },
  _ChildrenElementList: {
    "^": "ListBase;_html$_element,_childElements",
    contains$1: function(_, element) {
      return J.contains$1$asx(this._childElements, element);
    },
    get$isEmpty: function(_) {
      return this._html$_element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1 = this._childElements;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      this._html$_element.replaceChild(value, t1[index]);
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      this._html$_element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    addAll$1: function(_, iterable) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(!!J.getInterceptor(iterable).$is_ChildNodeListLazy ? P.List_List$from(iterable, true, null) : iterable), t2 = this._html$_element; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    remove$1: function(_, object) {
      return false;
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._html$_element);
    },
    get$first: function(_) {
      var result = this._html$_element.firstElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._html$_element.lastElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    $asListBase: function() {
      return [W.Element];
    },
    $asList: function() {
      return [W.Element];
    },
    $asIterable: function() {
      return [W.Element];
    }
  },
  _FrozenElementList: {
    "^": "ListBase;_nodeList,_elementList",
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      var t1 = this._nodeList;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort list"));
    },
    get$first: function(_) {
      return C.NodeList_methods.get$first(this._nodeList);
    },
    get$last: function(_) {
      return C.NodeList_methods.get$last(this._nodeList);
    },
    get$classes: function(_) {
      return W._MultiElementCssClassSet$(this._elementList);
    },
    set$classes: function(_, value) {
      H.IterableMixinWorkaround_forEach(this._elementList, new W._FrozenElementList_classes_closure(value));
    },
    get$marginEdge: function(_) {
      return J.get$marginEdge$x(C.JSArray_methods.get$first(this._elementList));
    },
    get$onChange: function(_) {
      return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(this, false, C.EventStreamProvider_change._eventType), [null]);
    },
    get$onClick: function(_) {
      return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(this, false, C.EventStreamProvider_click._eventType), [null]);
    },
    get$onInput: function(_) {
      return H.setRuntimeTypeInfo(new W._ElementListEventStreamImpl(this, false, C.EventStreamProvider_input._eventType), [null]);
    },
    _html$_FrozenElementList$_wrap$1: function(_nodeList, $T) {
      var t1 = C.NodeList_methods.where$1(this._nodeList, new W._FrozenElementList$_wrap_closure());
      this._elementList = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null,
    static: {_FrozenElementList$_wrap: function(_nodeList, $T) {
        var t1 = H.setRuntimeTypeInfo(new W._FrozenElementList(_nodeList, null), [$T]);
        t1._html$_FrozenElementList$_wrap$1(_nodeList, $T);
        return t1;
      }}
  },
  _FrozenElementList$_wrap_closure: {
    "^": "Closure0:30;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement;
    },
    $isFunction: true
  },
  _FrozenElementList_classes_closure: {
    "^": "Closure0:30;value_0",
    call$1: function(e) {
      var t1 = this.value_0;
      J.set$classes$x(e, t1);
      return t1;
    },
    $isFunction: true
  },
  Element_Element$html_closure: {
    "^": "Closure0:30;",
    call$1: function(e) {
      return !!J.getInterceptor(e).$isElement;
    },
    $isFunction: true
  },
  Entry: {
    "^": "Interceptor;"
  },
  Events: {
    "^": "Object;_ptr<",
    $index: function(_, type) {
      return H.setRuntimeTypeInfo(new W._EventStream(this.get$_ptr(), type, false), [null]);
    }
  },
  ElementEvents: {
    "^": "Events;_ptr:html$ElementEvents$_ptr<,_ptr",
    $index: function(_, type) {
      var t1, t2;
      t1 = $.get$ElementEvents_webkitEvents();
      t2 = J.getInterceptor$s(type);
      if (t1.get$keys()._map.containsKey$1(t2.toLowerCase$0(type)))
        if (P.Device_isWebKit() === true)
          return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(this.html$ElementEvents$_ptr, t1.$index(0, t2.toLowerCase$0(type)), false), [null]);
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(this.html$ElementEvents$_ptr, type, false), [null]);
    },
    static: {"^": "ElementEvents_webkitEvents"}
  },
  Interceptor_ListMixin: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin: {
    "^": "Interceptor_ListMixin+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  HttpRequest_getString_closure: {
    "^": "Closure0:30;",
    call$1: [function(xhr) {
      return J.get$responseText$x(xhr);
    }, "call$1", null, 2, 0, null, 93, "call"],
    $isFunction: true
  },
  HttpRequest_request_closure0: {
    "^": "Closure0:58;xhr_0",
    call$2: function(header, value) {
      this.xhr_0.setRequestHeader(header, value);
    },
    $isFunction: true
  },
  HttpRequest_request_closure: {
    "^": "Closure0:30;completer_1,xhr_2",
    call$1: [function(e) {
      var t1, t2, t3;
      t1 = this.xhr_2;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      t2 = t2 >= 200 && t2 < 300 || t2 === 0 || t2 === 304;
      t3 = this.completer_1;
      if (t2) {
        t2 = t3.future;
        if (t2._state !== 0)
          H.throwExpression(P.StateError$("Future already completed"));
        t2._asyncComplete$1(t1);
      } else
        t3.completeError$1(e);
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  MutationObserver_observe_override: {
    "^": "Closure0:58;parsedOptions_0",
    call$2: function(key, value) {
      if (value != null)
        this.parsedOptions_0[key] = value;
    },
    $isFunction: true
  },
  _ChildNodeListLazy: {
    "^": "ListBase;_this",
    get$first: function(_) {
      var result = this._this.firstChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$single: function(_) {
      var t1, l;
      t1 = this._this;
      l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      t1 = J.getInterceptor(iterable);
      if (!!t1.$is_ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      }
      for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    remove$1: function(_, object) {
      return false;
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._this);
    },
    $indexSet: function(_, index, value) {
      var t1, t2;
      t1 = this._this;
      t2 = t1.childNodes;
      if (index >>> 0 !== index || index >= t2.length)
        return H.ioore(t2, index);
      t1.replaceChild(value, t2[index]);
    },
    get$iterator: function(_) {
      return C.NodeList_methods.get$iterator(this._this.childNodes);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      var t1 = this._this.childNodes;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $is_ChildNodeListLazy: true,
    $asListBase: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin0: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin0: {
    "^": "Interceptor_ListMixin0+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Window_animationFrame_closure: {
    "^": "Closure0:30;completer_0",
    call$1: [function(time) {
      var t1 = this.completer_0.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._complete$1(time);
    }, "call$1", null, 2, 0, null, 94, "call"],
    $isFunction: true
  },
  Interceptor_ListMixin1: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin1: {
    "^": "Interceptor_ListMixin1+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.Node];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.Node];
    }
  },
  Interceptor_ListMixin2: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechInputResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechInputResult];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin2: {
    "^": "Interceptor_ListMixin2+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechInputResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechInputResult];
    }
  },
  Interceptor_ListMixin3: {
    "^": "Interceptor+ListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    }
  },
  Interceptor_ListMixin_ImmutableListMixin3: {
    "^": "Interceptor_ListMixin3+ImmutableListMixin;",
    $isList: true,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    }
  },
  _AttributeMap: {
    "^": "Object;",
    addAll$1: function(_, other) {
      J.forEach$1$ax(other, new W._AttributeMap_addAll_closure(this));
    },
    putIfAbsent$2: function(key, ifAbsent) {
      if (this.containsKey$1(key) !== true)
        this.$indexSet(0, key, ifAbsent.call$0());
      return this.$index(0, key);
    },
    clear$0: function(_) {
      var t1;
      for (t1 = this.get$keys(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        this.remove$1(0, t1._current);
    },
    forEach$1: function(_, f) {
      var t1, key;
      for (t1 = this.get$keys(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        key = t1._current;
        f.call$2(key, this.$index(0, key));
      }
    },
    get$keys: function() {
      var attributes, keys, len, i;
      attributes = this._html$_element.attributes;
      keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          keys.push(J.get$name$x(attributes[i]));
        }
      }
      return keys;
    },
    get$values: function(_) {
      var attributes, values, len, i;
      attributes = this._html$_element.attributes;
      values = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        if (this._matches$1(attributes[i])) {
          if (i >= attributes.length)
            return H.ioore(attributes, i);
          values.push(J.get$value$x(attributes[i]));
        }
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _AttributeMap_addAll_closure: {
    "^": "Closure0:58;this_0",
    call$2: [function(k, v) {
      this.this_0.$indexSet(0, k, v);
    }, "call$2", null, 4, 0, null, 95, 96, "call"],
    $isFunction: true
  },
  _ElementAttributeMap: {
    "^": "_AttributeMap;_html$_element",
    containsKey$1: function(key) {
      return this._html$_element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._html$_element.getAttribute(key);
    },
    $indexSet: function(_, key, value) {
      this._html$_element.setAttribute(key, value);
    },
    remove$1: function(_, key) {
      var t1, value;
      t1 = this._html$_element;
      value = t1.getAttribute(key);
      t1.removeAttribute(key);
      return value;
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    _matches$1: function(node) {
      return node.namespaceURI == null;
    }
  },
  _DataAttributeMap: {
    "^": "Object;_attributes",
    addAll$1: function(_, other) {
      H.IterableMixinWorkaround_forEach(other, new W._DataAttributeMap_addAll_closure(this));
    },
    containsKey$1: function(key) {
      return this._attributes._html$_element.hasAttribute("data-" + this._toHyphenedName$1(key));
    },
    $index: function(_, key) {
      return this._attributes._html$_element.getAttribute("data-" + this._toHyphenedName$1(key));
    },
    $indexSet: function(_, key, value) {
      this._attributes._html$_element.setAttribute("data-" + this._toHyphenedName$1(key), value);
    },
    remove$1: function(_, key) {
      var t1, t2, value;
      t1 = "data-" + this._toHyphenedName$1(key);
      t2 = this._attributes._html$_element;
      value = t2.getAttribute(t1);
      t2.removeAttribute(t1);
      return value;
    },
    clear$0: function(_) {
      var t1, t2, t3;
      for (t1 = this.get$keys(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = this._attributes._html$_element; t1.moveNext$0();) {
        t3 = "data-" + this._toHyphenedName$1(t1._current);
        t2.getAttribute(t3);
        t2.removeAttribute(t3);
      }
    },
    forEach$1: function(_, f) {
      this._attributes.forEach$1(0, new W._DataAttributeMap_forEach_closure(this, f));
    },
    get$keys: function() {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this._attributes.forEach$1(0, new W._DataAttributeMap_keys_closure(this, keys));
      return keys;
    },
    get$values: function(_) {
      var values = H.setRuntimeTypeInfo([], [P.String]);
      this._attributes.forEach$1(0, new W._DataAttributeMap_values_closure(this, values));
      return values;
    },
    get$length: function(_) {
      return this.get$keys().length;
    },
    get$isEmpty: function(_) {
      return this.get$keys().length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$keys().length !== 0;
    },
    _toCamelCase$2$startUppercase: function(hyphenedName, startUppercase) {
      var segments, start, i, segment, t1;
      segments = hyphenedName.split("-");
      start = startUppercase ? 0 : 1;
      for (i = start; i < segments.length; ++i) {
        segment = segments[i];
        t1 = J.getInterceptor$asx(segment);
        if (J.$gt$n(t1.get$length(segment), 0)) {
          t1 = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
          if (i >= segments.length)
            return H.ioore(segments, i);
          segments[i] = t1;
        }
      }
      return C.JSArray_methods.join$1(segments, "");
    },
    _toCamelCase$1: function(hyphenedName) {
      return this._toCamelCase$2$startUppercase(hyphenedName, false);
    },
    _toHyphenedName$1: function(word) {
      var sb, t1, i, t2, lower;
      sb = P.StringBuffer$("");
      t1 = J.getInterceptor$asx(word);
      i = 0;
      while (true) {
        t2 = t1.get$length(word);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        lower = J.toLowerCase$0$s(t1.$index(word, i));
        if (!J.$eq(t1.$index(word, i), lower) && i > 0)
          sb._contents += "-";
        sb._contents += lower;
        ++i;
      }
      return sb._contents;
    },
    $isMap: true,
    $asMap: function() {
      return [P.String, P.String];
    }
  },
  _DataAttributeMap_addAll_closure: {
    "^": "Closure0:58;this_0",
    call$2: [function(k, v) {
      var t1 = this.this_0;
      t1._attributes._html$_element.setAttribute("data-" + t1._toHyphenedName$1(k), v);
    }, "call$2", null, 4, 0, null, 95, 96, "call"],
    $isFunction: true
  },
  _DataAttributeMap_forEach_closure: {
    "^": "Closure0:97;this_0,f_1",
    call$2: function(key, value) {
      var t1 = J.getInterceptor$s(key);
      if (t1.startsWith$1(key, "data-"))
        this.f_1.call$2(this.this_0._toCamelCase$1(t1.substring$1(key, 5)), value);
    },
    $isFunction: true
  },
  _DataAttributeMap_keys_closure: {
    "^": "Closure0:97;this_0,keys_1",
    call$2: function(key, value) {
      var t1 = J.getInterceptor$s(key);
      if (t1.startsWith$1(key, "data-"))
        this.keys_1.push(this.this_0._toCamelCase$1(t1.substring$1(key, 5)));
    },
    $isFunction: true
  },
  _DataAttributeMap_values_closure: {
    "^": "Closure0:97;this_0,values_1",
    call$2: function(key, value) {
      if (J.startsWith$1$s(key, "data-"))
        this.values_1.push(value);
    },
    $isFunction: true
  },
  _MultiElementCssClassSet: {
    "^": "CssClassSetImpl;_elementIterable,_elementCssClassSetIterable",
    readClasses$0: function() {
      var s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      this._elementCssClassSetIterable.forEach$1(0, new W._MultiElementCssClassSet_readClasses_closure(s));
      return s;
    },
    writeClasses$1: function(s) {
      var classes, t1;
      classes = C.JSArray_methods.join$1(P.List_List$from(s, true, null), " ");
      for (t1 = this._elementIterable, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.set$className$x(t1._current, classes);
    },
    modify$1: function(f) {
      this._elementCssClassSetIterable.forEach$1(0, new W._MultiElementCssClassSet_modify_closure(f));
    },
    toggle$2: function(value, shouldAdd) {
      return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_toggle_closure(value, shouldAdd));
    },
    remove$1: function(_, value) {
      return this._modifyWithReturnValue$1(new W._MultiElementCssClassSet_remove_closure(value));
    },
    _modifyWithReturnValue$1: function(f) {
      return this._elementCssClassSetIterable.fold$2(0, false, new W._MultiElementCssClassSet__modifyWithReturnValue_closure(f));
    },
    _MultiElementCssClassSet$1: function(_elementIterable) {
      this._elementCssClassSetIterable = H.setRuntimeTypeInfo(new H.MappedListIterable(P.List_List$from(this._elementIterable, true, null), new W._MultiElementCssClassSet_closure()), [null, null]);
    },
    static: {_MultiElementCssClassSet$: function(_elementIterable) {
        var t1 = new W._MultiElementCssClassSet(_elementIterable, null);
        t1._MultiElementCssClassSet$1(_elementIterable);
        return t1;
      }}
  },
  _MultiElementCssClassSet_closure: {
    "^": "Closure0:30;",
    call$1: [function(e) {
      return new W._ElementCssClassSet(e);
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  _MultiElementCssClassSet_readClasses_closure: {
    "^": "Closure0:30;s_0",
    call$1: function(e) {
      return this.s_0.addAll$1(0, e.readClasses$0());
    },
    $isFunction: true
  },
  _MultiElementCssClassSet_modify_closure: {
    "^": "Closure0:30;f_0",
    call$1: function(e) {
      return e.modify$1(this.f_0);
    },
    $isFunction: true
  },
  _MultiElementCssClassSet_toggle_closure: {
    "^": "Closure0:30;value_0,shouldAdd_1",
    call$1: function(e) {
      return e.toggle$2(this.value_0, this.shouldAdd_1);
    },
    $isFunction: true
  },
  _MultiElementCssClassSet_remove_closure: {
    "^": "Closure0:30;value_0",
    call$1: function(e) {
      return J.remove$1$ax(e, this.value_0);
    },
    $isFunction: true
  },
  _MultiElementCssClassSet__modifyWithReturnValue_closure: {
    "^": "Closure0:58;f_0",
    call$2: function(prevValue, element) {
      return this.f_0.call$1(element) === true || prevValue === true;
    },
    $isFunction: true
  },
  _ElementCssClassSet: {
    "^": "CssClassSetImpl;_html$_element",
    readClasses$0: function() {
      var s, t1, trimmed;
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      for (t1 = J.split$1$s(J.get$className$x(this._html$_element), " "), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1._current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      P.List_List$from(s, true, null);
      J.set$className$x(this._html$_element, s.join$1(0, " "));
    }
  },
  _ContentCssRect: {
    "^": "CssRect;_html$_element,left,top,_width,_height",
    get$height: function(_) {
      var t1, t2;
      t1 = J.get$offsetHeight$x(this._html$_element);
      t2 = this._addOrSubtractToBoxModel$2($.get$_HEIGHT(), "content");
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    get$width: function(_) {
      var t1, t2;
      t1 = J.get$offsetWidth$x(this._html$_element);
      t2 = this._addOrSubtractToBoxModel$2($.get$_WIDTH(), "content");
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    get$left: function(_) {
      var t1, t2;
      t1 = J.get$left$x(J.getBoundingClientRect$0$x(this._html$_element));
      t2 = this._addOrSubtractToBoxModel$2(["left"], "content");
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - t2;
    },
    get$top: function(_) {
      var t1, t2;
      t1 = J.get$top$x(J.getBoundingClientRect$0$x(this._html$_element));
      t2 = this._addOrSubtractToBoxModel$2(["top"], "content");
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - t2;
    }
  },
  _MarginCssRect: {
    "^": "CssRect;_html$_element,left,top,_width,_height",
    get$height: function(_) {
      var t1, t2;
      t1 = J.get$offsetHeight$x(this._html$_element);
      t2 = this._addOrSubtractToBoxModel$2($.get$_HEIGHT(), "margin");
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    get$width: function(_) {
      var t1, t2;
      t1 = J.get$offsetWidth$x(this._html$_element);
      t2 = this._addOrSubtractToBoxModel$2($.get$_WIDTH(), "margin");
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    get$left: function(_) {
      var t1, t2;
      t1 = J.get$left$x(J.getBoundingClientRect$0$x(this._html$_element));
      t2 = this._addOrSubtractToBoxModel$2(["left"], "margin");
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - t2;
    },
    get$top: function(_) {
      var t1, t2;
      t1 = J.get$top$x(J.getBoundingClientRect$0$x(this._html$_element));
      t2 = this._addOrSubtractToBoxModel$2(["top"], "margin");
      if (typeof t1 !== "number")
        return t1.$sub();
      return t1 - t2;
    }
  },
  CssRect: {
    "^": "MutableRectangle;",
    _addOrSubtractToBoxModel$2: function(dimensions, augmentingMeasurement) {
      var styles, t1, t2, t3, t4, val, measurement, propValue, t5;
      styles = J.getComputedStyle$0$x(this._html$_element);
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(dimensions, dimensions.length, 0, null), [H.getTypeArgumentByIndex(dimensions, 0)]), t2 = augmentingMeasurement === "margin", t3 = !t2, t4 = augmentingMeasurement === "content", val = 0; t1.moveNext$0();) {
        measurement = t1._current;
        if (t2) {
          propValue = styles.getPropertyValue(augmentingMeasurement + "-" + H.S(measurement));
          t5 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
          if (typeof t5 !== "number")
            return H.iae(t5);
          val += t5;
        }
        if (t4) {
          propValue = styles.getPropertyValue("padding-" + H.S(measurement));
          t5 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
          if (typeof t5 !== "number")
            return H.iae(t5);
          val -= t5;
        }
        if (t3) {
          propValue = styles.getPropertyValue("border-" + H.S(measurement) + "-width");
          t5 = W.Dimension$css(propValue != null ? propValue : "")._html$_value;
          if (typeof t5 !== "number")
            return H.iae(t5);
          val -= t5;
        }
      }
      return val;
    },
    $asMutableRectangle: function() {
      return [P.num];
    },
    $as_RectangleBase: function() {
      return [P.num];
    },
    $asRectangle: function() {
      return [P.num];
    }
  },
  Dimension: {
    "^": "Object;_html$_value,_unit",
    toString$0: function(_) {
      return H.S(this._html$_value) + H.S(this._unit);
    },
    get$value: function(_) {
      return this._html$_value;
    },
    Dimension$css$1: function(cssValue) {
      var t1, t2, t3;
      if (cssValue === "")
        cssValue = "0px";
      if (J.getInterceptor$s(cssValue).endsWith$1(cssValue, "%"))
        this._unit = "%";
      else
        this._unit = C.JSString_methods.substring$1(cssValue, cssValue.length - 2);
      t1 = C.JSString_methods.contains$1(cssValue, ".");
      t2 = cssValue.length;
      t3 = this._unit;
      if (t1)
        this._html$_value = H.Primitives_parseDouble(C.JSString_methods.substring$2(cssValue, 0, t2 - t3.length), null);
      else
        this._html$_value = H.Primitives_parseInt(C.JSString_methods.substring$2(cssValue, 0, t2 - t3.length), null, null);
    },
    static: {Dimension$css: function(cssValue) {
        var t1 = new W.Dimension(null, null);
        t1.Dimension$css$1(cssValue);
        return t1;
      }}
  },
  EventStreamProvider: {
    "^": "Object;_eventType",
    forTarget$2$useCapture: function(e, useCapture) {
      return H.setRuntimeTypeInfo(new W._EventStream(e, this._eventType, useCapture), [null]);
    },
    forTarget$1: function(e) {
      return this.forTarget$2$useCapture(e, false);
    }
  },
  _EventStream: {
    "^": "Stream;_html$_target,_eventType,_useCapture",
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = new W._EventStreamSubscription(0, this._html$_target, this._eventType, W._wrapZone(onData), this._useCapture);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      t1._tryResume$0();
      return t1;
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    }
  },
  _ElementEventStreamImpl: {
    "^": "_EventStream;_html$_target,_eventType,_useCapture",
    matches$1: function(_, selector) {
      var t1 = H.setRuntimeTypeInfo(new P._WhereStream(new W._ElementEventStreamImpl_matches_closure(selector), this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      return H.setRuntimeTypeInfo(new P._MapStream(new W._ElementEventStreamImpl_matches_closure0(selector), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
    },
    $isStream: true
  },
  _ElementEventStreamImpl_matches_closure: {
    "^": "Closure0:30;selector_0",
    call$1: function($event) {
      return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
    },
    $isFunction: true
  },
  _ElementEventStreamImpl_matches_closure0: {
    "^": "Closure0:30;selector_1",
    call$1: [function(e) {
      J.set$_selector$x(e, this.selector_1);
      return e;
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  _ElementListEventStreamImpl: {
    "^": "Stream;_targetList,_useCapture,_eventType",
    matches$1: function(_, selector) {
      var t1 = H.setRuntimeTypeInfo(new P._WhereStream(new W._ElementListEventStreamImpl_matches_closure(selector), this), [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      return H.setRuntimeTypeInfo(new P._MapStream(new W._ElementListEventStreamImpl_matches_closure0(selector), t1), [H.getRuntimeTypeArgument(t1, "Stream", 0), null]);
    },
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var pool, t1, t2, t3, t4;
      pool = H.setRuntimeTypeInfo(new W._StreamPool(null, P.LinkedHashMap_LinkedHashMap(null, null, null, [P.Stream, null], [P.StreamSubscription, null])), [null]);
      pool._html$_StreamPool$broadcast$0(null);
      for (t1 = this._targetList, t1 = t1.get$iterator(t1), t2 = this._eventType, t3 = this._useCapture; t1.moveNext$0();) {
        t4 = new W._EventStream(t1._current, t2, t3);
        t4.$builtinTypeInfo = [null];
        pool.add$1(0, t4);
      }
      t1 = pool._controller;
      t1.toString;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]).listen$4$cancelOnError$onDone$onError(onData, cancelOnError, onDone, onError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    listen$1: function(onData) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, null, null);
    },
    $isStream: true
  },
  _ElementListEventStreamImpl_matches_closure: {
    "^": "Closure0:30;selector_0",
    call$1: function($event) {
      return J.matchesWithAncestors$1$x(J.get$target$x($event), this.selector_0);
    },
    $isFunction: true
  },
  _ElementListEventStreamImpl_matches_closure0: {
    "^": "Closure0:30;selector_1",
    call$1: [function(e) {
      J.set$_selector$x(e, this.selector_1);
      return e;
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  _EventStreamSubscription: {
    "^": "StreamSubscription;_pauseCount,_html$_target,_eventType,_onData,_useCapture",
    cancel$0: function() {
      if (this._html$_target == null)
        return;
      this._unlisten$0();
      this._html$_target = null;
      this._onData = null;
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._html$_target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    get$isPaused: function() {
      return this._pauseCount > 0;
    },
    resume$0: function() {
      if (this._html$_target == null || this._pauseCount <= 0)
        return;
      --this._pauseCount;
      this._tryResume$0();
    },
    _tryResume$0: function() {
      var t1 = this._onData;
      if (t1 != null && this._pauseCount <= 0)
        J.addEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._html$_target, this._eventType, t1, this._useCapture);
    }
  },
  _StreamPool: {
    "^": "Object;_controller,_subscriptions",
    add$1: function(_, stream) {
      var t1, t2;
      t1 = this._subscriptions;
      if (t1.containsKey$1(stream))
        return;
      t2 = this._controller;
      t1.$indexSet(0, stream, stream.listen$3$onDone$onError(t2.get$add(t2), new W._StreamPool_add_closure(this, stream), this._controller.get$addError()));
    },
    remove$1: function(_, stream) {
      var subscription = this._subscriptions.remove$1(0, stream);
      if (subscription != null)
        subscription.cancel$0();
    },
    close$0: [function(_) {
      var t1, t2;
      for (t1 = this._subscriptions, t2 = t1.get$values(t1), t2 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0), H.getTypeArgumentByIndex(t2, 1)]); t2.moveNext$0();)
        t2._current.cancel$0();
      t1.clear$0(0);
      this._controller.close$0(0);
    }, "call$0", "get$close", 0, 0, 10],
    _html$_StreamPool$broadcast$0: function($T) {
      this._controller = P.StreamController_StreamController$broadcast(this.get$close(this), null, true, $T);
    }
  },
  _StreamPool_add_closure: {
    "^": "Closure0:11;this_0,stream_1",
    call$0: [function() {
      return this.this_0.remove$1(0, this.stream_1);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _Html5NodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return $.get$_Html5NodeValidator__allowedElements().contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1, validator;
      tagName = J.get$tagName$x(element);
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      validator = t1.$index(0, H.S(tagName) + "::" + attributeName);
      if (validator == null)
        validator = t1.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return validator.call$4(element, attributeName, value, this);
    },
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var t1, t2;
      t1 = $.get$_Html5NodeValidator__attributeValidators();
      if (t1.get$isEmpty(t1)) {
        for (t2 = H.setRuntimeTypeInfo(new H.ListIterator(C.List_1GN, 261, 0, null), [H.getTypeArgumentByIndex(C.List_1GN, 0)]); t2.moveNext$0();)
          t1.$indexSet(0, t2._current, W._Html5NodeValidator__standardAttributeValidator$closure());
        for (t2 = H.setRuntimeTypeInfo(new H.ListIterator(C.List_yrN, 12, 0, null), [H.getTypeArgumentByIndex(C.List_yrN, 0)]); t2.moveNext$0();)
          t1.$indexSet(0, t2._current, W._Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    $isNodeValidator: true,
    static: {"^": "_Html5NodeValidator__allowedElements,_Html5NodeValidator__standardAttributes,_Html5NodeValidator__uriAttributes,_Html5NodeValidator__attributeValidators", _Html5NodeValidator$: function(uriPolicy) {
        var t1 = new W._SameOriginUriPolicy(W.AnchorElement_AnchorElement(null), window.location);
        t1 = new W._Html5NodeValidator(t1);
        t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
        return t1;
      }, _Html5NodeValidator__standardAttributeValidator: [function(element, attributeName, value, context) {
        return true;
      }, "call$4", "_Html5NodeValidator__standardAttributeValidator$closure", 8, 0, 26, 27, 28, 14, 29], _Html5NodeValidator__uriAttributeValidator: [function(element, attributeName, value, context) {
        var t1, t2, t3, t4, t5;
        t1 = context.get$uriPolicy();
        t2 = t1._hiddenAnchor;
        t3 = J.getInterceptor$x(t2);
        t3.set$href(t2, value);
        t4 = t3.get$hostname(t2);
        t1 = t1._loc;
        t5 = t1.hostname;
        if (t4 == null ? t5 == null : t4 === t5) {
          t4 = t3.get$port(t2);
          t5 = t1.port;
          if (t4 == null ? t5 == null : t4 === t5) {
            t4 = t3.get$protocol(t2);
            t1 = t1.protocol;
            t1 = t4 == null ? t1 == null : t4 === t1;
          } else
            t1 = false;
        } else
          t1 = false;
        if (!t1)
          t1 = t3.get$hostname(t2) === "" && t3.get$port(t2) === "" && t3.get$protocol(t2) === ":";
        else
          t1 = true;
        return t1;
      }, "call$4", "_Html5NodeValidator__uriAttributeValidator$closure", 8, 0, 26, 27, 28, 14, 29]}
  },
  ImmutableListMixin: {
    "^": "Object;",
    get$iterator: function(receiver) {
      return H.setRuntimeTypeInfo(new W.FixedSizeListIterator(receiver, this.get$length(receiver), -1, null), [H.getRuntimeTypeArgument(receiver, "ImmutableListMixin", 0)]);
    },
    add$1: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    addAll$1: function(receiver, iterable) {
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    remove$1: function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on immutable List."));
    },
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  NodeValidatorBuilder: {
    "^": "Object;_validators",
    add$1: function(_, validator) {
      this._validators.push(validator);
    },
    allowsElement$1: function(element) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return H.IterableMixinWorkaround_any(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: true
  },
  NodeValidatorBuilder_allowsElement_closure: {
    "^": "Closure0:30;element_0",
    call$1: function(v) {
      return v.allowsElement$1(this.element_0);
    },
    $isFunction: true
  },
  NodeValidatorBuilder_allowsAttribute_closure: {
    "^": "Closure0:30;element_0,attributeName_1,value_2",
    call$1: function(v) {
      return v.allowsAttribute$3(this.element_0, this.attributeName_1, this.value_2);
    },
    $isFunction: true
  },
  _SimpleNodeValidator: {
    "^": "Object;uriPolicy<",
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, J.get$tagName$x(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var tagName, t1;
      tagName = J.get$tagName$x(element);
      t1 = this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return this.uriPolicy.allowsUri$1(value);
      else {
        t1 = this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: true
  },
  _TemplatingNodeValidator: {
    "^": "_SimpleNodeValidator;_templateAttrs,allowedElements,allowedAttributes,allowedUriAttributes,uriPolicy",
    allowsAttribute$3: function(element, attributeName, value) {
      if (W._SimpleNodeValidator.prototype.allowsAttribute$3.call(this, element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (J.get$attributes$x(element)._html$_element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    },
    static: {"^": "_TemplatingNodeValidator__TEMPLATE_ATTRS", _TemplatingNodeValidator$: function() {
        var t1, t2, t3, t4;
        t1 = H.setRuntimeTypeInfo(new H.MappedListIterable(C.List_wSV, new W._TemplatingNodeValidator_closure()), [null, null]);
        t2 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t2.addAll$1(0, ["TEMPLATE"]);
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t3.addAll$1(0, t1);
        t1 = t3;
        t3 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
        t4 = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
        t4.addAll$1(0, C.List_wSV);
        return new W._TemplatingNodeValidator(t4, t2, t1, t3, null);
      }}
  },
  _TemplatingNodeValidator_closure: {
    "^": "Closure0:30;",
    call$1: [function(attr) {
      return "TEMPLATE::" + H.S(attr);
    }, "call$1", null, 2, 0, null, 98, "call"],
    $isFunction: true
  },
  _SvgNodeValidator: {
    "^": "Object;",
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor(element);
      if (!!t1.$isScriptElement)
        return false;
      if (!!t1.$isSvgElement)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: true
  },
  FixedSizeListIterator: {
    "^": "Object;_array,_html$_length,_position,_html$_current",
    moveNext$0: function() {
      var nextPosition, t1;
      nextPosition = this._position + 1;
      t1 = this._html$_length;
      if (nextPosition < t1) {
        this._html$_current = J.$index$asx(this._array, nextPosition);
        this._position = nextPosition;
        return true;
      }
      this._html$_current = null;
      this._position = t1;
      return false;
    },
    get$current: function() {
      return this._html$_current;
    }
  },
  _callConstructor_closure: {
    "^": "Closure0:30;constructor_0,interceptor_1",
    call$1: [function(receiver) {
      var t1 = H.makeLeafDispatchRecord(this.interceptor_1);
      Object.defineProperty(receiver, init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
      receiver.constructor = receiver.__proto__.constructor;
      return this.constructor_0(receiver);
    }, "call$1", null, 2, 0, null, 31, "call"],
    $isFunction: true
  },
  _DOMWindowCrossFrame: {
    "^": "Object;_window",
    get$location: function(_) {
      return W._LocationCrossFrame__createSafe(this._window.location);
    },
    get$parent: function(_) {
      return W._DOMWindowCrossFrame__createSafe(this._window.parent);
    },
    close$0: function(_) {
      return this._window.close();
    },
    get$on: function(_) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    addEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    removeEventListener$3: function(_, type, listener, useCapture) {
      return H.throwExpression(P.UnsupportedError$("You can only attach EventListeners to your own window."));
    },
    $isEventTarget: true,
    static: {_DOMWindowCrossFrame__createSafe: function(w) {
        if (w === window)
          return w;
        else
          return new W._DOMWindowCrossFrame(w);
      }}
  },
  _LocationCrossFrame: {
    "^": "Object;_location",
    set$href: function(_, val) {
      this._location.href = val;
      return;
    },
    static: {_LocationCrossFrame__createSafe: function($location) {
        if ($location === window.location)
          return $location;
        else
          return new W._LocationCrossFrame($location);
      }}
  },
  NodeValidator: {
    "^": "Object;",
    $isNodeValidator: true
  },
  _SameOriginUriPolicy: {
    "^": "Object;_hiddenAnchor,_loc"
  },
  _ValidatingTreeSanitizer: {
    "^": "Object;validator",
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$1(node);
    },
    sanitizeNode$1: function(node) {
      var t1, attrs, t2, isAttr, keys, i, $name, t3;
      switch (node.nodeType) {
        case 1:
          t1 = J.getInterceptor$x(node);
          attrs = t1.get$attributes(node);
          if (!this.validator.allowsElement$1(node)) {
            window;
            t2 = "Removing disallowed element <" + H.S(t1.get$tagName(node)) + ">";
            if (typeof console != "undefined")
              console.warn(t2);
            t1.remove$0(node);
            break;
          }
          t2 = attrs._html$_element;
          isAttr = t2.getAttribute("is");
          if (isAttr != null)
            if (!this.validator.allowsAttribute$3(node, "is", isAttr)) {
              window;
              t2 = "Removing disallowed type extension <" + H.S(t1.get$tagName(node)) + " is=\"" + isAttr + "\">";
              if (typeof console != "undefined")
                console.warn(t2);
              t1.remove$0(node);
              break;
            }
          keys = C.JSArray_methods.toList$0(attrs.get$keys());
          for (i = attrs.get$keys().length - 1; i >= 0; --i) {
            if (i >= keys.length)
              return H.ioore(keys, i);
            $name = keys[i];
            if (!this.validator.allowsAttribute$3(node, J.toLowerCase$0$s($name), t2.getAttribute($name))) {
              window;
              t3 = "Removing disallowed attribute <" + H.S(t1.get$tagName(node)) + " " + H.S($name) + "=\"" + H.S(t2.getAttribute($name)) + "\">";
              if (typeof console != "undefined")
                console.warn(t3);
              t2.getAttribute($name);
              t2.removeAttribute($name);
            }
          }
          if (!!t1.$isTemplateElement)
            this.sanitizeTree$1(node.content);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          J.remove$0$ax(node);
      }
    }
  },
  _ValidatingTreeSanitizer_sanitizeTree_walk: {
    "^": "Closure0:99;this_0",
    call$1: function(node) {
      var child, nextChild;
      this.this_0.sanitizeNode$1(node);
      child = node.lastChild;
      for (; child != null; child = nextChild) {
        nextChild = child.previousSibling;
        this.call$1(child);
      }
    },
    $isFunction: true
  }
}],
["dart.dom.indexed_db", "dart:indexed_db", , P, {
  "^": "",
  KeyRange: {
    "^": "Interceptor;lower=",
    $isKeyRange: true,
    "%": "IDBKeyRange"
  }
}],
["dart.dom.svg", "dart:svg", , P, {
  "^": "",
  AElement: {
    "^": "GraphicsElement;target=,href=",
    "%": "SVGAElement"
  },
  AltGlyphElement: {
    "^": "TextPositioningElement;href=",
    "%": "SVGAltGlyphElement"
  },
  FEColorMatrixElement: {
    "^": "SvgElement;type=,values=",
    "%": "SVGFEColorMatrixElement"
  },
  FECompositeElement: {
    "^": "SvgElement;operator=",
    "%": "SVGFECompositeElement"
  },
  FEImageElement: {
    "^": "SvgElement;href=",
    "%": "SVGFEImageElement"
  },
  FEMorphologyElement: {
    "^": "SvgElement;operator=",
    "%": "SVGFEMorphologyElement"
  },
  FETurbulenceElement: {
    "^": "SvgElement;type=",
    "%": "SVGFETurbulenceElement"
  },
  FilterElement: {
    "^": "SvgElement;href=",
    "%": "SVGFilterElement"
  },
  GraphicsElement: {
    "^": "SvgElement;",
    "%": "SVGCircleElement|SVGClipPathElement|SVGDefsElement|SVGEllipseElement|SVGForeignObjectElement|SVGGElement|SVGGeometryElement|SVGLineElement|SVGPathElement|SVGPolygonElement|SVGPolylineElement|SVGRectElement|SVGSwitchElement;SVGGraphicsElement"
  },
  ImageElement0: {
    "^": "GraphicsElement;href=",
    "%": "SVGImageElement"
  },
  PatternElement: {
    "^": "SvgElement;href=",
    "%": "SVGPatternElement"
  },
  ScriptElement: {
    "^": "SvgElement;type%,href=",
    $isScriptElement: true,
    "%": "SVGScriptElement"
  },
  StyleElement0: {
    "^": "SvgElement;type%",
    get$title: function(receiver) {
      return receiver.title;
    },
    set$title: function(receiver, value) {
      receiver.title = value;
    },
    "%": "SVGStyleElement"
  },
  SvgElement: {
    "^": "Element;",
    get$classes: function(receiver) {
      if (receiver._cssClassSet == null)
        receiver._cssClassSet = new P._AttributeClassSet(receiver);
      return receiver._cssClassSet;
    },
    get$children: function(receiver) {
      return H.setRuntimeTypeInfo(new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver)), [W.Element]);
    },
    get$innerHtml: function(receiver) {
      var container, cloned, t1;
      container = W._ElementFactoryProvider_createElement_tag("div", null);
      cloned = receiver.cloneNode(true);
      t1 = J.getInterceptor$x(container);
      J.addAll$1$ax(t1.get$children(container), J.get$children$x(cloned));
      return t1.get$innerHtml(container);
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var t1, html, fragment, svgFragment, root;
      if (treeSanitizer == null) {
        t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
        validator = new W.NodeValidatorBuilder(t1);
        t1.push(W._Html5NodeValidator$(null));
        t1.push(W._TemplatingNodeValidator$());
        t1.push(new W._SvgNodeValidator());
        treeSanitizer = new W._ValidatingTreeSanitizer(validator);
      }
      html = "<svg version=\"1.1\">" + H.S(svg) + "</svg>";
      fragment = J.createFragment$2$treeSanitizer$x(document.body, html, treeSanitizer);
      svgFragment = document.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    insertAdjacentText$2: function(receiver, where, text) {
      throw H.wrapException(P.UnsupportedError$("Cannot invoke insertAdjacentText on SVG."));
    },
    insertAdjacentHtml$2: function(receiver, where, text) {
      throw H.wrapException(P.UnsupportedError$("Cannot invoke insertAdjacentHtml on SVG."));
    },
    get$onChange: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_change._eventType, false), [null]);
    },
    get$onClick: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false), [null]);
    },
    get$onInput: function(receiver) {
      return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_input._eventType, false), [null]);
    },
    $isSvgElement: true,
    $isEventTarget: true,
    "%": "SVGAltGlyphDefElement|SVGAltGlyphItemElement|SVGAnimateElement|SVGAnimateMotionElement|SVGAnimateTransformElement|SVGAnimationElement|SVGComponentTransferFunctionElement|SVGCursorElement|SVGDescElement|SVGDiscardElement|SVGFEBlendElement|SVGFEComponentTransferElement|SVGFEConvolveMatrixElement|SVGFEDiffuseLightingElement|SVGFEDisplacementMapElement|SVGFEDistantLightElement|SVGFEDropShadowElement|SVGFEFloodElement|SVGFEFuncAElement|SVGFEFuncBElement|SVGFEFuncGElement|SVGFEFuncRElement|SVGFEGaussianBlurElement|SVGFEMergeElement|SVGFEMergeNodeElement|SVGFEOffsetElement|SVGFEPointLightElement|SVGFESpecularLightingElement|SVGFESpotLightElement|SVGFETileElement|SVGFontElement|SVGFontFaceElement|SVGFontFaceFormatElement|SVGFontFaceNameElement|SVGFontFaceSrcElement|SVGFontFaceUriElement|SVGGlyphElement|SVGGlyphRefElement|SVGHKernElement|SVGMPathElement|SVGMarkerElement|SVGMaskElement|SVGMetadataElement|SVGMissingGlyphElement|SVGSetElement|SVGStopElement|SVGSymbolElement|SVGTitleElement|SVGVKernElement|SVGViewElement;SVGElement"
  },
  SvgSvgElement: {
    "^": "GraphicsElement;",
    getElementById$1: function(receiver, elementId) {
      return receiver.getElementById(elementId);
    },
    $isSvgSvgElement: true,
    "%": "SVGSVGElement"
  },
  TextContentElement: {
    "^": "GraphicsElement;",
    "%": ";SVGTextContentElement"
  },
  TextPathElement: {
    "^": "TextContentElement;method=,href=",
    "%": "SVGTextPathElement"
  },
  TextPositioningElement: {
    "^": "TextContentElement;",
    "%": "SVGTSpanElement|SVGTextElement;SVGTextPositioningElement"
  },
  UseElement: {
    "^": "GraphicsElement;href=",
    "%": "SVGUseElement"
  },
  _GradientElement: {
    "^": "SvgElement;href=",
    "%": "SVGGradientElement|SVGLinearGradientElement|SVGRadialGradientElement"
  },
  _AttributeClassSet: {
    "^": "CssClassSetImpl;_svg$_element",
    readClasses$0: function() {
      var classname, s, t1, trimmed;
      classname = this._svg$_element.getAttribute("class");
      s = P.LinkedHashSet_LinkedHashSet(null, null, null, P.String);
      if (classname == null)
        return s;
      for (t1 = classname.split(" "), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        trimmed = J.trim$0$s(t1._current);
        if (trimmed.length !== 0)
          s.add$1(0, trimmed);
      }
      return s;
    },
    writeClasses$1: function(s) {
      this._svg$_element.setAttribute("class", s.join$1(0, " "));
    }
  }
}],
["dart.isolate", "dart:isolate", , P, {
  "^": "",
  Capability: {
    "^": "Object;",
    $isCapability: true,
    static: {Capability_Capability: function() {
        return new H.CapabilityImpl((Math.random() * 0x100000000 >>> 0) + (Math.random() * 0x100000000 >>> 0) * 4294967296);
      }}
  }
}],
["dart.js", "dart:js", , P, {
  "^": "",
  _convertDartFunction: function(f, captureThis) {
    return function(_call, f, captureThis) {
      return function() {
        return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
      };
    }(P._callDartFunction, f, captureThis);
  },
  _callDartFunction: [function(callback, captureThis, $self, $arguments) {
    var arguments0;
    if (captureThis === true) {
      arguments0 = [$self];
      C.JSArray_methods.addAll$1(arguments0, $arguments);
      $arguments = arguments0;
    }
    return P._convertToJS(H.Primitives_applyFunction(callback, P.List_List$from(J.map$1$ax($arguments, P._convertToDart$closure()), true, null), P.Function__toMangledNames(null)));
  }, "call$4", "_callDartFunction$closure", 8, 0, null, 36, 37, 38, 39],
  _defineProperty: function(o, $name, value) {
    var exception;
    if (Object.isExtensible(o))
      try {
        Object.defineProperty(o, $name, {value: value});
        return true;
      } catch (exception) {
        H.unwrapException(exception);
      }

    return false;
  },
  _getOwnProperty: function(o, $name) {
    if (Object.prototype.hasOwnProperty.call(o, $name))
      return o[$name];
    return;
  },
  _convertToJS: [function(o) {
    var t1;
    if (o == null)
      return;
    else if (typeof o === "string" || typeof o === "number" || typeof o === "boolean")
      return o;
    else {
      t1 = J.getInterceptor(o);
      if (!!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow)
        return o;
      else if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      else if (!!t1.$isJsObject)
        return o._js$_jsObject;
      else if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      else
        return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.get$_dartProxyCtor()));
    }
  }, "call$1", "_convertToJS$closure", 2, 0, 30, 40],
  _getJsProxy: function(o, propertyName, createProxy) {
    var jsProxy = P._getOwnProperty(o, propertyName);
    if (jsProxy == null) {
      jsProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, jsProxy);
    }
    return jsProxy;
  },
  _convertToDart: [function(o) {
    var t1;
    if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
      return o;
    else {
      if (o instanceof Object) {
        t1 = J.getInterceptor(o);
        t1 = !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isTypedData || !!t1.$isWindow;
      } else
        t1 = false;
      if (t1)
        return o;
      else if (o instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(o.getTime(), false);
      else if (o.constructor === $.get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    }
  }, "call$1", "_convertToDart$closure", 2, 0, 41, 40],
  _wrapToDart: function(o) {
    if (typeof o == "function")
      return P._getDartProxy(o, $.get$_DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
    else if (o instanceof Array)
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
    else
      return P._getDartProxy(o, $.get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
  },
  _getDartProxy: function(o, propertyName, createProxy) {
    var dartProxy = P._getOwnProperty(o, propertyName);
    if (dartProxy == null || !(o instanceof Object)) {
      dartProxy = createProxy.call$1(o);
      P._defineProperty(o, propertyName, dartProxy);
    }
    return dartProxy;
  },
  JsObject: {
    "^": "Object;_js$_jsObject",
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._js$_jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._js$_jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isJsObject && this._js$_jsObject === other._js$_jsObject;
    },
    hasProperty$1: function(property) {
      return property in this._js$_jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._js$_jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return P.Object.prototype.toString$0.call(this, this);
      }

    },
    callMethod$2: function(method, args) {
      var t1, t2;
      t1 = this._js$_jsObject;
      t2 = args == null ? null : P.List_List$from(J.map$1$ax(args, P._convertToJS$closure()), true, null);
      return P._convertToDart(t1[method].apply(t1, t2));
    },
    $isJsObject: true,
    static: {JsObject_JsObject$fromBrowserObject: function(object) {
        if (object == null)
          throw H.wrapException(P.ArgumentError$("object cannot be a num, string, bool, or null"));
        return P._wrapToDart(P._convertToJS(object));
      }, JsObject__convertDataTree: function(data) {
        return new P.JsObject__convertDataTree__convert(P.HashMap_HashMap$identity(null, null)).call$1(data);
      }}
  },
  JsObject__convertDataTree__convert: {
    "^": "Closure0:30;_convertedObjects_0",
    call$1: [function(o) {
      var t1, t2, convertedMap, key, convertedList;
      t1 = this._convertedObjects_0;
      if (t1.containsKey$1(o))
        return t1.$index(0, o);
      t2 = J.getInterceptor(o);
      if (!!t2.$isMap) {
        convertedMap = {};
        t1.$indexSet(0, o, convertedMap);
        for (t1 = J.get$iterator$ax(o.get$keys()); t1.moveNext$0();) {
          key = t1.get$current();
          convertedMap[key] = this.call$1(t2.$index(o, key));
        }
        return convertedMap;
      } else if (!!t2.$isIterable) {
        convertedList = [];
        t1.$indexSet(0, o, convertedList);
        C.JSArray_methods.addAll$1(convertedList, t2.map$1(o, this));
        return convertedList;
      } else
        return P._convertToJS(o);
    }, "call$1", null, 2, 0, null, 40, "call"],
    $isFunction: true
  },
  JsFunction: {
    "^": "JsObject;_js$_jsObject",
    apply$2$thisArg: function(args, thisArg) {
      var t1, t2;
      t1 = P._convertToJS(thisArg);
      t2 = P.List_List$from(H.setRuntimeTypeInfo(new H.MappedListIterable(args, P._convertToJS$closure()), [null, null]), true, null);
      return P._convertToDart(this._js$_jsObject.apply(t1, t2));
    },
    apply$1: function(args) {
      return this.apply$2$thisArg(args, null);
    },
    $isJsFunction: true
  },
  JsArray: {
    "^": "JsObject_ListMixin;_js$_jsObject",
    $index: function(_, index) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this)));
      }
      return P.JsObject.prototype.$index.call(this, this, index);
    },
    $indexSet: function(_, index, value) {
      var t1;
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index)) {
        if (typeof index === "number" && Math.floor(index) === index)
          t1 = index < 0 || index >= this.get$length(this);
        else
          t1 = false;
        if (t1)
          H.throwExpression(P.RangeError$range(index, 0, this.get$length(this)));
      }
      P.JsObject.prototype.$indexSet.call(this, this, index, value);
    },
    get$length: function(_) {
      var len = this._js$_jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      P.JsObject.prototype.$indexSet.call(this, this, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [value]);
    },
    addAll$1: function(_, iterable) {
      this.callMethod$2("push", iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      var t1, $length, args;
      t1 = this.get$length(this);
      if (start > t1)
        H.throwExpression(P.RangeError$range(start, 0, t1));
      if (end < start || end > t1)
        H.throwExpression(P.RangeError$range(end, start, t1));
      $length = end - start;
      if ($length === 0)
        return;
      args = [start, $length];
      t1 = new H.SubListIterable(iterable, skipCount, null);
      t1.$builtinTypeInfo = [null];
      C.JSArray_methods.addAll$1(args, t1.take$1(0, $length));
      this.callMethod$2("splice", args);
    },
    sort$1: function(_, compare) {
      this.callMethod$2("sort", [compare]);
    }
  },
  JsObject_ListMixin: {
    "^": "JsObject+ListMixin;",
    $isList: true,
    $asList: null,
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: null
  },
  _convertToJS_closure: {
    "^": "Closure0:30;",
    call$1: function(o) {
      var jsFunction = P._convertDartFunction(o, false);
      P._defineProperty(jsFunction, $.get$_DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $isFunction: true
  },
  _convertToJS_closure0: {
    "^": "Closure0:30;ctor_0",
    call$1: function(o) {
      return new this.ctor_0(o);
    },
    $isFunction: true
  },
  _wrapToDart_closure: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return new P.JsFunction(o);
    },
    $isFunction: true
  },
  _wrapToDart_closure0: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return H.setRuntimeTypeInfo(new P.JsArray(o), [null]);
    },
    $isFunction: true
  },
  _wrapToDart_closure1: {
    "^": "Closure0:30;",
    call$1: function(o) {
      return new P.JsObject(o);
    },
    $isFunction: true
  }
}],
["dart.math", "dart:math", , P, {
  "^": "",
  _JenkinsSmiHash_combine0: function(hash, value) {
    hash = 536870911 & hash + value;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish: function(hash) {
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash ^= hash >>> 11;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  min: function(a, b) {
    var t1;
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return b;
    if (a < b)
      return a;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return (a + b) * a * b;
      if (a === 0)
        t1 = b === 0 ? 1 / b < 0 : b < 0;
      else
        t1 = false;
      if (t1 || isNaN(b))
        return b;
      return a;
    }
    return a;
  },
  max: function(a, b) {
    if (typeof a !== "number")
      throw H.wrapException(P.ArgumentError$(a));
    if (typeof b !== "number")
      throw H.wrapException(P.ArgumentError$(b));
    if (a > b)
      return a;
    if (a < b)
      return b;
    if (typeof b === "number") {
      if (typeof a === "number")
        if (a === 0)
          return a + b;
      if (C.JSDouble_methods.get$isNaN(b))
        return b;
      return a;
    }
    if (b === 0 && C.JSNumber_methods.get$isNegative(a))
      return b;
    return a;
  },
  _RectangleBase: {
    "^": "Object;",
    get$right: function(_) {
      var t1, t2;
      t1 = this.get$left(this);
      t2 = this.get$width(this);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    get$bottom: function(_) {
      var t1, t2;
      t1 = this.get$top(this);
      t2 = this.get$height(this);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 + t2;
    },
    toString$0: function(_) {
      return "Rectangle (" + H.S(this.get$left(this)) + ", " + H.S(this.get$top(this)) + ") " + H.S(this.get$width(this)) + " x " + H.S(this.get$height(this));
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      t1 = J.getInterceptor(other);
      if (!t1.$isRectangle)
        return false;
      t2 = this.get$left(this);
      t3 = t1.get$left(other);
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = this.get$top(this);
        t3 = t1.get$top(other);
        if (t2 == null ? t3 == null : t2 === t3) {
          t2 = this.get$left(this);
          t3 = this.get$width(this);
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t2 + t3 === t1.get$right(other)) {
            t2 = this.get$top(this);
            t3 = this.get$height(this);
            if (typeof t2 !== "number")
              return t2.$add();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t1 = t2 + t3 === t1.get$bottom(other);
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4, t5, t6;
      t1 = J.get$hashCode$(this.get$left(this));
      t2 = J.get$hashCode$(this.get$top(this));
      t3 = this.get$left(this);
      t4 = this.get$width(this);
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = this.get$top(this);
      t6 = this.get$height(this);
      if (typeof t5 !== "number")
        return t5.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2), t3 + t4 & 0x1FFFFFFF), t5 + t6 & 0x1FFFFFFF));
    }
  },
  MutableRectangle: {
    "^": "_RectangleBase;left>,top>",
    get$width: function(_) {
      return this._width;
    },
    get$height: function(_) {
      return this._height;
    },
    $isRectangle: true,
    $asRectangle: null
  }
}],
["dart.pkg.collection.equality", "package:collection/equality.dart", , Z, {
  "^": "",
  DefaultEquality: {
    "^": "Object;"
  },
  ListEquality: {
    "^": "Object;_elementEquality",
    equals$2: function(e1, e2) {
      var t1, $length, t2, i;
      if (e1 == null ? e2 == null : e1 === e2)
        return true;
      if (e1 == null || e2 == null)
        return false;
      t1 = J.getInterceptor$asx(e1);
      $length = t1.get$length(e1);
      t2 = J.getInterceptor$asx(e2);
      if (!J.$eq($length, t2.get$length(e2)))
        return false;
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        if (!J.$eq(t1.$index(e1, i), t2.$index(e2, i)))
          return false;
      return true;
    }
  }
}],
["dart.pkg.collection.wrappers", "package:collection/wrappers.dart", , Q, {
  "^": "",
  UnmodifiableMapMixin__throw: function() {
    throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable Map"));
  },
  UnmodifiableMapView: {
    "^": "DelegatingMap_UnmodifiableMapMixin;_base"
  },
  DelegatingMap_UnmodifiableMapMixin: {
    "^": "DelegatingMap+UnmodifiableMapMixin;",
    $isMap: true
  },
  UnmodifiableMapMixin: {
    "^": "Object;",
    $indexSet: function(_, key, value) {
      return Q.UnmodifiableMapMixin__throw();
    },
    addAll$1: function(_, other) {
      return Q.UnmodifiableMapMixin__throw();
    },
    remove$1: function(_, key) {
      Q.UnmodifiableMapMixin__throw();
    },
    clear$0: function(_) {
      return Q.UnmodifiableMapMixin__throw();
    },
    $isMap: true
  },
  DelegatingMap: {
    "^": "Object;",
    $index: function(_, key) {
      return this._base.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this._base.$indexSet(0, key, value);
    },
    addAll$1: function(_, other) {
      this._base.addAll$1(0, other);
    },
    clear$0: function(_) {
      this._base.clear$0(0);
    },
    containsKey$1: function(key) {
      return this._base.containsKey$1(key);
    },
    forEach$1: function(_, f) {
      this._base.forEach$1(0, f);
    },
    get$isEmpty: function(_) {
      return this._base._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._base._collection$_length !== 0;
    },
    get$keys: function() {
      var t1 = this._base;
      return H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterable(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this._base._collection$_length;
    },
    remove$1: function(_, key) {
      return this._base.remove$1(0, key);
    },
    get$values: function(_) {
      var t1 = this._base;
      return t1.get$values(t1);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this._base);
    },
    $isMap: true
  }
}],
["dart.typed_data.implementation", "dart:_native_typed_data", , H, {
  "^": "",
  NativeTypedArray$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeTypedArrayOfDouble$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeTypedArrayOfInt$: function(receiver) {
    receiver.toString;
    return receiver;
  },
  NativeByteBuffer: {
    "^": "Interceptor;",
    get$runtimeType: function(receiver) {
      return C.Type_wAg;
    },
    $isNativeByteBuffer: true,
    "%": "ArrayBuffer"
  },
  NativeTypedData: {
    "^": "Interceptor;",
    _invalidIndex$2: function(receiver, index, $length) {
      var t1 = J.getInterceptor$n(index);
      if (t1.$lt(index, 0) || t1.$ge(index, $length))
        throw H.wrapException(P.RangeError$range(index, 0, $length));
      else
        throw H.wrapException(P.ArgumentError$("Invalid list index " + H.S(index)));
    },
    _checkIndex$2: function(receiver, index, $length) {
      if (index >>> 0 !== index || index >= $length)
        this._invalidIndex$2(receiver, index, $length);
    },
    $isNativeTypedData: true,
    $isTypedData: true,
    "%": ";ArrayBufferView;NativeTypedArray|NativeTypedArray_ListMixin|NativeTypedArray_ListMixin_FixedLengthListMixin|NativeTypedArrayOfDouble|NativeTypedArray_ListMixin0|NativeTypedArray_ListMixin_FixedLengthListMixin0|NativeTypedArrayOfInt"
  },
  NativeByteData: {
    "^": "NativeTypedData;",
    get$runtimeType: function(receiver) {
      return C.Type_oGP;
    },
    $isTypedData: true,
    "%": "DataView"
  },
  NativeFloat32List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: function(receiver) {
      return C.Type_Art;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    },
    $isTypedData: true,
    "%": "Float32Array"
  },
  NativeFloat64List: {
    "^": "NativeTypedArrayOfDouble;",
    get$runtimeType: function(receiver) {
      return C.Type_ckn;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    },
    $isTypedData: true,
    "%": "Float64Array"
  },
  NativeInt16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_UoK;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    $isTypedData: true,
    "%": "Int16Array"
  },
  NativeInt32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_dTZ;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    $isTypedData: true,
    "%": "Int32Array"
  },
  NativeInt8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_mp3;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    $isTypedData: true,
    "%": "Int8Array"
  },
  NativeUint16List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_CAk;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    $isTypedData: true,
    "%": "Uint16Array"
  },
  NativeUint32List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_irB;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    $isTypedData: true,
    "%": "Uint32Array"
  },
  NativeUint8ClampedList: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_QuW;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    $isTypedData: true,
    "%": "CanvasPixelArray|Uint8ClampedArray"
  },
  NativeUint8List: {
    "^": "NativeTypedArrayOfInt;",
    get$runtimeType: function(receiver) {
      return C.Type_6L0;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      var t1 = receiver.length;
      if (index >>> 0 !== index || index >= t1)
        this._invalidIndex$2(receiver, index, t1);
      receiver[index] = value;
    },
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    },
    $isTypedData: true,
    "%": ";Uint8Array"
  },
  NativeTypedArray: {
    "^": "NativeTypedData;",
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var t1, count, sourceLength;
      t1 = receiver.length + 1;
      this._checkIndex$2(receiver, start, t1);
      this._checkIndex$2(receiver, end, t1);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end));
      count = end - start;
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: true
  },
  NativeTypedArrayOfDouble: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfDouble) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfDouble: true,
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    }
  },
  NativeTypedArray_ListMixin: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$double];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$double];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin: {
    "^": "NativeTypedArray_ListMixin+FixedLengthListMixin;"
  },
  NativeTypedArrayOfInt: {
    "^": "NativeTypedArray_ListMixin_FixedLengthListMixin0;",
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      if (!!J.getInterceptor(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      P.ListMixin.prototype.setRange$4.call(this, receiver, start, end, iterable, skipCount);
    },
    $isNativeTypedArrayOfInt: true,
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin0: {
    "^": "NativeTypedArray+ListMixin;",
    $isList: true,
    $asList: function() {
      return [P.$int];
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.$int];
    }
  },
  NativeTypedArray_ListMixin_FixedLengthListMixin0: {
    "^": "NativeTypedArray_ListMixin0+FixedLengthListMixin;"
  }
}],
["dart2js._js_primitives", "dart:_js_primitives", , H, {
  "^": "",
  printString: function(string) {
    if (typeof dartPrint == "function") {
      dartPrint(string);
      return;
    }
    if (typeof console == "object" && typeof console.log == "function") {
      console.log(string);
      return;
    }
    if (typeof window == "object")
      return;
    if (typeof print == "function") {
      print(string);
      return;
    }
    throw "Unable to print message: " + String(string);
  }
}],
["dartdoc_viewer.analytics", "package:dartdoc_viewer/analytics.dart", , K, {
  "^": "",
  Tracker: {
    "^": "Object;_lastLoc"
  }
}],
["dartdoc_viewer.web.index_html_0", "file:///Users/efortuna/Documents/internProject/dartdoc-viewer/client/web/index.html.0.dart", , L, {
  "^": "",
  main: [function() {
    return V.initApp();
  }, "call$0", "main$closure", 0, 0, 11]
}],
["html_common", "dart:html_common", , P, {
  "^": "",
  _convertDartToNative_PrepareForStructuredClone: function(value) {
    var copies, copy;
    copies = [];
    copy = new P._convertDartToNative_PrepareForStructuredClone_walk(new P._convertDartToNative_PrepareForStructuredClone_findSlot([], copies), new P._convertDartToNative_PrepareForStructuredClone_readSlot(copies), new P._convertDartToNative_PrepareForStructuredClone_writeSlot(copies)).call$1(value);
    new P._convertDartToNative_PrepareForStructuredClone_cleanupSlots().call$0();
    return copy;
  },
  convertNativeToDart_AcceptStructuredClone: function(object, mustCopy) {
    var copies = [];
    return new P.convertNativeToDart_AcceptStructuredClone_walk(mustCopy, new P.convertNativeToDart_AcceptStructuredClone_findSlot([], copies), new P.convertNativeToDart_AcceptStructuredClone_readSlot(copies), new P.convertNativeToDart_AcceptStructuredClone_writeSlot(copies)).call$1(object);
  },
  Device_isOpera: function() {
    var t1 = $.Device__isOpera;
    if (t1 == null) {
      t1 = J.contains$2$asx(window.navigator.userAgent, "Opera", 0);
      $.Device__isOpera = t1;
    }
    return t1;
  },
  Device_isWebKit: function() {
    var t1 = $.Device__isWebKit;
    if (t1 == null) {
      t1 = P.Device_isOpera() !== true && J.contains$2$asx(window.navigator.userAgent, "WebKit", 0);
      $.Device__isWebKit = t1;
    }
    return t1;
  },
  _convertDartToNative_PrepareForStructuredClone_findSlot: {
    "^": "Closure0:22;values_1,copies_2",
    call$1: function(value) {
      var t1, $length, i;
      t1 = this.values_1;
      $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      t1.push(value);
      this.copies_2.push(null);
      return $length;
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_readSlot: {
    "^": "Closure0:100;copies_3",
    call$1: function(i) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_writeSlot: {
    "^": "Closure0:101;copies_4",
    call$2: function(i, x) {
      var t1 = this.copies_4;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots: {
    "^": "Closure0:11;",
    call$0: function() {
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk: {
    "^": "Closure0:30;findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var t1, t2, slot, copy, $length, i;
      t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor(e);
      if (!!t2.$isDateTime)
        return new Date(e.millisecondsSinceEpoch);
      if (!!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isImageData)
        return e;
      if (!!t2.$isNativeByteBuffer)
        return e;
      if (!!t2.$isNativeTypedData)
        return e;
      if (!!t2.$isMap) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        t1.copy_0 = copy;
        if (copy != null)
          return copy;
        copy = {};
        t1.copy_0 = copy;
        this.writeSlot_7.call$2(slot, copy);
        t2.forEach$1(e, new P._convertDartToNative_PrepareForStructuredClone_walk_closure(t1, this));
        return t1.copy_0;
      }
      if (!!t2.$isList) {
        $length = t2.get$length(e);
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null) {
          if (true === copy) {
            copy = new Array($length);
            this.writeSlot_7.call$2(slot, copy);
          }
          return copy;
        }
        copy = new Array($length);
        this.writeSlot_7.call$2(slot, copy);
        for (i = 0; i < $length; ++i) {
          t1 = this.call$1(t2.$index(e, i));
          if (i >= copy.length)
            return H.ioore(copy, i);
          copy[i] = t1;
        }
        return copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    $isFunction: true
  },
  _convertDartToNative_PrepareForStructuredClone_walk_closure: {
    "^": "Closure0:58;box_0,walk_8",
    call$2: function(key, value) {
      this.box_0.copy_0[key] = this.walk_8.call$1(value);
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_findSlot: {
    "^": "Closure0:22;values_0,copies_1",
    call$1: function(value) {
      var t1, $length, i, t2;
      t1 = this.values_0;
      $length = t1.length;
      for (i = 0; i < $length; ++i) {
        t2 = t1[i];
        if (t2 == null ? value == null : t2 === value)
          return i;
      }
      t1.push(value);
      this.copies_1.push(null);
      return $length;
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_readSlot: {
    "^": "Closure0:100;copies_2",
    call$1: function(i) {
      var t1 = this.copies_2;
      if (i >= t1.length)
        return H.ioore(t1, i);
      return t1[i];
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_writeSlot: {
    "^": "Closure0:101;copies_3",
    call$2: function(i, x) {
      var t1 = this.copies_3;
      if (i >= t1.length)
        return H.ioore(t1, i);
      t1[i] = x;
    },
    $isFunction: true
  },
  convertNativeToDart_AcceptStructuredClone_walk: {
    "^": "Closure0:30;mustCopy_4,findSlot_5,readSlot_6,writeSlot_7",
    call$1: function(e) {
      var slot, copy, t1, key, $length, t2, i;
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date)
        return P.DateTime$fromMillisecondsSinceEpoch(e.getTime(), true);
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (Object.getPrototypeOf(e) === Object.prototype) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
        this.writeSlot_7.call$2(slot, copy);
        for (t1 = Object.keys(e), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
          key = t1._current;
          copy.$indexSet(0, key, this.call$1(e[key]));
        }
        return copy;
      }
      if (e instanceof Array) {
        slot = this.findSlot_5.call$1(e);
        copy = this.readSlot_6.call$1(slot);
        if (copy != null)
          return copy;
        t1 = J.getInterceptor$asx(e);
        $length = t1.get$length(e);
        copy = this.mustCopy_4 ? new Array($length) : e;
        this.writeSlot_7.call$2(slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t2.$indexSet(copy, i, this.call$1(t1.$index(e, i)));
        return copy;
      }
      return e;
    },
    $isFunction: true
  },
  CssClassSetImpl: {
    "^": "Object;",
    toString$0: function(_) {
      return this.readClasses$0().join$1(0, " ");
    },
    toggle$2: function(value, shouldAdd) {
      var s, result;
      s = this.readClasses$0();
      if (shouldAdd) {
        s.add$1(0, value);
        result = true;
      } else {
        s.remove$1(0, value);
        result = false;
      }
      this.writeClasses$1(s);
      return result;
    },
    get$iterator: function(_) {
      var t1 = this.readClasses$0();
      t1 = H.setRuntimeTypeInfo(new P.LinkedHashSetIterator(t1, t1._modifications, null, null), [null]);
      t1._cell = t1._set._first;
      return t1;
    },
    forEach$1: function(_, f) {
      this.readClasses$0().forEach$1(0, f);
    },
    join$1: function(_, separator) {
      return this.readClasses$0().join$1(0, separator);
    },
    map$1: function(_, f) {
      var t1 = this.readClasses$0();
      return H.MappedIterable_MappedIterable(t1, f, H.getRuntimeTypeArgument(t1, "IterableBase", 0), null);
    },
    where$1: function(_, f) {
      var t1 = this.readClasses$0();
      return H.setRuntimeTypeInfo(new H.WhereIterable(t1, f), [H.getRuntimeTypeArgument(t1, "IterableBase", 0)]);
    },
    any$1: function(_, f) {
      return this.readClasses$0().any$1(0, f);
    },
    get$isEmpty: function(_) {
      return this.readClasses$0()._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this.readClasses$0()._collection$_length !== 0;
    },
    get$length: function(_) {
      return this.readClasses$0()._collection$_length;
    },
    fold$2: function(_, initialValue, combine) {
      return this.readClasses$0().fold$2(0, initialValue, combine);
    },
    contains$1: function(_, value) {
      return this.readClasses$0().contains$1(0, value);
    },
    lookup$1: function(value) {
      return this.readClasses$0().contains$1(0, value) ? value : null;
    },
    add$1: function(_, value) {
      return this.modify$1(new P.CssClassSetImpl_add_closure(value));
    },
    remove$1: function(_, value) {
      var s, result;
      s = this.readClasses$0();
      result = s.remove$1(0, value);
      this.writeClasses$1(s);
      return result;
    },
    addAll$1: function(_, iterable) {
      this.modify$1(new P.CssClassSetImpl_addAll_closure(iterable));
    },
    get$first: function(_) {
      var t1 = this.readClasses$0()._first;
      if (t1 == null)
        H.throwExpression(P.StateError$("No elements"));
      return t1.get$_element();
    },
    get$last: function(_) {
      var t1 = this.readClasses$0()._last;
      if (t1 == null)
        H.throwExpression(P.StateError$("No elements"));
      return t1.get$_element();
    },
    toList$1$growable: function(_, growable) {
      return this.readClasses$0().toList$1$growable(0, growable);
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    firstWhere$2$orElse: function(_, test, orElse) {
      return this.readClasses$0().firstWhere$2$orElse(0, test, orElse);
    },
    firstWhere$1: function($receiver, test) {
      return this.firstWhere$2$orElse($receiver, test, null);
    },
    clear$0: function(_) {
      this.modify$1(new P.CssClassSetImpl_clear_closure());
    },
    modify$1: function(f) {
      var s, ret;
      s = this.readClasses$0();
      ret = f.call$1(s);
      this.writeClasses$1(s);
      return ret;
    },
    $isEfficientLength: true,
    $isIterable: true,
    $asIterable: function() {
      return [P.String];
    }
  },
  CssClassSetImpl_add_closure: {
    "^": "Closure0:30;value_0",
    call$1: function(s) {
      return s.add$1(0, this.value_0);
    },
    $isFunction: true
  },
  CssClassSetImpl_addAll_closure: {
    "^": "Closure0:30;iterable_0",
    call$1: function(s) {
      return s.addAll$1(0, this.iterable_0);
    },
    $isFunction: true
  },
  CssClassSetImpl_clear_closure: {
    "^": "Closure0:30;",
    call$1: function(s) {
      return s.clear$0(0);
    },
    $isFunction: true
  },
  FilteredElementList: {
    "^": "ListBase;_node,_childNodes",
    get$_filtered: function() {
      var t1 = this._childNodes;
      return P.List_List$from(t1.where$1(t1, new P.FilteredElementList__filtered_closure()), true, W.Element);
    },
    forEach$1: function(_, f) {
      H.IterableMixinWorkaround_forEach(this.get$_filtered(), f);
    },
    $indexSet: function(_, index, value) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      J.replaceWith$1$x(t1[index], value);
    },
    set$length: function(_, newLength) {
      var len = this.get$_filtered().length;
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(value);
    },
    addAll$1: function(_, iterable) {
      var t1, t2;
      for (t1 = J.get$iterator$ax(iterable), t2 = this._childNodes._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current());
    },
    contains$1: function(_, needle) {
      if (!J.getInterceptor(needle).$isElement)
        return false;
      return needle.parentNode === this._node;
    },
    get$reversed: function(_) {
      return H.setRuntimeTypeInfo(new H.ReversedListIterable(this.get$_filtered()), [null]);
    },
    sort$1: function(_, compare) {
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    setRange$4: function(_, start, end, iterable, skipCount) {
      throw H.wrapException(P.UnsupportedError$("Cannot setRange on filtered list"));
    },
    removeRange$2: function(_, start, end) {
      H.IterableMixinWorkaround_forEach(C.JSArray_methods.sublist$2(this.get$_filtered(), start, end), new P.FilteredElementList_removeRange_closure());
    },
    clear$0: function(_) {
      J._clearChildren$0$x(this._childNodes._this);
    },
    remove$1: function(_, element) {
      return false;
    },
    get$length: function(_) {
      return this.get$_filtered().length;
    },
    $index: function(_, index) {
      var t1 = this.get$_filtered();
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    get$iterator: function(_) {
      var t1 = this.get$_filtered();
      return H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
    }
  },
  FilteredElementList__filtered_closure: {
    "^": "Closure0:30;",
    call$1: function(n) {
      return !!J.getInterceptor(n).$isElement;
    },
    $isFunction: true
  },
  FilteredElementList_removeRange_closure: {
    "^": "Closure0:30;",
    call$1: function(el) {
      return J.remove$0$ax(el);
    },
    $isFunction: true
  }
}],
["location", "package:dartdoc_viewer/location.dart", , Y, {
  "^": "",
  fullDartlangLocation: function($location) {
    var t1, t2;
    t1 = $._dartdocMain;
    if (t1 == null) {
      t1 = document.querySelector("#dartdoc-main");
      $._dartdocMain = t1;
    }
    t1 = "https://api.dartlang.org/apidocs/channels/" + J.get$sdkChannel$x(t1) + "/dartdoc-viewer/";
    t2 = $._dartdocMain;
    if (t2 == null) {
      t2 = document.querySelector("#dartdoc-main");
      $._dartdocMain = t2;
    }
    return t1 + J.get$sdkRevisionNum$x(t2) + $location;
  },
  getVersionStr: function() {
    var t1 = $._dartdocMain;
    if (t1 == null) {
      t1 = document.querySelector("#dartdoc-main");
      $._dartdocMain = t1;
    }
    if (J.get$hostDocsVersion$x(t1) !== "") {
      t1 = $._dartdocMain;
      if (t1 == null) {
        t1 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t1;
      }
      return J.get$hostDocsVersion$x(t1) + "~";
    }
    t1 = $._dartdocMain;
    if (t1 == null) {
      t1 = document.querySelector("#dartdoc-main");
      $._dartdocMain = t1;
    }
    return J.get$hostDocsVersion$x(t1);
  },
  entryPoint: function() {
    var t1, basic;
    if (!$.useHistory)
      return "";
    t1 = window.location.pathname;
    t1 = t1.split("/dartdoc-viewer/");
    if (0 >= t1.length)
      return H.ioore(t1, 0);
    basic = t1[0];
    return J.$eq(basic, "/") ? "" : basic;
  },
  docsEntryPoint: function() {
    var t1, t2;
    if (J.endsWith$1$s(Y.entryPoint(), "index.html")) {
      t1 = Y.entryPoint();
      t2 = J.lastIndexOf$1$asx(Y.entryPoint(), "/");
      if (typeof t2 !== "number")
        return t2.$add();
      return J.substring$2$s(t1, 0, t2 + 1);
    } else if (J.endsWith$1$s(Y.entryPoint(), "/"))
      return J.substring$2$s(Y.entryPoint(), 0, J.$sub$n(J.get$length$asx(Y.entryPoint()), 1));
    else
      return Y.entryPoint();
  },
  locationDeprefixed: function(s) {
    var t1;
    if ($.useHistory && J.startsWith$1$s(s, Y.entryPoint()))
      s = J.substring$1$s(s, J.get$length$asx(Y.entryPoint()));
    t1 = $.useHistory ? "/dartdoc-viewer/" : "#";
    if (J.getInterceptor$s(s).startsWith$1(s, t1))
      return C.JSString_methods.substring$1(s, ($.useHistory ? "/dartdoc-viewer/" : "#").length);
    else
      return s;
  },
  DocsLocation: {
    "^": "Object;packageName,libraryName,memberName<,subMemberName,anchor",
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.getInterceptor(other).$isDocsLocation)
        return false;
      return J.$eq(this.packageName, other.packageName) && J.$eq(this.libraryName, other.libraryName) && J.$eq(this.memberName, other.memberName) && J.$eq(this.subMemberName, other.subMemberName) && J.$eq(this.anchor, other.anchor);
    },
    get$hashCode: function(_) {
      var t1, t2, t3, t4;
      t1 = J.$xor$n(J.get$hashCode$(this.packageName), J.get$hashCode$(this.libraryName));
      t2 = J.get$hashCode$(this.memberName);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = J.get$hashCode$(this.subMemberName);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = J.get$hashCode$(this.anchor);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return (t1 ^ t2 ^ t3 ^ t4) >>> 0;
    },
    _extractPieces$1: function(uri) {
      var t1, t2, startOfOurChunk, t3;
      t1 = {};
      t1.uri_0 = uri;
      if (uri == null || J.$eq(J.get$length$asx(uri), 0))
        return;
      if ($.useHistory) {
        t2 = t1.uri_0;
        startOfOurChunk = J.lastIndexOf$1$asx(t2, "/dartdoc-viewer/");
        t2 = startOfOurChunk === -1;
        if (t2 && J.startsWith$1$s(t1.uri_0, "/"))
          return;
        uri = t1.uri_0;
        if (t2)
          ;
        else {
          t2 = $.useHistory ? "/dartdoc-viewer/" : "#";
          if (typeof startOfOurChunk !== "number")
            return startOfOurChunk.$add();
          uri = J.substring$1$s(uri, startOfOurChunk + t2.length);
        }
        t1.uri_0 = uri;
      }
      t1.position_1 = 0;
      t2 = new Y.DocsLocation__extractPieces__check(t1);
      this.packageName = t2.call$1($.get$packageMatch());
      this.libraryName = t2.call$1($.get$libraryMatch());
      this.memberName = t2.call$1($.get$memberMatch());
      this.subMemberName = t2.call$1($.get$subMemberMatch());
      this.anchor = t2.call$1($.get$anchorMatch());
      t2 = t1.position_1;
      t3 = J.get$length$asx(t1.uri_0);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t2 < t3 && this.anchor == null) {
        t2 = t1.uri_0;
        t3 = J.getInterceptor$asx(t2);
        this.anchor = t3.substring$2(t2, t1.position_1 + 1, t3.get$length(t2));
      }
    },
    get$withAnchor: function() {
      var t1, t2, t3, t4;
      t1 = this.get$packagePlus();
      t2 = this.libraryName;
      if (t2 == null)
        t2 = "";
      t3 = this.memberName;
      t3 = t3 == null ? "" : "." + H.S(t3);
      t4 = this.subMemberName;
      return C.JSArray_methods.join$1([t1, t2, t3, t4 == null ? "" : "." + H.S(t4)], "") + this.get$anchorPlus();
    },
    get$packagePlus: function() {
      var t1 = this.packageName;
      if (t1 == null)
        t1 = "";
      else
        t1 = this.libraryName == null ? t1 : H.S(t1) + "/";
      return t1;
    },
    get$anchorPlus: function() {
      var t1 = this.anchor;
      return t1 == null ? "" : "#" + H.S(t1);
    },
    get$componentNames: function() {
      var t1 = [this.packageName];
      C.JSArray_methods.addAll$1(t1, H.setRuntimeTypeInfo(new H.WhereIterable([this.libraryName, this.memberName, this.subMemberName], new Y.DocsLocation_componentNames_closure()), [null]));
      return t1;
    },
    get$name: function(_) {
      var t1 = this.anchor;
      if (t1 != null)
        return t1;
      t1 = this.subMemberName;
      if (t1 != null)
        return t1;
      t1 = this.memberName;
      if (t1 != null)
        return t1;
      t1 = this.libraryName;
      if (t1 != null)
        return t1;
      t1 = this.packageName;
      if (t1 != null)
        return t1;
      return "";
    },
    items$2$includeAllItems: [function(_, root, includeAllItems) {
      var items, t1, $package, $home, library, member, lookupName, t2, t3, subMember, container, anchorItem;
      items = H.setRuntimeTypeInfo([], [E.Item]);
      t1 = this.packageName;
      $package = t1 == null ? null : root.memberNamed$1(t1);
      if ($package != null)
        items.push($package);
      if (this.libraryName == null)
        return items;
      $home = items.length === 0 ? root : C.JSArray_methods.get$last(items);
      library = $home.memberNamed$1(this.libraryName);
      t1 = library == null;
      if (t1 && includeAllItems !== true)
        return items;
      items.push(library);
      if (t1)
        return includeAllItems === true ? [null, null, null, null, null] : items;
      t1 = this.memberName;
      member = t1 == null ? null : library.memberNamed$1(t1);
      if (member != null) {
        items.push(member);
        lookupName = this.subMemberName;
        if (lookupName != null) {
          if (J.contains$1$asx(lookupName, "-") === true) {
            t1 = this.subMemberName;
            t2 = J.getInterceptor$asx(t1);
            t3 = t2.indexOf$1(t1, "-");
            if (typeof t3 !== "number")
              return t3.$add();
            lookupName = t2.substring$1(t1, t3 + 1);
          }
          subMember = member.memberNamed$1(lookupName);
        } else
          subMember = null;
        t1 = subMember == null;
        if (!t1)
          items.push(subMember);
        t2 = this.anchor;
        if (t2 != null) {
          container = t1 ? member : subMember;
          anchorItem = container.memberNamed$1(t2);
          if (anchorItem == null)
            anchorItem = container.memberNamed$1(C.JSString_methods.$add("id_", this.anchor));
          if (anchorItem != null)
            items.push(anchorItem);
        } else
          anchorItem = null;
      } else {
        subMember = null;
        anchorItem = null;
      }
      return includeAllItems === true ? [$package, library, member, subMember, anchorItem] : items;
    }, function($receiver, root) {
      return this.items$2$includeAllItems($receiver, root, false);
    }, "items$1", "call$2$includeAllItems", "call$1", "get$items", 2, 3, 102, 103, 104, 105],
    item$1: [function(_, root) {
      var myItems = this.items$1(0, root);
      return myItems.length === 0 ? null : C.JSArray_methods.get$last(myItems);
    }, "call$1", "get$item", 2, 0, 106, 104],
    exactItem$1: function(root) {
      var myItems = this.items$2$includeAllItems(0, root, true);
      if (this.anchor != null) {
        if (4 >= myItems.length)
          return H.ioore(myItems, 4);
        return myItems[4];
      }
      if (this.subMemberName != null) {
        if (3 >= myItems.length)
          return H.ioore(myItems, 3);
        return myItems[3];
      }
      if (this.memberName != null) {
        if (2 >= myItems.length)
          return H.ioore(myItems, 2);
        return myItems[2];
      }
      if (this.libraryName != null) {
        if (1 >= myItems.length)
          return H.ioore(myItems, 1);
        return myItems[1];
      }
      if (this.packageName != null) {
        if (0 >= myItems.length)
          return H.ioore(myItems, 0);
        return myItems[0];
      }
      return;
    },
    get$asMemberOrSubMemberNotAnchor: function() {
      var t1, result, t2, withParameterName, parameterName;
      t1 = this.anchor;
      if (t1 == null)
        return this;
      if (this.subMemberName != null || J.$le$n(J.get$length$asx(t1), 3))
        throw H.wrapException(P.FormatException$("DocsLocation invalid: " + this.toString$0(0)));
      result = Y.DocsLocation$clone(this);
      result.anchor = null;
      t1 = this.anchor;
      t2 = J.getInterceptor$asx(t1);
      withParameterName = t2.substring$2(t1, 3, t2.get$length(t1)).split(",");
      parameterName = withParameterName.length > 1 ? withParameterName[1] : null;
      if (result.memberName == null) {
        result.memberName = C.JSArray_methods.get$first(withParameterName);
        result.subMemberName = parameterName;
      } else {
        result.subMemberName = C.JSArray_methods.get$first(withParameterName);
        result.anchor = parameterName;
      }
      return result;
    },
    itemFromList$1: function(items) {
      return J.get$reversed$ax(items).firstWhere$2$orElse(0, new Y.DocsLocation_itemFromList_closure(), new Y.DocsLocation_itemFromList_closure0());
    },
    get$isEmpty: function(_) {
      return this.packageName == null && this.libraryName == null && this.memberName == null && this.subMemberName == null && this.anchor == null;
    },
    get$lastName: function() {
      var t1 = this.anchor;
      if (t1 != null)
        return t1;
      t1 = this.subMemberName;
      if (t1 != null)
        return t1;
      t1 = this.memberName;
      if (t1 != null)
        return t1;
      t1 = this.libraryName;
      if (t1 != null)
        return t1;
      t1 = this.packageName;
      if (t1 != null)
        return t1;
      return;
    },
    toString$0: function(_) {
      var t1, t2, t3, t4;
      t1 = this.get$packagePlus();
      t2 = this.libraryName;
      if (t2 == null)
        t2 = "";
      t3 = this.memberName;
      t3 = t3 == null ? "" : "." + H.S(t3);
      t4 = this.subMemberName;
      return "DocsLocation(" + (C.JSArray_methods.join$1([t1, t2, t3, t4 == null ? "" : "." + H.S(t4)], "") + this.get$anchorPlus()) + ")";
    },
    DocsLocation$fromList$1: function(components) {
      var t1 = components.length;
      if (t1 > 0)
        this.packageName = components[0];
      if (t1 > 1)
        this.libraryName = components[1];
      if (t1 > 2)
        this.memberName = components[2];
      if (t1 > 3)
        this.subMemberName = components[3];
      if (t1 > 4)
        this.anchor = components[4];
    },
    DocsLocation$clone$1: function(original) {
      this.packageName = original.packageName;
      this.libraryName = original.libraryName;
      this.memberName = original.memberName;
      this.subMemberName = original.subMemberName;
      this.anchor = original.anchor;
    },
    $isDocsLocation: true,
    static: {DocsLocation$fromList: function(components) {
        var t1 = new Y.DocsLocation(null, null, null, null, null);
        t1.DocsLocation$fromList$1(components);
        return t1;
      }, DocsLocation$clone: function(original) {
        var t1 = new Y.DocsLocation(null, null, null, null, null);
        t1.DocsLocation$clone$1(original);
        return t1;
      }}
  },
  DocsLocation__extractPieces__check: {
    "^": "Closure0:30;box_0",
    call$1: function(regex) {
      var t1, match, t2, matchedString, t3;
      t1 = this.box_0;
      match = regex.matchAsPrefix$2(0, t1.uri_0, t1.position_1);
      if (match != null) {
        t2 = match._match;
        if (1 >= t2.length)
          return H.ioore(t2, 1);
        matchedString = t2[1];
        t3 = t1.position_1;
        t2 = J.get$length$asx(t2[0]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t1.position_1 = t3 + t2;
        return matchedString;
      }
    },
    $isFunction: true
  },
  DocsLocation_componentNames_closure: {
    "^": "Closure0:30;",
    call$1: function(x) {
      return x != null;
    },
    $isFunction: true
  },
  DocsLocation_itemFromList_closure: {
    "^": "Closure0:30;",
    call$1: function(x) {
      return x != null;
    },
    $isFunction: true
  },
  DocsLocation_itemFromList_closure0: {
    "^": "Closure0:11;",
    call$0: function() {
      return;
    },
    $isFunction: true
  }
}],
["logging", "package:logging/logging.dart", , N, {
  "^": "",
  Logger: {
    "^": "Object;name>,parent>,_level,_children>,children>,_logging$_controller",
    get$fullName: function() {
      var t1, t2, t3;
      t1 = this.parent;
      t2 = t1 == null || J.$eq(J.get$name$x(t1), "");
      t3 = this.name;
      return t2 ? t3 : t1.get$fullName() + "." + t3;
    },
    get$level: function() {
      if ($.hierarchicalLoggingEnabled) {
        var t1 = this.parent;
        if (t1 != null)
          return t1.get$level();
      }
      return $._rootLevel;
    },
    isLoggable$1: function(value) {
      return value.value >= this.get$level().value;
    },
    log$4: function(logLevel, message, error, stackTrace) {
      var t1, t2, t3, record, target;
      if (logLevel.value >= this.get$level().value) {
        t1 = this.get$fullName();
        t2 = new P.DateTime(Date.now(), false);
        t2.DateTime$_now$0();
        t3 = $.LogRecord__nextNumber;
        $.LogRecord__nextNumber = t3 + 1;
        record = new N.LogRecord(logLevel, message, t1, t2, t3, error, stackTrace);
        if ($.hierarchicalLoggingEnabled)
          for (target = this; target != null;) {
            target._logging$_publish$1(record);
            target = J.get$parent$x(target);
          }
        else
          N.Logger_Logger("")._logging$_publish$1(record);
      }
    },
    finer$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_FINER_400, message, error, stackTrace);
    },
    finer$1: function(message) {
      return this.finer$3(message, null, null);
    },
    fine$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_FINE_500, message, error, stackTrace);
    },
    fine$1: function(message) {
      return this.fine$3(message, null, null);
    },
    info$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_INFO_800, message, error, stackTrace);
    },
    info$1: function(message) {
      return this.info$3(message, null, null);
    },
    warning$3: function(message, error, stackTrace) {
      return this.log$4(C.Level_WARNING_900, message, error, stackTrace);
    },
    warning$1: function(message) {
      return this.warning$3(message, null, null);
    },
    _logging$_publish$1: function(record) {
    },
    Logger$_internal$3: function($name, $parent, children) {
      var t1 = this.parent;
      if (t1 != null)
        J.get$_children$x(t1).$indexSet(0, this.name, this);
    },
    $isLogger: true,
    static: {"^": "Logger__loggers", Logger_Logger: function($name) {
        return $.get$Logger__loggers().putIfAbsent$2($name, new N.Logger_Logger_closure($name));
      }}
  },
  Logger_Logger_closure: {
    "^": "Closure0:11;name_0",
    call$0: function() {
      var thisName, dot, $parent, t1, t2;
      thisName = this.name_0;
      if (C.JSString_methods.startsWith$1(thisName, "."))
        H.throwExpression(P.ArgumentError$("name shouldn't start with a '.'"));
      dot = C.JSString_methods.lastIndexOf$1(thisName, ".");
      if (dot === -1)
        $parent = thisName !== "" ? N.Logger_Logger("") : null;
      else {
        $parent = N.Logger_Logger(C.JSString_methods.substring$2(thisName, 0, dot));
        thisName = C.JSString_methods.substring$1(thisName, dot + 1);
      }
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, N.Logger);
      t2 = new N.Logger(thisName, $parent, null, t1, H.setRuntimeTypeInfo(new Q.UnmodifiableMapView(t1), [null, null]), null);
      t2.Logger$_internal$3(thisName, $parent, t1);
      return t2;
    },
    $isFunction: true
  },
  Level: {
    "^": "Object;name>,value>",
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isLevel && this.value === other.value;
    },
    $lt: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value < t1;
    },
    $le: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value <= t1;
    },
    $gt: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value > t1;
    },
    $ge: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value >= t1;
    },
    compareTo$1: function(_, other) {
      var t1 = J.get$value$x(other);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return this.value - t1;
    },
    get$hashCode: function(_) {
      return this.value;
    },
    toString$0: function(_) {
      return this.name;
    },
    $isLevel: true,
    static: {"^": "Level_ALL,Level_OFF,Level_FINEST,Level_FINER,Level_FINE,Level_CONFIG,Level_INFO,Level_WARNING,Level_SEVERE,Level_SHOUT,Level_LEVELS"}
  },
  LogRecord: {
    "^": "Object;level<,message,loggerName,time,sequenceNumber,error>,stackTrace<",
    toString$0: function(_) {
      return "[" + this.level.name + "] " + this.loggerName + ": " + this.message;
    },
    static: {"^": "LogRecord__nextNumber"}
  }
}],
["observe.src.bindable", "package:observe/src/bindable.dart", , A, {
  "^": "",
  Bindable: {
    "^": "Object;",
    set$value: function(_, newValue) {
    },
    $isBindable: true
  }
}],
["observe.src.change_notifier", "package:observe/src/change_notifier.dart", , O, {
  "^": "",
  ChangeNotifier: {
    "^": "Object;",
    get$changes: function(receiver) {
      var t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 == null) {
        t1 = this.get$observed(receiver);
        t1 = P.StreamController_StreamController$broadcast(this.get$unobserved(receiver), t1, true, null);
        receiver.change_notifier$ChangeNotifier$_changes = t1;
      }
      t1.toString;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    observed$0: [function(receiver) {
    }, "call$0", "get$observed", 0, 0, 10],
    unobserved$0: [function(receiver) {
      receiver.change_notifier$ChangeNotifier$_changes = null;
    }, "call$0", "get$unobserved", 0, 0, 10],
    deliverChanges$0: [function(receiver) {
      var records, t1, t2;
      records = receiver.change_notifier$ChangeNotifier$_records;
      receiver.change_notifier$ChangeNotifier$_records = null;
      t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._async$_next;
        t2 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t2 = false;
      if (t2 && records != null) {
        t2 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(records), [T.ChangeRecord]);
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
        return true;
      }
      return false;
    }, "call$0", "get$deliverChanges", 0, 0, 75],
    get$hasObservers: function(receiver) {
      var t1, t2;
      t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      return t1;
    },
    notifyPropertyChange$3: function(receiver, field, oldValue, newValue) {
      return F.notifyPropertyChangeHelper(receiver, field, oldValue, newValue);
    },
    notifyChange$1: function(receiver, record) {
      var t1, t2;
      t1 = receiver.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (!t1)
        return;
      if (receiver.change_notifier$ChangeNotifier$_records == null) {
        receiver.change_notifier$ChangeNotifier$_records = [];
        P.scheduleMicrotask(this.get$deliverChanges(receiver));
      }
      receiver.change_notifier$ChangeNotifier$_records.push(record);
    },
    $isObservable: true
  }
}],
["observe.src.change_record", "package:observe/src/change_record.dart", , T, {
  "^": "",
  ChangeRecord: {
    "^": "Object;",
    $isChangeRecord: true
  },
  PropertyChangeRecord: {
    "^": "ChangeRecord;object<,name>,oldValue,newValue",
    toString$0: function(_) {
      return "#<PropertyChangeRecord " + H.S(this.name) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
    },
    $isPropertyChangeRecord: true
  }
}],
["observe.src.dirty_check", "package:observe/src/dirty_check.dart", , O, {
  "^": "",
  dirtyCheckObservables: function() {
    var cycles, debugLoop, toCheck, t1, anyChanged, i, observer, t2, info, t3;
    if ($._delivering)
      return;
    if ($._allObservables == null)
      return;
    $._delivering = true;
    cycles = 0;
    debugLoop = null;
    do {
      ++cycles;
      if (cycles === 1000)
        debugLoop = [];
      toCheck = $._allObservables;
      t1 = [];
      t1.$builtinTypeInfo = [F.Observable];
      $._allObservables = t1;
      for (t1 = debugLoop != null, anyChanged = false, i = 0; i < toCheck.length; ++i) {
        observer = toCheck[i];
        t2 = observer._observable$_changes;
        t2 = t2._async$_next !== t2;
        if (t2) {
          if (observer.deliverChanges$0(0)) {
            if (t1)
              debugLoop.push([i, observer]);
            anyChanged = true;
          }
          $._allObservables.push(observer);
        }
      }
    } while (cycles < 1000 && anyChanged);
    if (t1 && anyChanged) {
      t1 = $.get$_logger0();
      t1.warning$1("Possible loop in Observable.dirtyCheck, stopped checking.");
      for (t2 = H.setRuntimeTypeInfo(new H.ListIterator(debugLoop, debugLoop.length, 0, null), [H.getTypeArgumentByIndex(debugLoop, 0)]); t2.moveNext$0();) {
        info = t2._current;
        t3 = J.getInterceptor$asx(info);
        t1.warning$1("In last iteration Observable changed at index " + H.S(t3.$index(info, 0)) + ", object: " + H.S(t3.$index(info, 1)) + ".");
      }
    }
    $._allObservablesCount = $._allObservables.length;
    $._delivering = false;
  }
}],
["observe.src.list_diff", "package:observe/src/list_diff.dart", , G, {
  "^": "",
  _calcEditDistances: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var rowCount, columnCount, distances, t1, i, t2, j, t3, t4, t5, t6, t7, t8, t9;
    rowCount = oldEnd - oldStart + 1;
    columnCount = J.$add$ns(J.$sub$n(currentEnd, currentStart), 1);
    distances = Array(rowCount);
    for (t1 = distances.length, i = 0; i < rowCount; ++i) {
      if (typeof columnCount !== "number")
        return H.iae(columnCount);
      t2 = Array(columnCount);
      if (i >= t1)
        return H.ioore(distances, i);
      distances[i] = t2;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2[0] = i;
    }
    if (typeof columnCount !== "number")
      return H.iae(columnCount);
    j = 0;
    for (; j < columnCount; ++j) {
      if (0 >= t1)
        return H.ioore(distances, 0);
      t2 = distances[0];
      if (j >= t2.length)
        return H.ioore(t2, j);
      t2[j] = j;
    }
    for (t2 = J.getInterceptor$ns(currentStart), t3 = J.getInterceptor$asx(current), i = 1; i < rowCount; ++i)
      for (t4 = i - 1, t5 = oldStart + i - 1, j = 1; j < columnCount; ++j) {
        if (t5 >>> 0 !== t5 || t5 >= old.length)
          return H.ioore(old, t5);
        t6 = J.$eq(old[t5], t3.$index(current, J.$sub$n(t2.$add(currentStart, j), 1)));
        t7 = distances[i];
        t8 = distances[t4];
        t9 = j - 1;
        if (t6) {
          if (i >= t1)
            return H.ioore(distances, i);
          if (t4 >= t1)
            return H.ioore(distances, t4);
          if (t9 >= t8.length)
            return H.ioore(t8, t9);
          t6 = t8[t9];
          if (j >= t7.length)
            return H.ioore(t7, j);
          t7[j] = t6;
        } else {
          if (t4 >= t1)
            return H.ioore(distances, t4);
          if (j >= t8.length)
            return H.ioore(t8, j);
          t6 = t8[j];
          if (typeof t6 !== "number")
            return t6.$add();
          if (i >= t1)
            return H.ioore(distances, i);
          t8 = t7.length;
          if (t9 >= t8)
            return H.ioore(t7, t9);
          t9 = t7[t9];
          if (typeof t9 !== "number")
            return t9.$add();
          t9 = P.min(t6 + 1, t9 + 1);
          if (j >= t8)
            return H.ioore(t7, j);
          t7[j] = t9;
        }
      }
    return distances;
  },
  _spliceOperationsFromEditDistances: function(distances) {
    var t1, i, j, t2, current, edits, t3, t4, t5, northWest, west, north, min;
    t1 = distances.length;
    i = t1 - 1;
    if (0 >= t1)
      return H.ioore(distances, 0);
    j = distances[0].length - 1;
    if (i < 0)
      return H.ioore(distances, i);
    t2 = distances[i];
    if (j < 0 || j >= t2.length)
      return H.ioore(t2, j);
    current = t2[j];
    edits = [];
    while (true) {
      if (!(i > 0 || j > 0))
        break;
      c$0: {
        if (i === 0) {
          edits.push(2);
          --j;
          break c$0;
        }
        if (j === 0) {
          edits.push(3);
          --i;
          break c$0;
        }
        t2 = i - 1;
        if (t2 < 0)
          return H.ioore(distances, t2);
        t3 = distances[t2];
        t4 = j - 1;
        t5 = t3.length;
        if (t4 < 0 || t4 >= t5)
          return H.ioore(t3, t4);
        northWest = t3[t4];
        if (j < 0 || j >= t5)
          return H.ioore(t3, j);
        west = t3[j];
        if (i < 0)
          return H.ioore(distances, i);
        t3 = distances[i];
        if (t4 >= t3.length)
          return H.ioore(t3, t4);
        north = t3[t4];
        min = P.min(P.min(west, north), northWest);
        if (min === northWest) {
          if (northWest == null ? current == null : northWest === current)
            edits.push(0);
          else {
            edits.push(1);
            current = northWest;
          }
          j = t4;
          i = t2;
        } else if (min === west) {
          edits.push(3);
          current = west;
          i = t2;
        } else {
          edits.push(2);
          current = north;
          j = t4;
        }
      }
    }
    return H.setRuntimeTypeInfo(new H.ReversedListIterable(edits), [null]).toList$0(0);
  },
  _sharedPrefix: function(arr1, arr2, searchLength) {
    var t1, i, t2;
    for (t1 = J.getInterceptor$asx(arr1), i = 0; i < searchLength; ++i) {
      t2 = t1.$index(arr1, i);
      if (i >= arr2.length)
        return H.ioore(arr2, i);
      if (!J.$eq(t2, arr2[i]))
        return i;
    }
    return searchLength;
  },
  _sharedSuffix: function(arr1, arr2, searchLength) {
    var t1, index1, index2, count, t2;
    t1 = J.getInterceptor$asx(arr1);
    index1 = t1.get$length(arr1);
    index2 = arr2.length;
    count = 0;
    while (true) {
      if (count < searchLength) {
        --index1;
        t2 = t1.$index(arr1, index1);
        --index2;
        if (index2 < 0 || index2 >= arr2.length)
          return H.ioore(arr2, index2);
        t2 = J.$eq(t2, arr2[index2]);
      } else
        t2 = false;
      if (!t2)
        break;
      ++count;
    }
    return count;
  },
  calcSplices: function(current, currentStart, currentEnd, old, oldStart, oldEnd) {
    var t1, minLength, t2, prefixCount, suffixCount, removed, splice, oldStart0, ops, splices, oldIndex, index, i;
    t1 = J.getInterceptor$n(currentEnd);
    minLength = P.min(t1.$sub(currentEnd, currentStart), oldEnd - oldStart);
    t2 = J.getInterceptor(currentStart);
    prefixCount = t2.$eq(currentStart, 0) && oldStart === 0 ? G._sharedPrefix(current, old, minLength) : 0;
    suffixCount = t1.$eq(currentEnd, J.get$length$asx(current)) && oldEnd === old.length ? G._sharedSuffix(current, old, minLength - prefixCount) : 0;
    currentStart = t2.$add(currentStart, prefixCount);
    oldStart += prefixCount;
    currentEnd = t1.$sub(currentEnd, suffixCount);
    oldEnd -= suffixCount;
    t1 = J.getInterceptor$n(currentEnd);
    if (J.$eq(t1.$sub(currentEnd, currentStart), 0) && oldEnd - oldStart === 0)
      return C.List_empty;
    if (J.$eq(currentStart, currentEnd)) {
      removed = [];
      t1 = new P.UnmodifiableListView(removed);
      t1.$builtinTypeInfo = [null];
      splice = new G.ListChangeRecord(current, t1, removed, currentStart, 0);
      for (; oldStart < oldEnd; oldStart = oldStart0) {
        t1 = splice._removed;
        oldStart0 = oldStart + 1;
        if (oldStart >>> 0 !== oldStart || oldStart >= old.length)
          return H.ioore(old, oldStart);
        J.add$1$ax(t1, old[oldStart]);
      }
      return [splice];
    } else if (oldStart === oldEnd) {
      t1 = t1.$sub(currentEnd, currentStart);
      removed = [];
      t2 = new P.UnmodifiableListView(removed);
      t2.$builtinTypeInfo = [null];
      return [new G.ListChangeRecord(current, t2, removed, currentStart, t1)];
    }
    ops = G._spliceOperationsFromEditDistances(G._calcEditDistances(current, currentStart, currentEnd, old, oldStart, oldEnd));
    splices = [];
    splices.$builtinTypeInfo = [G.ListChangeRecord];
    for (oldIndex = oldStart, index = currentStart, splice = null, i = 0; i < ops.length; ++i)
      switch (ops[i]) {
        case 0:
          if (splice != null) {
            splices.push(splice);
            splice = null;
          }
          index = J.$add$ns(index, 1);
          ++oldIndex;
          break;
        case 1:
          if (splice == null) {
            removed = [];
            t1 = new P.UnmodifiableListView(removed);
            t1.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t1, removed, index, 0);
          }
          splice._addedCount = J.$add$ns(splice._addedCount, 1);
          index = J.$add$ns(index, 1);
          t1 = splice._removed;
          if (oldIndex >>> 0 !== oldIndex || oldIndex >= old.length)
            return H.ioore(old, oldIndex);
          J.add$1$ax(t1, old[oldIndex]);
          ++oldIndex;
          break;
        case 2:
          if (splice == null) {
            removed = [];
            t1 = new P.UnmodifiableListView(removed);
            t1.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t1, removed, index, 0);
          }
          splice._addedCount = J.$add$ns(splice._addedCount, 1);
          index = J.$add$ns(index, 1);
          break;
        case 3:
          if (splice == null) {
            removed = [];
            t1 = new P.UnmodifiableListView(removed);
            t1.$builtinTypeInfo = [null];
            splice = new G.ListChangeRecord(current, t1, removed, index, 0);
          }
          t1 = splice._removed;
          if (oldIndex >>> 0 !== oldIndex || oldIndex >= old.length)
            return H.ioore(old, oldIndex);
          J.add$1$ax(t1, old[oldIndex]);
          ++oldIndex;
          break;
      }
    if (splice != null)
      splices.push(splice);
    return splices;
  },
  _mergeSplice: function(splices, record) {
    var t1, t2, t3, addedCount, t4, splice, inserted, insertionOffset, i, current, intersectCount, removed, offset;
    t1 = record.get$object();
    t2 = J.get$index$x(record);
    t3 = J.toList$0$ax(record.get$_removed());
    addedCount = record.get$addedCount();
    if (addedCount == null)
      addedCount = 0;
    t4 = new P.UnmodifiableListView(t3);
    t4.$builtinTypeInfo = [null];
    splice = new G.ListChangeRecord(t1, t4, t3, t2, addedCount);
    for (inserted = false, insertionOffset = 0, i = 0; t1 = splices.length, i < t1; ++i) {
      if (i < 0)
        return H.ioore(splices, i);
      current = splices[i];
      current._list_diff$_index = J.$add$ns(current._list_diff$_index, insertionOffset);
      if (inserted)
        continue;
      t1 = splice._list_diff$_index;
      t2 = J.$add$ns(t1, splice._unmodifiableRemoved._collection$_source.length);
      t3 = current._list_diff$_index;
      intersectCount = P.min(t2, J.$add$ns(t3, current._addedCount)) - P.max(t1, t3);
      if (intersectCount >= 0) {
        if (i >= splices.length)
          H.throwExpression(P.RangeError$value(i));
        splices.splice(i, 1)[0];
        --i;
        t1 = J.$sub$n(current._addedCount, current._unmodifiableRemoved._collection$_source.length);
        if (typeof t1 !== "number")
          return H.iae(t1);
        insertionOffset -= t1;
        t1 = J.$add$ns(splice._addedCount, J.$sub$n(current._addedCount, intersectCount));
        splice._addedCount = t1;
        t2 = splice._unmodifiableRemoved._collection$_source.length;
        t3 = current._unmodifiableRemoved._collection$_source.length;
        if (J.$eq(t1, 0) && t2 + t3 - intersectCount === 0)
          inserted = true;
        else {
          removed = current._removed;
          if (J.$lt$n(splice._list_diff$_index, current._list_diff$_index)) {
            t1 = splice._unmodifiableRemoved;
            t1 = t1.getRange$2(t1, 0, J.$sub$n(current._list_diff$_index, splice._list_diff$_index));
            removed.toString;
            if (typeof removed !== "object" || removed === null || !!removed.fixed$length)
              H.throwExpression(P.UnsupportedError$("insertAll"));
            H.IterableMixinWorkaround_insertAllList(removed, 0, t1);
          }
          if (J.$gt$n(J.$add$ns(splice._list_diff$_index, splice._unmodifiableRemoved._collection$_source.length), J.$add$ns(current._list_diff$_index, current._addedCount))) {
            t1 = splice._unmodifiableRemoved;
            J.addAll$1$ax(removed, t1.getRange$2(t1, J.$sub$n(J.$add$ns(current._list_diff$_index, current._addedCount), splice._list_diff$_index), splice._unmodifiableRemoved._collection$_source.length));
          }
          splice._removed = removed;
          splice._unmodifiableRemoved = current._unmodifiableRemoved;
          if (J.$lt$n(current._list_diff$_index, splice._list_diff$_index))
            splice._list_diff$_index = current._list_diff$_index;
          inserted = false;
        }
      } else if (J.$lt$n(splice._list_diff$_index, current._list_diff$_index)) {
        C.JSArray_methods.insert$2(splices, i, splice);
        ++i;
        offset = J.$sub$n(splice._addedCount, splice._unmodifiableRemoved._collection$_source.length);
        current._list_diff$_index = J.$add$ns(current._list_diff$_index, offset);
        if (typeof offset !== "number")
          return H.iae(offset);
        insertionOffset += offset;
        inserted = true;
      } else
        inserted = false;
    }
    if (!inserted)
      splices.push(splice);
  },
  _createInitialSplices: function(list, records) {
    var splices, t1;
    splices = H.setRuntimeTypeInfo([], [G.ListChangeRecord]);
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(records, records.length, 0, null), [H.getTypeArgumentByIndex(records, 0)]); t1.moveNext$0();)
      G._mergeSplice(splices, t1._current);
    return splices;
  },
  projectListSplices: function(list, records) {
    var splices, t1, t2, splice, t3, t4;
    if (records.length <= 1)
      return records;
    splices = [];
    for (t1 = G._createInitialSplices(list, records), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = list._list; t1.moveNext$0();) {
      splice = t1._current;
      if (J.$eq(splice.get$addedCount(), 1) && splice.get$removed()._collection$_source.length === 1) {
        t3 = splice.get$removed()._collection$_source;
        if (0 >= t3.length)
          return H.ioore(t3, 0);
        t3 = t3[0];
        t4 = J.get$index$x(splice);
        if (t4 >>> 0 !== t4 || t4 >= t2.length)
          return H.ioore(t2, t4);
        if (!J.$eq(t3, t2[t4]))
          splices.push(splice);
        continue;
      }
      t3 = J.getInterceptor$x(splice);
      C.JSArray_methods.addAll$1(splices, G.calcSplices(list, t3.get$index(splice), J.$add$ns(t3.get$index(splice), splice.get$addedCount()), splice.get$_removed(), 0, splice.get$removed()._collection$_source.length));
    }
    return splices;
  },
  ListChangeRecord: {
    "^": "Object;object<,_unmodifiableRemoved,_removed<,_list_diff$_index,_addedCount",
    get$index: function(_) {
      return this._list_diff$_index;
    },
    get$removed: function() {
      return this._unmodifiableRemoved;
    },
    get$addedCount: function() {
      return this._addedCount;
    },
    toString$0: function(_) {
      var t1, t2;
      t1 = "#<ListChangeRecord index: " + H.S(this._list_diff$_index) + ", removed: ";
      t2 = this._unmodifiableRemoved;
      return t1 + t2.toString$0(t2) + ", addedCount: " + H.S(this._addedCount) + ">";
    },
    $isListChangeRecord: true,
    static: {ListChangeRecord_ListChangeRecord: function(object, index, addedCount, removed) {
        var t1;
        if (removed == null)
          removed = [];
        if (addedCount == null)
          addedCount = 0;
        t1 = new P.UnmodifiableListView(removed);
        t1.$builtinTypeInfo = [null];
        return new G.ListChangeRecord(object, t1, removed, index, addedCount);
      }}
  }
}],
["observe.src.metadata", "package:observe/src/metadata.dart", , K, {
  "^": "",
  ObservableProperty: {
    "^": "Object;"
  },
  Reflectable: {
    "^": "Object;"
  }
}],
["observe.src.observable", "package:observe/src/observable.dart", , F, {
  "^": "",
  notifyPropertyChangeHelper: function(obj, field, oldValue, newValue) {
    var t1 = J.getInterceptor$x(obj);
    if (t1.get$hasObservers(obj) && !J.$eq(oldValue, newValue))
      t1.notifyChange$1(obj, H.setRuntimeTypeInfo(new T.PropertyChangeRecord(obj, field, oldValue, newValue), [null]));
    return newValue;
  },
  Observable: {
    "^": "Object;",
    $isObservable: true
  },
  Observable_deliverChanges_closure: {
    "^": "Closure0:58;box_0,this_1",
    call$2: function($name, oldValue) {
      var t1, newValue, t2, t3, records;
      t1 = this.this_1;
      newValue = $.get$objectAccessor().read$2(t1, $name);
      if (!J.$eq(oldValue, newValue)) {
        t2 = this.box_0;
        t3 = t2.records_0;
        if (t3 == null) {
          records = [];
          t2.records_0 = records;
          t2 = records;
        } else
          t2 = t3;
        t2.push(H.setRuntimeTypeInfo(new T.PropertyChangeRecord(t1, $name, oldValue, newValue), [null]));
        t1._values.$indexSet(0, $name, newValue);
      }
    },
    $isFunction: true
  }
}],
["observe.src.observable_box", "package:observe/src/observable_box.dart", , A, {
  "^": "",
  ObservableBox: {
    "^": "ChangeNotifier;",
    get$value: function(_) {
      return this._observable_box$_value;
    },
    set$value: function(_, newValue) {
      this._observable_box$_value = F.notifyPropertyChangeHelper(this, C.Symbol_value, this._observable_box$_value, newValue);
    },
    toString$0: function(_) {
      return "#<" + new H.TypeImpl(H.getRuntimeTypeString(this), null).toString$0(0) + " value: " + H.S(this._observable_box$_value) + ">";
    }
  }
}],
["observe.src.observable_list", "package:observe/src/observable_list.dart", , Q, {
  "^": "",
  ObservableList: {
    "^": "ListBase_ChangeNotifier;_listRecords@,_listChanges,_list,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$listChanges: function() {
      var t1 = this._listChanges;
      if (t1 == null) {
        t1 = P.StreamController_StreamController$broadcast(new Q.ObservableList_listChanges_closure(this), null, true, null);
        this._listChanges = t1;
      }
      t1.toString;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this._list.length;
    },
    set$length: function(_, value) {
      var t1, len, t2, t3, removed;
      t1 = this._list;
      len = t1.length;
      if (len === value)
        return;
      this.notifyPropertyChange$3(this, C.Symbol_length, len, value);
      t2 = len === 0;
      t3 = value === 0;
      this.notifyPropertyChange$3(this, C.Symbol_isEmpty, t2, t3);
      this.notifyPropertyChange$3(this, C.Symbol_isNotEmpty, !t2, !t3);
      t2 = this._listChanges;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2)
        if (value < len) {
          if (value < 0 || value > t1.length)
            H.throwExpression(P.RangeError$range(value, 0, t1.length));
          if (len < value || len > t1.length)
            H.throwExpression(P.RangeError$range(len, value, t1.length));
          t2 = new H.SubListIterable(t1, value, len);
          t2.$builtinTypeInfo = [null];
          if (value < 0)
            H.throwExpression(P.RangeError$value(value));
          if (len < 0)
            H.throwExpression(P.RangeError$value(len));
          if (value > len)
            H.throwExpression(P.RangeError$range(value, 0, len));
          t2 = t2.toList$0(0);
          t3 = new P.UnmodifiableListView(t2);
          t3.$builtinTypeInfo = [null];
          this._recordChange$1(new G.ListChangeRecord(this, t3, t2, value, 0));
        } else {
          removed = [];
          t2 = new P.UnmodifiableListView(removed);
          t2.$builtinTypeInfo = [null];
          this._recordChange$1(new G.ListChangeRecord(this, t2, removed, len, value - len));
        }
      C.JSArray_methods.set$length(t1, value);
    },
    $index: function(_, index) {
      var t1 = this._list;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1, oldValue, t2, t3;
      t1 = this._list;
      if (index >>> 0 !== index || index >= t1.length)
        return H.ioore(t1, index);
      oldValue = t1[index];
      t2 = this._listChanges;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2) {
        t2 = [oldValue];
        t3 = new P.UnmodifiableListView(t2);
        t3.$builtinTypeInfo = [null];
        this._recordChange$1(new G.ListChangeRecord(this, t3, t2, index, 1));
      }
      if (index >= t1.length)
        return H.ioore(t1, index);
      t1[index] = value;
    },
    get$isEmpty: function(_) {
      return P.ListMixin.prototype.get$isEmpty.call(this, this);
    },
    get$isNotEmpty: function(_) {
      return P.ListMixin.prototype.get$isNotEmpty.call(this, this);
    },
    add$1: function(_, value) {
      var t1, len, t2, t3;
      t1 = this._list;
      len = t1.length;
      this._notifyChangeLength$2(len, len + 1);
      t2 = this._listChanges;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2)
        this._recordChange$1(G.ListChangeRecord_ListChangeRecord(this, len, 1, null));
      C.JSArray_methods.add$1(t1, value);
    },
    addAll$1: function(_, iterable) {
      var t1, len, added, t2;
      t1 = this._list;
      len = t1.length;
      C.JSArray_methods.addAll$1(t1, iterable);
      this._notifyChangeLength$2(len, t1.length);
      added = t1.length - len;
      t1 = this._listChanges;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (t1 && added > 0)
        this._recordChange$1(G.ListChangeRecord_ListChangeRecord(this, len, added, null));
    },
    remove$1: function(_, element) {
      var t1, i;
      for (t1 = this._list, i = 0; i < t1.length; ++i)
        if (J.$eq(t1[i], element)) {
          this.removeRange$2(0, i, i + 1);
          return true;
        }
      return false;
    },
    removeRange$2: function(_, start, end) {
      var t1, rangeLength, t2, len, t3, t4;
      if (start > this._list.length)
        H.throwExpression(P.RangeError$range(start, 0, this.get$length(this)));
      t1 = end >= start;
      if (!t1 || end > this._list.length)
        H.throwExpression(P.RangeError$range(end, start, this.get$length(this)));
      rangeLength = end - start;
      t2 = this._list;
      len = t2.length;
      t3 = len - rangeLength;
      this.notifyPropertyChange$3(this, C.Symbol_length, len, t3);
      t4 = len === 0;
      t3 = t3 === 0;
      this.notifyPropertyChange$3(this, C.Symbol_isEmpty, t4, t3);
      this.notifyPropertyChange$3(this, C.Symbol_isNotEmpty, !t4, !t3);
      t3 = this._listChanges;
      if (t3 != null) {
        t4 = t3._async$_next;
        t3 = t4 == null ? t3 != null : t4 !== t3;
      } else
        t3 = false;
      if (t3 && rangeLength > 0) {
        if (start > t2.length)
          H.throwExpression(P.RangeError$range(start, 0, t2.length));
        if (!t1 || end > t2.length)
          H.throwExpression(P.RangeError$range(end, start, t2.length));
        t1 = new H.SubListIterable(t2, start, end);
        t1.$builtinTypeInfo = [null];
        if (start < 0)
          H.throwExpression(P.RangeError$value(start));
        if (end < 0)
          H.throwExpression(P.RangeError$value(end));
        if (start > end)
          H.throwExpression(P.RangeError$range(start, 0, end));
        t1 = t1.toList$0(0);
        t3 = new P.UnmodifiableListView(t1);
        t3.$builtinTypeInfo = [null];
        this._recordChange$1(new G.ListChangeRecord(this, t3, t1, start, 0));
      }
      C.JSArray_methods.removeRange$2(t2, start, end);
    },
    _recordChange$1: function(record) {
      var t1, t2;
      t1 = this._listChanges;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (!t1)
        return;
      if (this._listRecords == null) {
        this._listRecords = [];
        P.scheduleMicrotask(this.get$deliverListChanges());
      }
      this._listRecords.push(record);
    },
    _notifyChangeLength$2: function(oldValue, newValue) {
      var t1, t2;
      this.notifyPropertyChange$3(this, C.Symbol_length, oldValue, newValue);
      t1 = oldValue === 0;
      t2 = newValue === 0;
      this.notifyPropertyChange$3(this, C.Symbol_isEmpty, t1, t2);
      this.notifyPropertyChange$3(this, C.Symbol_isNotEmpty, !t1, !t2);
    },
    deliverListChanges$0: [function() {
      var t1, records, t2;
      t1 = this._listRecords;
      if (t1 == null)
        return false;
      records = G.projectListSplices(this, t1);
      this._listRecords = null;
      t1 = this._listChanges;
      if (t1 != null) {
        t2 = t1._async$_next;
        t2 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t2 = false;
      if (t2 && records.length !== 0) {
        t2 = H.setRuntimeTypeInfo(new P.UnmodifiableListView(records), [G.ListChangeRecord]);
        if (t1._state >= 4)
          H.throwExpression(t1._addEventError$0());
        t1._sendData$1(t2);
        return true;
      }
      return false;
    }, "call$0", "get$deliverListChanges", 0, 0, 75],
    $isObservableList: true,
    static: {ObservableList$: function($length, $E) {
        var t1 = H.setRuntimeTypeInfo([], [$E]);
        return H.setRuntimeTypeInfo(new Q.ObservableList(null, null, t1, null, null), [$E]);
      }, ObservableList_applyChangeRecords: function(previous, current, changeRecords) {
        var t1, t2, change, t3, addEnd, removeEnd, addedItems, t4, t5, removeLength, insertLength, delta, insertEnd, newEnd, newLength;
        if (previous === current)
          throw H.wrapException(P.ArgumentError$("can't use same list for previous and current"));
        for (t1 = J.get$iterator$ax(changeRecords), t2 = J.getInterceptor$ax(current); t1.moveNext$0();) {
          change = t1.get$current();
          t3 = J.getInterceptor$x(change);
          addEnd = J.$add$ns(t3.get$index(change), change.get$addedCount());
          removeEnd = J.$add$ns(t3.get$index(change), change.get$removed()._collection$_source.length);
          addedItems = t2.getRange$2(current, t3.get$index(change), addEnd);
          t3 = t3.get$index(change);
          t4 = J.getInterceptor$n(t3);
          if (t4.$lt(t3, 0) || t4.$gt(t3, previous.length))
            H.throwExpression(P.RangeError$range(t3, 0, previous.length));
          t5 = J.getInterceptor$n(removeEnd);
          if (t5.$lt(removeEnd, t3) || t5.$gt(removeEnd, previous.length))
            H.throwExpression(P.RangeError$range(removeEnd, t3, previous.length));
          removeLength = t5.$sub(removeEnd, t3);
          insertLength = addedItems.get$length(addedItems);
          t5 = J.getInterceptor$n(removeLength);
          if (t5.$ge(removeLength, insertLength)) {
            delta = t5.$sub(removeLength, insertLength);
            insertEnd = t4.$add(t3, insertLength);
            t4 = previous.length;
            if (typeof delta !== "number")
              return H.iae(delta);
            newEnd = t4 - delta;
            H.IterableMixinWorkaround_setRangeList(previous, t3, insertEnd, addedItems, 0);
            if (delta !== 0) {
              H.IterableMixinWorkaround_setRangeList(previous, insertEnd, newEnd, previous, removeEnd);
              C.JSArray_methods.set$length(previous, newEnd);
            }
          } else {
            delta = J.$sub$n(insertLength, removeLength);
            t5 = previous.length;
            if (typeof delta !== "number")
              return H.iae(delta);
            newLength = t5 + delta;
            insertEnd = t4.$add(t3, insertLength);
            C.JSArray_methods.set$length(previous, newLength);
            H.IterableMixinWorkaround_setRangeList(previous, insertEnd, newLength, previous, removeEnd);
            H.IterableMixinWorkaround_setRangeList(previous, t3, insertEnd, addedItems, 0);
          }
        }
      }}
  },
  ListBase_ChangeNotifier: {
    "^": "ListBase+ChangeNotifier;",
    $isObservable: true
  },
  ObservableList_listChanges_closure: {
    "^": "Closure0:11;this_0",
    call$0: function() {
      this.this_0._listChanges = null;
    },
    $isFunction: true
  }
}],
["observe.src.observable_map", "package:observe/src/observable_map.dart", , V, {
  "^": "",
  MapChangeRecord: {
    "^": "ChangeRecord;key>,oldValue,newValue,isInsert,isRemove",
    toString$0: function(_) {
      var kind;
      if (this.isInsert)
        kind = "insert";
      else
        kind = this.isRemove ? "remove" : "set";
      return "#<MapChangeRecord " + kind + " " + H.S(this.key) + " from: " + H.S(this.oldValue) + " to: " + H.S(this.newValue) + ">";
    },
    $isMapChangeRecord: true
  },
  ObservableMap: {
    "^": "ChangeNotifier;_observable_map$_map,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$keys: function() {
      return this._observable_map$_map.get$keys();
    },
    get$values: function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$values(t1);
    },
    get$length: function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$length(t1) === 0;
    },
    get$isNotEmpty: function(_) {
      var t1 = this._observable_map$_map;
      return t1.get$length(t1) !== 0;
    },
    containsKey$1: function(key) {
      return this._observable_map$_map.containsKey$1(key);
    },
    $index: function(_, key) {
      return this._observable_map$_map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      var t1, t2, len, oldValue;
      t1 = this.change_notifier$ChangeNotifier$_changes;
      if (t1 != null) {
        t2 = t1._async$_next;
        t1 = t2 == null ? t1 != null : t2 !== t1;
      } else
        t1 = false;
      if (!t1) {
        this._observable_map$_map.$indexSet(0, key, value);
        return;
      }
      t1 = this._observable_map$_map;
      len = t1.get$length(t1);
      oldValue = t1.$index(0, key);
      t1.$indexSet(0, key, value);
      if (len !== t1.get$length(t1)) {
        F.notifyPropertyChangeHelper(this, C.Symbol_length, len, t1.get$length(t1));
        this.notifyChange$1(this, H.setRuntimeTypeInfo(new V.MapChangeRecord(key, null, value, true, false), [null, null]));
        this._notifyKeysValuesChanged$0();
      } else if (!J.$eq(oldValue, value)) {
        this.notifyChange$1(this, H.setRuntimeTypeInfo(new V.MapChangeRecord(key, oldValue, value, false, false), [null, null]));
        this.notifyChange$1(this, H.setRuntimeTypeInfo(new T.PropertyChangeRecord(this, C.Symbol_values, null, null), [null]));
      }
    },
    addAll$1: function(_, other) {
      H.IterableMixinWorkaround_forEach(other, new V.ObservableMap_addAll_closure(this));
    },
    remove$1: function(_, key) {
      var t1, len, result, t2, t3;
      t1 = this._observable_map$_map;
      len = t1.get$length(t1);
      result = t1.remove$1(0, key);
      t2 = this.change_notifier$ChangeNotifier$_changes;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2 && len !== t1.get$length(t1)) {
        this.notifyChange$1(this, H.setRuntimeTypeInfo(new V.MapChangeRecord(key, result, null, false, true), [null, null]));
        F.notifyPropertyChangeHelper(this, C.Symbol_length, len, t1.get$length(t1));
        this._notifyKeysValuesChanged$0();
      }
      return result;
    },
    clear$0: function(_) {
      var t1, len, t2, t3;
      t1 = this._observable_map$_map;
      len = t1.get$length(t1);
      t2 = this.change_notifier$ChangeNotifier$_changes;
      if (t2 != null) {
        t3 = t2._async$_next;
        t2 = t3 == null ? t2 != null : t3 !== t2;
      } else
        t2 = false;
      if (t2 && len > 0) {
        t1.forEach$1(0, new V.ObservableMap_clear_closure(this));
        F.notifyPropertyChangeHelper(this, C.Symbol_length, len, 0);
        this._notifyKeysValuesChanged$0();
      }
      t1.clear$0(0);
    },
    forEach$1: function(_, f) {
      return this._observable_map$_map.forEach$1(0, f);
    },
    toString$0: function(_) {
      return P.Maps_mapToString(this);
    },
    _notifyKeysValuesChanged$0: function() {
      this.notifyChange$1(this, H.setRuntimeTypeInfo(new T.PropertyChangeRecord(this, C.Symbol_keys, null, null), [null]));
      this.notifyChange$1(this, H.setRuntimeTypeInfo(new T.PropertyChangeRecord(this, C.Symbol_values, null, null), [null]));
    },
    $isMap: true,
    static: {ObservableMap_ObservableMap$createFromType: function(other, $K, $V) {
        var result;
        if (!!other.$isSplayTreeMap)
          result = H.setRuntimeTypeInfo(new V.ObservableMap(P.SplayTreeMap$(null, null, $K, $V), null, null), [$K, $V]);
        else
          result = !!other.$isLinkedHashMap ? H.setRuntimeTypeInfo(new V.ObservableMap(P.LinkedHashMap_LinkedHashMap(null, null, null, $K, $V), null, null), [$K, $V]) : H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, $K, $V), null, null), [$K, $V]);
        return result;
      }}
  },
  ObservableMap_addAll_closure: {
    "^": "Closure0;this_0",
    call$2: [function(key, value) {
      this.this_0.$indexSet(0, key, value);
    }, "call$2", null, 4, 0, null, 59, 14, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(K, V) {
        return {func: "dynamic__K_V2", args: [K, V]};
      }, this.this_0, "ObservableMap");
    }
  },
  ObservableMap_clear_closure: {
    "^": "Closure0:58;this_0",
    call$2: function(key, value) {
      var t1 = this.this_0;
      t1.notifyChange$1(t1, H.setRuntimeTypeInfo(new V.MapChangeRecord(key, value, null, false, true), [null, null]));
    },
    $isFunction: true
  }
}],
["observe.src.observer_transform", "package:observe/src/observer_transform.dart", , Y, {
  "^": "",
  ObserverTransform: {
    "^": "Bindable;_bindable,_getTransformer,_setTransformer,_observer_transform$_notifyCallback,_observer_transform$_value",
    _getTransformer$1: function(arg0) {
      return this._getTransformer.call$1(arg0);
    },
    _observer_transform$_notifyCallback$1: function(arg0) {
      return this._observer_transform$_notifyCallback.call$1(arg0);
    },
    open$1: function(_, callback) {
      var t1;
      this._observer_transform$_notifyCallback = callback;
      t1 = this._getTransformer$1(J.open$1$x(this._bindable, this.get$_observedCallback()));
      this._observer_transform$_value = t1;
      return t1;
    },
    _observedCallback$1: [function(newValue) {
      var value = this._getTransformer$1(newValue);
      if (J.$eq(value, this._observer_transform$_value))
        return;
      this._observer_transform$_value = value;
      return this._observer_transform$_notifyCallback$1(value);
    }, "call$1", "get$_observedCallback", 2, 0, 30, 35],
    close$0: function(_) {
      var t1 = this._bindable;
      if (t1 != null)
        J.close$0$x(t1);
      this._bindable = null;
      this._getTransformer = null;
      this._setTransformer = null;
      this._observer_transform$_notifyCallback = null;
      this._observer_transform$_value = null;
    },
    get$value: function(_) {
      var t1 = this._getTransformer$1(J.get$value$x(this._bindable));
      this._observer_transform$_value = t1;
      return t1;
    },
    set$value: function(_, newValue) {
      J.set$value$x(this._bindable, newValue);
    }
  }
}],
["observe.src.path_observer", "package:observe/src/path_observer.dart", , L, {
  "^": "",
  _getObjectProperty: function(object, property) {
    var t1, t2, getter, exception, decl;
    if (object == null)
      return;
    t1 = property;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (!!J.getInterceptor(object).$isList && J.$ge$n(property, 0) && J.$lt$n(property, J.get$length$asx(object)))
        return J.$index$asx(object, property);
    } else if (!!J.getInterceptor(property).$isSymbol0) {
      t1 = object;
      t2 = H.checkSubtype(t1, "$isIndexable", [P.String, null], "$asIndexable");
      if (!t2) {
        t1 = object;
        t2 = H.checkSubtype(t1, "$isMap", [P.String, null], "$asMap");
        t1 = t2 && !C.JSArray_methods.contains$1(C.List_8QI, property);
      } else
        t1 = true;
      if (t1)
        return J.$index$asx(object, $.get$symbolConverter()._names.$index(0, property));
      try {
        t1 = object;
        t2 = property;
        getter = $.get$objectAccessor()._getters.$index(0, t2);
        if (getter == null)
          H.throwExpression(O.MissingCodeException$("getter \"" + H.S(t2) + "\" in " + H.S(t1)));
        t1 = getter.call$1(t1);
        return t1;
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isNoSuchMethodError) {
          t1 = J.get$runtimeType$(object);
          decl = $.get$typeInspector()._findDeclaration$2(t1, C.Symbol_noSuchMethod);
          if (!(decl != null && decl.kind === C.DeclarationKind_2 && !decl.isStatic))
            throw exception;
        } else
          throw exception;
      }

    }
    t1 = $.get$_logger();
    if (t1.isLoggable$1(C.Level_FINER_400))
      t1.finer$1("can't get " + H.S(property) + " in " + H.S(object));
    return;
  },
  _setObjectProperty: function(object, property, value) {
    var t1, t2, exception;
    if (object == null)
      return false;
    t1 = property;
    if (typeof t1 === "number" && Math.floor(t1) === t1) {
      if (!!J.getInterceptor(object).$isList && J.$ge$n(property, 0) && J.$lt$n(property, J.get$length$asx(object))) {
        J.$indexSet$ax(object, property, value);
        return true;
      }
    } else if (!!J.getInterceptor(property).$isSymbol0) {
      t1 = object;
      t2 = H.checkSubtype(t1, "$isIndexable", [P.String, null], "$asIndexable");
      if (!t2) {
        t1 = object;
        t2 = H.checkSubtype(t1, "$isMap", [P.String, null], "$asMap");
        t1 = t2 && !C.JSArray_methods.contains$1(C.List_8QI, property);
      } else
        t1 = true;
      if (t1) {
        J.$indexSet$ax(object, $.get$symbolConverter()._names.$index(0, property), value);
        return true;
      }
      try {
        $.get$objectAccessor().write$3(object, property, value);
        return true;
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isNoSuchMethodError) {
          t1 = J.get$runtimeType$(object);
          if (!$.get$typeInspector().hasInstanceMethod$2(t1, C.Symbol_noSuchMethod))
            throw exception;
        } else
          throw exception;
      }

    }
    t1 = $.get$_logger();
    if (t1.isLoggable$1(C.Level_FINER_400))
      t1.finer$1("can't set " + H.S(property) + " in " + H.S(object));
    return false;
  },
  _isPathValid: function(s) {
    s = J.trim$0$s(s);
    if (s === "")
      return true;
    if (0 >= s.length)
      return H.ioore(s, 0);
    if (s[0] === ".")
      return false;
    return $.get$_pathRegExp().hasMatch$1(s);
  },
  PathObserver: {
    "^": "_Observer;_path_observer$_path,_object,_directObserver,_birthId,_notifyCallback,_notifyArgumentCount,_path_observer$_value",
    get$_isClosed: function() {
      return this._path_observer$_path == null;
    },
    set$value: function(_, newValue) {
      var t1 = this._path_observer$_path;
      if (t1 != null)
        t1.setValueFrom$2(this._object, newValue);
    },
    get$_reportArgumentCount: function() {
      return 2;
    },
    open$1: function(_, callback) {
      return L._Observer.prototype.open$1.call(this, this, callback);
    },
    _connect$0: function() {
      this._directObserver = L._ObservedSet__ObservedSet(this, this._object);
      this._check$1$skipChanges(true);
    },
    _disconnect$0: function() {
      this._path_observer$_value = null;
      this._path_observer$_path = null;
      this._object = null;
    },
    _iterateObjects$1: function(observe) {
      this._path_observer$_path._iterateObjects$2(this._object, observe);
    },
    _check$1$skipChanges: function(skipChanges) {
      var oldValue, t1;
      oldValue = this._path_observer$_value;
      t1 = this._path_observer$_path.getValueFrom$1(this._object);
      this._path_observer$_value = t1;
      if (skipChanges || J.$eq(t1, oldValue))
        return false;
      this._report$2(this._path_observer$_value, oldValue);
      return true;
    },
    _check$0: function() {
      return this._check$1$skipChanges(false);
    },
    $isBindable: true
  },
  PropertyPath: {
    "^": "Object;_segments",
    get$length: function(_) {
      return this._segments.length;
    },
    get$isEmpty: function(_) {
      return this._segments.length === 0;
    },
    get$isValid: function() {
      return true;
    },
    toString$0: function(_) {
      if (!this.get$isValid())
        return "<invalid path>";
      return H.setRuntimeTypeInfo(new H.MappedListIterable(this._segments, new L.PropertyPath_toString_closure()), [null, null]).join$1(0, ".");
    },
    $eq: function(_, other) {
      var t1, len, t2, i, t3;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.getInterceptor(other).$isPropertyPath)
        return false;
      if (this.get$isValid() !== other.get$isValid())
        return false;
      t1 = this._segments;
      len = t1.length;
      t2 = other._segments;
      if (len !== t2.length)
        return false;
      for (i = 0; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3 = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        if (!J.$eq(t3, t2[i]))
          return false;
      }
      return true;
    },
    get$hashCode: function(_) {
      var t1, len, hash, i, t2;
      for (t1 = this._segments, len = t1.length, hash = 0, i = 0; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t2 = J.get$hashCode$(t1[i]);
        if (typeof t2 !== "number")
          return H.iae(t2);
        hash = 536870911 & hash + t2;
        hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
        hash ^= hash >>> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
    },
    getValueFrom$1: function(obj) {
      var t1, segment;
      if (!this.get$isValid())
        return;
      for (t1 = this._segments, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        segment = t1._current;
        if (obj == null)
          return;
        obj = L._getObjectProperty(obj, segment);
      }
      return obj;
    },
    setValueFrom$2: function(obj, value) {
      var t1, end, i;
      t1 = this._segments;
      end = t1.length - 1;
      if (end < 0)
        return false;
      for (i = 0; i < end; ++i) {
        if (obj == null)
          return false;
        if (i >= t1.length)
          return H.ioore(t1, i);
        obj = L._getObjectProperty(obj, t1[i]);
      }
      if (end >= t1.length)
        return H.ioore(t1, end);
      return L._setObjectProperty(obj, t1[end], value);
    },
    _iterateObjects$2: function(obj, observe) {
      var t1, last, i, i0;
      if (!this.get$isValid() || this._segments.length === 0)
        return;
      t1 = this._segments;
      last = t1.length - 1;
      for (i = 0; obj != null; i = i0) {
        observe.call$1(obj);
        if (i >= last)
          break;
        i0 = i + 1;
        if (i >= t1.length)
          return H.ioore(t1, i);
        obj = L._getObjectProperty(obj, t1[i]);
      }
    },
    $isPropertyPath: true,
    static: {PropertyPath_PropertyPath: function(path) {
        var copy, t1, segment, pathObj, segments, t2, index, it;
        if (!!J.getInterceptor(path).$isList) {
          copy = P.List_List$from(path, false, null);
          t1 = new H.ListIterator(copy, copy.length, 0, null);
          t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(copy, 0)];
          for (; t1.moveNext$0();) {
            segment = t1._current;
            if ((typeof segment !== "number" || Math.floor(segment) !== segment) && !J.getInterceptor(segment).$isSymbol0)
              throw H.wrapException(P.ArgumentError$("List must contain only ints and Symbols"));
          }
          return new L.PropertyPath(copy);
        }
        if (path == null)
          path = "";
        pathObj = $.get$_pathCache().$index(0, path);
        if (pathObj != null)
          return pathObj;
        if (!L._isPathValid(path))
          return $.get$_InvalidPropertyPath__instance();
        segments = [];
        t1 = J.trim$0$s(path).split(".");
        t2 = new H.ListIterator(t1, t1.length, 0, null);
        t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
        for (; t2.moveNext$0();) {
          segment = t2._current;
          if (J.$eq(segment, ""))
            continue;
          index = H.Primitives_parseInt(segment, 10, new L.PropertyPath_PropertyPath_closure());
          segments.push(index != null ? index : $.get$symbolConverter()._symbols.$index(0, segment));
        }
        pathObj = new L.PropertyPath(C.JSArray_methods.toList$1$growable(segments, false));
        t1 = $.get$_pathCache();
        if (t1._collection$_length >= 100) {
          t1.toString;
          t2 = new P.LinkedHashMapKeyIterable(t1);
          t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(t1, 0)];
          it = t2.get$iterator(t2);
          if (!it.moveNext$0())
            H.throwExpression(H.IterableElementError_noElement());
          t1.remove$1(0, it.get$current());
        }
        t1.$indexSet(0, path, pathObj);
        return pathObj;
      }}
  },
  PropertyPath_PropertyPath_closure: {
    "^": "Closure0:30;",
    call$1: function(_) {
      return;
    },
    $isFunction: true
  },
  PropertyPath_toString_closure: {
    "^": "Closure0:30;",
    call$1: [function(s) {
      return !!J.getInterceptor(s).$isSymbol0 ? $.get$symbolConverter()._names.$index(0, s) : s;
    }, "call$1", null, 2, 0, null, 107, "call"],
    $isFunction: true
  },
  _InvalidPropertyPath: {
    "^": "PropertyPath;_segments",
    get$isValid: function() {
      return false;
    },
    static: {"^": "_InvalidPropertyPath__instance"}
  },
  closure7: {
    "^": "Closure0:11;",
    call$0: function() {
      return new H.JSSyntaxRegExp("^(?:(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))(?:\\.(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))*$", H.JSSyntaxRegExp_makeNative("^(?:(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))(?:\\.(?:[$_a-zA-Z]+[$_a-zA-Z0-9]*|(?:[0-9]|[1-9]+[0-9]+)))*$", false, true, false), null, null);
    },
    $isFunction: true
  },
  "+ closure7": 0,
  CompoundObserver: {
    "^": "_Observer;_directObserver,_observed,_birthId,_notifyCallback,_notifyArgumentCount,_path_observer$_value",
    get$_isClosed: function() {
      return this._observed == null;
    },
    get$_reportArgumentCount: function() {
      return 3;
    },
    open$1: function(_, callback) {
      return L._Observer.prototype.open$1.call(this, this, callback);
    },
    _connect$0: function() {
      var t1, t2, i, object;
      this._check$1$skipChanges(true);
      for (t1 = this._observed, t2 = t1.length, i = 0; i < t2; i += 2) {
        object = t1[i];
        if (object !== C.C__ObserverSentinel) {
          t1 = $._ObservedSet__lastSet;
          if (t1 != null) {
            t2 = t1._rootObject;
            t2 = t2 == null ? object != null : t2 !== object;
          } else
            t2 = true;
          if (t2) {
            t1 = new L._ObservedSet(object, P.SplayTreeMap$(null, null, null, null), null, null, false);
            $._ObservedSet__lastSet = t1;
          }
          t1._path_observer$_observers.$indexSet(0, this._birthId, this);
          this._iterateObjects$1(t1.get$observe(t1));
          this._directObserver = null;
          break;
        }
      }
    },
    _disconnect$0: function() {
      var i, t1, t2, t3;
      this._path_observer$_value = null;
      for (i = 0; t1 = this._observed, t2 = t1.length, i < t2; i += 2)
        if (t1[i] === C.C__ObserverSentinel) {
          t3 = i + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          J.close$0$x(t1[t3]);
        }
      this._observed = null;
    },
    addPath$2: function(object, path) {
      var t1;
      if (this._notifyCallback != null || this._observed == null)
        throw H.wrapException(P.StateError$("Cannot add paths once started."));
      if (!J.getInterceptor(path).$isPropertyPath)
        path = L.PropertyPath_PropertyPath(path);
      t1 = this._observed;
      t1.push(object);
      t1.push(path);
    },
    addPath$1: function(object) {
      return this.addPath$2(object, null);
    },
    _iterateObjects$1: function(observe) {
      var i, t1, t2, object, t3;
      for (i = 0; t1 = this._observed, t2 = t1.length, i < t2; i += 2) {
        object = t1[i];
        if (object !== C.C__ObserverSentinel) {
          t3 = i + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          H.interceptedTypeCast(t1[t3], "$isPropertyPath")._iterateObjects$2(object, observe);
        }
      }
    },
    _check$1$skipChanges: function(skipChanges) {
      var changed, oldValues, i, t1, t2, t3, pathOrObserver, object, value;
      J.set$length$asx(this._path_observer$_value, C.JSInt_methods._tdivFast$1(this._observed.length, 2));
      for (changed = false, oldValues = null, i = 0; t1 = this._observed, t2 = t1.length, i < t2; i += 2) {
        t3 = i + 1;
        if (t3 >= t2)
          return H.ioore(t1, t3);
        pathOrObserver = t1[t3];
        object = t1[i];
        if (object === C.C__ObserverSentinel) {
          H.interceptedTypeCast(pathOrObserver, "$isBindable");
          value = pathOrObserver.get$value(pathOrObserver);
        } else
          value = H.interceptedTypeCast(pathOrObserver, "$isPropertyPath").getValueFrom$1(object);
        if (skipChanges) {
          J.$indexSet$ax(this._path_observer$_value, C.JSInt_methods._tdivFast$1(i, 2), value);
          continue;
        }
        t1 = this._path_observer$_value;
        t2 = C.JSInt_methods._tdivFast$1(i, 2);
        if (J.$eq(value, J.$index$asx(t1, t2)))
          continue;
        t1 = this._notifyArgumentCount;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= 2) {
          if (oldValues == null)
            oldValues = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
          oldValues.$indexSet(0, t2, J.$index$asx(this._path_observer$_value, t2));
        }
        J.$indexSet$ax(this._path_observer$_value, t2, value);
        changed = true;
      }
      if (!changed)
        return false;
      this._report$3(this._path_observer$_value, oldValues, t1);
      return true;
    },
    _check$0: function() {
      return this._check$1$skipChanges(false);
    },
    $isBindable: true
  },
  _ObserverSentinel: {
    "^": "Object;"
  },
  _Observer: {
    "^": "Bindable;_birthId<",
    _notifyCallback$0: function() {
      return this._notifyCallback.call$0();
    },
    _notifyCallback$1: function(arg0) {
      return this._notifyCallback.call$1(arg0);
    },
    _notifyCallback$2: function(arg0, arg1) {
      return this._notifyCallback.call$2(arg0, arg1);
    },
    _notifyCallback$3: function(arg0, arg1, arg2) {
      return this._notifyCallback.call$3(arg0, arg1, arg2);
    },
    get$_isOpen: function() {
      return this._notifyCallback != null;
    },
    open$1: function(_, callback) {
      if (this._notifyCallback != null || this.get$_isClosed())
        throw H.wrapException(P.StateError$("Observer has already been opened."));
      if (X.minArgs(callback) > this.get$_reportArgumentCount())
        throw H.wrapException(P.ArgumentError$("callback should take " + this.get$_reportArgumentCount() + " or fewer arguments"));
      this._notifyCallback = callback;
      this._notifyArgumentCount = P.min(this.get$_reportArgumentCount(), X.maxArgs(callback));
      this._connect$0();
      return this._path_observer$_value;
    },
    get$value: function(_) {
      this._check$1$skipChanges(true);
      return this._path_observer$_value;
    },
    close$0: function(_) {
      if (this._notifyCallback == null)
        return;
      this._disconnect$0();
      this._path_observer$_value = null;
      this._notifyCallback = null;
    },
    _deliver$1: [function(_) {
      if (this._notifyCallback != null)
        this._dirtyCheck$0();
    }, "call$1", "get$_deliver", 2, 0, 13, 79],
    _dirtyCheck$0: function() {
      var cycles = 0;
      while (true) {
        if (!(cycles < 1000 && this._check$0()))
          break;
        ++cycles;
      }
      return cycles > 0;
    },
    _report$3: function(newValue, oldValue, extraArg) {
      var e, s, exception, t1;
      try {
        switch (this._notifyArgumentCount) {
          case 0:
            this._notifyCallback$0();
            break;
          case 1:
            this._notifyCallback$1(newValue);
            break;
          case 2:
            this._notifyCallback$2(newValue, oldValue);
            break;
          case 3:
            this._notifyCallback$3(newValue, oldValue, extraArg);
            break;
        }
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]).completeError$2(e, s);
      }

    },
    _report$2: function(newValue, oldValue) {
      return this._report$3(newValue, oldValue, null);
    }
  },
  _ObservedSet: {
    "^": "Object;_rootObject,_path_observer$_observers,_objects,_toRemove,_resetNeeded",
    open$1: function(_, obs) {
      this._path_observer$_observers.$indexSet(0, obs.get$_birthId(), obs);
      obs._iterateObjects$1(this.get$observe(this));
    },
    observe$1: [function(_, obj) {
      var t1 = J.getInterceptor(obj);
      if (!!t1.$isObservableList)
        this._observeStream$1(obj.get$listChanges());
      if (!!t1.$isObservable)
        this._observeStream$1(t1.get$changes(obj));
    }, "call$1", "get$observe", 2, 0, 108],
    _observeStream$1: function(stream) {
      var t1, sub;
      if (this._objects == null)
        this._objects = P.HashMap_HashMap(null, null, null, null, null);
      t1 = this._toRemove;
      sub = t1 != null ? t1.remove$1(0, stream) : null;
      if (sub != null)
        this._objects.$indexSet(0, stream, sub);
      else if (!this._objects.containsKey$1(stream))
        this._objects.$indexSet(0, stream, stream.listen$1(this.get$_path_observer$_callback()));
    },
    reset$0: [function(_) {
      var objs, t1, t2, t3, observer;
      if (!this._resetNeeded)
        return;
      objs = this._toRemove;
      if (objs == null)
        objs = P.HashMap_HashMap(null, null, null, null, null);
      this._toRemove = this._objects;
      this._objects = objs;
      for (t1 = this._path_observer$_observers, t1 = H.setRuntimeTypeInfo(new P._SplayTreeValueIterable(t1), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), t2 = t1._map, t3 = H.getTypeArgumentByIndex(t1, 1), t1 = H.setRuntimeTypeInfo(new P._SplayTreeValueIterator(t2, H.setRuntimeTypeInfo([], [P._SplayTreeNode]), t2._modificationCount, t2._splayCount, null), [H.getTypeArgumentByIndex(t1, 0), t3]), t1._SplayTreeIterator$1(t2, t3); t1.moveNext$0();) {
        observer = t1.get$current();
        if (observer.get$_isOpen())
          observer._iterateObjects$1(this.get$observe(this));
      }
      for (t1 = this._toRemove, t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        t1._current.cancel$0();
      this._toRemove = null;
    }, "call$0", "get$reset", 0, 0, 10],
    _path_observer$_callback$1: [function(records) {
      var t1, observer;
      for (t1 = this._path_observer$_observers, t1 = H.setRuntimeTypeInfo(new P._SplayTreeValueIterable(t1), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), t1 = P.List_List$from(t1, false, H.getRuntimeTypeArgument(t1, "IterableBase", 0)), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        observer = t1._current;
        if (observer.get$_isOpen())
          observer._check$0();
      }
      this._resetNeeded = true;
      P.scheduleMicrotask(this.get$reset(this));
    }, "call$1", "get$_path_observer$_callback", 2, 0, 13, 109],
    static: {"^": "_ObservedSet__lastSet", _ObservedSet__ObservedSet: function(observer, rootObj) {
        var t1, t2;
        t1 = $._ObservedSet__lastSet;
        if (t1 != null) {
          t2 = t1._rootObject;
          t2 = t2 == null ? rootObj != null : t2 !== rootObj;
        } else
          t2 = true;
        if (t2) {
          t1 = new L._ObservedSet(rootObj, P.SplayTreeMap$(null, null, null, null), null, null, false);
          $._ObservedSet__lastSet = t1;
        }
        t1._path_observer$_observers.$indexSet(0, observer._birthId, observer);
        observer._iterateObjects$1(t1.get$observe(t1));
      }}
  }
}],
["observe.src.to_observable", "package:observe/src/to_observable.dart", , R, {
  "^": "",
  _toObservableDeep: [function(value) {
    var t1, result, t2;
    t1 = J.getInterceptor(value);
    if (!!t1.$isObservable)
      return value;
    if (!!t1.$isMap) {
      result = V.ObservableMap_ObservableMap$createFromType(value, null, null);
      t1.forEach$1(value, new R._toObservableDeep_closure(result));
      return result;
    }
    if (!!t1.$isIterable) {
      t1 = t1.map$1(value, R._toObservableDeep$closure());
      t2 = Q.ObservableList$(null, null);
      t2.addAll$1(0, t1);
      return t2;
    }
    return value;
  }, "call$1", "_toObservableDeep$closure", 2, 0, 30, 14],
  _toObservableDeep_closure: {
    "^": "Closure0:58;result_0",
    call$2: function(k, v) {
      this.result_0.$indexSet(0, R._toObservableDeep(k), R._toObservableDeep(v));
    },
    $isFunction: true
  }
}],
["polymer", "package:polymer/polymer.dart", , A, {
  "^": "",
  _getPublishedProperties: function(type, props) {
    var t1, decl, t2;
    for (t1 = $.get$typeInspector().query$2(0, type, C.QueryOptions_sAl), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
      decl = t1._current;
      t2 = J.getInterceptor$x(decl);
      if (t2.get$isFinal(decl) === true)
        continue;
      if (props == null)
        props = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      props.$indexSet(0, L.PropertyPath_PropertyPath([t2.get$name(decl)]), decl);
    }
    return props;
  },
  _shimShadowDomStyling: function(template, $name, extendee) {
    var platform, shadowCss;
    if (template == null || $.get$_hasShadowDomPolyfill() !== true)
      return;
    platform = J.$index$asx($.get$context(), "Platform");
    if (platform == null)
      return;
    shadowCss = J.$index$asx(platform, "ShadowCSS");
    if (shadowCss == null)
      return;
    shadowCss.callMethod$2("shimStyling", [template, $name, extendee]);
  },
  _cssTextFromSheet: function(sheet) {
    var href, e, t, t1, exception;
    if (sheet == null)
      return "";
    if ($._deployMode)
      return "";
    t1 = J.getInterceptor$x(sheet);
    href = t1.get$href(sheet);
    if (J.$eq(href, ""))
      href = t1.get$attributes(sheet)._html$_element.getAttribute("href");
    try {
      t1 = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(t1, "GET", href, false);
      t1.send();
      t1 = t1.responseText;
      return t1;
    } catch (exception) {
      t1 = H.unwrapException(exception);
      if (!!J.getInterceptor(t1).$isDomException) {
        e = t1;
        t = new H._StackTrace(exception, null);
        $.get$_sheetLog().fine$1("failed to XHR stylesheet text href=\"" + H.S(href) + "\" error: " + H.S(e) + ", trace: " + H.S(t));
        return "";
      } else
        throw exception;
    }

  },
  _isObserverMethod: [function(symbol) {
    var $name = $.get$symbolConverter()._names.$index(0, symbol);
    if ($name == null)
      return false;
    return C.JSString_methods.endsWith$1($name, "Changed") && $name !== "attributeChanged";
  }, "call$1", "_isObserverMethod$closure", 2, 0, 42, 43],
  Polymer_register: function($name, type) {
    $.get$_typesByName().$indexSet(0, $name, type);
    H.interceptedTypeCast(J.$index$asx($.get$context(), "Polymer"), "$isJsFunction").apply$1([$name]);
  },
  Polymer__unbindNodeTree: function(node) {
    A.Polymer__forNodeTree(node, new A.Polymer__unbindNodeTree_closure());
  },
  Polymer__forNodeTree: function(node, callback) {
    var child;
    if (node == null)
      return;
    callback.call$1(node);
    for (child = node.firstChild; child != null; child = child.nextSibling)
      A.Polymer__forNodeTree(child, callback);
  },
  Polymer_prepareBinding: function(path, $name, node) {
    return new A.Polymer_prepareBinding_closure(path, $name);
  },
  Polymer_applyStyleToScope: function(style, scope) {
    var clone, attr;
    if (style == null)
      return;
    clone = document.createElement("style", null);
    clone.textContent = style.textContent;
    attr = style.getAttribute("element");
    if (attr != null)
      clone.setAttribute("element", attr);
    scope.appendChild(clone);
  },
  startPolymer: function(initializers, deployMode) {
    var t1;
    A._hookJsPolymer();
    $._deployMode = deployMode;
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(initializers, 25, 0, null), [H.getTypeArgumentByIndex(initializers, 0)]); t1.moveNext$0();)
      t1._current.call$0();
  },
  _hookJsPolymer: function() {
    var polymerJs, zone, proto, t1, originalRegister;
    polymerJs = J.$index$asx($.get$context(), "Polymer");
    if (polymerJs == null)
      throw H.wrapException(P.StateError$("polymer.js must be loaded before polymer.dart, please add <link rel=\"import\" href=\"packages/polymer/polymer.html\"> to your <head> before any Dart scripts. Alternatively you can get a different version of polymer.js by following the instructions at http://www.polymer-project.org; if you do that be sure to include the platform polyfills."));
    zone = $.Zone__current;
    polymerJs.callMethod$2("whenPolymerReady", [zone.bindCallback$1(new A._hookJsPolymer_closure())]);
    proto = J.$index$asx(P.JsObject_JsObject$fromBrowserObject(document.createElement("polymer-element", null)), "__proto__");
    if (!!J.getInterceptor(proto).$isNode)
      proto = P.JsObject_JsObject$fromBrowserObject(proto);
    t1 = J.getInterceptor$asx(proto);
    originalRegister = t1.$index(proto, "register");
    if (originalRegister == null)
      throw H.wrapException(P.StateError$("polymer.js must expose \"register\" function on polymer-element to enable polymer.dart to interoperate."));
    t1.$indexSet(proto, "register", new P.JsFunction(P._convertDartFunction(new A._hookJsPolymer_registerDart(zone, originalRegister), true)));
  },
  PolymerDeclaration: {
    "^": "Object;element<,type>,superDeclaration<,name>,_publish<,_publishLC<,_observe>,_instanceAttributes<,_sheets,_styles,_eventDelegates<,_templateDelegates",
    get$templateContent: function() {
      var template, t1;
      template = J.querySelector$1$x(this.element, "template");
      if (template != null)
        t1 = J.get$content$x(!!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template));
      else
        t1 = null;
      return t1;
    },
    adjustShadowElement$0: function() {
      var $content, t1, s, t2;
      if ($.get$_hasShadowDomPolyfill() !== true) {
        $content = this.get$templateContent();
        if ($content == null)
          return;
        for (t1 = J.querySelectorAll$1$x($content, "shadow"), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          s = t1._current;
          t2 = J.getInterceptor$x(s);
          if (J.get$isEmpty$asx(t2.get$nodes(s)))
            t2.append$1(s, document.createElement("content", null));
        }
      }
    },
    registerType$1: function($name) {
      var baseTag, decl, t1, t2, t3, interceptorClass, interceptor, $constructor, baseClassName, baseConstructor, properties, proto, options;
      for (baseTag = null, decl = this; decl != null;) {
        baseTag = J.get$attributes$x(decl.get$element())._html$_element.getAttribute("extends");
        decl = decl.get$superDeclaration();
      }
      t1 = document;
      t2 = this.type;
      t3 = window;
      interceptorClass = J.findInterceptorConstructorForType(t2);
      if (interceptorClass == null)
        H.throwExpression(P.ArgumentError$(t2));
      interceptor = interceptorClass.prototype;
      $constructor = J.findConstructorForNativeSubclassType(t2, "created");
      if ($constructor == null)
        H.throwExpression(P.ArgumentError$(H.S(t2) + " has no constructor called 'created'"));
      J.getNativeInterceptor(W._ElementFactoryProvider_createElement_tag("article", null));
      baseClassName = interceptorClass.$nativeSuperclassTag;
      if (baseClassName == null)
        H.throwExpression(P.ArgumentError$(t2));
      t2 = baseTag == null;
      if (t2) {
        if (!J.$eq(baseClassName, "HTMLElement"))
          H.throwExpression(P.UnsupportedError$("Class must provide extendsTag if base native class is not HtmlElement"));
      } else if (!(t1.createElement(baseTag) instanceof window[baseClassName]))
        H.throwExpression(P.UnsupportedError$("extendsTag does not match base native class"));
      baseConstructor = t3[baseClassName];
      properties = {};
      properties.createdCallback = {value: function(invokeCallback) {
          return function() {
            return invokeCallback(this);
          };
        }(H.convertDartClosureToJS(W._callConstructor($constructor, interceptor), 1))};
      properties.attachedCallback = {value: function(invokeCallback) {
          return function() {
            return invokeCallback(this);
          };
        }(H.convertDartClosureToJS(W._callAttached$closure(), 1))};
      properties.detachedCallback = {value: function(invokeCallback) {
          return function() {
            return invokeCallback(this);
          };
        }(H.convertDartClosureToJS(W._callDetached$closure(), 1))};
      properties.attributeChangedCallback = {value: function(invokeCallback) {
          return function(arg1, arg2, arg3) {
            return invokeCallback(this, arg1, arg2, arg3);
          };
        }(H.convertDartClosureToJS(W._callAttributeChanged$closure(), 4))};
      proto = Object.create(baseConstructor.prototype, properties);
      t3 = H.makeLeafDispatchRecord(interceptor);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: t3, enumerable: false, writable: true, configurable: true});
      options = {prototype: proto};
      if (!t2)
        options.extends = baseTag;
      t1.registerElement($name, options);
    },
    publishAttributes$1: function(superDecl) {
      var t1, t2, attrs, t3, attr, property, path, t4, decl;
      if (superDecl != null && superDecl.get$_publish() != null) {
        t1 = superDecl.get$_publish();
        t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, null, null);
        t2.addAll$1(0, t1);
        this._publish = t2;
      }
      t1 = this.type;
      this._publish = A._getPublishedProperties(t1, this._publish);
      attrs = J.get$attributes$x(this.element)._html$_element.getAttribute("attributes");
      if (attrs != null)
        for (t2 = C.JSString_methods.split$1(attrs, $.get$_ATTRIBUTES_REGEX()), t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]), t3 = this.name; t2.moveNext$0();) {
          attr = J.trim$0$s(t2._current);
          if (attr === "")
            continue;
          property = $.get$symbolConverter()._symbols.$index(0, attr);
          path = L.PropertyPath_PropertyPath([property]);
          t4 = this._publish;
          if (t4 != null && t4.containsKey$1(path))
            continue;
          decl = $.get$typeInspector().getDeclaration$2(t1, property);
          if (decl == null || decl.kind === C.DeclarationKind_2 || decl.isFinal) {
            window;
            t4 = "property for attribute " + attr + " of polymer-element name=" + H.S(t3) + " not found.";
            if (typeof console != "undefined")
              console.warn(t4);
            continue;
          }
          t4 = this._publish;
          if (t4 == null) {
            t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
            this._publish = t4;
          }
          t4.$indexSet(0, path, decl);
        }
    },
    accumulateInstanceAttributes$0: function() {
      var t1, t2;
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Object);
      this._instanceAttributes = t1;
      t2 = this.superDeclaration;
      if (t2 != null)
        t1.addAll$1(0, t2.get$_instanceAttributes());
      J.get$attributes$x(this.element).forEach$1(0, new A.PolymerDeclaration_accumulateInstanceAttributes_closure(this));
    },
    addAttributeDelegates$1: function(delegates) {
      J.get$attributes$x(this.element).forEach$1(0, new A.PolymerDeclaration_addAttributeDelegates_closure(delegates));
    },
    cacheSheets$0: function() {
      var t1 = this.findNodes$1("[rel=stylesheet]");
      this._sheets = t1;
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.remove$0$ax(t1._current);
    },
    cacheStyles$0: function() {
      var t1 = this.findNodes$1("style[polymer-scope]");
      this._styles = t1;
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.remove$0$ax(t1._current);
    },
    installLocalSheets$0: function() {
      var t1, sheets, $content, cssText, t2, str, t3;
      t1 = this._sheets;
      t1.toString;
      sheets = H.setRuntimeTypeInfo(new H.WhereIterable(t1, new A.PolymerDeclaration_installLocalSheets_closure()), [null]);
      $content = this.get$templateContent();
      if ($content != null) {
        cssText = P.StringBuffer$("");
        for (t1 = H.setRuntimeTypeInfo(new H.WhereIterator(J.get$iterator$ax(sheets._iterable), sheets._f), [H.getTypeArgumentByIndex(sheets, 0)]), t2 = t1._iterator; t1.moveNext$0();) {
          str = A._cssTextFromSheet(t2.get$current());
          t3 = cssText._contents += typeof str === "string" ? str : H.S(str);
          cssText._contents = t3 + "\n";
        }
        if (cssText._contents.length > 0) {
          t1 = document.createElement("style", null);
          t1.textContent = H.S(cssText);
          t2 = J.getInterceptor$x($content);
          t2.insertBefore$2($content, t1, t2.get$firstChild($content));
        }
      }
    },
    findNodes$2: function(selector, matcher) {
      var t1, nodes, $content;
      t1 = J.querySelectorAll$1$x(this.element, selector);
      nodes = t1.toList$0(t1);
      $content = this.get$templateContent();
      if ($content != null)
        C.JSArray_methods.addAll$1(nodes, J.querySelectorAll$1$x($content, selector));
      return nodes;
    },
    findNodes$1: function(selector) {
      return this.findNodes$2(selector, null);
    },
    cssTextForScope$1: function(scopeDescriptor) {
      var cssText, t1, t2, t3, str, t4;
      cssText = P.StringBuffer$("");
      t1 = new A.PolymerDeclaration_cssTextForScope_matcher("[polymer-scope=" + scopeDescriptor + "]");
      for (t2 = this._sheets, t2.toString, t2 = H.setRuntimeTypeInfo(new H.WhereIterable(t2, t1), [null]), t2 = H.setRuntimeTypeInfo(new H.WhereIterator(J.get$iterator$ax(t2._iterable), t2._f), [H.getTypeArgumentByIndex(t2, 0)]), t3 = t2._iterator; t2.moveNext$0();) {
        str = A._cssTextFromSheet(t3.get$current());
        t4 = cssText._contents += typeof str === "string" ? str : H.S(str);
        cssText._contents = t4 + "\n\n";
      }
      for (t2 = this._styles, t2.toString, t1 = H.setRuntimeTypeInfo(new H.WhereIterable(t2, t1), [null]), t1 = H.setRuntimeTypeInfo(new H.WhereIterator(J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0)]), t2 = t1._iterator; t1.moveNext$0();) {
        str = J.get$text$x(t2.get$current());
        t3 = cssText._contents += typeof str === "string" ? str : H.S(str);
        cssText._contents = t3 + "\n\n";
      }
      return cssText._contents;
    },
    cssTextToScopeStyle$2: function(cssText, scopeDescriptor) {
      var t1;
      if (cssText === "")
        return;
      t1 = document.createElement("style", null);
      t1.textContent = cssText;
      t1.toString;
      t1.setAttribute("element", H.S(this.name) + "-" + scopeDescriptor);
      return t1;
    },
    inferObservers$0: function() {
      var t1, decl, t2, t3, $name;
      for (t1 = $.get$_changedMethodQueryOptions(), t1 = $.get$typeInspector().query$2(0, this.type, t1), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        decl = t1._current;
        if (this._observe == null)
          this._observe = P.HashMap_HashMap(null, null, null, null, null);
        t2 = J.getInterceptor$x(decl);
        t3 = t2.get$name(decl);
        $name = $.get$symbolConverter()._names.$index(0, t3);
        $name = J.substring$2$s($name, 0, $name.length - 7);
        this._observe.$indexSet(0, L.PropertyPath_PropertyPath($name), [t2.get$name(decl)]);
      }
    },
    explodeObservers$0: function() {
      var t1, t2;
      for (t1 = $.get$typeInspector().query$2(0, this.type, C.QueryOptions_xw8), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        for (t2 = J.get$iterator$ax(J.get$annotations$x(t1._current)); t2.moveNext$0();) {
          t2.get$current();
          continue;
        }
    },
    _lowerCaseMap$1: function(properties) {
      var map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, null);
      properties.forEach$1(0, new A.PolymerDeclaration__lowerCaseMap_closure(map));
      return map;
    },
    $isPolymerDeclaration: true
  },
  PolymerDeclaration_accumulateInstanceAttributes_closure: {
    "^": "Closure0:58;this_0",
    call$2: function($name, value) {
      if (C.Map_c94aj.containsKey$1($name) !== true && !J.startsWith$1$s($name, "on-"))
        this.this_0._instanceAttributes.$indexSet(0, $name, value);
    },
    $isFunction: true
  },
  PolymerDeclaration_addAttributeDelegates_closure: {
    "^": "Closure0:58;delegates_0",
    call$2: function($name, value) {
      var t1, start, end;
      t1 = J.getInterceptor$s($name);
      if (t1.startsWith$1($name, "on-")) {
        start = J.getInterceptor$asx(value).indexOf$1(value, "{{");
        end = C.JSString_methods.lastIndexOf$1(value, "}}");
        if (start >= 0 && end >= 0)
          this.delegates_0.$indexSet(0, t1.substring$1($name, 3), C.JSString_methods.trim$0(C.JSString_methods.substring$2(value, start + 2, end)));
      }
    },
    $isFunction: true
  },
  PolymerDeclaration_installLocalSheets_closure: {
    "^": "Closure0:30;",
    call$1: function(s) {
      return J.get$attributes$x(s)._html$_element.hasAttribute("polymer-scope") !== true;
    },
    $isFunction: true
  },
  PolymerDeclaration_cssTextForScope_matcher: {
    "^": "Closure0:30;selector_0",
    call$1: function(s) {
      return J.matches$1$x(s, this.selector_0);
    },
    $isFunction: true
  },
  PolymerDeclaration_explodeObservers_closure: {
    "^": "Closure0:11;",
    call$0: function() {
      return [];
    },
    $isFunction: true
  },
  PolymerDeclaration__lowerCaseMap_closure: {
    "^": "Closure0:110;map_0",
    call$2: function(path, value) {
      this.map_0.$indexSet(0, H.S(path).toLowerCase(), value);
    },
    $isFunction: true
  },
  closure9: {
    "^": "Closure0:11;",
    call$0: function() {
      var map = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.String);
      C.Map_qvMQu.forEach$1(0, new A._closure3(map));
      return map;
    },
    $isFunction: true
  },
  "+ closure9": 0,
  _closure3: {
    "^": "Closure0:58;map_0",
    call$2: function(onName, eventType) {
      this.map_0.$indexSet(0, eventType, onName);
    },
    $isFunction: true
  },
  PublishedProperty: {
    "^": "ObservableProperty;"
  },
  Polymer: {
    "^": "Object;syntax:polymer$Polymer$syntax=",
    get$applyAuthorStyles: function(receiver) {
      return false;
    },
    polymerCreated$0: function(receiver) {
      var t1;
      if (W._convertNativeToDart_Window(this.get$ownerDocument(receiver).defaultView) == null)
        t1 = $.Polymer__preparingElements > 0;
      else
        t1 = true;
      if (t1)
        this.prepareElement$0(receiver);
    },
    prepareElement$0: function(receiver) {
      var isAttr, t1;
      isAttr = this.get$attributes(receiver)._html$_element.getAttribute("is");
      t1 = isAttr == null || isAttr === "" ? this.get$localName(receiver) : isAttr;
      receiver.polymer$Polymer$_declaration = $.get$_declarations().$index(0, t1);
      this.observeProperties$0(receiver);
      this.copyInstanceAttributes$0(receiver);
      this.takeAttributes$0(receiver);
      this.addHostListeners$0(receiver);
      $.Polymer__preparingElements = $.Polymer__preparingElements + 1;
      this.parseDeclarations$1(receiver, receiver.polymer$Polymer$_declaration);
      $.Polymer__preparingElements = $.Polymer__preparingElements - 1;
    },
    enteredView$0: function(receiver) {
      if (receiver.polymer$Polymer$_declaration == null)
        this.prepareElement$0(receiver);
      this.cancelUnbindAll$1$preventCascade(receiver, true);
    },
    leftView$0: function(receiver) {
      this.asyncUnbindAll$0(receiver);
    },
    parseDeclarations$1: function(receiver, declaration) {
      if (declaration != null) {
        this.parseDeclarations$1(receiver, declaration.get$superDeclaration());
        this.parseDeclaration$1(receiver, declaration.get$element());
      }
    },
    parseDeclaration$1: function(receiver, elementElement) {
      var t1, template, root, $name;
      t1 = J.getInterceptor$x(elementElement);
      template = t1.querySelector$1(elementElement, "template");
      if (template != null)
        if (J.get$attributes$x(receiver.polymer$Polymer$_declaration.get$element())._html$_element.hasAttribute("lightdom") === true) {
          this.lightFromTemplate$1(receiver, template);
          root = null;
        } else
          root = this.shadowFromTemplate$1(receiver, template);
      else
        root = null;
      if (!J.getInterceptor(root).$isShadowRoot)
        return;
      $name = t1.get$attributes(elementElement)._html$_element.getAttribute("name");
      if ($name == null)
        return;
      receiver.polymer$Polymer$_shadowRoots.$indexSet(0, $name, root);
    },
    lightFromTemplate$1: function(receiver, template) {
      var t1, dom;
      if (template == null)
        return;
      t1 = !!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template);
      dom = t1.createInstance$2(receiver, this.get$syntax(receiver));
      this.append$1(receiver, dom);
      this.shadowRootReady$2(receiver, receiver, template);
      return dom;
    },
    shadowFromTemplate$1: function(receiver, template) {
      var root, t1;
      if (template == null)
        return;
      this.get$shadowRoot(receiver);
      root = this.createShadowRoot$0(receiver);
      $.get$_shadowHost().$indexSet(0, root, receiver);
      root.applyAuthorStyles = this.get$applyAuthorStyles(receiver);
      root.resetStyleInheritance = false;
      t1 = !!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template);
      root.appendChild(t1.createInstance$2(receiver, this.get$syntax(receiver)));
      this.shadowRootReady$2(receiver, root, template);
      return root;
    },
    shadowRootReady$2: function(receiver, root, template) {
      this.marshalNodeReferences$1(receiver, root);
    },
    marshalNodeReferences$1: function(receiver, root) {
      var t1, t2, n;
      for (t1 = J.querySelectorAll$1$x(root, "[id]"), t1 = t1.get$iterator(t1), t2 = receiver.polymer$Polymer$$; t1.moveNext$0();) {
        n = t1._current;
        t2.$indexSet(0, J.get$id$x(n), n);
      }
    },
    attributeChanged$3: function(receiver, $name, oldValue, newValue) {
      var t1 = J.getInterceptor($name);
      if (!t1.$eq($name, "class") && !t1.$eq($name, "style"))
        this.attributeToProperty$2(receiver, $name, newValue);
    },
    onMutation$1: function(receiver, node) {
      var completer = H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
      C.MutationObserver_methods.observe$3$childList$subtree(new (window.MutationObserver || window.WebKitMutationObserver || window.MozMutationObserver)(H.convertDartClosureToJS(W._wrapBinaryZone(new A.Polymer_onMutation_closure(completer)), 2)), node, true, true);
      return completer.future;
    },
    copyInstanceAttributes$0: function(receiver) {
      receiver.polymer$Polymer$_declaration.get$_instanceAttributes().forEach$1(0, new A.Polymer_copyInstanceAttributes_closure(receiver));
    },
    takeAttributes$0: function(receiver) {
      if (receiver.polymer$Polymer$_declaration.get$_publishLC() == null)
        return;
      this.get$attributes(receiver).forEach$1(0, this.get$attributeToProperty(receiver));
    },
    attributeToProperty$2: [function(receiver, $name, value) {
      var decl, t1, t2, currentValue, type, newValue;
      decl = this.propertyForAttribute$1(receiver, $name);
      if (decl == null)
        return;
      if (value == null || J.contains$1$asx(value, $.get$Polymer_bindPattern()) === true)
        return;
      t1 = J.getInterceptor$x(decl);
      t2 = t1.get$name(decl);
      currentValue = $.get$objectAccessor().read$2(receiver, t2);
      type = t1.get$type(decl);
      t2 = J.getInterceptor(type);
      newValue = Z.deserializeValue(value, currentValue, (t2.$eq(type, C.Type_HqF) || t2.$eq(type, C.Type_e5Z)) && currentValue != null ? J.get$runtimeType$(currentValue) : type);
      if (newValue == null ? currentValue != null : newValue !== currentValue) {
        t1 = t1.get$name(decl);
        $.get$objectAccessor().write$3(receiver, t1, newValue);
      }
    }, "call$2", "get$attributeToProperty", 4, 0, 111],
    propertyForAttribute$1: function(receiver, $name) {
      var publishLC = receiver.polymer$Polymer$_declaration.get$_publishLC();
      if (publishLC == null)
        return;
      return publishLC.$index(0, $name);
    },
    serializeValue$1: function(receiver, value) {
      if (value == null)
        return;
      if (typeof value === "boolean")
        return value ? "" : null;
      else if (typeof value === "string" || typeof value === "number")
        return H.S(value);
      return;
    },
    reflectPropertyToAttribute$1: function(receiver, path) {
      var propValue, serializedValue;
      if (!J.$eq(J.get$length$asx(path), 1))
        throw H.wrapException(P.ArgumentError$("path must be length 1"));
      propValue = path.getValueFrom$1(receiver);
      serializedValue = this.serializeValue$1(receiver, propValue);
      if (serializedValue != null)
        this.get$attributes(receiver)._html$_element.setAttribute(H.S(path), serializedValue);
      else if (typeof propValue === "boolean")
        this.get$attributes(receiver).remove$1(0, H.S(path));
    },
    bind$3$oneTime: function(receiver, $name, bindable, oneTime) {
      var decl, t1, t2, t3, observer;
      if (receiver.polymer$Polymer$_declaration == null)
        this.prepareElement$0(receiver);
      decl = this.propertyForAttribute$1(receiver, $name);
      if (decl == null)
        return J.bind$3$oneTime$x(M.nodeBindFallback(receiver), $name, bindable, oneTime);
      else {
        J.unbind$1$x(M.nodeBindFallback(receiver), $name);
        t1 = J.getInterceptor$x(decl);
        t2 = t1.get$name(decl);
        t3 = $.get$_bindLog();
        if (t3.isLoggable$1(C.Level_FINE_500))
          t3.fine$1("bindProperty: [" + H.S(bindable) + "] to [" + H.S(this.get$localName(receiver)) + "].[name]");
        t3 = J.getInterceptor$x(bindable);
        if (t3.get$value(bindable) == null)
          t3.set$value(bindable, $.get$objectAccessor().read$2(receiver, t2));
        observer = new A._PolymerBinding(receiver, t2, bindable, null, null);
        observer._sub = this.get$changes(receiver).listen$1(observer.get$_propertyValueChanged());
        t3 = J.open$1$x(bindable, observer.get$_updateNode());
        observer._lastValue = t3;
        $.get$objectAccessor().write$3(receiver, t2, t3);
        this.reflectPropertyToAttribute$1(receiver, L.PropertyPath_PropertyPath([t1.get$name(decl)]));
        J.$indexSet$ax(J.get$bindings$x(M.nodeBindFallback(receiver)), $name, observer);
        return observer;
      }
    },
    get$bindings: function(receiver) {
      return J.get$bindings$x(M.nodeBindFallback(receiver));
    },
    unbind$1: function(receiver, $name) {
      return J.unbind$1$x(M.nodeBindFallback(receiver), $name);
    },
    asyncUnbindAll$0: function(receiver) {
      var job, t1;
      if (receiver.polymer$Polymer$_unbound === true)
        return;
      $.get$_unbindLog().fine$1("[" + H.S(this.get$localName(receiver)) + "] asyncUnbindAll");
      job = receiver.polymer$Polymer$_unbindAllJob;
      t1 = this.get$unbindAll(receiver);
      if (job != null)
        job.stop$0(0);
      else
        job = new A._Job(null, null);
      job._callback = t1;
      job._timer = P.Timer_Timer(C.Duration_0, job.get$complete(job));
      receiver.polymer$Polymer$_unbindAllJob = job;
    },
    unbindAll$0: [function(receiver) {
      var t1, root;
      if (receiver.polymer$Polymer$_unbound === true)
        return;
      t1 = receiver.polymer$Polymer$_propertyObserver;
      if (t1 != null) {
        t1.close$0(0);
        receiver.polymer$Polymer$_propertyObserver = null;
      }
      this.unregisterObservers$0(receiver);
      J.unbindAll$0$x(M.nodeBindFallback(receiver));
      root = this.get$shadowRoot(receiver);
      for (; root != null;) {
        A.Polymer__unbindNodeTree(root);
        root = root.olderShadowRoot;
      }
      receiver.polymer$Polymer$_unbound = true;
    }, "call$0", "get$unbindAll", 0, 0, 10],
    cancelUnbindAll$1$preventCascade: function(receiver, preventCascade) {
      var t1;
      if (receiver.polymer$Polymer$_unbound === true) {
        $.get$_unbindLog().warning$1("[" + H.S(this.get$localName(receiver)) + "] already unbound, cannot cancel unbindAll");
        return;
      }
      $.get$_unbindLog().fine$1("[" + H.S(this.get$localName(receiver)) + "] cancelUnbindAll");
      t1 = receiver.polymer$Polymer$_unbindAllJob;
      if (t1 != null) {
        t1.stop$0(0);
        receiver.polymer$Polymer$_unbindAllJob = null;
      }
      if (preventCascade === true)
        return;
      A.Polymer__forNodeTree(this.get$shadowRoot(receiver), new A.Polymer_cancelUnbindAll_closure());
    },
    cancelUnbindAll$0: function($receiver) {
      return this.cancelUnbindAll$1$preventCascade($receiver, null);
    },
    observeProperties$0: function(receiver) {
      var observe, publish, t1, hasObserved, o, t2, path;
      observe = J.get$_observe$x(receiver.polymer$Polymer$_declaration);
      publish = receiver.polymer$Polymer$_declaration.get$_publish();
      t1 = observe == null;
      hasObserved = !t1;
      if (!t1 || publish != null) {
        t1 = $._Observer__nextBirthId;
        $._Observer__nextBirthId = t1 + 1;
        o = new L.CompoundObserver(null, [], t1, null, null, null);
        o._path_observer$_value = [];
        receiver.polymer$Polymer$_propertyObserver = o;
        if (hasObserved)
          for (t1 = H.setRuntimeTypeInfo(new P.HashMapKeyIterable(observe), [H.getTypeArgumentByIndex(observe, 0)]), t2 = t1._map, t1 = H.setRuntimeTypeInfo(new P.HashMapKeyIterator(t2, t2._computeKeys$0(), 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
            path = t1._collection$_current;
            o.addPath$2(receiver, path);
            this.observeArrayValue$3(receiver, path, path.getValueFrom$1(receiver), null);
          }
        if (publish != null)
          for (t1 = publish.get$keys(), t2 = t1._map, t1 = H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterator(t2, t2._modifications, null, null), [H.getTypeArgumentByIndex(t1, 0)]), t1._cell = t1._map._first; t1.moveNext$0();) {
            path = t1._collection$_current;
            if (!hasObserved || !observe.containsKey$1(path))
              o.addPath$2(receiver, path);
          }
        L._Observer.prototype.open$1.call(o, o, this.get$notifyPropertyChanges(receiver));
      }
    },
    notifyPropertyChanges$3: [function(receiver, newValues, oldValues, paths) {
      J.forEach$1$ax(oldValues, new A.Polymer_notifyPropertyChanges_closure(receiver, newValues, oldValues, paths, J.get$_observe$x(receiver.polymer$Polymer$_declaration), receiver.polymer$Polymer$_declaration.get$_publish(), P.HashSet_HashSet(null, null, null, null)));
    }, "call$3", "get$notifyPropertyChanges", 6, 0, 112],
    observeArrayValue$3: function(receiver, $name, value, old) {
      var observe, callbacks, t1, subscription, t2;
      observe = J.get$_observe$x(receiver.polymer$Polymer$_declaration);
      if (observe == null)
        return;
      callbacks = observe.$index(0, $name);
      if (callbacks == null)
        return;
      if (!!J.getInterceptor(old).$isObservableList) {
        t1 = $.get$_observeLog();
        if (t1.isLoggable$1(C.Level_FINE_500))
          t1.fine$1("[" + H.S(this.get$localName(receiver)) + "] observeArrayValue: unregister observer " + H.S($name));
        this.unregisterObserver$1(receiver, H.S($name) + "__array");
      }
      if (!!J.getInterceptor(value).$isObservableList) {
        t1 = $.get$_observeLog();
        if (t1.isLoggable$1(C.Level_FINE_500))
          t1.fine$1("[" + H.S(this.get$localName(receiver)) + "] observeArrayValue: register observer " + H.S($name));
        subscription = value.get$listChanges()._createSubscription$1(false);
        t1 = subscription._zone;
        t1.toString;
        subscription._async$_onData = new A.Polymer_observeArrayValue_closure(receiver, old, callbacks);
        subscription._onError = P._registerErrorHandler(P._nullErrorHandler$closure(), t1);
        subscription._onDone = P._nullDoneHandler$closure();
        t1 = H.S($name) + "__array";
        t2 = receiver.polymer$Polymer$_observers;
        if (t2 == null) {
          t2 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.StreamSubscription);
          receiver.polymer$Polymer$_observers = t2;
        }
        t2.$indexSet(0, t1, subscription);
      }
    },
    registerObserver$2: function(receiver, $name, sub) {
      var t1 = receiver.polymer$Polymer$_observers;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.StreamSubscription);
        receiver.polymer$Polymer$_observers = t1;
      }
      t1.$indexSet(0, $name, sub);
    },
    unregisterObserver$1: function(receiver, $name) {
      var sub = receiver.polymer$Polymer$_observers.remove$1(0, $name);
      if (sub == null)
        return false;
      sub.cancel$0();
      return true;
    },
    unregisterObservers$0: function(receiver) {
      var t1 = receiver.polymer$Polymer$_observers;
      if (t1 == null)
        return;
      for (t1 = t1.get$values(t1), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        t1._current.cancel$0();
      receiver.polymer$Polymer$_observers.clear$0(0);
      receiver.polymer$Polymer$_observers = null;
    },
    addHostListeners$0: function(receiver) {
      var events, t1;
      events = receiver.polymer$Polymer$_declaration.get$_eventDelegates();
      if (events.get$isEmpty(events))
        return;
      t1 = $.get$_eventsLog();
      if (t1.isLoggable$1(C.Level_FINE_500))
        t1.fine$1("[" + H.S(this.get$localName(receiver)) + "] addHostListeners: " + events.toString$0(0));
      this.addNodeListeners$3(receiver, receiver, events.get$keys(), this.get$hostEventListener(receiver));
    },
    addNodeListeners$3: function(receiver, node, events, listener) {
      var t1, t2, $name, t3, t4, t5, t6;
      for (t1 = events._map, t1 = H.setRuntimeTypeInfo(new P.LinkedHashMapKeyIterator(t1, t1._modifications, null, null), [H.getTypeArgumentByIndex(events, 0)]), t1._cell = t1._map._first, t2 = J.getInterceptor$x(node); t1.moveNext$0();) {
        $name = t1._collection$_current;
        t3 = t2.get$on(node).$index(0, $name);
        t4 = t3._eventType;
        t5 = t3._useCapture;
        t6 = new W._EventStreamSubscription(0, t3._html$_target, t4, W._wrapZone(listener), t5);
        t6.$builtinTypeInfo = [H.getTypeArgumentByIndex(t3, 0)];
        t3 = t6._onData;
        if (t3 != null && t6._pauseCount <= 0)
          J.addEventListener$3$x(t6._html$_target, t4, t3, t5);
      }
    },
    hostEventListener$1: [function(receiver, $event) {
      var t1, t2, log, t3, t4, result, h;
      t1 = J.getInterceptor$x($event);
      if (t1.get$bubbles($event) !== true)
        return;
      t2 = $.get$_eventsLog();
      log = t2.isLoggable$1(C.Level_FINE_500);
      if (log)
        t2.fine$1(">>> [" + H.S(this.get$localName(receiver)) + "]: hostEventListener(" + H.S(t1.get$type($event)) + ")");
      t3 = receiver.polymer$Polymer$_declaration.get$_eventDelegates();
      t4 = t1.get$type($event);
      result = J.$index$asx($.get$_reverseEventTranslations(), t4);
      h = t3.$index(0, result != null ? result : t4);
      if (h != null) {
        if (log)
          t2.fine$1("[" + H.S(this.get$localName(receiver)) + "] found host handler name [" + h + "]");
        this.dispatchMethod$3(receiver, receiver, h, [$event, !!t1.$isCustomEvent ? t1.get$detail($event) : null, receiver]);
      }
      if (log)
        t2.fine$1("<<< [" + H.S(this.get$localName(receiver)) + "]: hostEventListener(" + H.S(t1.get$type($event)) + ")");
    }, "call$1", "get$hostEventListener", 2, 0, 113, 47],
    dispatchMethod$3: function(receiver, object, callbackOrMethod, args) {
      var t1, log, maxArgs, t2;
      t1 = $.get$_eventsLog();
      log = t1.isLoggable$1(C.Level_FINE_500);
      if (log)
        t1.fine$1(">>> [" + H.S(this.get$localName(receiver)) + "]: dispatch " + H.S(callbackOrMethod));
      if (!!J.getInterceptor(callbackOrMethod).$isFunction) {
        maxArgs = X.maxArgs(callbackOrMethod);
        if (maxArgs === -1)
          t1.warning$1("invalid callback: expected callback of 0, 1, 2, or 3 arguments");
        C.JSArray_methods.set$length(args, maxArgs);
        H.Primitives_applyFunction(callbackOrMethod, args, P.Function__toMangledNames(null));
      } else if (typeof callbackOrMethod === "string") {
        t2 = $.get$symbolConverter()._symbols.$index(0, callbackOrMethod);
        $.get$objectAccessor().invoke$5$adjust$namedArgs(object, t2, args, true, null);
      } else
        t1.warning$1("invalid callback");
      if (log)
        t1.info$1("<<< [" + H.S(this.get$localName(receiver)) + "]: dispatch " + H.S(callbackOrMethod));
    },
    fire$4$canBubble$detail$toNode: function(receiver, type, canBubble, detail, toNode) {
      this.dispatchEvent$1(receiver, W.CustomEvent_CustomEvent(type, true, true, detail));
      return detail;
    },
    fire$1: function($receiver, type) {
      return this.fire$4$canBubble$detail$toNode($receiver, type, null, null, null);
    },
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  Polymer_onMutation_closure: {
    "^": "Closure0:58;completer_0",
    call$2: [function(mutations, observer) {
      var t1;
      J.disconnect$0$x(observer);
      t1 = this.completer_0.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(mutations);
    }, "call$2", null, 4, 0, null, 114, 115, "call"],
    $isFunction: true
  },
  Polymer_copyInstanceAttributes_closure: {
    "^": "Closure0:58;this_0",
    call$2: function($name, value) {
      J.get$attributes$x(this.this_0).putIfAbsent$2($name, new A.Polymer_copyInstanceAttributes__closure(value));
    },
    $isFunction: true
  },
  Polymer_copyInstanceAttributes__closure: {
    "^": "Closure0:11;value_1",
    call$0: function() {
      return this.value_1;
    },
    $isFunction: true
  },
  Polymer_cancelUnbindAll_closure: {
    "^": "Closure0:30;",
    call$1: function(n) {
      var t1 = J.getInterceptor(n);
      if (!!t1.$isPolymer)
        t1.cancelUnbindAll$0(n);
    },
    $isFunction: true
  },
  Polymer__unbindNodeTree_closure: {
    "^": "Closure0:30;",
    call$1: function(node) {
      return J.unbindAll$0$x(!!J.getInterceptor(node).$isNodeBindExtension ? node : M.nodeBindFallback(node));
    },
    $isFunction: true
  },
  Polymer_notifyPropertyChanges_closure: {
    "^": "Closure0:58;this_0,newValues_1,oldValues_2,paths_3,observe_4,publish_5,called_6",
    call$2: [function(i, oldValue) {
      var t1, t2, path, methods, t3, t4, t5, t6, t7, t8, method, newValue;
      t1 = this.paths_3;
      if (typeof i !== "number")
        return H.iae(i);
      t2 = 2 * i + 1;
      if (t2 >>> 0 !== t2 || t2 >= t1.length)
        return H.ioore(t1, t2);
      path = t1[t2];
      t2 = this.publish_5;
      if (t2 != null && t2.containsKey$1(path))
        J.reflectPropertyToAttribute$1$x(this.this_0, path);
      t2 = this.observe_4;
      if (t2 == null)
        return;
      methods = t2.$index(0, path);
      if (methods == null)
        return;
      for (t2 = J.get$iterator$ax(methods), t3 = this.newValues_1, t4 = J.getInterceptor$asx(t3), t5 = this.this_0, t6 = J.getInterceptor$x(t5), t7 = this.oldValues_2, t8 = this.called_6; t2.moveNext$0();) {
        method = t2.get$current();
        if (!t8.add$1(0, method))
          continue;
        newValue = t4.$index(t3, i);
        t6.observeArrayValue$3(t5, path, newValue, oldValue);
        $.get$objectAccessor().invoke$5$adjust$namedArgs(t5, method, [oldValue, newValue, t3, t7, t1], true, null);
      }
    }, "call$2", null, 4, 0, null, 116, 34, "call"],
    $isFunction: true
  },
  Polymer_observeArrayValue_closure: {
    "^": "Closure0:30;this_0,old_1,callbacks_2",
    call$1: [function(changes) {
      var t1, t2, t3, callback;
      for (t1 = J.get$iterator$ax(this.callbacks_2), t2 = this.this_0, t3 = this.old_1; t1.moveNext$0();) {
        callback = t1.get$current();
        $.get$objectAccessor().invoke$5$adjust$namedArgs(t2, callback, [t3], true, null);
      }
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  },
  Polymer_prepareBinding_closure: {
    "^": "Closure0:121;path_0,name_1",
    call$3: [function(model, node, oneTime) {
      var t1, eventName, translated;
      t1 = $.get$_eventsLog();
      if (t1.isLoggable$1(C.Level_FINE_500))
        t1.fine$1("event: [" + H.S(node) + "]." + H.S(this.name_1) + " => [" + H.S(model) + "]." + this.path_0 + "())");
      eventName = J.substring$1$s(this.name_1, 3);
      translated = C.Map_qvMQu.$index(0, eventName);
      if (translated != null)
        eventName = translated;
      return new A._EventBindable(node, eventName, model, this.path_0, null);
    }, "call$3", null, 6, 0, null, 118, 119, 120, "call"],
    $isFunction: true
  },
  _PolymerBinding: {
    "^": "Bindable;_polymer$_target,_property,_polymer$_bindable,_sub,_lastValue",
    _updateNode$1: [function(newValue) {
      this._lastValue = newValue;
      $.get$objectAccessor().write$3(this._polymer$_target, this._property, newValue);
    }, "call$1", "get$_updateNode", 2, 0, 13, 35],
    _propertyValueChanged$1: [function(records) {
      var t1, t2, record, getter, newValue;
      for (t1 = J.get$iterator$ax(records), t2 = this._property; t1.moveNext$0();) {
        record = t1.get$current();
        if (!!J.getInterceptor(record).$isPropertyChangeRecord && J.$eq(record.name, t2)) {
          t1 = this._polymer$_target;
          getter = $.get$objectAccessor()._getters.$index(0, t2);
          if (getter == null)
            H.throwExpression(O.MissingCodeException$("getter \"" + H.S(t2) + "\" in " + J.toString$0(t1)));
          newValue = getter.call$1(t1);
          t1 = this._lastValue;
          if (t1 == null ? newValue != null : t1 !== newValue)
            J.set$value$x(this._polymer$_bindable, newValue);
          return;
        }
      }
    }, "call$1", "get$_propertyValueChanged", 2, 0, 122, 109],
    open$1: function(_, callback) {
      return J.open$1$x(this._polymer$_bindable, callback);
    },
    get$value: function(_) {
      return J.get$value$x(this._polymer$_bindable);
    },
    set$value: function(_, newValue) {
      J.set$value$x(this._polymer$_bindable, newValue);
      return newValue;
    },
    close$0: function(_) {
      var t1 = this._sub;
      if (t1 != null) {
        t1.cancel$0();
        this._sub = null;
      }
      J.close$0$x(this._polymer$_bindable);
    }
  },
  PolymerElement: {
    "^": "HtmlElement_Polymer_ChangeNotifier;change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    PolymerElement$created$0: function(receiver) {
      this.polymerCreated$0(receiver);
    },
    static: {PolymerElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.PolymerElement_methods.Element$created$0(receiver);
        C.PolymerElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  HtmlElement_Polymer: {
    "^": "HtmlElement+Polymer;syntax:polymer$Polymer$syntax=",
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  HtmlElement_Polymer_ChangeNotifier: {
    "^": "HtmlElement_Polymer+ChangeNotifier;",
    $isObservable: true
  },
  PolymerExpressionsWithEvents: {
    "^": "PolymerExpressions;globals",
    prepareBinding$3: function(path, $name, node) {
      if (J.startsWith$1$s($name, "on-"))
        return A.Polymer_prepareBinding(path, $name, node);
      return T.PolymerExpressions.prototype.prepareBinding$3.call(this, path, $name, node);
    }
  },
  _EventBindable: {
    "^": "Bindable;_polymer$_node,_eventName,_polymer$_model,_polymer$_path,_sub",
    _listener$1: [function($event) {
      var t1, ctrlr, t2, method, obj, t3;
      t1 = this._polymer$_node;
      ctrlr = A._EventBindable__findController(t1);
      t2 = J.getInterceptor(ctrlr);
      if (!t2.$isPolymer)
        return;
      method = this._polymer$_path;
      if (C.JSString_methods.startsWith$1(method, "@")) {
        obj = this._polymer$_model;
        method = L.PropertyPath_PropertyPath(C.JSString_methods.substring$1(method, 1)).getValueFrom$1(obj);
      } else
        obj = ctrlr;
      t3 = J.getInterceptor($event);
      t2.dispatchMethod$3(ctrlr, obj, method, [$event, !!t3.$isCustomEvent ? t3.get$detail($event) : null, t1]);
    }, "call$1", "get$_listener", 2, 0, 30, 47],
    get$value: function(_) {
      return;
    },
    open$1: function(_, callback) {
      var t1 = J.get$on$x(this._polymer$_node).$index(0, this._eventName);
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$_listener()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this._sub = t1;
    },
    close$0: function(_) {
      var t1;
      if (this._sub != null) {
        t1 = $.get$_eventsLog();
        if (t1.isLoggable$1(C.Level_FINE_500))
          t1.fine$1("event.remove: [" + H.S(this._polymer$_node) + "]." + H.S(this._eventName) + " => [" + H.S(this._polymer$_model) + "]." + this._polymer$_path + "())");
        this._sub.cancel$0();
        this._sub = null;
      }
    },
    static: {_EventBindable__findController: function(node) {
        var t1;
        for (; t1 = J.getInterceptor$x(node), t1.get$parentNode(node) != null;)
          node = t1.get$parentNode(node);
        return $.get$_shadowHost().$index(0, node);
      }}
  },
  _Job: {
    "^": "Object;_callback,_timer",
    _callback$0: function() {
      return this._callback.call$0();
    },
    stop$0: function(_) {
      var t1 = this._timer;
      if (t1 != null) {
        t1.cancel$0();
        this._timer = null;
      }
    },
    complete$0: [function(_) {
      if (this._timer != null) {
        this.stop$0(0);
        this._callback$0();
      }
    }, "call$0", "get$complete", 0, 0, 10]
  },
  _hookJsPolymer_closure: {
    "^": "Closure0:11;",
    call$0: [function() {
      var t1 = $.get$Polymer__ready().future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
      return;
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  _hookJsPolymer_registerDart: {
    "^": "Closure0:125;zone_0,originalRegister_1",
    call$3: [function(jsElem, $name, extendee) {
      var type, extendsDecl, t1;
      type = $.get$_typesByName().$index(0, $name);
      if (type != null) {
        extendsDecl = $.get$_declarations().$index(0, extendee);
        t1 = this.zone_0;
        t1.toString;
        return P._rootRun(t1, null, t1, new A._hookJsPolymer_registerDart_closure(jsElem, $name, type, extendsDecl));
      }
      return this.originalRegister_1.apply$2$thisArg([$name, extendee], jsElem);
    }, "call$3", null, 6, 0, null, 123, 33, 124, "call"],
    $isFunction: true
  },
  _hookJsPolymer_registerDart_closure: {
    "^": "Closure0:11;jsElem_2,name_3,type_4,extendsDecl_5",
    call$0: function() {
      var t1, t2, t3, t4, t5, t6;
      t1 = this.name_3;
      t2 = this.type_4;
      t3 = this.extendsDecl_5;
      t4 = P.LinkedHashMap_LinkedHashMap$_empty(null, null);
      t5 = new A.PolymerDeclaration(this.jsElem_2, t2, t3, t1, null, null, null, null, null, null, t4, null);
      t5.publishAttributes$1(t3);
      t6 = t5._publish;
      if (t6 != null)
        t5._publishLC = t5._lowerCaseMap$1(t6);
      t5.inferObservers$0();
      t5.explodeObservers$0();
      $.get$_declarations().$indexSet(0, t1, t5);
      t5.accumulateInstanceAttributes$0();
      t5.addAttributeDelegates$1(t4);
      t5.cacheSheets$0();
      t5.cacheStyles$0();
      t5.installLocalSheets$0();
      A.Polymer_applyStyleToScope(t5.cssTextToScopeStyle$2(t5.cssTextForScope$1("global"), "global"), document.head);
      t5.adjustShadowElement$0();
      t4 = t5.get$templateContent();
      A._shimShadowDomStyling(t4, t1, t3 != null ? J.get$name$x(t3) : null);
      if ($.get$typeInspector().hasStaticMethod$2(t2, C.Symbol_registerCallback))
        $.get$objectAccessor().invoke$5$adjust$namedArgs(t2, C.Symbol_registerCallback, [t5], false, null);
      t5.registerType$1(t1);
      return;
    },
    $isFunction: true
  }
}],
["polymer.deserialize", "package:polymer/deserialize.dart", , Z, {
  "^": "",
  deserializeValue: function(value, currentValue, type) {
    var handler, t1, exception;
    handler = $.get$_typeHandlers().$index(0, type);
    if (handler != null)
      return handler.call$2(value, currentValue);
    try {
      t1 = C.JsonCodec_null_null.decode$1(J.replaceAll$2$s(value, "'", "\""));
      return t1;
    } catch (exception) {
      H.unwrapException(exception);
      return value;
    }

  },
  closure0: {
    "^": "Closure0:58;",
    call$2: function(x, _) {
      return x;
    },
    $isFunction: true
  },
  "+ closure0": 0,
  closure1: {
    "^": "Closure0:58;",
    call$2: function(x, _) {
      return x;
    },
    $isFunction: true
  },
  "+ closure1": 0,
  closure2: {
    "^": "Closure0:58;",
    call$2: function(x, def) {
      var t1, exception;
      try {
        t1 = P.DateTime_parse(x);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        return def;
      }

    },
    $isFunction: true
  },
  "+ closure2": 0,
  closure3: {
    "^": "Closure0:58;",
    call$2: function(x, _) {
      return !J.$eq(x, "false");
    },
    $isFunction: true
  },
  "+ closure3": 0,
  closure4: {
    "^": "Closure0:58;",
    call$2: function(x, def) {
      return H.Primitives_parseInt(x, null, new Z._closure0(def));
    },
    $isFunction: true
  },
  "+ closure4": 0,
  _closure0: {
    "^": "Closure0:30;def_0",
    call$1: function(_) {
      return this.def_0;
    },
    $isFunction: true
  },
  closure5: {
    "^": "Closure0:58;",
    call$2: function(x, def) {
      return H.Primitives_parseDouble(x, new Z._closure(def));
    },
    $isFunction: true
  },
  "+ closure5": 0,
  _closure: {
    "^": "Closure0:30;def_1",
    call$1: function(_) {
      return this.def_1;
    },
    $isFunction: true
  }
}],
["polymer.src.utils", "package:polymer/src/build/utils.dart", , G, {
  "^": "",
  toCamelCase: function(hyphenedName, startUppercase) {
    var segments, start, i, segment, t1;
    segments = hyphenedName.split("-");
    start = startUppercase ? 0 : 1;
    for (i = start; i < segments.length; ++i) {
      segment = segments[i];
      t1 = J.getInterceptor$asx(segment);
      if (J.$gt$n(t1.get$length(segment), 0)) {
        t1 = J.toUpperCase$0$s(t1.$index(segment, 0)) + t1.substring$1(segment, 1);
        if (i >= segments.length)
          return H.ioore(segments, i);
        segments[i] = t1;
      }
    }
    return C.JSArray_methods.join$1(segments, "");
  }
}],
["polymer_expressions", "package:polymer_expressions/polymer_expressions.dart", , T, {
  "^": "",
  _classAttributeConverter: [function(v) {
    var t1 = J.getInterceptor(v);
    if (!!t1.$isMap)
      t1 = J.where$1$ax(v.get$keys(), new T._classAttributeConverter_closure(v)).join$1(0, " ");
    else
      t1 = !!t1.$isIterable ? t1.join$1(v, " ") : v;
    return t1;
  }, "call$1", "_classAttributeConverter$closure", 2, 0, 41],
  _styleAttributeConverter: [function(v) {
    var t1 = J.getInterceptor(v);
    if (!!t1.$isMap)
      t1 = J.map$1$ax(v.get$keys(), new T._styleAttributeConverter_closure(v)).join$1(0, ";");
    else
      t1 = !!t1.$isIterable ? t1.join$1(v, ";") : v;
    return t1;
  }, "call$1", "_styleAttributeConverter$closure", 2, 0, 41],
  _classAttributeConverter_closure: {
    "^": "Closure0:30;v_0",
    call$1: function(k) {
      return J.$eq(this.v_0.$index(0, k), true);
    },
    $isFunction: true
  },
  _styleAttributeConverter_closure: {
    "^": "Closure0:30;v_0",
    call$1: [function(k) {
      return H.S(k) + ": " + H.S(this.v_0.$index(0, k));
    }, "call$1", null, 2, 0, null, 95, "call"],
    $isFunction: true
  },
  PolymerExpressions: {
    "^": "BindingDelegate;",
    prepareBinding$3: function(path, $name, node) {
      var t1, t2, expr;
      t1 = new Y.Tokenizer(H.setRuntimeTypeInfo([], [Y.Token]), P.StringBuffer$(""), new P.RuneIterator(path, 0, 0, null), null);
      t2 = new U.AstFactory();
      t2 = new T.Parser(t2, t1, null, null);
      t1 = t1.tokenize$0();
      t2._parser$_tokens = t1;
      t2._parser$_iterator = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]);
      t2._advance$0();
      expr = t2._parseExpression$0();
      if (M.isSemanticTemplate(node)) {
        t1 = J.getInterceptor($name);
        t1 = (t1.$eq($name, "bind") || t1.$eq($name, "repeat")) && !!J.getInterceptor(expr).$isEmptyExpression;
      } else
        t1 = false;
      if (t1)
        return;
      return new T.PolymerExpressions_prepareBinding_closure(this, $name, expr);
    },
    prepareInstanceModel$1: function(template) {
      return new T.PolymerExpressions_prepareInstanceModel_closure(this);
    }
  },
  PolymerExpressions_prepareBinding_closure: {
    "^": "Closure0:121;this_0,name_1,expr_2",
    call$3: [function(model, node, oneTime) {
      var t1, converter;
      if (!J.getInterceptor(model).$isScope)
        model = K.Scope_Scope(model, this.this_0.globals);
      t1 = !!J.getInterceptor(node).$isElement;
      converter = t1 && J.$eq(this.name_1, "class") ? T._classAttributeConverter$closure() : null;
      if (t1 && J.$eq(this.name_1, "style"))
        converter = T._styleAttributeConverter$closure();
      if (oneTime === true)
        return T._Binding__oneTime(this.expr_2, model, converter);
      return new T._Binding(model, converter, this.expr_2, null, null, null);
    }, "call$3", null, 6, 0, null, 118, 119, 120, "call"],
    $isFunction: true
  },
  PolymerExpressions_prepareInstanceModel_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(model) {
      return !!J.getInterceptor(model).$isScope ? model : K.Scope_Scope(model, this.this_0.globals);
    }, "call$1", null, 2, 0, null, 118, "call"],
    $isFunction: true
  },
  _Binding: {
    "^": "Bindable;_scope,_converter,_polymer_expressions$_expr,_polymer_expressions$_callback,_polymer_expressions$_sub,_polymer_expressions$_value",
    _polymer_expressions$_callback$1: function(arg0) {
      return this._polymer_expressions$_callback.call$1(arg0);
    },
    _polymer_expressions$_setValue$1: [function(v) {
      var oldValue, t1;
      oldValue = this._polymer_expressions$_value;
      t1 = T._Binding__convertValue(v, this._scope, this._converter);
      this._polymer_expressions$_value = t1;
      if (this._polymer_expressions$_callback != null && !J.$eq(oldValue, t1))
        this._polymer_expressions$_callback$1(this._polymer_expressions$_value);
    }, "call$1", "get$_polymer_expressions$_setValue", 2, 0, 30, 96],
    get$value: function(_) {
      if (this._polymer_expressions$_callback != null)
        return this._polymer_expressions$_value;
      return T._Binding__oneTime(this._polymer_expressions$_expr, this._scope, this._converter);
    },
    set$value: function(_, v) {
      var newValue, e, s, t1, exception;
      try {
        t1 = this._scope;
        newValue = K.assign(this._polymer_expressions$_expr, v, t1);
        this._polymer_expressions$_value = T._Binding__convertValue(newValue, t1, this._converter);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]).completeError$2("Error evaluating expression '" + H.S(this._polymer_expressions$_expr) + "': " + H.S(e), s);
      }

    },
    open$1: function(_, callback) {
      var expr, e, s, t1, t2, t3, exception;
      if (this._polymer_expressions$_callback != null)
        throw H.wrapException(P.StateError$("already open"));
      this._polymer_expressions$_callback = callback;
      t1 = this._polymer_expressions$_expr;
      t2 = this._scope;
      t3 = H.setRuntimeTypeInfo(new P.ListQueue(null, 0, 0, 0), [null]);
      t3.ListQueue$1(null, null);
      expr = J.accept$1$x(t1, new K.ObserverBuilder(t2, t3));
      this._polymer_expressions$_expr = expr;
      t3 = expr.get$onUpdate().listen$1(this.get$_polymer_expressions$_setValue());
      t3.onError$1(0, new T._Binding_open_closure(expr));
      this._polymer_expressions$_sub = t3;
      try {
        t1 = expr;
        J.accept$1$x(t1, new K.Updater(t2));
        t1.get$currentValue();
        this._polymer_expressions$_value = T._Binding__convertValue(expr.get$currentValue(), t2, this._converter);
      } catch (exception) {
        t1 = H.unwrapException(exception);
        e = t1;
        s = new H._StackTrace(exception, null);
        H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]).completeError$2("Error evaluating expression '" + H.S(expr) + "': " + H.S(e), s);
      }

      return this._polymer_expressions$_value;
    },
    close$0: function(_) {
      if (this._polymer_expressions$_callback == null)
        return;
      this._polymer_expressions$_sub.cancel$0();
      this._polymer_expressions$_sub = null;
      this._polymer_expressions$_expr = H.interceptedTypeCast(this._polymer_expressions$_expr, "$isExpressionObserver")._eval$_expr;
      this._polymer_expressions$_callback = null;
    },
    static: {_Binding__oneTime: function(expr, scope, converter) {
        var e, s, t1, exception;
        try {
          t1 = T._Binding__convertValue(K.eval0(expr, scope), scope, converter);
          return t1;
        } catch (exception) {
          t1 = H.unwrapException(exception);
          e = t1;
          s = new H._StackTrace(exception, null);
          H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]).completeError$2("Error evaluating expression '" + H.S(expr) + "': " + H.S(e), s);
        }

        return;
      }, _Binding__convertValue: function(v, scope, converter) {
        if (!!J.getInterceptor(v).$isComprehension)
          return J.toList$1$growable$ax(J.map$1$ax(v.iterable, new T._Binding__convertValue_closure(v, scope)), false);
        else
          return converter == null ? v : converter.call$1(v);
      }}
  },
  _Binding__convertValue_closure: {
    "^": "Closure0:30;v_0,scope_1",
    call$1: [function(i) {
      var t1 = this.v_0.identifier;
      if (J.$eq(t1, "this"))
        H.throwExpression(K.EvalException$("'this' cannot be used as a variable name."));
      return new K._LocalVariableScope(this.scope_1, t1, i);
    }, "call$1", null, 2, 0, null, 116, "call"],
    $isFunction: true
  },
  _Binding_open_closure: {
    "^": "Closure0:58;expr_0",
    call$2: [function(e, s) {
      H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]).completeError$2("Error evaluating expression '" + H.S(this.expr_0) + "': " + H.S(e), s);
    }, "call$2", null, 4, 0, null, 1, 107, "call"],
    $isFunction: true
  }
}],
["polymer_expressions.async", "package:polymer_expressions/async.dart", , B, {
  "^": "",
  StreamBinding: {
    "^": "ObservableBox;stream,_observable_box$_value,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    StreamBinding$1: function(stream, $T) {
      this.stream.listen$1(new B.StreamBinding_closure($T, this));
    },
    $asObservableBox: function($T) {
      return [null];
    },
    static: {StreamBinding$: function(stream, $T) {
        var t1 = H.setRuntimeTypeInfo(new B.StreamBinding(stream, null, null, null), [$T]);
        t1.StreamBinding$1(stream, $T);
        return t1;
      }}
  },
  StreamBinding_closure: {
    "^": "Closure0;T_0,this_1",
    call$1: [function(i) {
      var t1 = this.this_1;
      t1._observable_box$_value = F.notifyPropertyChangeHelper(t1, C.Symbol_value, t1._observable_box$_value, i);
    }, "call$1", null, 2, 0, null, 116, "call"],
    $isFunction: true,
    $signature: function() {
      return H.computeSignature(function(T) {
        return {func: "dynamic__T0", args: [T]};
      }, this.this_1, "StreamBinding");
    }
  }
}],
["polymer_expressions.eval", "package:polymer_expressions/eval.dart", , K, {
  "^": "",
  eval0: function(expr, scope) {
    var t1, observer;
    t1 = new P.ListQueue(null, 0, 0, 0);
    t1.$builtinTypeInfo = [null];
    t1.ListQueue$1(null, null);
    observer = J.accept$1$x(expr, new K.ObserverBuilder(scope, t1));
    J.accept$1$x(observer, new K.Updater(scope));
    return observer.get$_eval$_value();
  },
  assign: function(expr, value, scope) {
    var t1, t2, filters, t3, t4, property, expression, isIndex, filterExpr, observer, o;
    t1 = {};
    t1.expr_0 = expr;
    t2 = new K.assign_notAssignable(t1);
    filters = H.setRuntimeTypeInfo([], [U.Expression]);
    for (; t3 = t1.expr_0, t4 = J.getInterceptor(t3), !!t4.$isBinaryOperator;) {
      if (!J.$eq(t4.get$operator(t3), "|"))
        break;
      filters.push(t4.get$right(t3));
      t1.expr_0 = t4.get$left(t3);
    }
    t3 = t1.expr_0;
    t4 = J.getInterceptor(t3);
    if (!!t4.$isIdentifier) {
      property = t4.get$value(t3);
      expression = C.C_EmptyExpression;
      isIndex = false;
    } else if (!!t4.$isIndex) {
      if (!J.getInterceptor(t3.get$argument()).$isLiteral)
        t2.call$0();
      expression = t1.expr_0.get$receiver();
      property = J.get$value$x(t1.expr_0.get$argument());
      isIndex = true;
    } else {
      if (!!t4.$isGetter) {
        expression = t3.get$receiver();
        property = J.get$name$x(t1.expr_0);
      } else if (!!t4.$isInvoke) {
        expression = t3.get$receiver();
        if (J.get$method$x(t1.expr_0) != null) {
          if (t1.expr_0.get$arguments() != null)
            t2.call$0();
          property = J.get$method$x(t1.expr_0);
        } else {
          t2.call$0();
          property = null;
        }
      } else {
        t2.call$0();
        expression = null;
        property = null;
      }
      isIndex = false;
    }
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(filters, filters.length, 0, null), [H.getTypeArgumentByIndex(filters, 0)]); t1.moveNext$0();) {
      filterExpr = t1._current;
      t2 = new P.ListQueue(null, 0, 0, 0);
      t2.$builtinTypeInfo = [null];
      t2.ListQueue$1(null, null);
      observer = J.accept$1$x(filterExpr, new K.ObserverBuilder(scope, t2));
      J.accept$1$x(observer, new K.Updater(scope));
      observer.get$_eval$_value();
      throw H.wrapException(K.EvalException$("filter must implement Transformer: " + H.S(filterExpr)));
    }
    o = K.eval0(expression, scope);
    if (o == null)
      throw H.wrapException(K.EvalException$("Can't assign to null: " + H.S(expression)));
    if (isIndex)
      J.$indexSet$ax(o, property, value);
    else {
      t1 = $.get$symbolConverter()._symbols.$index(0, property);
      $.get$objectAccessor().write$3(o, t1, value);
    }
    return value;
  },
  Scope_Scope: function(model, variables) {
    var scope, t1, t2;
    scope = new K._ModelScope(model);
    if (variables == null)
      t1 = scope;
    else {
      t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Object);
      t1.addAll$1(0, variables);
      t2 = new K._GlobalsScope(scope, t1);
      if (t1.containsKey$1("this"))
        H.throwExpression(K.EvalException$("'this' cannot be used as a variable name."));
      t1 = t2;
    }
    return t1;
  },
  closure10: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$add$ns(a, b);
    },
    $isFunction: true
  },
  "+ closure10": 0,
  closure11: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$sub$n(a, b);
    },
    $isFunction: true
  },
  "+ closure11": 0,
  closure12: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$mul$ns(a, b);
    },
    $isFunction: true
  },
  "+ closure12": 0,
  closure13: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$div$n(a, b);
    },
    $isFunction: true
  },
  "+ closure13": 0,
  closure14: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$eq(a, b);
    },
    $isFunction: true
  },
  "+ closure14": 0,
  closure15: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return !J.$eq(a, b);
    },
    $isFunction: true
  },
  "+ closure15": 0,
  closure16: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$gt$n(a, b);
    },
    $isFunction: true
  },
  "+ closure16": 0,
  closure17: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$ge$n(a, b);
    },
    $isFunction: true
  },
  "+ closure17": 0,
  closure18: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$lt$n(a, b);
    },
    $isFunction: true
  },
  "+ closure18": 0,
  closure19: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return J.$le$n(a, b);
    },
    $isFunction: true
  },
  "+ closure19": 0,
  closure20: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return a === true || b === true;
    },
    $isFunction: true
  },
  "+ closure20": 0,
  closure21: {
    "^": "Closure0:58;",
    call$2: function(a, b) {
      return a === true && b === true;
    },
    $isFunction: true
  },
  "+ closure21": 0,
  closure22: {
    "^": "Closure0:58;",
    call$2: function(a, f) {
      var t1 = H.buildInterfaceType(P.Object);
      t1 = H.buildFunctionType(t1, [t1])._isTest$1(f);
      if (t1)
        return f.call$1(a);
      throw H.wrapException(K.EvalException$("Filters must be a one-argument function."));
    },
    $isFunction: true
  },
  "+ closure22": 0,
  closure23: {
    "^": "Closure0:30;",
    call$1: function(a) {
      return a;
    },
    $isFunction: true
  },
  "+ closure23": 0,
  closure24: {
    "^": "Closure0:30;",
    call$1: function(a) {
      return J.$negate$n(a);
    },
    $isFunction: true
  },
  "+ closure24": 0,
  closure25: {
    "^": "Closure0:30;",
    call$1: function(a) {
      return a !== true;
    },
    $isFunction: true
  },
  "+ closure25": 0,
  assign_notAssignable: {
    "^": "Closure0:11;box_0",
    call$0: function() {
      return H.throwExpression(K.EvalException$("Expression is not assignable: " + H.S(this.box_0.expr_0)));
    },
    $isFunction: true
  },
  Scope: {
    "^": "Object;",
    $indexSet: function(_, $name, value) {
      throw H.wrapException(P.UnsupportedError$("[]= is not supported in Scope."));
    },
    $isScope: true,
    $isIndexable: true,
    $asIndexable: function() {
      return [P.String, P.Object];
    }
  },
  _ModelScope: {
    "^": "Scope;model<",
    $index: function(_, $name) {
      var symbol, t1;
      if (J.$eq($name, "this"))
        return this.model;
      symbol = $.get$symbolConverter()._symbols.$index(0, $name);
      t1 = this.model;
      if (t1 == null || symbol == null)
        throw H.wrapException(K.EvalException$("variable '" + H.S($name) + "' not found"));
      t1 = $.get$objectAccessor().read$2(t1, symbol);
      return !!J.getInterceptor(t1).$isStream ? B.StreamBinding$(t1, null) : t1;
    },
    _isModelProperty$1: function($name) {
      return !J.$eq($name, "this");
    }
  },
  _LocalVariableScope: {
    "^": "Scope;parent>,varName,value>",
    get$model: function() {
      return this.parent.get$model();
    },
    $index: function(_, $name) {
      var t1;
      if (J.$eq(this.varName, $name)) {
        t1 = this.value;
        return !!J.getInterceptor(t1).$isStream ? B.StreamBinding$(t1, null) : t1;
      }
      return this.parent.$index(0, $name);
    },
    _isModelProperty$1: function($name) {
      if (J.$eq(this.varName, $name))
        return false;
      return this.parent._isModelProperty$1($name);
    }
  },
  _GlobalsScope: {
    "^": "Scope;parent>,variables>",
    get$model: function() {
      return this.parent.model;
    },
    $index: function(_, $name) {
      var t1 = this.variables;
      if (t1.containsKey$1($name)) {
        t1 = t1.$index(0, $name);
        return !!J.getInterceptor(t1).$isStream ? B.StreamBinding$(t1, null) : t1;
      }
      return this.parent.$index(0, $name);
    },
    _isModelProperty$1: function($name) {
      if (this.variables.containsKey$1($name))
        return false;
      return !J.$eq($name, "this");
    }
  },
  ExpressionObserver: {
    "^": "Object;_parent?,_eval$_value<",
    get$onUpdate: function() {
      var t1 = this._eval$_controller;
      return H.setRuntimeTypeInfo(new P._BroadcastStream(t1), [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$currentValue: function() {
      return this._eval$_value;
    },
    _updateSelf$1: function(scope) {
    },
    _invalidate$1: function(scope) {
      var t1;
      this._eval$_observe$1(0, scope);
      t1 = this._parent;
      if (t1 != null)
        t1._invalidate$1(scope);
    },
    _eval$_observe$1: function(_, scope) {
      var t1, _oldValue, t2;
      t1 = this._eval$_subscription;
      if (t1 != null) {
        t1.cancel$0();
        this._eval$_subscription = null;
      }
      _oldValue = this._eval$_value;
      this._updateSelf$1(scope);
      t1 = this._eval$_value;
      if (t1 == null ? _oldValue != null : t1 !== _oldValue) {
        t2 = this._eval$_controller;
        if (t2._state >= 4)
          H.throwExpression(t2._addEventError$0());
        t2._sendData$1(t1);
      }
    },
    toString$0: function(_) {
      return this._eval$_expr.toString$0(0);
    },
    $isExpressionObserver: true,
    $isExpression: true
  },
  Updater: {
    "^": "RecursiveVisitor;scope",
    visitExpression$1: function(e) {
      e._eval$_observe$1(0, this.scope);
    },
    visitInExpression$1: function(c) {
      J.accept$1$x(c.get$right(c), this);
      c._eval$_observe$1(0, this.scope);
    }
  },
  ObserverBuilder: {
    "^": "Visitor;scope,parents",
    visitEmptyExpression$1: function(e) {
      return new K.EmptyObserver(e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitParenthesizedExpression$1: function(e) {
      return e.child.accept$1(0, this);
    },
    visitGetter$1: function(g) {
      var receiver, getter;
      receiver = J.accept$1$x(g.get$receiver(), this);
      getter = new K.GetterObserver(receiver, g, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(getter);
      return getter;
    },
    visitIndex$1: function(i) {
      var receiver, arg, index;
      receiver = J.accept$1$x(i.get$receiver(), this);
      arg = J.accept$1$x(i.get$argument(), this);
      index = new K.IndexObserver(receiver, arg, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(index);
      arg.set$_parent(index);
      return index;
    },
    visitInvoke$1: function(i) {
      var receiver, args, t1, t2, invoke;
      receiver = J.accept$1$x(i.get$receiver(), this);
      if (i.get$arguments() == null)
        args = null;
      else {
        t1 = i.get$arguments();
        t2 = this.get$visit();
        t1.toString;
        args = H.setRuntimeTypeInfo(new H.MappedListIterable(t1, t2), [null, null]).toList$1$growable(0, false);
      }
      invoke = new K.InvokeObserver(receiver, args, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      receiver.set$_parent(invoke);
      if (args != null)
        H.IterableMixinWorkaround_forEach(args, new K.ObserverBuilder_visitInvoke_closure(invoke));
      return invoke;
    },
    visitLiteral$1: function(l) {
      return new K.LiteralObserver(l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitListLiteral$1: function(l) {
      var items, list;
      items = H.setRuntimeTypeInfo(new H.MappedListIterable(l.get$items(l), this.get$visit()), [null, null]).toList$1$growable(0, false);
      list = new K.ListLiteralObserver(items, l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      H.IterableMixinWorkaround_forEach(items, new K.ObserverBuilder_visitListLiteral_closure(list));
      return list;
    },
    visitMapLiteral$1: function(l) {
      var entries, map;
      entries = H.setRuntimeTypeInfo(new H.MappedListIterable(l.get$entries(l), this.get$visit()), [null, null]).toList$1$growable(0, false);
      map = new K.MapLiteralObserver(entries, l, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      H.IterableMixinWorkaround_forEach(entries, new K.ObserverBuilder_visitMapLiteral_closure(map));
      return map;
    },
    visitMapLiteralEntry$1: function(e) {
      var key, value, entry;
      key = J.accept$1$x(e.get$key(e), this);
      value = J.accept$1$x(e.get$entryValue(), this);
      entry = new K.MapLiteralEntryObserver(key, value, e, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      key.set$_parent(entry);
      value.set$_parent(entry);
      return entry;
    },
    visitIdentifier$1: function(i) {
      return new K.IdentifierObserver(i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
    },
    visitBinaryOperator$1: function(o) {
      var left, right, binary;
      left = J.accept$1$x(o.get$left(o), this);
      right = J.accept$1$x(o.get$right(o), this);
      binary = new K.BinaryObserver(left, right, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      left.set$_parent(binary);
      right.set$_parent(binary);
      return binary;
    },
    visitUnaryOperator$1: function(o) {
      var expr, unary;
      expr = J.accept$1$x(o.get$child(), this);
      unary = new K.UnaryObserver(expr, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      expr.set$_parent(unary);
      return unary;
    },
    visitTernaryOperator$1: function(o) {
      var condition, trueExpr, falseExpr, ternary;
      condition = J.accept$1$x(o.get$condition(), this);
      trueExpr = J.accept$1$x(o.get$trueExpr(), this);
      falseExpr = J.accept$1$x(o.get$falseExpr(), this);
      ternary = new K.TernaryObserver(condition, trueExpr, falseExpr, o, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      condition.set$_parent(ternary);
      trueExpr.set$_parent(ternary);
      falseExpr.set$_parent(ternary);
      return ternary;
    },
    visitInExpression$1: function(i) {
      var left, right, inexpr;
      left = J.accept$1$x(i.get$left(i), this);
      right = J.accept$1$x(i.get$right(i), this);
      inexpr = new K.InObserver(left, right, i, null, null, null, P.StreamController_StreamController$broadcast(null, null, false, null));
      right.set$_parent(inexpr);
      return inexpr;
    }
  },
  ObserverBuilder_visitInvoke_closure: {
    "^": "Closure0:30;invoke_0",
    call$1: function(a) {
      var t1 = this.invoke_0;
      a.set$_parent(t1);
      return t1;
    },
    $isFunction: true
  },
  ObserverBuilder_visitListLiteral_closure: {
    "^": "Closure0:30;list_0",
    call$1: function(e) {
      var t1 = this.list_0;
      e.set$_parent(t1);
      return t1;
    },
    $isFunction: true
  },
  ObserverBuilder_visitMapLiteral_closure: {
    "^": "Closure0:30;map_0",
    call$1: function(e) {
      var t1 = this.map_0;
      e.set$_parent(t1);
      return t1;
    },
    $isFunction: true
  },
  EmptyObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      this._eval$_value = scope.get$model();
    },
    accept$1: function(_, v) {
      return v.visitEmptyExpression$1(this);
    },
    $asExpressionObserver: function() {
      return [U.EmptyExpression];
    },
    $isEmptyExpression: true,
    $isExpression: true
  },
  LiteralObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$value: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$value(t1);
    },
    _updateSelf$1: function(scope) {
      var t1 = this._eval$_expr;
      this._eval$_value = t1.get$value(t1);
    },
    accept$1: function(_, v) {
      return v.visitLiteral$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Literal];
    },
    $asLiteral: function() {
      return [null];
    },
    $isLiteral: true,
    $isExpression: true
  },
  ListLiteralObserver: {
    "^": "ExpressionObserver;items>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      this._eval$_value = H.setRuntimeTypeInfo(new H.MappedListIterable(this.items, new K.ListLiteralObserver__updateSelf_closure()), [null, null]).toList$1$growable(0, false);
    },
    accept$1: function(_, v) {
      return v.visitListLiteral$1(this);
    },
    $asExpressionObserver: function() {
      return [U.ListLiteral];
    },
    $isListLiteral: true,
    $isExpression: true
  },
  ListLiteralObserver__updateSelf_closure: {
    "^": "Closure0:30;",
    call$1: [function(i) {
      return i.get$_eval$_value();
    }, "call$1", null, 2, 0, null, 116, "call"],
    $isFunction: true
  },
  MapLiteralObserver: {
    "^": "ExpressionObserver;entries>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      this._eval$_value = H.IterableMixinWorkaround_fold(this.entries, P.LinkedHashMap_LinkedHashMap(null, null, null, null, null), new K.MapLiteralObserver__updateSelf_closure());
    },
    accept$1: function(_, v) {
      return v.visitMapLiteral$1(this);
    },
    $asExpressionObserver: function() {
      return [U.MapLiteral];
    },
    $isMapLiteral: true,
    $isExpression: true
  },
  MapLiteralObserver__updateSelf_closure: {
    "^": "Closure0:58;",
    call$2: function(m, e) {
      J.$indexSet$ax(m, J.get$key$x(e).get$_eval$_value(), e.get$entryValue().get$_eval$_value());
      return m;
    },
    $isFunction: true
  },
  MapLiteralEntryObserver: {
    "^": "ExpressionObserver;key>,entryValue<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    accept$1: function(_, v) {
      return v.visitMapLiteralEntry$1(this);
    },
    $asExpressionObserver: function() {
      return [U.MapLiteralEntry];
    },
    $isMapLiteralEntry: true,
    $isExpression: true
  },
  IdentifierObserver: {
    "^": "ExpressionObserver;_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$value: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$value(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, model, t2, symbol;
      t1 = this._eval$_expr;
      this._eval$_value = scope.$index(0, t1.get$value(t1));
      if (!scope._isModelProperty$1(t1.get$value(t1)))
        return;
      model = scope.get$model();
      t2 = J.getInterceptor(model);
      if (!t2.$isObservable)
        return;
      t1 = t1.get$value(t1);
      symbol = $.get$symbolConverter()._symbols.$index(0, t1);
      this._eval$_subscription = t2.get$changes(model).listen$1(new K.IdentifierObserver__updateSelf_closure(this, scope, symbol));
    },
    accept$1: function(_, v) {
      return v.visitIdentifier$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Identifier];
    },
    $isIdentifier: true,
    $isExpression: true
  },
  IdentifierObserver__updateSelf_closure: {
    "^": "Closure0:30;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.IdentifierObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  },
  IdentifierObserver__updateSelf__closure: {
    "^": "Closure0:30;symbol_3",
    call$1: function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    },
    $isFunction: true
  },
  UnaryObserver: {
    "^": "ExpressionObserver;child<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$operator: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$operator(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, f;
      t1 = this._eval$_expr;
      f = $.get$_UNARY_OPERATORS().$index(0, t1.get$operator(t1));
      if (J.$eq(t1.get$operator(t1), "!")) {
        t1 = this.child.get$_eval$_value();
        this._eval$_value = f.call$1(t1 == null ? false : t1);
      } else {
        t1 = this.child;
        this._eval$_value = t1.get$_eval$_value() == null ? null : f.call$1(t1.get$_eval$_value());
      }
    },
    accept$1: function(_, v) {
      return v.visitUnaryOperator$1(this);
    },
    $asExpressionObserver: function() {
      return [U.UnaryOperator];
    },
    $isUnaryOperator: true,
    $isExpression: true
  },
  BinaryObserver: {
    "^": "ExpressionObserver;left>,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$operator: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$operator(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, f, t2;
      t1 = this._eval$_expr;
      f = $.get$_BINARY_OPERATORS().$index(0, t1.get$operator(t1));
      if (J.$eq(t1.get$operator(t1), "&&") || J.$eq(t1.get$operator(t1), "||")) {
        t1 = this.left.get$_eval$_value();
        if (t1 == null)
          t1 = false;
        t2 = this.right.get$_eval$_value();
        this._eval$_value = f.call$2(t1, t2 == null ? false : t2);
      } else if (J.$eq(t1.get$operator(t1), "==") || J.$eq(t1.get$operator(t1), "!="))
        this._eval$_value = f.call$2(this.left.get$_eval$_value(), this.right.get$_eval$_value());
      else {
        t2 = this.left;
        if (t2.get$_eval$_value() == null || this.right.get$_eval$_value() == null)
          this._eval$_value = null;
        else {
          if (J.$eq(t1.get$operator(t1), "|") && !!J.getInterceptor(t2.get$_eval$_value()).$isObservableList)
            this._eval$_subscription = H.interceptedTypeCast(t2.get$_eval$_value(), "$isObservableList").get$listChanges().listen$1(new K.BinaryObserver__updateSelf_closure(this, scope));
          this._eval$_value = f.call$2(t2.get$_eval$_value(), this.right.get$_eval$_value());
        }
      }
    },
    accept$1: function(_, v) {
      return v.visitBinaryOperator$1(this);
    },
    $asExpressionObserver: function() {
      return [U.BinaryOperator];
    },
    $isBinaryOperator: true,
    $isExpression: true
  },
  BinaryObserver__updateSelf_closure: {
    "^": "Closure0:30;this_0,scope_1",
    call$1: [function(_) {
      return this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  TernaryObserver: {
    "^": "ExpressionObserver;condition<,trueExpr<,falseExpr<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      var t1 = this.condition.get$_eval$_value();
      this._eval$_value = (t1 == null ? false : t1) === true ? this.trueExpr.get$_eval$_value() : this.falseExpr.get$_eval$_value();
    },
    accept$1: function(_, v) {
      return v.visitTernaryOperator$1(this);
    },
    $asExpressionObserver: function() {
      return [U.TernaryOperator];
    },
    $isTernaryOperator: true,
    $isExpression: true
  },
  GetterObserver: {
    "^": "ExpressionObserver;receiver<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$name: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$name(t1);
    },
    _updateSelf$1: function(scope) {
      var receiverValue, t1, symbol;
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      t1 = this._eval$_expr;
      t1 = t1.get$name(t1);
      symbol = $.get$symbolConverter()._symbols.$index(0, t1);
      this._eval$_value = $.get$objectAccessor().read$2(receiverValue, symbol);
      t1 = J.getInterceptor(receiverValue);
      if (!!t1.$isObservable)
        this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.GetterObserver__updateSelf_closure(this, scope, symbol));
    },
    accept$1: function(_, v) {
      return v.visitGetter$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Getter];
    },
    $isGetter: true,
    $isExpression: true
  },
  GetterObserver__updateSelf_closure: {
    "^": "Closure0:30;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.GetterObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  },
  GetterObserver__updateSelf__closure: {
    "^": "Closure0:30;symbol_3",
    call$1: function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    },
    $isFunction: true
  },
  IndexObserver: {
    "^": "ExpressionObserver;receiver<,argument<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      var receiverValue, key, t1;
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      key = this.argument.get$_eval$_value();
      t1 = J.getInterceptor$asx(receiverValue);
      this._eval$_value = t1.$index(receiverValue, key);
      if (!!t1.$isObservable)
        this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.IndexObserver__updateSelf_closure(this, scope, key));
    },
    accept$1: function(_, v) {
      return v.visitIndex$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Index];
    },
    $isIndex: true,
    $isExpression: true
  },
  IndexObserver__updateSelf_closure: {
    "^": "Closure0:30;this_0,scope_1,key_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.IndexObserver__updateSelf__closure(this.key_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  },
  IndexObserver__updateSelf__closure: {
    "^": "Closure0:30;key_3",
    call$1: function(c) {
      return !!J.getInterceptor(c).$isMapChangeRecord && J.$eq(c.key, this.key_3);
    },
    $isFunction: true
  },
  InvokeObserver: {
    "^": "ExpressionObserver;receiver<,arguments<,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    get$method: function(_) {
      var t1 = this._eval$_expr;
      return t1.get$method(t1);
    },
    _updateSelf$1: function(scope) {
      var t1, args, receiverValue, symbol;
      t1 = this.arguments;
      t1.toString;
      args = H.setRuntimeTypeInfo(new H.MappedListIterable(t1, new K.InvokeObserver__updateSelf_closure()), [null, null]).toList$0(0);
      receiverValue = this.receiver.get$_eval$_value();
      if (receiverValue == null) {
        this._eval$_value = null;
        return;
      }
      t1 = this._eval$_expr;
      if (t1.get$method(t1) == null) {
        t1 = H.Primitives_applyFunction(receiverValue, args, P.Function__toMangledNames(null));
        this._eval$_value = !!J.getInterceptor(t1).$isStream ? B.StreamBinding$(t1, null) : t1;
      } else {
        t1 = t1.get$method(t1);
        symbol = $.get$symbolConverter()._symbols.$index(0, t1);
        this._eval$_value = $.get$objectAccessor().invoke$5$adjust$namedArgs(receiverValue, symbol, args, false, null);
        t1 = J.getInterceptor(receiverValue);
        if (!!t1.$isObservable)
          this._eval$_subscription = t1.get$changes(receiverValue).listen$1(new K.InvokeObserver__updateSelf_closure0(this, scope, symbol));
      }
    },
    accept$1: function(_, v) {
      return v.visitInvoke$1(this);
    },
    $asExpressionObserver: function() {
      return [U.Invoke];
    },
    $isInvoke: true,
    $isExpression: true
  },
  InvokeObserver__updateSelf_closure: {
    "^": "Closure0:30;",
    call$1: [function(a) {
      return a.get$_eval$_value();
    }, "call$1", null, 2, 0, null, 20, "call"],
    $isFunction: true
  },
  InvokeObserver__updateSelf_closure0: {
    "^": "Closure0:126;this_0,scope_1,symbol_2",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new K.InvokeObserver__updateSelf__closure(this.symbol_2)) === true)
        this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  },
  InvokeObserver__updateSelf__closure: {
    "^": "Closure0:30;symbol_3",
    call$1: function(c) {
      return !!J.getInterceptor(c).$isPropertyChangeRecord && J.$eq(c.name, this.symbol_3);
    },
    $isFunction: true
  },
  InObserver: {
    "^": "ExpressionObserver;left>,right>,_eval$_expr,_parent,_eval$_subscription,_eval$_value,_eval$_controller",
    _updateSelf$1: function(scope) {
      var identifier, iterable, t1, t2;
      identifier = this.left;
      iterable = this.right.get$_eval$_value();
      t1 = J.getInterceptor(iterable);
      if (!t1.$isIterable && iterable != null)
        throw H.wrapException(K.EvalException$("right side of 'in' is not an iterator"));
      if (!!t1.$isObservableList)
        this._eval$_subscription = iterable.get$listChanges().listen$1(new K.InObserver__updateSelf_closure(this, scope));
      t1 = J.get$value$x(identifier);
      t2 = iterable != null ? iterable : C.List_empty;
      this._eval$_value = new K.Comprehension(t1, t2);
    },
    accept$1: function(_, v) {
      return v.visitInExpression$1(this);
    },
    $asExpressionObserver: function() {
      return [U.InExpression];
    },
    $isInExpression: true,
    $isExpression: true
  },
  InObserver__updateSelf_closure: {
    "^": "Closure0:30;this_0,scope_1",
    call$1: [function(_) {
      return this.this_0._invalidate$1(this.scope_1);
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  Comprehension: {
    "^": "Object;identifier,iterable",
    $isComprehension: true
  },
  EvalException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "EvalException: " + this.message;
    },
    static: {EvalException$: function(message) {
        return new K.EvalException(message);
      }}
  }
}],
["polymer_expressions.expression", "package:polymer_expressions/expression.dart", , U, {
  "^": "",
  _listEquals: function(a, b) {
    var i, t1;
    if (a == null ? b == null : a === b)
      return true;
    if (a == null || b == null)
      return false;
    if (a.length !== b.length)
      return false;
    for (i = 0; i < a.length; ++i) {
      t1 = a[i];
      if (i >= b.length)
        return H.ioore(b, i);
      if (!J.$eq(t1, b[i]))
        return false;
    }
    return true;
  },
  _hashList: function(l) {
    l.toString;
    return U._JenkinsSmiHash_finish0(H.IterableMixinWorkaround_fold(l, 0, new U._hashList_closure()));
  },
  _JenkinsSmiHash_combine1: function(hash, value) {
    var t1 = J.$add$ns(hash, value);
    if (typeof t1 !== "number")
      return H.iae(t1);
    hash = 536870911 & t1;
    hash = 536870911 & hash + ((524287 & hash) << 10 >>> 0);
    return hash ^ hash >>> 6;
  },
  _JenkinsSmiHash_finish0: function(hash) {
    if (typeof hash !== "number")
      return H.iae(hash);
    hash = 536870911 & hash + ((67108863 & hash) << 3 >>> 0);
    hash = (hash ^ hash >>> 11) >>> 0;
    return 536870911 & hash + ((16383 & hash) << 15 >>> 0);
  },
  AstFactory: {
    "^": "Object;",
    getter$2: [function(_, g, n) {
      return new U.Getter(g, n);
    }, "call$2", "get$getter", 4, 0, 127, 128, 129],
    index$2: [function(_, e, a) {
      return new U.Index(e, a);
    }, "call$2", "get$index", 4, 0, 130, 1, 20]
  },
  Expression: {
    "^": "Object;",
    $isExpression: true
  },
  EmptyExpression: {
    "^": "Expression;",
    accept$1: function(_, v) {
      return v.visitEmptyExpression$1(this);
    },
    $isEmptyExpression: true
  },
  Literal: {
    "^": "Expression;value>",
    accept$1: function(_, v) {
      return v.visitLiteral$1(this);
    },
    toString$0: function(_) {
      var t1 = this.value;
      return typeof t1 === "string" ? "\"" + H.S(t1) + "\"" : H.S(t1);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = H.checkSubtype(o, "$isLiteral", [H.getTypeArgumentByIndex(this, 0)], "$asLiteral");
      return t1 && J.$eq(J.get$value$x(o), this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    $isLiteral: true
  },
  ListLiteral: {
    "^": "Expression;items>",
    accept$1: function(_, v) {
      return v.visitListLiteral$1(this);
    },
    toString$0: function(_) {
      return H.S(this.items);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isListLiteral && U._listEquals(t1.get$items(o), this.items);
    },
    get$hashCode: function(_) {
      return U._hashList(this.items);
    },
    $isListLiteral: true
  },
  MapLiteral: {
    "^": "Expression;entries>",
    accept$1: function(_, v) {
      return v.visitMapLiteral$1(this);
    },
    toString$0: function(_) {
      return "{" + H.S(this.entries) + "}";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isMapLiteral && U._listEquals(t1.get$entries(o), this.entries);
    },
    get$hashCode: function(_) {
      return U._hashList(this.entries);
    },
    $isMapLiteral: true
  },
  MapLiteralEntry: {
    "^": "Expression;key>,entryValue<",
    accept$1: function(_, v) {
      return v.visitMapLiteralEntry$1(this);
    },
    toString$0: function(_) {
      return this.key.toString$0(0) + ": " + H.S(this.entryValue);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isMapLiteralEntry && J.$eq(t1.get$key(o), this.key) && J.$eq(o.get$entryValue(), this.entryValue);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.key.value);
      t2 = J.get$hashCode$(this.entryValue);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isMapLiteralEntry: true
  },
  ParenthesizedExpression: {
    "^": "Expression;child",
    accept$1: function(_, v) {
      return v.visitParenthesizedExpression$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.child) + ")";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isParenthesizedExpression && J.$eq(o.child, this.child);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.child);
    },
    $isParenthesizedExpression: true
  },
  Identifier: {
    "^": "Expression;value>",
    accept$1: function(_, v) {
      return v.visitIdentifier$1(this);
    },
    toString$0: function(_) {
      return this.value;
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isIdentifier && J.$eq(t1.get$value(o), this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    $isIdentifier: true
  },
  UnaryOperator: {
    "^": "Expression;operator>,child<",
    accept$1: function(_, v) {
      return v.visitUnaryOperator$1(this);
    },
    toString$0: function(_) {
      return H.S(this.operator) + " " + H.S(this.child);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isUnaryOperator && J.$eq(t1.get$operator(o), this.operator) && J.$eq(o.get$child(), this.child);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.operator);
      t2 = J.get$hashCode$(this.child);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isUnaryOperator: true
  },
  BinaryOperator: {
    "^": "Expression;operator>,left>,right>",
    accept$1: function(_, v) {
      return v.visitBinaryOperator$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.left) + " " + H.S(this.operator) + " " + H.S(this.right) + ")";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isBinaryOperator && J.$eq(t1.get$operator(o), this.operator) && J.$eq(t1.get$left(o), this.left) && J.$eq(t1.get$right(o), this.right);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(this.operator);
      t2 = J.get$hashCode$(this.left);
      t3 = J.get$hashCode$(this.right);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
    },
    $isBinaryOperator: true
  },
  TernaryOperator: {
    "^": "Expression;condition<,trueExpr<,falseExpr<",
    accept$1: function(_, v) {
      return v.visitTernaryOperator$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.condition) + " ? " + H.S(this.trueExpr) + " : " + H.S(this.falseExpr) + ")";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isTernaryOperator && J.$eq(o.get$condition(), this.condition) && J.$eq(o.get$trueExpr(), this.trueExpr) && J.$eq(o.get$falseExpr(), this.falseExpr);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(this.condition);
      t2 = J.get$hashCode$(this.trueExpr);
      t3 = J.get$hashCode$(this.falseExpr);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
    },
    $isTernaryOperator: true
  },
  InExpression: {
    "^": "Expression;left>,right>",
    accept$1: function(_, v) {
      return v.visitInExpression$1(this);
    },
    toString$0: function(_) {
      return "(" + H.S(this.left) + " in " + H.S(this.right) + ")";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isInExpression && J.$eq(t1.get$left(o), this.left) && J.$eq(t1.get$right(o), this.right);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = this.left;
      t1 = t1.get$hashCode(t1);
      t2 = J.get$hashCode$(this.right);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isInExpression: true
  },
  Index: {
    "^": "Expression;receiver<,argument<",
    accept$1: function(_, v) {
      return v.visitIndex$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "[" + H.S(this.argument) + "]";
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isIndex && J.$eq(o.get$receiver(), this.receiver) && J.$eq(o.get$argument(), this.argument);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.argument);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isIndex: true
  },
  Getter: {
    "^": "Expression;receiver<,name>",
    accept$1: function(_, v) {
      return v.visitGetter$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "." + H.S(this.name);
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isGetter && J.$eq(o.get$receiver(), this.receiver) && J.$eq(t1.get$name(o), this.name);
    },
    get$hashCode: function(_) {
      var t1, t2;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.name);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2));
    },
    $isGetter: true
  },
  Invoke: {
    "^": "Expression;receiver<,method>,arguments<",
    accept$1: function(_, v) {
      return v.visitInvoke$1(this);
    },
    toString$0: function(_) {
      return H.S(this.receiver) + "." + H.S(this.method) + "(" + H.S(this.arguments) + ")";
    },
    $eq: function(_, o) {
      var t1;
      if (o == null)
        return false;
      t1 = J.getInterceptor(o);
      return !!t1.$isInvoke && J.$eq(o.get$receiver(), this.receiver) && J.$eq(t1.get$method(o), this.method) && U._listEquals(o.get$arguments(), this.arguments);
    },
    get$hashCode: function(_) {
      var t1, t2, t3;
      t1 = J.get$hashCode$(this.receiver);
      t2 = J.get$hashCode$(this.method);
      t3 = U._hashList(this.arguments);
      return U._JenkinsSmiHash_finish0(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(U._JenkinsSmiHash_combine1(0, t1), t2), t3));
    },
    $isInvoke: true
  },
  _hashList_closure: {
    "^": "Closure0:58;",
    call$2: function(h, item) {
      return U._JenkinsSmiHash_combine1(h, J.get$hashCode$(item));
    },
    $isFunction: true
  }
}],
["polymer_expressions.parser", "package:polymer_expressions/parser.dart", , T, {
  "^": "",
  Parser: {
    "^": "Object;_astFactory,_tokenizer,_parser$_tokens,_parser$_iterator",
    get$_token: function() {
      return this._parser$_iterator._current;
    },
    _advance$2: function(kind, value) {
      var t1;
      if (kind != null) {
        t1 = this._parser$_iterator._current;
        t1 = t1 == null || J.get$kind$x(t1) !== kind;
      } else
        t1 = false;
      if (!t1)
        if (value != null) {
          t1 = this._parser$_iterator._current;
          t1 = t1 == null || !J.$eq(J.get$value$x(t1), value);
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(Y.ParseException$("Expected kind " + H.S(kind) + " (" + H.S(value) + "): " + H.S(this.get$_token())));
      this._parser$_iterator.moveNext$0();
    },
    _advance$0: function() {
      return this._advance$2(null, null);
    },
    _advance$1: function(kind) {
      return this._advance$2(kind, null);
    },
    _parseExpression$0: function() {
      if (this._parser$_iterator._current == null) {
        this._astFactory.toString;
        return C.C_EmptyExpression;
      }
      var expr = this._parseUnary$0();
      return expr == null ? null : this._parsePrecedence$2(expr, 0);
    },
    _parsePrecedence$2: function(left, precedence) {
      var t1, args, indexExpr, right, trueExpr, falseExpr;
      for (; t1 = this._parser$_iterator._current, t1 != null;)
        if (J.get$kind$x(t1) === 9)
          if (J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
            args = this._parseArguments$0();
            this._astFactory.toString;
            left = new U.Invoke(left, null, args);
          } else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "[")) {
            indexExpr = this._parseIndex$0();
            this._astFactory.toString;
            left = new U.Index(left, indexExpr);
          } else
            break;
        else if (J.get$kind$x(this._parser$_iterator._current) === 3) {
          this._advance$0();
          left = this._makeInvokeOrGetter$2(left, this._parseUnary$0());
        } else if (J.get$kind$x(this._parser$_iterator._current) === 10 && J.$eq(J.get$value$x(this._parser$_iterator._current), "in")) {
          if (!J.getInterceptor(left).$isIdentifier)
            H.throwExpression(Y.ParseException$("in... statements must start with an identifier"));
          this._advance$0();
          right = this._parseExpression$0();
          this._astFactory.toString;
          left = new U.InExpression(left, right);
        } else {
          if (J.get$kind$x(this._parser$_iterator._current) === 8) {
            t1 = this._parser$_iterator._current.get$precedence();
            if (typeof t1 !== "number")
              return t1.$ge();
            if (typeof precedence !== "number")
              return H.iae(precedence);
            t1 = t1 >= precedence;
          } else
            t1 = false;
          if (t1)
            if (J.$eq(J.get$value$x(this._parser$_iterator._current), "?")) {
              this._advance$2(8, "?");
              trueExpr = this._parseExpression$0();
              this._advance$1(5);
              falseExpr = this._parseExpression$0();
              this._astFactory.toString;
              left = new U.TernaryOperator(left, trueExpr, falseExpr);
            } else
              left = this._parseBinary$1(left);
          else
            break;
        }
      return left;
    },
    _makeInvokeOrGetter$2: function(left, right) {
      var t1, t2;
      t1 = J.getInterceptor(right);
      if (!!t1.$isIdentifier) {
        t1 = t1.get$value(right);
        this._astFactory.toString;
        return new U.Getter(left, t1);
      } else if (!!t1.$isInvoke && !!J.getInterceptor(right.get$receiver()).$isIdentifier) {
        t1 = J.get$value$x(right.get$receiver());
        t2 = right.get$arguments();
        this._astFactory.toString;
        return new U.Invoke(left, t1, t2);
      } else
        throw H.wrapException(Y.ParseException$("expected identifier: " + H.S(right)));
    },
    _parseBinary$1: function(left) {
      var op, right, t1, t2;
      op = this._parser$_iterator._current;
      this._advance$0();
      right = this._parseUnary$0();
      while (true) {
        t1 = this._parser$_iterator._current;
        if (t1 != null)
          if (J.get$kind$x(t1) === 8 || J.get$kind$x(this._parser$_iterator._current) === 3 || J.get$kind$x(this._parser$_iterator._current) === 9) {
            t1 = this._parser$_iterator._current.get$precedence();
            t2 = op.get$precedence();
            if (typeof t1 !== "number")
              return t1.$gt();
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 > t2;
            t1 = t2;
          } else
            t1 = false;
        else
          t1 = false;
        if (!t1)
          break;
        right = this._parsePrecedence$2(right, this._parser$_iterator._current.get$precedence());
      }
      t1 = J.get$value$x(op);
      this._astFactory.toString;
      return new U.BinaryOperator(t1, left, right);
    },
    _parseUnary$0: function() {
      var value, t1, t2, expr;
      if (J.get$kind$x(this._parser$_iterator._current) === 8) {
        value = J.get$value$x(this._parser$_iterator._current);
        t1 = J.getInterceptor(value);
        if (t1.$eq(value, "+") || t1.$eq(value, "-")) {
          this._advance$0();
          if (J.get$kind$x(this._parser$_iterator._current) === 6) {
            t1 = H.Primitives_parseInt(H.S(value) + H.S(J.get$value$x(this._parser$_iterator._current)), null, null);
            this._astFactory.toString;
            value = new U.Literal(t1);
            value.$builtinTypeInfo = [null];
            this._advance$0();
            return value;
          } else {
            t1 = this._astFactory;
            if (J.get$kind$x(this._parser$_iterator._current) === 7) {
              t2 = H.Primitives_parseDouble(H.S(value) + H.S(J.get$value$x(this._parser$_iterator._current)), null);
              t1.toString;
              value = new U.Literal(t2);
              value.$builtinTypeInfo = [null];
              this._advance$0();
              return value;
            } else {
              expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
              t1.toString;
              return new U.UnaryOperator(value, expr);
            }
          }
        } else if (t1.$eq(value, "!")) {
          this._advance$0();
          expr = this._parsePrecedence$2(this._parsePrimary$0(), 11);
          this._astFactory.toString;
          return new U.UnaryOperator(value, expr);
        }
      }
      return this._parsePrimary$0();
    },
    _parsePrimary$0: function() {
      var keyword, t1, expr;
      switch (J.get$kind$x(this._parser$_iterator._current)) {
        case 10:
          keyword = J.get$value$x(this._parser$_iterator._current);
          t1 = J.getInterceptor(keyword);
          if (t1.$eq(keyword, "this")) {
            this._advance$0();
            this._astFactory.toString;
            return new U.Identifier("this");
          } else if (t1.$eq(keyword, "in"))
            return;
          throw H.wrapException(P.ArgumentError$("unrecognized keyword: " + H.S(keyword)));
        case 2:
          return this._parseInvokeOrIdentifier$0();
        case 1:
          return this._parseString$0();
        case 6:
          return this._parseInteger$0();
        case 7:
          return this._parseDecimal$0();
        case 9:
          if (J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
            this._advance$0();
            expr = this._parseExpression$0();
            this._advance$2(9, ")");
            this._astFactory.toString;
            return new U.ParenthesizedExpression(expr);
          } else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "{"))
            return this._parseMapLiteral$0();
          else if (J.$eq(J.get$value$x(this._parser$_iterator._current), "["))
            return this._parseListLiteral$0();
          return;
        case 5:
          throw H.wrapException(P.ArgumentError$("unexpected token \":\""));
        default:
          return;
      }
    },
    _parseListLiteral$0: function() {
      var items, t1;
      items = [];
      do {
        this._advance$0();
        if (J.get$kind$x(this._parser$_iterator._current) === 9 && J.$eq(J.get$value$x(this._parser$_iterator._current), "]"))
          break;
        items.push(this._parseExpression$0());
        t1 = this._parser$_iterator._current;
      } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
      this._advance$2(9, "]");
      return new U.ListLiteral(items);
    },
    _parseMapLiteral$0: function() {
      var entries, t1, value;
      entries = [];
      do {
        this._advance$0();
        if (J.get$kind$x(this._parser$_iterator._current) === 9 && J.$eq(J.get$value$x(this._parser$_iterator._current), "}"))
          break;
        t1 = J.get$value$x(this._parser$_iterator._current);
        this._astFactory.toString;
        value = new U.Literal(t1);
        value.$builtinTypeInfo = [null];
        this._advance$0();
        this._advance$2(5, ":");
        entries.push(new U.MapLiteralEntry(value, this._parseExpression$0()));
        t1 = this._parser$_iterator._current;
      } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
      this._advance$2(9, "}");
      return new U.MapLiteral(entries);
    },
    _parseInvokeOrIdentifier$0: function() {
      var value, identifier, args;
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "true")) {
        this._advance$0();
        this._astFactory.toString;
        return H.setRuntimeTypeInfo(new U.Literal(true), [null]);
      }
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "false")) {
        this._advance$0();
        this._astFactory.toString;
        return H.setRuntimeTypeInfo(new U.Literal(false), [null]);
      }
      if (J.$eq(J.get$value$x(this._parser$_iterator._current), "null")) {
        this._advance$0();
        this._astFactory.toString;
        return H.setRuntimeTypeInfo(new U.Literal(null), [null]);
      }
      if (J.get$kind$x(this._parser$_iterator._current) !== 2)
        H.throwExpression(Y.ParseException$("expected identifier: " + H.S(this.get$_token()) + ".value"));
      value = J.get$value$x(this._parser$_iterator._current);
      this._advance$0();
      this._astFactory.toString;
      identifier = new U.Identifier(value);
      args = this._parseArguments$0();
      if (args == null)
        return identifier;
      else
        return new U.Invoke(identifier, null, args);
    },
    _parseArguments$0: function() {
      var t1, args;
      t1 = this._parser$_iterator._current;
      if (t1 != null && J.get$kind$x(t1) === 9 && J.$eq(J.get$value$x(this._parser$_iterator._current), "(")) {
        args = [];
        do {
          this._advance$0();
          if (J.get$kind$x(this._parser$_iterator._current) === 9 && J.$eq(J.get$value$x(this._parser$_iterator._current), ")"))
            break;
          args.push(this._parseExpression$0());
          t1 = this._parser$_iterator._current;
        } while (t1 != null && J.$eq(J.get$value$x(t1), ","));
        this._advance$2(9, ")");
        return args;
      }
      return;
    },
    _parseIndex$0: function() {
      var t1, expr;
      t1 = this._parser$_iterator._current;
      if (t1 != null && J.get$kind$x(t1) === 9 && J.$eq(J.get$value$x(this._parser$_iterator._current), "[")) {
        this._advance$0();
        expr = this._parseExpression$0();
        this._advance$2(9, "]");
        return expr;
      }
      return;
    },
    _parseString$0: function() {
      var t1, value;
      t1 = J.get$value$x(this._parser$_iterator._current);
      this._astFactory.toString;
      value = H.setRuntimeTypeInfo(new U.Literal(t1), [null]);
      this._advance$0();
      return value;
    },
    _parseInteger$1: function(prefix) {
      var t1, value;
      t1 = H.Primitives_parseInt(H.S(prefix) + H.S(J.get$value$x(this._parser$_iterator._current)), null, null);
      this._astFactory.toString;
      value = H.setRuntimeTypeInfo(new U.Literal(t1), [null]);
      this._advance$0();
      return value;
    },
    _parseInteger$0: function() {
      return this._parseInteger$1("");
    },
    _parseDecimal$1: function(prefix) {
      var t1, value;
      t1 = H.Primitives_parseDouble(H.S(prefix) + H.S(J.get$value$x(this._parser$_iterator._current)), null);
      this._astFactory.toString;
      value = H.setRuntimeTypeInfo(new U.Literal(t1), [null]);
      this._advance$0();
      return value;
    },
    _parseDecimal$0: function() {
      return this._parseDecimal$1("");
    }
  }
}],
["polymer_expressions.src.globals", "package:polymer_expressions/src/globals.dart", , K, {
  "^": "",
  enumerate: [function(iterable) {
    return H.setRuntimeTypeInfo(new K.EnumerateIterable(iterable), [null]);
  }, "call$1", "enumerate$closure", 2, 0, 44, 45],
  IndexedValue: {
    "^": "Object;index>,value>",
    $eq: function(_, o) {
      if (o == null)
        return false;
      return !!J.getInterceptor(o).$isIndexedValue && J.$eq(o.index, this.index) && J.$eq(o.value, this.value);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.value);
    },
    toString$0: function(_) {
      return "(" + H.S(this.index) + ", " + H.S(this.value) + ")";
    },
    $isIndexedValue: true
  },
  EnumerateIterable: {
    "^": "IterableBase;_globals$_iterable",
    get$iterator: function(_) {
      var t1 = new K.EnumerateIterator(J.get$iterator$ax(this._globals$_iterable), 0, null);
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this._globals$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._globals$_iterable);
    },
    get$first: function(_) {
      var t1 = new K.IndexedValue(0, J.get$first$ax(this._globals$_iterable));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    get$last: function(_) {
      var t1, t2;
      t1 = this._globals$_iterable;
      t2 = J.getInterceptor$asx(t1);
      t1 = new K.IndexedValue(J.$sub$n(t2.get$length(t1), 1), t2.get$last(t1));
      t1.$builtinTypeInfo = this.$builtinTypeInfo;
      return t1;
    },
    $asIterableBase: function($V) {
      return [[K.IndexedValue, $V]];
    },
    $asIterable: function($V) {
      return [[K.IndexedValue, $V]];
    }
  },
  EnumerateIterator: {
    "^": "Iterator;_globals$_iterator,_globals$_index,_globals$_current",
    get$current: function() {
      return this._globals$_current;
    },
    moveNext$0: function() {
      var t1 = this._globals$_iterator;
      if (t1.moveNext$0()) {
        this._globals$_current = H.setRuntimeTypeInfo(new K.IndexedValue(this._globals$_index++, t1.get$current()), [null]);
        return true;
      }
      this._globals$_current = null;
      return false;
    },
    $asIterator: function($V) {
      return [[K.IndexedValue, $V]];
    }
  }
}],
["polymer_expressions.tokenizer", "package:polymer_expressions/tokenizer.dart", , Y, {
  "^": "",
  escape: function(c) {
    switch (c) {
      case 102:
        return 12;
      case 110:
        return 10;
      case 114:
        return 13;
      case 116:
        return 9;
      case 118:
        return 11;
      default:
        return c;
    }
  },
  Token: {
    "^": "Object;kind>,value>,precedence<",
    toString$0: function(_) {
      return "(" + this.kind + ", '" + this.value + "')";
    },
    $isToken: true
  },
  Tokenizer: {
    "^": "Object;_tokenizer$_tokens,_sb,_tokenizer$_iterator,_tokenizer$_next",
    tokenize$0: function() {
      var t1, t2, t3, t4, startChar, op2, op, value;
      t1 = this._tokenizer$_iterator;
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      for (t2 = this._tokenizer$_tokens; t3 = this._tokenizer$_next, t3 != null;)
        if (t3 === 32 || t3 === 9 || t3 === 160)
          this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        else if (t3 === 34 || t3 === 39)
          this.tokenizeString$0();
        else {
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(97 <= t3 && t3 <= 122))
            t4 = 65 <= t3 && t3 <= 90 || t3 === 95 || t3 === 36 || t3 > 127;
          else
            t4 = true;
          if (t4)
            this.tokenizeIdentifierOrKeyword$0();
          else if (48 <= t3 && t3 <= 57)
            this.tokenizeNumber$0();
          else if (t3 === 46) {
            t3 = t1.moveNext$0() ? t1._currentCodePoint : null;
            this._tokenizer$_next = t3;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (48 <= t3 && t3 <= 57)
              this.tokenizeFraction$0();
            else
              t2.push(new Y.Token(3, ".", 11));
          } else if (t3 === 44) {
            this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
            t2.push(new Y.Token(4, ",", 0));
          } else if (t3 === 58) {
            this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
            t2.push(new Y.Token(5, ":", 0));
          } else if (C.JSArray_methods.contains$1(C.List_mC8, t3)) {
            startChar = this._tokenizer$_next;
            t3 = t1.moveNext$0() ? t1._currentCodePoint : null;
            this._tokenizer$_next = t3;
            if (C.JSArray_methods.contains$1(C.List_mC8, t3)) {
              t3 = this._tokenizer$_next;
              op2 = H.Primitives_stringFromCharCodes([startChar, t3]);
              if (C.JSArray_methods.contains$1(C.List_Ynd, op2)) {
                this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
                op = op2;
              } else
                op = H.Primitives_stringFromCharCode(startChar);
            } else
              op = H.Primitives_stringFromCharCode(startChar);
            t2.push(new Y.Token(8, op, C.Map_FKtZ4.$index(0, op)));
          } else if (C.JSArray_methods.contains$1(C.List_ww8, this._tokenizer$_next)) {
            value = H.Primitives_stringFromCharCode(this._tokenizer$_next);
            t2.push(new Y.Token(9, value, C.Map_FKtZ4.$index(0, value)));
            this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
          } else
            this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
        }
      return t2;
    },
    tokenizeString$0: function() {
      var quoteChar, t1, t2, t3;
      quoteChar = this._tokenizer$_next;
      t1 = this._tokenizer$_iterator;
      t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
      this._tokenizer$_next = t2;
      for (t3 = this._sb; t2 == null ? quoteChar != null : t2 !== quoteChar;) {
        if (t2 == null)
          throw H.wrapException(Y.ParseException$("unterminated string"));
        if (t2 === 92) {
          t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
          this._tokenizer$_next = t2;
          if (t2 == null)
            throw H.wrapException(Y.ParseException$("unterminated string"));
          t2 = H.Primitives_stringFromCharCode(Y.escape(t2));
          t3._contents += t2;
        } else {
          t2 = H.Primitives_stringFromCharCode(t2);
          t3._contents += t2;
        }
        t2 = t1.moveNext$0() ? t1._currentCodePoint : null;
        this._tokenizer$_next = t2;
      }
      this._tokenizer$_tokens.push(new Y.Token(1, t3._contents, 0));
      t3._contents = "";
      this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
    },
    tokenizeIdentifierOrKeyword$0: function() {
      var t1, t2, t3, t4, value;
      t1 = this._tokenizer$_iterator;
      t2 = this._sb;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(97 <= t3 && t3 <= 122))
            if (!(65 <= t3 && t3 <= 90))
              t4 = 48 <= t3 && t3 <= 57 || t3 === 95 || t3 === 36 || t3 > 127;
            else
              t4 = true;
          else
            t4 = true;
        } else
          t4 = false;
        if (!t4)
          break;
        t3 = H.Primitives_stringFromCharCode(t3);
        t2._contents += t3;
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      }
      value = t2._contents;
      t1 = this._tokenizer$_tokens;
      if (C.JSArray_methods.contains$1(C.List_in_this, value))
        t1.push(new Y.Token(10, value, 0));
      else
        t1.push(new Y.Token(2, value, 0));
      t2._contents = "";
    },
    tokenizeNumber$0: function() {
      var t1, t2, t3, t4;
      t1 = this._tokenizer$_iterator;
      t2 = this._sb;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = 48 <= t3 && t3 <= 57;
        } else
          t4 = false;
        if (!t4)
          break;
        t3 = H.Primitives_stringFromCharCode(t3);
        t2._contents += t3;
        this._tokenizer$_next = t1.moveNext$0() ? t1._currentCodePoint : null;
      }
      if (t3 === 46) {
        t1 = t1.moveNext$0() ? t1._currentCodePoint : null;
        this._tokenizer$_next = t1;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (48 <= t1 && t1 <= 57)
          this.tokenizeFraction$0();
        else
          this._tokenizer$_tokens.push(new Y.Token(3, ".", 11));
      } else {
        this._tokenizer$_tokens.push(new Y.Token(6, t2._contents, 0));
        t2._contents = "";
      }
    },
    tokenizeFraction$0: function() {
      var t1, t2, t3, t4;
      t1 = this._sb;
      t1.write$1(H.Primitives_stringFromCharCode(46));
      t2 = this._tokenizer$_iterator;
      while (true) {
        t3 = this._tokenizer$_next;
        if (t3 != null) {
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = 48 <= t3 && t3 <= 57;
        } else
          t4 = false;
        if (!t4)
          break;
        t3 = H.Primitives_stringFromCharCode(t3);
        t1._contents += t3;
        this._tokenizer$_next = t2.moveNext$0() ? t2._currentCodePoint : null;
      }
      this._tokenizer$_tokens.push(new Y.Token(7, t1._contents, 0));
      t1._contents = "";
    }
  },
  ParseException: {
    "^": "Object;message",
    toString$0: function(_) {
      return "ParseException: " + this.message;
    },
    static: {ParseException$: function(message) {
        return new Y.ParseException(message);
      }}
  }
}],
["polymer_expressions.visitor", "package:polymer_expressions/visitor.dart", , S, {
  "^": "",
  Visitor: {
    "^": "Object;",
    visit$1: [function(s) {
      return J.accept$1$x(s, this);
    }, "call$1", "get$visit", 2, 0, 131, 107]
  },
  RecursiveVisitor: {
    "^": "Visitor;",
    visitExpression$1: function(e) {
    },
    visitEmptyExpression$1: function(e) {
      this.visitExpression$1(e);
    },
    visitParenthesizedExpression$1: function(e) {
      e.child.accept$1(0, this);
      this.visitExpression$1(e);
    },
    visitGetter$1: function(i) {
      J.accept$1$x(i.get$receiver(), this);
      this.visitExpression$1(i);
    },
    visitIndex$1: function(i) {
      J.accept$1$x(i.get$receiver(), this);
      J.accept$1$x(i.get$argument(), this);
      this.visitExpression$1(i);
    },
    visitInvoke$1: function(i) {
      var t1;
      J.accept$1$x(i.get$receiver(), this);
      if (i.get$arguments() != null)
        for (t1 = i.get$arguments(), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          J.accept$1$x(t1._current, this);
      this.visitExpression$1(i);
    },
    visitLiteral$1: function(l) {
      this.visitExpression$1(l);
    },
    visitListLiteral$1: function(l) {
      var t1;
      for (t1 = l.get$items(l), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.accept$1$x(t1._current, this);
      this.visitExpression$1(l);
    },
    visitMapLiteral$1: function(l) {
      var t1;
      for (t1 = l.get$entries(l), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.accept$1$x(t1._current, this);
      this.visitExpression$1(l);
    },
    visitMapLiteralEntry$1: function(e) {
      J.accept$1$x(e.get$key(e), this);
      J.accept$1$x(e.get$entryValue(), this);
      this.visitExpression$1(e);
    },
    visitIdentifier$1: function(i) {
      this.visitExpression$1(i);
    },
    visitBinaryOperator$1: function(o) {
      J.accept$1$x(o.get$left(o), this);
      J.accept$1$x(o.get$right(o), this);
      this.visitExpression$1(o);
    },
    visitUnaryOperator$1: function(o) {
      J.accept$1$x(o.get$child(), this);
      this.visitExpression$1(o);
    },
    visitTernaryOperator$1: function(o) {
      J.accept$1$x(o.get$condition(), this);
      J.accept$1$x(o.get$trueExpr(), this);
      J.accept$1$x(o.get$falseExpr(), this);
      this.visitExpression$1(o);
    },
    visitInExpression$1: function(c) {
      J.accept$1$x(c.get$left(c), this);
      J.accept$1$x(c.get$right(c), this);
      this.visitExpression$1(c);
    }
  }
}],
["search", "package:dartdoc_viewer/search.dart", , B, {
  "^": "",
  _nullFilter: [function(_) {
    return true;
  }, "call$1", "_nullFilter$closure", 2, 0, 46],
  _splitQueryTerms: function(query) {
    var queryList, splitDots, t1, split, t2;
    queryList = H.setRuntimeTypeInfo(new H.MappedListIterable(J.trim$0$s(query).toLowerCase().split(" "), new B._splitQueryTerms_closure()), [null, null]).toList$0(0);
    splitDots = H.setRuntimeTypeInfo(new H.MappedListIterable(queryList, new B._splitQueryTerms_closure0()), [null, null]).toList$0(0);
    for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(splitDots, splitDots.length, 0, null), [H.getTypeArgumentByIndex(splitDots, 0)]); t1.moveNext$0();) {
      split = t1._current;
      t2 = J.getInterceptor$asx(split);
      if (J.$gt$n(t2.get$length(split), 1)) {
        C.JSArray_methods.addAll$1(queryList, t2.where$1(split, new B._splitQueryTerms_closure1()));
        C.JSArray_methods.add$1(queryList, t2.join$1(split, "-"));
      }
    }
    return queryList;
  },
  lookupSearchResults: function(index, query, maxResults, filter) {
    var t1, stopwatch, scoredResults, resultSet, queryList, t2, key, lower, withoutDom, t3, r, t4, $location, t5, qualifiedNameParts;
    t1 = J.getInterceptor(query);
    if (t1.$eq(query, ""))
      return [];
    stopwatch = new P.Stopwatch(1000000, null, null);
    stopwatch.start$0(0);
    scoredResults = H.setRuntimeTypeInfo([], [B.SearchResult]);
    resultSet = H.setRuntimeTypeInfo([], [B.Hit]);
    queryList = B._splitQueryTerms(query);
    for (t2 = J.get$iterator$ax(index._search0$_map.get$keys()); t2.moveNext$0();) {
      key = t2.get$current();
      lower = J.toLowerCase$0$s(key);
      if (H.IterableMixinWorkaround_any(queryList, new B.lookupSearchResults_closure(lower))) {
        if (H.stringContainsUnchecked(lower, ".dom.", 0))
          withoutDom = H.stringReplaceFirstUnchecked(lower, ".dom", "");
        else
          withoutDom = lower;
        resultSet.push(new B.Hit(key, withoutDom, J.$index$asx(index._search0$_map, key)));
      }
    }
    for (t1 = J.get$iterator$ax(J.$gt$n(t1.get$length(query), 4) ? resultSet : H.SubListIterable$(resultSet, 0, 1000, null)), t2 = stopwatch.frequency; t1.moveNext$0();) {
      t3 = {};
      r = t1._current;
      if (C.JSNumber_methods.$tdiv(stopwatch.get$elapsedTicks() * 1000, t2) > 500)
        break;
      t3.score_0 = 0;
      t3.splitDotQueries_1 = [];
      H.IterableMixinWorkaround_forEach(queryList, new B.lookupSearchResults_closure0(t3, r));
      C.JSArray_methods.addAll$1(queryList, t3.splitDotQueries_1);
      t4 = J.getInterceptor$x(r);
      $location = new Y.DocsLocation(null, null, null, null, null);
      $location._extractPieces$1(t4.get$lower(r));
      t5 = new H.SubListIterable($location.get$componentNames(), 1, null);
      t5.$builtinTypeInfo = [null];
      qualifiedNameParts = t5.toList$0(0);
      if (filter.call$1($location) !== true)
        t3.score_0 -= 500;
      if (J.$eq(t4.get$name(r), query))
        t3.score_0 += 1000;
      if (!J.$eq(t4.get$name(r), t4.get$lower(r)) && J.contains$1$asx(t4.get$name(r), query) === true)
        t3.score_0 += 150;
      H.IterableMixinWorkaround_forEach(queryList, new B.lookupSearchResults_closure1(t3, r, $location, qualifiedNameParts));
      scoredResults.push(new B.SearchResult(t4.get$name(r), t4.get$type(r), t3.score_0, null));
    }
    H.IterableMixinWorkaround_sortList(scoredResults, null);
    if (scoredResults.length > maxResults)
      scoredResults = H.SubListIterable$(scoredResults, 0, maxResults, null).toList$0(0);
    B._updatePositions(scoredResults);
    return scoredResults;
  },
  _updatePositions: function(list) {
    var i;
    for (i = 0; i < list.length; ++i)
      J.set$position$x(list[i], i);
  },
  SearchResult: {
    "^": "Object;element<,type>,score<,position*",
    score$1: function(arg0) {
      return this.score.call$1(arg0);
    },
    get$url: function(_) {
      var t1, $location, sub, t2, t3, t4, newLocation;
      if (!C.JSArray_methods.contains$1(C.List_Ss1, this.type))
        return this.element;
      t1 = this.element;
      $location = new Y.DocsLocation(null, null, null, null, null);
      $location._extractPieces$1(t1);
      sub = $location.subMemberName;
      if (sub == null)
        sub = $location.memberName;
      if (sub == null)
        return t1;
      t1 = $location.get$componentNames();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
      t1 = Y.DocsLocation$fromList(t1);
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      newLocation = new Y.DocsLocation(null, null, null, null, null);
      newLocation._extractPieces$1(C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], ""));
      newLocation.anchor = C.JSString_methods.$add("id_", sub);
      t1 = newLocation.get$packagePlus();
      t2 = newLocation.libraryName;
      if (t2 == null)
        t2 = "";
      t3 = newLocation.memberName;
      t3 = t3 == null ? "" : "." + H.S(t3);
      t4 = newLocation.subMemberName;
      return C.JSArray_methods.join$1([t1, t2, t3, t4 == null ? "" : "." + H.S(t4)], "") + newLocation.get$anchorPlus();
    },
    compareTo$1: function(_, other) {
      return J.compareTo$1$ns(other.get$score(), this.score);
    },
    toString$0: function(_) {
      return "SearchResult(" + H.S(this.element) + ", " + H.S(this.type) + ", " + H.S(this.score) + ")";
    },
    $isSearchResult: true,
    static: {"^": "SearchResult_typesThatLinkWithinAParentPage"}
  },
  Hit: {
    "^": "Object;name>,lower>,type>",
    toString$0: function(_) {
      return "Hit(" + H.S(this.name) + ")";
    },
    score$1: [function(increase) {
      var t1 = C.Map_ggES6.$index(0, this.type);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return C.JSNumber_methods.$tdiv(increase, t1);
    }, "call$1", "get$score", 2, 0, 132],
    $isHit: true
  },
  _splitQueryTerms_closure: {
    "^": "Closure0:30;",
    call$1: [function(x) {
      return J.replaceAll$2$s(x, ":", "-");
    }, "call$1", null, 2, 0, null, 133, "call"],
    $isFunction: true
  },
  _splitQueryTerms_closure0: {
    "^": "Closure0:30;",
    call$1: [function(x) {
      return J.split$1$s(x, ".");
    }, "call$1", null, 2, 0, null, 133, "call"],
    $isFunction: true
  },
  _splitQueryTerms_closure1: {
    "^": "Closure0:30;",
    call$1: [function(x) {
      return J.$gt$n(J.get$length$asx(x), 2);
    }, "call$1", null, 2, 0, null, 133, "call"],
    $isFunction: true
  },
  lookupSearchResults_closure: {
    "^": "Closure0:30;lower_1",
    call$1: function(q) {
      return C.JSString_methods.contains$1(this.lower_1, q);
    },
    $isFunction: true
  },
  lookupSearchResults_closure0: {
    "^": "Closure0:30;box_0,r_2",
    call$1: function(q) {
      var t1, t2;
      t1 = J.getInterceptor$asx(q);
      if (t1.contains$1(q, ".") === true && J.endsWith$1$s(J.get$lower$x(this.r_2), q)) {
        t2 = this.box_0;
        t2.score_0 += 100;
        t2.splitDotQueries_1 = t1.split$1(q, ".");
      }
    },
    $isFunction: true
  },
  lookupSearchResults_closure1: {
    "^": "Closure0:30;box_0,r_3,location_4,qualifiedNameParts_5",
    call$1: function(q) {
      var t1, t2, t3, t4, segment, t5, t6, percent;
      t1 = this.qualifiedNameParts_5;
      if (J.$eq(C.JSArray_methods.get$last(t1), q)) {
        t2 = this.box_0;
        t3 = t2.score_0;
        t4 = this.r_3.score$1(1000);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2.score_0 = t3 + t4;
      } else if (J.startsWith$1$s(C.JSArray_methods.get$last(t1), q)) {
        t2 = this.box_0;
        t3 = t2.score_0;
        t4 = this.r_3.score$1(750);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2.score_0 = t3 + t4;
      } else if (J.contains$1$asx(C.JSArray_methods.get$last(t1), q) === true) {
        t2 = this.box_0;
        t3 = t2.score_0;
        t4 = this.r_3.score$1(500);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t2.score_0 = t3 + t4;
      }
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]), t2 = J.getInterceptor$asx(q), t3 = this.box_0, t4 = this.r_3; t1.moveNext$0();) {
        segment = t1._current;
        t5 = J.getInterceptor(segment);
        if (t5.$eq(segment, q)) {
          t5 = t3.score_0;
          t6 = t4.score$1(300);
          if (typeof t6 !== "number")
            return H.iae(t6);
          t3.score_0 = t5 + t6;
        } else if (t5.startsWith$1(segment, q)) {
          percent = J.$div$n(t2.get$length(q), t5.get$length(segment));
          t5 = t3.score_0;
          t6 = t4.score$1(300 * percent);
          if (typeof t6 !== "number")
            return H.iae(t6);
          t3.score_0 = t5 + t6;
        } else if (t5.contains$1(segment, q) === true) {
          percent = J.$div$n(t2.get$length(q), t5.get$length(segment));
          t5 = t3.score_0;
          t6 = t4.score$1(150 * percent);
          if (typeof t6 !== "number")
            return H.iae(t6);
          t3.score_0 = t5 + t6;
        }
      }
      if (J.startsWith$1$s(this.location_4.libraryName, "dart"))
        t3.score_0 += 50;
    },
    $isFunction: true
  },
  SearchIndex: {
    "^": "Object;_search0$_map,_onLoad",
    get$map: function(_) {
      return this._search0$_map;
    },
    map$1: function($receiver, arg0) {
      return this.get$map(this).call$1(arg0);
    },
    set$map: function(_, value) {
      var t1 = this._onLoad;
      if (t1 == null)
        throw H.wrapException(P.StateError$("cannot initialize SearchIndex twice."));
      this._search0$_map = value;
      for (t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        t1._current.call$0();
      this._onLoad = null;
    },
    onLoad$1: function(_, callback) {
      var t1 = this._onLoad;
      if (t1 == null)
        return;
      t1.push(callback);
    }
  }
}],
["shared", "package:dartdoc_viewer/shared.dart", , F, {
  "^": "",
  _DefaultSyntaxWithEvents: {
    "^": "BindingDelegate;",
    prepareBinding$3: function(path, $name, node) {
      if (J.startsWith$1$s($name, "on-"))
        return A.Polymer_prepareBinding(path, $name, node);
      return O.BindingDelegate.prototype.prepareBinding$3.call(this, path, $name, node);
    }
  }
}],
["smoke", "package:smoke/smoke.dart", , A, {
  "^": "",
  QueryOptions: {
    "^": "Object;includeFields,includeProperties,includeInherited,includeUpTo,excludeFinal,includeMethods,withAnnotations,matches",
    matches$1: function($receiver, arg0) {
      return this.matches.call$1(arg0);
    },
    toString$0: function(_) {
      var t1 = P.StringBuffer$("");
      t1.write$1("(options:");
      t1.write$1(this.includeFields ? "fields " : "");
      t1.write$1(this.includeProperties ? "properties " : "");
      t1.write$1(this.includeMethods ? "methods " : "");
      t1.write$1(this.includeInherited ? "inherited " : "_");
      t1.write$1(this.excludeFinal ? "no finals " : "");
      t1.write$1("annotations: " + H.S(this.withAnnotations));
      t1.write$1(this.matches != null ? "with matcher" : "");
      t1.write$1(")");
      return t1._contents;
    }
  },
  Declaration: {
    "^": "Object;name>,kind>,isFinal>,type>,isStatic<,annotations>",
    get$isField: function() {
      return this.kind === C.DeclarationKind_0;
    },
    get$isProperty: function() {
      return this.kind === C.DeclarationKind_1;
    },
    get$isMethod: function(_) {
      return this.kind === C.DeclarationKind_2;
    },
    get$hashCode: function(_) {
      var t1 = this.name;
      return t1.get$hashCode(t1);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor(other).$isDeclaration && this.name.$eq(0, other.name) && this.kind === other.kind && this.isFinal === other.isFinal && this.type.$eq(0, other.type) && this.isStatic === other.isStatic && X.compareLists(this.annotations, other.annotations, false);
    },
    toString$0: function(_) {
      var t1 = P.StringBuffer$("");
      t1.write$1("(declaration ");
      t1.write$1(this.name);
      t1.write$1(this.kind === C.DeclarationKind_1 ? " (property) " : " (method) ");
      t1.write$1(this.isFinal ? "final " : "");
      t1.write$1(this.isStatic ? "static " : "");
      t1.write$1(this.annotations);
      t1.write$1(")");
      return t1._contents;
    },
    $isDeclaration: true
  },
  DeclarationKind: {
    "^": "Object;kind>"
  }
}],
["smoke.src.common", "package:smoke/src/common.dart", , X, {
  "^": "",
  adjustList: function(input, min, max) {
    var t1, t2;
    t1 = input.length;
    if (t1 < min) {
      t2 = Array(min);
      t2.fixed$length = init;
      H.IterableMixinWorkaround_setRangeList(t2, 0, t1, input, 0);
      return t2;
    }
    if (t1 > max) {
      t1 = Array(max);
      t1.fixed$length = init;
      H.IterableMixinWorkaround_setRangeList(t1, 0, max, input, 0);
      return t1;
    }
    return input;
  },
  matchesAnnotation: function(metadata, queryAnnotations) {
    var t1, meta, t2, t3, queryMeta, t4;
    for (t1 = J.get$iterator$ax(metadata); t1.moveNext$0();) {
      meta = t1.get$current();
      queryAnnotations.length;
      t2 = new H.ListIterator(queryAnnotations, 1, 0, null);
      t2.$builtinTypeInfo = [H.getTypeArgumentByIndex(queryAnnotations, 0)];
      t3 = J.getInterceptor(meta);
      for (; t2.moveNext$0();) {
        queryMeta = t2._current;
        if (t3.$eq(meta, queryMeta))
          return true;
        if (!!J.getInterceptor(queryMeta).$isType) {
          t4 = t3.get$runtimeType(meta);
          t4 = $.get$typeInspector().isSubclassOf$2(t4, queryMeta);
        } else
          t4 = false;
        if (t4)
          return true;
      }
    }
    return false;
  },
  minArgs: function(f) {
    var t1, t2;
    t1 = H.getDynamicRuntimeType();
    t2 = H.buildFunctionType(t1)._isTest$1(f);
    if (t2)
      return 0;
    t2 = H.buildFunctionType(t1, [t1])._isTest$1(f);
    if (t2)
      return 1;
    t2 = H.buildFunctionType(t1, [t1, t1])._isTest$1(f);
    if (t2)
      return 2;
    t1 = H.buildFunctionType(t1, [t1, t1, t1])._isTest$1(f);
    if (t1)
      return 3;
    return 4;
  },
  maxArgs: function(f) {
    var t1, t2;
    t1 = H.getDynamicRuntimeType();
    t2 = H.buildFunctionType(t1, [t1, t1, t1])._isTest$1(f);
    if (t2)
      return 3;
    t2 = H.buildFunctionType(t1, [t1, t1])._isTest$1(f);
    if (t2)
      return 2;
    t2 = H.buildFunctionType(t1, [t1])._isTest$1(f);
    if (t2)
      return 1;
    t1 = H.buildFunctionType(t1)._isTest$1(f);
    if (t1)
      return 0;
    return -1;
  },
  compareLists: function(a, b, unordered) {
    var t1, t2, bSet, i, t3;
    t1 = a.length;
    t2 = b.length;
    if (t1 !== t2)
      return false;
    if (unordered) {
      bSet = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
      bSet.addAll$1(0, b);
      for (i = 0; i < a.length; ++i)
        if (!bSet.contains$1(0, a[i]))
          return false;
    } else
      for (i = 0; i < t1; ++i) {
        t3 = a[i];
        if (i >= t2)
          return H.ioore(b, i);
        if (t3 !== b[i])
          return false;
      }
    return true;
  }
}],
["smoke.src.implementation", "package:smoke/src/implementation.dart", , D, {
  "^": "",
  throwNotConfiguredError: function() {
    throw H.wrapException(P.Exception_Exception("The \"smoke\" library has not been configured. Make sure you import and configure one of the implementations (package:smoke/mirrors.dart or package:smoke/static.dart)."));
  }
}],
["smoke.static", "package:smoke/static.dart", , O, {
  "^": "",
  StaticConfiguration: {
    "^": "Object;getters,setters,parents,declarations,staticMethods,names,checkedMode"
  },
  GeneratedObjectAccessorService: {
    "^": "Object;_getters,_setters,_staticMethods",
    read$2: function(object, $name) {
      var getter = this._getters.$index(0, $name);
      if (getter == null)
        throw H.wrapException(O.MissingCodeException$("getter \"" + H.S($name) + "\" in " + H.S(object)));
      return getter.call$1(object);
    },
    write$3: function(object, $name, value) {
      var setter = this._setters.$index(0, $name);
      if (setter == null)
        throw H.wrapException(O.MissingCodeException$("setter \"" + H.S($name) + "\" in " + H.S(object)));
      setter.call$2(object, value);
    },
    invoke$5$adjust$namedArgs: function(object, $name, args, adjust, namedArgs) {
      var method, tentativeError, getter, min, max, t1, exception;
      method = null;
      if (!!J.getInterceptor(object).$isType) {
        this._staticMethods.$index(0, object);
        method = null;
      } else {
        getter = this._getters.$index(0, $name);
        method = getter == null ? null : getter.call$1(object);
      }
      if (method == null)
        throw H.wrapException(O.MissingCodeException$("method \"" + H.S($name) + "\" in " + H.S(object)));
      tentativeError = null;
      if (adjust) {
        min = X.minArgs(method);
        if (min > 3) {
          tentativeError = "we tried to adjust the arguments for calling \"" + H.S($name) + "\", but we couldn't determine the exact number of arguments it expects (it is more than 3).";
          args = X.adjustList(args, min, P.max(min, J.get$length$asx(args)));
        } else {
          max = X.maxArgs(method);
          t1 = max >= 0 ? max : J.get$length$asx(args);
          args = X.adjustList(args, min, t1);
        }
      }
      try {
        t1 = H.Primitives_applyFunction(method, args, P.Function__toMangledNames(null));
        return t1;
      } catch (exception) {
        if (!!J.getInterceptor(H.unwrapException(exception)).$isNoSuchMethodError) {
          if (tentativeError != null)
            P.print(tentativeError);
          throw exception;
        } else
          throw exception;
      }

    }
  },
  GeneratedTypeInspectorService: {
    "^": "Object;_parents,_declarations,_checkedMode",
    isSubclassOf$2: function(type, supertype) {
      var t1, parentType, t2;
      if (type.$eq(0, supertype) || supertype.$eq(0, C.Type_HqF))
        return true;
      for (t1 = this._parents; !J.$eq(type, C.Type_HqF); type = parentType) {
        parentType = t1.$index(0, type);
        t2 = J.getInterceptor(parentType);
        if (t2.$eq(parentType, supertype))
          return true;
        if (parentType == null) {
          if (!this._checkedMode)
            return false;
          throw H.wrapException(O.MissingCodeException$("superclass of \"" + H.S(type) + "\" (" + t2.toString$0(parentType) + ")"));
        }
      }
      return false;
    },
    hasInstanceMethod$2: function(type, $name) {
      var decl = this._findDeclaration$2(type, $name);
      return decl != null && decl.kind === C.DeclarationKind_2 && !decl.isStatic;
    },
    hasStaticMethod$2: function(type, $name) {
      var map, decl;
      map = this._declarations.$index(0, type);
      if (map == null) {
        if (!this._checkedMode)
          return false;
        throw H.wrapException(O.MissingCodeException$("declarations for " + H.S(type)));
      }
      decl = map.$index(0, $name);
      return decl != null && decl.kind === C.DeclarationKind_2 && decl.isStatic;
    },
    getDeclaration$2: function(type, $name) {
      var decl = this._findDeclaration$2(type, $name);
      if (decl == null) {
        if (!this._checkedMode)
          return;
        throw H.wrapException(O.MissingCodeException$("declaration for " + H.S(type) + "." + H.S($name)));
      }
      return decl;
    },
    query$2: function(_, type, options) {
      var result, superclass, map, t1, decl, t2;
      result = [];
      if (options.includeInherited) {
        superclass = this._parents.$index(0, type);
        if (superclass == null) {
          if (this._checkedMode)
            throw H.wrapException(O.MissingCodeException$("superclass of \"" + H.S(type) + "\""));
        } else if (!superclass.$eq(0, options.includeUpTo))
          result = this.query$2(0, superclass, options);
      }
      map = this._declarations.$index(0, type);
      if (map == null) {
        if (!this._checkedMode)
          return result;
        throw H.wrapException(O.MissingCodeException$("declarations for " + H.S(type)));
      }
      for (t1 = J.get$iterator$ax(map.get$values(map)); t1.moveNext$0();) {
        decl = t1.get$current();
        if (!options.includeFields && decl.get$isField())
          continue;
        if (!options.includeProperties && decl.get$isProperty())
          continue;
        if (options.excludeFinal && J.get$isFinal$x(decl) === true)
          continue;
        if (!options.includeMethods && J.get$isMethod$x(decl) === true)
          continue;
        if (options.matches != null && options.matches$1(0, J.get$name$x(decl)) !== true)
          continue;
        t2 = options.withAnnotations;
        if (t2 != null && !X.matchesAnnotation(J.get$annotations$x(decl), t2))
          continue;
        result.push(decl);
      }
      return result;
    },
    _findDeclaration$2: function(type, $name) {
      var t1, t2, declarations, declaration, parentType;
      for (t1 = this._parents, t2 = this._declarations; !J.$eq(type, C.Type_HqF); type = parentType) {
        declarations = t2.$index(0, type);
        if (declarations != null) {
          declaration = declarations.$index(0, $name);
          if (declaration != null)
            return declaration;
        }
        parentType = t1.$index(0, type);
        if (parentType == null) {
          if (!this._checkedMode)
            return;
          throw H.wrapException(O.MissingCodeException$("superclass of \"" + H.S(type) + "\""));
        }
      }
      return;
    }
  },
  GeneratedSymbolConverterService: {
    "^": "Object;_names,_symbols",
    GeneratedSymbolConverterService$1: function(configuration) {
      this._names.forEach$1(0, new O.GeneratedSymbolConverterService_closure(this));
    },
    static: {GeneratedSymbolConverterService$: function(configuration) {
        var t1 = new O.GeneratedSymbolConverterService(configuration.names, P.LinkedHashMap_LinkedHashMap$_empty(null, null));
        t1.GeneratedSymbolConverterService$1(configuration);
        return t1;
      }}
  },
  GeneratedSymbolConverterService_closure: {
    "^": "Closure0:58;this_0",
    call$2: function(k, v) {
      this.this_0._symbols.$indexSet(0, v, k);
    },
    $isFunction: true
  },
  MissingCodeException: {
    "^": "Object;description",
    toString$0: function(_) {
      return "Missing " + this.description + ". Code generation for the smoke package seems incomplete.";
    },
    static: {MissingCodeException$: function(description) {
        return new O.MissingCodeException(description);
      }}
  }
}],
["template_binding", "package:template_binding/template_binding.dart", , M, {
  "^": "",
  _updateAttribute: function(node, $name, conditional, value) {
    var t1, t2;
    if (conditional) {
      t1 = null != value && false !== value;
      t2 = J.getInterceptor$x(node);
      if (t1)
        t2.get$attributes(node)._html$_element.setAttribute($name, "");
      else
        t2.get$attributes(node).remove$1(0, $name);
    } else {
      t1 = J.get$attributes$x(node);
      t2 = value == null ? "" : H.S(value);
      t1._html$_element.setAttribute($name, t2);
    }
  },
  _createInstanceBindingMap: function(node, delegate) {
    var map, t1, c, children, index, childMap;
    map = M._getBindings(node, delegate);
    if (map == null)
      map = new M._InstanceBindingMap([], null, null);
    for (t1 = J.getInterceptor$x(node), c = t1.get$firstChild(node), children = null, index = 0; c != null; c = c.nextSibling, ++index) {
      childMap = M._createInstanceBindingMap(c, delegate);
      if (childMap == null)
        continue;
      if (children == null) {
        children = Array(t1.get$nodes(node)._this.childNodes.length);
        children.fixed$length = init;
      }
      if (index >= children.length)
        return H.ioore(children, index);
      children[index] = childMap;
    }
    map.children = children;
    return map;
  },
  _cloneAndBindInstance: function(node, $parent, stagingDocument, bindings, model, delegate, instanceBindings, instanceRecord) {
    var clone, c, t1, i;
    clone = $parent.appendChild(J.importNode$2$x(stagingDocument, node, false));
    for (c = node.firstChild, t1 = bindings != null, i = 0; c != null; c = c.nextSibling, ++i)
      M._cloneAndBindInstance(c, clone, stagingDocument, t1 ? bindings.getChild$1(i) : null, model, delegate, instanceBindings, null);
    if (bindings.get$isTemplate()) {
      M.nodeBindFallback(clone)._decorate$1(node);
      if (delegate != null)
        M.nodeBindFallback(clone).set$bindingDelegate(delegate);
    }
    M._processBindings(clone, bindings, model, instanceBindings);
    return clone;
  },
  _getTreeScope: function(node) {
    var $parent, t1, values, creator;
    for (; true;) {
      $parent = J.get$parentNode$x(node);
      if ($parent != null)
        node = $parent;
      else {
        t1 = $.get$_templateCreator();
        t1.toString;
        values = H.Primitives_getProperty(node, "expando$values");
        creator = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
        if (creator == null)
          break;
        node = creator;
      }
    }
    t1 = J.getInterceptor(node);
    if (!!t1.$isDocument || !!t1.$isShadowRoot || !!t1.$isSvgSvgElement)
      return node;
    return;
  },
  _getInstanceRoot: function(node) {
    var t1;
    for (; t1 = J.getInterceptor$x(node), t1.get$parentNode(node) != null;)
      node = t1.get$parentNode(node);
    return $.get$_templateCreator().$index(0, node) != null ? node : null;
  },
  _getDelegateFactory: function($name, node, delegate) {
    if (delegate == null)
      return;
    return new M._getDelegateFactory_closure($name, node, delegate);
  },
  _getBindings: function(node, delegate) {
    var t1, tokens;
    t1 = J.getInterceptor(node);
    if (!!t1.$isElement)
      return M._parseAttributeBindings(node, delegate);
    if (!!t1.$isText) {
      tokens = S.MustacheTokens_parse(node.textContent, M._getDelegateFactory("text", node, delegate));
      if (tokens != null)
        return new M._InstanceBindingMap(["text", tokens], null, null);
    }
    return;
  },
  _parseWithDefault: function(element, $name, delegate) {
    var v = element.getAttribute($name);
    if (v === "")
      v = "{{}}";
    return S.MustacheTokens_parse(v, M._getDelegateFactory($name, element, delegate));
  },
  _parseAttributeBindings: function(element, delegate) {
    var t1, isTemplateNode, t2, bindings, result, t3;
    t1 = {};
    t1.bindings_0 = null;
    isTemplateNode = M.isSemanticTemplate(element);
    new W._ElementAttributeMap(element).forEach$1(0, new M._parseAttributeBindings_closure(t1, element, delegate, isTemplateNode));
    if (isTemplateNode) {
      t2 = t1.bindings_0;
      if (t2 == null) {
        bindings = [];
        t1.bindings_0 = bindings;
        t1 = bindings;
      } else
        t1 = t2;
      result = new M._TemplateBindingMap(null, null, null, t1, null, null);
      t1 = M._parseWithDefault(element, "if", delegate);
      result._if = t1;
      t2 = M._parseWithDefault(element, "bind", delegate);
      result._bind = t2;
      t3 = M._parseWithDefault(element, "repeat", delegate);
      result._repeat = t3;
      if (t1 != null && t2 == null && t3 == null)
        result._bind = S.MustacheTokens_parse("{{}}", M._getDelegateFactory("bind", element, delegate));
      return result;
    }
    t1 = t1.bindings_0;
    return t1 == null ? null : new M._InstanceBindingMap(t1, null, null);
  },
  _processOneTimeBinding: function($name, tokens, node, model) {
    var delegateFn, value, t1, t2, values, i, t3;
    if (tokens.get$hasOnePath()) {
      delegateFn = tokens.getPrepareBinding$1(0);
      value = delegateFn != null ? delegateFn.call$3(model, node, true) : tokens.getPath$1(0).getValueFrom$1(model);
      return tokens.get$isSimplePath() ? value : tokens.combinator$1(value);
    }
    t1 = J.getInterceptor$asx(tokens);
    t2 = t1.get$length(tokens);
    if (typeof t2 !== "number")
      return H.iae(t2);
    values = Array(t2);
    values.fixed$length = init;
    t2 = values.length;
    i = 0;
    while (true) {
      t3 = t1.get$length(tokens);
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(i < t3))
        break;
      delegateFn = tokens.getPrepareBinding$1(i);
      t3 = delegateFn != null ? delegateFn.call$3(model, node, false) : tokens.getPath$1(i).getValueFrom$1(model);
      if (i >= t2)
        return H.ioore(values, i);
      values[i] = t3;
      ++i;
    }
    return tokens.combinator$1(values);
  },
  _processBinding: function($name, tokens, node, model) {
    var delegateFn, observer, t1, t2, i, oneTime, value, path;
    if (tokens.get$onlyOneTime())
      return M._processOneTimeBinding($name, tokens, node, model);
    if (tokens.get$hasOnePath()) {
      delegateFn = tokens.getPrepareBinding$1(0);
      if (delegateFn != null)
        observer = delegateFn.call$3(model, node, false);
      else {
        t1 = tokens.getPath$1(0);
        t1 = !!J.getInterceptor(t1).$isPropertyPath ? t1 : L.PropertyPath_PropertyPath(t1);
        t2 = $._Observer__nextBirthId;
        $._Observer__nextBirthId = t2 + 1;
        observer = new L.PathObserver(t1, model, null, t2, null, null, null);
      }
      return tokens.get$isSimplePath() ? observer : new Y.ObserverTransform(observer, tokens.get$combinator(), null, null, null);
    }
    t1 = $._Observer__nextBirthId;
    $._Observer__nextBirthId = t1 + 1;
    observer = new L.CompoundObserver(null, [], t1, null, null, null);
    observer._path_observer$_value = [];
    t1 = J.getInterceptor$asx(tokens);
    i = 0;
    while (true) {
      t2 = t1.get$length(tokens);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(i < t2))
        break;
      c$0: {
        oneTime = tokens.getOneTime$1(i);
        delegateFn = tokens.getPrepareBinding$1(i);
        if (delegateFn != null) {
          value = delegateFn.call$3(model, node, oneTime);
          if (oneTime === true)
            observer.addPath$1(value);
          else {
            if (observer._notifyCallback != null || observer._observed == null)
              H.throwExpression(P.StateError$("Cannot add observers once started."));
            J.open$1$x(value, observer.get$_deliver());
            t2 = observer._observed;
            t2.push(C.C__ObserverSentinel);
            t2.push(value);
          }
          break c$0;
        }
        path = tokens.getPath$1(i);
        if (oneTime === true)
          observer.addPath$1(path.getValueFrom$1(model));
        else
          observer.addPath$2(model, path);
      }
      ++i;
    }
    return new Y.ObserverTransform(observer, tokens.get$combinator(), null, null, null);
  },
  _processBindings: function(node, map, model, instanceBindings) {
    var t1, bindings, t2, t3, t4, i, $name, tokens, value, t5, binding, templateExt, iter;
    t1 = J.getInterceptor$x(map);
    bindings = t1.get$bindings(map);
    for (t2 = J.getInterceptor$asx(bindings), t3 = !!J.getInterceptor(node).$isNodeBindExtension, t4 = instanceBindings != null, i = 0; i < t2.get$length(bindings); i += 2) {
      $name = t2.$index(bindings, i);
      tokens = t2.$index(bindings, i + 1);
      value = M._processBinding($name, tokens, node, model);
      t5 = t3 ? node : M.nodeBindFallback(node);
      binding = J.bind$3$oneTime$x(t5, $name, value, tokens.get$onlyOneTime());
      if (binding != null && t4)
        instanceBindings.push(binding);
    }
    if (!t1.$is_TemplateBindingMap)
      return;
    templateExt = M.nodeBindFallback(node);
    templateExt.set$_model(model);
    iter = templateExt._processBindingDirectives$1(map);
    if (iter != null && t4)
      instanceBindings.push(iter);
  },
  nodeBindFallback: function(node) {
    var t1, values, extension, t2;
    t1 = $.get$_expando();
    t1.toString;
    values = H.Primitives_getProperty(node, "expando$values");
    extension = values == null ? null : H.Primitives_getProperty(values, t1._getKey$0());
    if (extension != null)
      return extension;
    t2 = J.getInterceptor(node);
    if (!!t2.$isInputElement)
      extension = new M._InputElementExtension(node, null, null);
    else if (!!t2.$isSelectElement)
      extension = new M._SelectElementExtension(node, null, null);
    else if (!!t2.$isTextAreaElement)
      extension = new M._TextAreaElementExtension(node, null, null);
    else if (!!t2.$isElement) {
      if (!(node.tagName === "TEMPLATE" && node.namespaceURI === "http://www.w3.org/1999/xhtml"))
        if (!(t2.get$attributes(node)._html$_element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t2.get$localName(node)) === true))
          t2 = node.tagName === "template" && t2.get$namespaceUri(node) === "http://www.w3.org/2000/svg";
        else
          t2 = true;
      else
        t2 = true;
      extension = t2 ? new M.TemplateBindExtension(null, null, null, false, null, null, null, null, null, node, null, null) : new M._ElementExtension(node, null, null);
    } else
      extension = !!t2.$isText ? new M._TextExtension(node, null, null) : new M.NodeBindExtension(node, null, null);
    t1.$indexSet(0, node, extension);
    return extension;
  },
  isSemanticTemplate: function(n) {
    var t1 = J.getInterceptor(n);
    if (!!t1.$isElement)
      if (!(n.tagName === "TEMPLATE" && n.namespaceURI === "http://www.w3.org/1999/xhtml"))
        if (!(t1.get$attributes(n)._html$_element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t1.get$localName(n)) === true))
          t1 = n.tagName === "template" && t1.get$namespaceUri(n) === "http://www.w3.org/2000/svg";
        else
          t1 = true;
      else
        t1 = true;
    else
      t1 = false;
    return t1;
  },
  _ElementExtension: {
    "^": "NodeBindExtension;_template_binding$_node,_bindings,_templateInstance",
    bind$3$oneTime: function(_, $name, value, oneTime) {
      var t1, node, t2, t3, t4, conditional;
      t1 = {};
      t1.name_0 = $name;
      J.unbind$1$x(this.get$_template_binding$_self(), t1.name_0);
      node = this.get$_template_binding$_node();
      t2 = J.getInterceptor(node);
      t3 = !!t2.$isOptionElement && J.$eq(t1.name_0, "value");
      t4 = t1.name_0;
      if (t3) {
        new W._ElementAttributeMap(node).remove$1(0, t4);
        if (oneTime)
          return this._updateOption$1(value);
        t2 = this.get$_updateOption();
        t2.call$1(J.open$1$x(value, t2));
      } else {
        conditional = J.endsWith$1$s(t4, "?");
        if (conditional) {
          t2.get$attributes(node).remove$1(0, t1.name_0);
          t2 = t1.name_0;
          t3 = J.getInterceptor$asx(t2);
          t1.name_0 = t3.substring$2(t2, 0, J.$sub$n(t3.get$length(t2), 1));
        }
        if (oneTime)
          return M._updateAttribute(this.get$_template_binding$_node(), t1.name_0, conditional, value);
        t2 = new M._ElementExtension_bind_closure(t1, this, conditional);
        t2.call$1(J.open$1$x(value, t2));
      }
      this.get$bindings(this).$indexSet(0, t1.name_0, value);
      return value;
    },
    _updateOption$1: [function(newValue) {
      var node, t1, select, t2, valueBinding, oldValue, selectBinding;
      node = this.get$_template_binding$_node();
      t1 = J.getInterceptor$x(node);
      select = t1.get$parentNode(node);
      t2 = J.getInterceptor(select);
      if (!!t2.$isSelectElement) {
        valueBinding = J.$index$asx(J.get$bindings$x(M.nodeBindFallback(select)), "value");
        if (!!J.getInterceptor(valueBinding).$is_InputBinding) {
          oldValue = select.value;
          selectBinding = valueBinding;
        } else {
          oldValue = null;
          selectBinding = null;
        }
      } else {
        oldValue = null;
        selectBinding = null;
      }
      t1.set$value(node, newValue == null ? "" : H.S(newValue));
      if (selectBinding != null && !J.$eq(t2.get$value(select), oldValue)) {
        t1 = t2.get$value(select);
        J.set$value$x(selectBinding.get$_template_binding$_bindable(), t1);
      }
    }, "call$1", "get$_updateOption", 2, 0, 13, 35]
  },
  _ElementExtension_bind_closure: {
    "^": "Closure0:30;box_0,this_1,conditional_2",
    call$1: [function(x) {
      return M._updateAttribute(this.this_1.get$_template_binding$_node(), this.box_0.name_0, this.conditional_2, x);
    }, "call$1", null, 2, 0, null, 133, "call"],
    $isFunction: true
  },
  _InputBinding: {
    "^": "Bindable;_template_binding$_node<,_eventSub,_template_binding$_bindable<,_propertyName",
    _template_binding$_updateNode$1: [function(newValue) {
      return M._InputBinding__updateProperty(this._template_binding$_node, newValue, this._propertyName);
    }, "call$1", "get$_template_binding$_updateNode", 2, 0, 13, 35],
    _nodeChanged$1: [function(e) {
      var t1, t2, t3, r, checkedBinding;
      switch (this._propertyName) {
        case "value":
          t1 = J.get$value$x(this._template_binding$_node);
          J.set$value$x(this._template_binding$_bindable, t1);
          break;
        case "checked":
          t1 = this._template_binding$_node;
          t2 = J.getInterceptor$x(t1);
          t3 = t2.get$checked(t1);
          J.set$value$x(this._template_binding$_bindable, t3);
          if (!!t2.$isInputElement && J.$eq(t2.get$type(t1), "radio"))
            for (t1 = J.get$iterator$ax(M._InputBinding__getAssociatedRadioButtons(t1)); t1.moveNext$0();) {
              r = t1.get$current();
              checkedBinding = J.$index$asx(J.get$bindings$x(!!J.getInterceptor(r).$isNodeBindExtension ? r : M.nodeBindFallback(r)), "checked");
              if (checkedBinding != null)
                J.set$value$x(checkedBinding, false);
            }
          break;
        case "selectedIndex":
          t1 = J.get$selectedIndex$x(this._template_binding$_node);
          J.set$value$x(this._template_binding$_bindable, t1);
          break;
      }
      O.dirtyCheckObservables();
    }, "call$1", "get$_nodeChanged", 2, 0, 13, 1],
    open$1: function(_, callback) {
      return J.open$1$x(this._template_binding$_bindable, callback);
    },
    get$value: function(_) {
      return J.get$value$x(this._template_binding$_bindable);
    },
    set$value: function(_, newValue) {
      J.set$value$x(this._template_binding$_bindable, newValue);
      return newValue;
    },
    close$0: function(_) {
      var t1 = this._eventSub;
      if (t1 != null) {
        t1.cancel$0();
        this._eventSub = null;
      }
      t1 = this._template_binding$_bindable;
      if (t1 != null) {
        J.close$0$x(t1);
        this._template_binding$_bindable = null;
      }
    },
    $is_InputBinding: true,
    static: {"^": "_InputBinding__checkboxEventType", _InputBinding__updateProperty: function(node, newValue, propertyName) {
        switch (propertyName) {
          case "checked":
            J.set$checked$x(node, null != newValue && false !== newValue);
            return;
          case "selectedIndex":
            J.set$selectedIndex$x(node, M._InputBinding__toInt(newValue));
            return;
          case "value":
            J.set$value$x(node, newValue == null ? "" : H.S(newValue));
            return;
        }
      }, _InputBinding__getStreamForInputType: function(element) {
        var t1 = J.getInterceptor(element);
        if (!!t1.$isOptionElement)
          return H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(element, C.EventStreamProvider_input._eventType, false), [null]);
        switch (t1.get$type(element)) {
          case "checkbox":
            return $.get$_InputBinding__checkboxEventType().forTarget$1(element);
          case "radio":
          case "select-multiple":
          case "select-one":
            return t1.get$onChange(element);
          default:
            return t1.get$onInput(element);
        }
      }, _InputBinding__getAssociatedRadioButtons: function(element) {
        var t1, treeScope, radios;
        t1 = J.getInterceptor$x(element);
        if (t1.get$form(element) != null) {
          t1 = t1.get$form(element);
          t1.toString;
          t1 = new W._ChildNodeListLazy(t1);
          return t1.where$1(t1, new M._InputBinding__getAssociatedRadioButtons_closure(element));
        } else {
          treeScope = M._getTreeScope(element);
          if (treeScope == null)
            return C.List_empty;
          radios = J.querySelectorAll$1$x(treeScope, "input[type=\"radio\"][name=\"" + H.S(t1.get$name(element)) + "\"]");
          return radios.where$1(radios, new M._InputBinding__getAssociatedRadioButtons_closure0(element));
        }
      }, _InputBinding__toInt: function(value) {
        if (typeof value === "string")
          return H.Primitives_parseInt(value, null, new M._InputBinding__toInt_closure());
        return typeof value === "number" && Math.floor(value) === value ? value : 0;
      }}
  },
  closure8: {
    "^": "Closure0:11;",
    call$0: function() {
      var checkbox, t1, fired, t2, $event;
      checkbox = document.createElement("div", null).appendChild(W.InputElement_InputElement(null));
      t1 = J.getInterceptor$x(checkbox);
      t1.set$type(checkbox, "checkbox");
      fired = [];
      t2 = t1.get$onClick(checkbox);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(new M._closure1(fired)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)])._tryResume$0();
      t1 = t1.get$onChange(checkbox);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new M._closure2(fired)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = window;
      $event = document.createEvent("MouseEvent");
      J._initMouseEvent$15$x($event, "click", true, true, t1, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
      checkbox.dispatchEvent($event);
      return fired.length === 1 ? C.EventStreamProvider_change : C.JSArray_methods.get$first(fired);
    },
    $isFunction: true
  },
  "+ closure8": 0,
  _closure1: {
    "^": "Closure0:30;fired_0",
    call$1: [function(e) {
      this.fired_0.push(C.EventStreamProvider_click);
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  _closure2: {
    "^": "Closure0:30;fired_1",
    call$1: [function(e) {
      this.fired_1.push(C.EventStreamProvider_change);
    }, "call$1", null, 2, 0, null, 1, "call"],
    $isFunction: true
  },
  _InputBinding__getAssociatedRadioButtons_closure: {
    "^": "Closure0:30;element_0",
    call$1: function(el) {
      var t1, t2;
      t1 = this.element_0;
      t2 = J.getInterceptor(el);
      if (!t2.$eq(el, t1))
        if (!!t2.$isInputElement)
          if (el.type === "radio") {
            t2 = el.name;
            t1 = J.get$name$x(t1);
            t1 = t2 == null ? t1 == null : t2 === t1;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    $isFunction: true
  },
  _InputBinding__getAssociatedRadioButtons_closure0: {
    "^": "Closure0:30;element_1",
    call$1: function(el) {
      var t1 = J.getInterceptor(el);
      return !t1.$eq(el, this.element_1) && t1.get$form(el) == null;
    },
    $isFunction: true
  },
  _InputBinding__toInt_closure: {
    "^": "Closure0:30;",
    call$1: function(_) {
      return 0;
    },
    $isFunction: true
  },
  _InputElementExtension: {
    "^": "_ElementExtension;_template_binding$_node,_bindings,_templateInstance",
    get$_template_binding$_node: function() {
      return this._template_binding$_node;
    },
    bind$3$oneTime: function(_, $name, value, oneTime) {
      var t1, t2, t3, t4;
      t1 = J.getInterceptor($name);
      if (!t1.$eq($name, "value") && !t1.$eq($name, "checked"))
        return M._ElementExtension.prototype.bind$3$oneTime.call(this, this, $name, value, oneTime);
      J.get$attributes$x(this._template_binding$_node).remove$1(0, $name);
      if (oneTime) {
        M._InputBinding__updateProperty(this._template_binding$_node, value, $name);
        return;
      }
      J.unbind$1$x(!!J.getInterceptor(this.get$_template_binding$_node()).$isNodeBindExtension ? this.get$_template_binding$_node() : this, $name);
      t1 = this.get$bindings(this);
      t2 = this._template_binding$_node;
      t3 = new M._InputBinding(t2, null, value, $name);
      t3._eventSub = M._InputBinding__getStreamForInputType(t2).listen$1(t3.get$_nodeChanged());
      t4 = t3.get$_template_binding$_updateNode();
      M._InputBinding__updateProperty(t2, J.open$1$x(t3._template_binding$_bindable, t4), $name);
      t1.$indexSet(0, $name, t3);
      return t3;
    }
  },
  _InstanceBindingMap: {
    "^": "Object;bindings>,children>,content>",
    get$isTemplate: function() {
      return false;
    },
    getChild$1: function(index) {
      var t1 = this.children;
      if (t1 == null || index >= t1.length)
        return;
      if (index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }
  },
  _TemplateBindingMap: {
    "^": "_InstanceBindingMap;_if,_bind,_repeat,bindings,children,content",
    get$isTemplate: function() {
      return true;
    },
    $is_TemplateBindingMap: true
  },
  NodeBindExtension: {
    "^": "Object;_template_binding$_node<,_bindings,_templateInstance?",
    bind$3$oneTime: function(_, $name, value, oneTime) {
      var t1;
      window;
      t1 = "Unhandled binding to Node: " + H.Primitives_objectToString(this) + " " + H.S($name) + " " + H.S(value) + " " + oneTime;
      if (typeof console != "undefined")
        console.error(t1);
      return;
    },
    unbind$1: function(_, $name) {
      var binding;
      if (this._bindings == null)
        return;
      binding = this.get$bindings(this).remove$1(0, $name);
      if (binding != null)
        J.close$0$x(binding);
    },
    unbindAll$0: function(_) {
      var t1, binding;
      if (this._bindings == null)
        return;
      for (t1 = this.get$bindings(this), t1 = t1.get$values(t1), t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "IterableBase", 0)), t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, t1.length, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        binding = t1._current;
        if (binding != null)
          J.close$0$x(binding);
      }
      this._bindings = null;
    },
    get$bindings: function(_) {
      var t1 = this._bindings;
      if (t1 == null) {
        t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, A.Bindable);
        this._bindings = t1;
      }
      return t1;
    },
    get$_template_binding$_self: function() {
      return !!J.getInterceptor(this.get$_template_binding$_node()).$isNodeBindExtension ? this.get$_template_binding$_node() : this;
    },
    $isNodeBindExtension: true
  },
  TemplateInstance: {
    "^": "Object;model,_firstNode,_lastNode"
  },
  _SelectElementExtension: {
    "^": "_ElementExtension;_template_binding$_node,_bindings,_templateInstance",
    get$_template_binding$_node: function() {
      return this._template_binding$_node;
    },
    bind$3$oneTime: function(_, $name, value, oneTime) {
      var t1, t2, t3, t4;
      if (J.$eq($name, "selectedindex"))
        $name = "selectedIndex";
      t1 = J.getInterceptor($name);
      if (!t1.$eq($name, "selectedIndex") && !t1.$eq($name, "value"))
        return M._ElementExtension.prototype.bind$3$oneTime.call(this, this, $name, value, oneTime);
      J.get$attributes$x(this._template_binding$_node).remove$1(0, $name);
      if (oneTime) {
        M._InputBinding__updateProperty(this._template_binding$_node, value, $name);
        return;
      }
      J.unbind$1$x(!!J.getInterceptor(this.get$_template_binding$_node()).$isNodeBindExtension ? this.get$_template_binding$_node() : this, $name);
      t1 = this.get$bindings(this);
      t2 = this._template_binding$_node;
      t3 = new M._InputBinding(t2, null, value, $name);
      t3._eventSub = M._InputBinding__getStreamForInputType(t2).listen$1(t3.get$_nodeChanged());
      t4 = t3.get$_template_binding$_updateNode();
      M._InputBinding__updateProperty(t2, J.open$1$x(t3._template_binding$_bindable, t4), $name);
      t1.$indexSet(0, $name, t3);
      return t3;
    }
  },
  TemplateBindExtension: {
    "^": "_ElementExtension;_model?,_bindingDelegate,_template_binding$_iterator<,_setModelScheduled,_templateInstanceRef?,_content?,_templateIsDecorated?,_stagingDocument,_bindingMap,_template_binding$_node,_bindings,_templateInstance",
    get$_template_binding$_node: function() {
      return this._template_binding$_node;
    },
    get$_template_binding$_self: function() {
      return !!J.getInterceptor(this._template_binding$_node).$isTemplateBindExtension ? this._template_binding$_node : this;
    },
    _processBindingDirectives$1: function(directives) {
      var t1, t2;
      t1 = this._template_binding$_iterator;
      if (t1 != null)
        t1._closeDependencies$0();
      if (directives._if == null && directives._bind == null && directives._repeat == null) {
        t1 = this._template_binding$_iterator;
        if (t1 != null) {
          t1.close$0(0);
          this._template_binding$_iterator = null;
          this.get$bindings(this).remove$1(0, "iterator");
        }
        return;
      }
      if (this._template_binding$_iterator == null) {
        t1 = this.get$bindings(this);
        t2 = new M._TemplateIterator(this, [], [], null, false, null, null, null, null, null, null, null, false, null, null);
        this._template_binding$_iterator = t2;
        t1.$indexSet(0, "iterator", t2);
      }
      this._template_binding$_iterator._updateDependencies$2(directives, this._model);
      return this._template_binding$_iterator;
    },
    createInstance$3: function(model, delegate, instanceBindings) {
      var t1, $content, map, owner, doc, instance, instanceRecord, c, i, childMap;
      t1 = this.get$ref();
      $content = J.get$content$x(!!J.getInterceptor(t1).$isNodeBindExtension ? t1 : M.nodeBindFallback(t1));
      map = this._bindingMap;
      if (map != null) {
        t1 = map.content;
        t1 = t1 == null ? $content != null : t1 !== $content;
      } else
        t1 = true;
      if (t1) {
        map = M._createInstanceBindingMap($content, delegate);
        map.content = $content;
        this._bindingMap = map;
      }
      t1 = this._stagingDocument;
      if (t1 == null) {
        owner = J.get$ownerDocument$x(this._template_binding$_node);
        t1 = $.get$TemplateBindExtension__ownerStagingDocument();
        doc = t1.$index(0, owner);
        if (doc == null) {
          doc = owner.implementation.createHTMLDocument("");
          t1.$indexSet(0, owner, doc);
        }
        this._stagingDocument = doc;
        t1 = doc;
      }
      instance = J.createDocumentFragment$0$x(t1);
      $.get$_templateCreator().$indexSet(0, instance, this._template_binding$_node);
      instanceRecord = new M.TemplateInstance(model, null, null);
      for (c = J.get$firstChild$x($content), t1 = map != null, i = 0; c != null; c = c.nextSibling, ++i) {
        childMap = t1 ? map.getChild$1(i) : null;
        M.nodeBindFallback(M._cloneAndBindInstance(c, instance, this._stagingDocument, childMap, model, delegate, instanceBindings, null)).set$_templateInstance(instanceRecord);
      }
      instanceRecord._firstNode = instance.firstChild;
      instanceRecord._lastNode = instance.lastChild;
      return instance;
    },
    createInstance$2: function(model, delegate) {
      return this.createInstance$3(model, delegate, null);
    },
    get$bindingDelegate: function() {
      return this._bindingDelegate;
    },
    set$bindingDelegate: function(value) {
      var t1;
      this._bindingDelegate = value;
      this._bindingMap = null;
      t1 = this._template_binding$_iterator;
      if (t1 != null) {
        t1._initPrepareFunctions = false;
        t1._instanceModelFn = null;
        t1._instancePositionChangedFn = null;
      }
    },
    get$ref: function() {
      var refId, treeScope, result, instanceRoot, nextRef;
      this._decorate$0();
      refId = J.get$attributes$x(this._template_binding$_node)._html$_element.getAttribute("ref");
      if (refId != null) {
        treeScope = M._getTreeScope(this._template_binding$_node);
        result = treeScope != null ? J.getElementById$1$x(treeScope, refId) : null;
        if (result == null) {
          instanceRoot = M._getInstanceRoot(this._template_binding$_node);
          if (instanceRoot != null)
            result = J.querySelector$1$x(instanceRoot, "#" + refId);
        }
      } else
        result = null;
      if (result == null) {
        result = this._templateInstanceRef;
        if (result == null)
          return this._template_binding$_node;
      }
      nextRef = (!!J.getInterceptor(result).$isNodeBindExtension ? result : M.nodeBindFallback(result)).get$ref();
      return nextRef != null ? nextRef : result;
    },
    get$content: function(_) {
      var t1;
      this._decorate$0();
      t1 = this._content;
      return t1 != null ? t1 : H.interceptedTypeCast(this._template_binding$_node, "$isTemplateElement").content;
    },
    _decorate$1: function(instanceRef) {
      var isNativeHtmlTemplate, liftContents, t1, t2, templateElementExt, liftRoot, template;
      if (this._templateIsDecorated === true)
        return false;
      M.TemplateBindExtension__injectStylesheet();
      this._templateIsDecorated = true;
      isNativeHtmlTemplate = !!J.getInterceptor(this._template_binding$_node).$isTemplateElement;
      liftContents = !isNativeHtmlTemplate;
      if (liftContents) {
        t1 = this._template_binding$_node;
        t2 = J.getInterceptor$x(t1);
        if (t2.get$attributes(t1)._html$_element.hasAttribute("template") === true && C.Map_05eTF.containsKey$1(t2.get$localName(t1)) === true) {
          if (instanceRef != null)
            throw H.wrapException(P.ArgumentError$("instanceRef should not be supplied for attribute templates."));
          templateElementExt = M.TemplateBindExtension__extractTemplateFromAttributeTemplate(this._template_binding$_node);
          templateElementExt = !!J.getInterceptor(templateElementExt).$isNodeBindExtension ? templateElementExt : M.nodeBindFallback(templateElementExt);
          templateElementExt.set$_templateIsDecorated(true);
          isNativeHtmlTemplate = !!J.getInterceptor(templateElementExt.get$_template_binding$_node()).$isTemplateElement;
          liftRoot = true;
        } else {
          t1 = this._template_binding$_node;
          t2 = J.getInterceptor$x(t1);
          if (t2.get$tagName(t1) === "template" && t2.get$namespaceUri(t1) === "http://www.w3.org/2000/svg") {
            t1 = this._template_binding$_node;
            t2 = J.getInterceptor$x(t1);
            template = t2.get$ownerDocument(t1).createElement("template", null);
            t2.get$parentNode(t1).insertBefore(template, t1);
            template.toString;
            new W._ElementAttributeMap(template).addAll$1(0, t2.get$attributes(t1));
            t2.get$attributes(t1).clear$0(0);
            t2.remove$0(t1);
            templateElementExt = !!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template);
            templateElementExt.set$_templateIsDecorated(true);
            isNativeHtmlTemplate = !!J.getInterceptor(templateElementExt.get$_template_binding$_node()).$isTemplateElement;
          } else {
            templateElementExt = this;
            isNativeHtmlTemplate = false;
          }
          liftRoot = false;
        }
      } else {
        templateElementExt = this;
        liftRoot = false;
      }
      if (!isNativeHtmlTemplate)
        templateElementExt.set$_content(J.createDocumentFragment$0$x(M.TemplateBindExtension__getOrCreateTemplateContentsOwner(templateElementExt.get$_template_binding$_node())));
      if (instanceRef != null)
        templateElementExt.set$_templateInstanceRef(instanceRef);
      else if (liftContents)
        M.TemplateBindExtension__liftNonNativeChildrenIntoContent(templateElementExt, this._template_binding$_node, liftRoot);
      else
        M.TemplateBindExtension_bootstrap(J.get$content$x(templateElementExt));
      return true;
    },
    _decorate$0: function() {
      return this._decorate$1(null);
    },
    $isTemplateBindExtension: true,
    static: {"^": "TemplateBindExtension__contentsOwner,TemplateBindExtension__ownerStagingDocument,TemplateBindExtension__allTemplatesSelectors,TemplateBindExtension__initStyles", TemplateBindExtension__getOrCreateTemplateContentsOwner: function(template) {
        var doc, d, t1, t2;
        doc = J.get$ownerDocument$x(template);
        if (W._convertNativeToDart_Window(doc.defaultView) == null)
          return doc;
        d = $.get$TemplateBindExtension__contentsOwner().$index(0, doc);
        if (d == null) {
          d = doc.implementation.createHTMLDocument("");
          for (; t1 = d.lastChild, t1 != null;) {
            t2 = t1.parentNode;
            if (t2 != null)
              t2.removeChild(t1);
          }
          $.get$TemplateBindExtension__contentsOwner().$indexSet(0, doc, d);
        }
        return d;
      }, TemplateBindExtension__extractTemplateFromAttributeTemplate: function(el) {
        var t1, template, t2, $name, t3, value;
        t1 = J.getInterceptor$x(el);
        template = t1.get$ownerDocument(el).createElement("template", null);
        t1.get$parentNode(el).insertBefore(template, el);
        for (t2 = C.JSArray_methods.toList$0(t1.get$attributes(el).get$keys()), t2 = H.setRuntimeTypeInfo(new H.ListIterator(t2, t2.length, 0, null), [H.getTypeArgumentByIndex(t2, 0)]); t2.moveNext$0();) {
          $name = t2._current;
          switch ($name) {
            case "template":
              t3 = t1.get$attributes(el)._html$_element;
              t3.getAttribute($name);
              t3.removeAttribute($name);
              break;
            case "repeat":
            case "bind":
            case "ref":
              template.toString;
              t3 = t1.get$attributes(el)._html$_element;
              value = t3.getAttribute($name);
              t3.removeAttribute($name);
              template.setAttribute($name, value);
              break;
          }
        }
        return template;
      }, TemplateBindExtension__liftNonNativeChildrenIntoContent: function(template, el, useRoot) {
        var $content, t1, t2, child;
        $content = J.get$content$x(template);
        if (useRoot) {
          J.append$1$x($content, el);
          return;
        }
        for (t1 = J.getInterceptor$x(el), t2 = J.getInterceptor$x($content); child = t1.get$firstChild(el), child != null;)
          t2.append$1($content, child);
      }, TemplateBindExtension_bootstrap: function($content) {
        var t1, descendents;
        t1 = new M.TemplateBindExtension_bootstrap__bootstrap();
        descendents = J.querySelectorAll$1$x($content, $.get$TemplateBindExtension__allTemplatesSelectors());
        if (M.isSemanticTemplate($content))
          t1.call$1($content);
        descendents.forEach$1(descendents, t1);
      }, TemplateBindExtension__injectStylesheet: function() {
        if ($.TemplateBindExtension__initStyles === true)
          return;
        $.TemplateBindExtension__initStyles = true;
        var style = document.createElement("style", null);
        style.textContent = H.S($.get$TemplateBindExtension__allTemplatesSelectors()) + " { display: none; }";
        document.head.appendChild(style);
      }}
  },
  TemplateBindExtension_bootstrap__bootstrap: {
    "^": "Closure0:13;",
    call$1: function(template) {
      if (!M.nodeBindFallback(template)._decorate$1(null))
        M.TemplateBindExtension_bootstrap(J.get$content$x(!!J.getInterceptor(template).$isNodeBindExtension ? template : M.nodeBindFallback(template)));
    },
    $isFunction: true
  },
  closure6: {
    "^": "Closure0:30;",
    call$1: [function(k) {
      return H.S(k) + "[template]";
    }, "call$1", null, 2, 0, null, 95, "call"],
    $isFunction: true
  },
  "+ closure6": 0,
  _getDelegateFactory_closure: {
    "^": "Closure0:30;name_0,node_1,delegate_2",
    call$1: function(pathString) {
      return this.delegate_2.prepareBinding$3(pathString, this.name_0, this.node_1);
    },
    $isFunction: true
  },
  _parseAttributeBindings_closure: {
    "^": "Closure0:58;box_0,element_1,delegate_2,isTemplateNode_3",
    call$2: function($name, value) {
      var t1, tokens, t2, bindings;
      for (; t1 = J.getInterceptor$asx($name), J.$eq(t1.$index($name, 0), "_");)
        $name = t1.substring$1($name, 1);
      if (this.isTemplateNode_3)
        t1 = t1.$eq($name, "bind") || t1.$eq($name, "if") || t1.$eq($name, "repeat");
      else
        t1 = false;
      if (t1)
        return;
      tokens = S.MustacheTokens_parse(value, M._getDelegateFactory($name, this.element_1, this.delegate_2));
      if (tokens != null) {
        t1 = this.box_0;
        t2 = t1.bindings_0;
        if (t2 == null) {
          bindings = [];
          t1.bindings_0 = bindings;
          t1 = bindings;
        } else
          t1 = t2;
        t1.push($name);
        t1.push(tokens);
      }
    },
    $isFunction: true
  },
  _TemplateIterator: {
    "^": "Bindable;_templateExt,_terminators,_iteratedValue,_presentValue,_closed,_ifValue,_template_binding$_value,_hasIf,_hasRepeat,_ifOneTime,_oneTime,_listSub,_initPrepareFunctions,_instanceModelFn,_instancePositionChangedFn",
    _instanceModelFn$1: function(arg0) {
      return this._instanceModelFn.call$1(arg0);
    },
    open$1: function(_, callback) {
      return H.throwExpression(P.StateError$("binding already opened"));
    },
    get$value: function(_) {
      return this._template_binding$_value;
    },
    _closeDependencies$0: function() {
      var t1, t2;
      t1 = this._ifValue;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isBindable) {
        t2.close$0(t1);
        this._ifValue = null;
      }
      t1 = this._template_binding$_value;
      t2 = J.getInterceptor(t1);
      if (!!t2.$isBindable) {
        t2.close$0(t1);
        this._template_binding$_value = null;
      }
    },
    _updateDependencies$2: function(directives, model) {
      var template, t1, t2;
      this._closeDependencies$0();
      template = this._templateExt._template_binding$_node;
      t1 = directives._if;
      t2 = t1 != null;
      this._hasIf = t2;
      this._hasRepeat = directives._repeat != null;
      if (t2) {
        this._ifOneTime = t1.onlyOneTime;
        t1 = M._processBinding("if", t1, template, model);
        this._ifValue = t1;
        if (this._ifOneTime === true) {
          if (!(null != t1 && false !== t1)) {
            this._updateIteratedValue$1(null);
            return;
          }
        } else
          H.interceptedTypeCast(t1, "$isBindable").open$1(0, this.get$_updateIteratedValue());
      }
      if (this._hasRepeat === true) {
        t1 = directives._repeat;
        this._oneTime = t1.onlyOneTime;
        t1 = M._processBinding("repeat", t1, template, model);
        this._template_binding$_value = t1;
      } else {
        t1 = directives._bind;
        this._oneTime = t1.onlyOneTime;
        t1 = M._processBinding("bind", t1, template, model);
        this._template_binding$_value = t1;
      }
      if (this._oneTime !== true)
        J.open$1$x(t1, this.get$_updateIteratedValue());
      this._updateIteratedValue$1(null);
    },
    _updateIteratedValue$1: [function(_) {
      var ifValue, value;
      if (this._hasIf === true) {
        ifValue = this._ifValue;
        if (this._ifOneTime !== true) {
          H.interceptedTypeCast(ifValue, "$isBindable");
          ifValue = ifValue.get$value(ifValue);
        }
        if (!(null != ifValue && false !== ifValue)) {
          this._valueChanged$1([]);
          return;
        }
      }
      value = this._template_binding$_value;
      if (this._oneTime !== true) {
        H.interceptedTypeCast(value, "$isBindable");
        value = value.get$value(value);
      }
      this._valueChanged$1(this._hasRepeat !== true ? [value] : value);
    }, "call$1", "get$_updateIteratedValue", 2, 0, 13, 79],
    _valueChanged$1: function(value) {
      var t1, t2;
      t1 = J.getInterceptor(value);
      if (!t1.$isList)
        value = !!t1.$isIterable ? t1.toList$0(value) : [];
      t1 = this._iteratedValue;
      if (value === t1)
        return;
      this._unobserve$0();
      this._presentValue = value;
      if (!!J.getInterceptor(value).$isObservableList && this._hasRepeat === true && this._oneTime !== true) {
        if (value.get$_listRecords() != null)
          value.set$_listRecords([]);
        this._listSub = value.get$listChanges().listen$1(this.get$_handleSplices());
      }
      t2 = this._presentValue;
      t2 = t2 != null ? t2 : [];
      this._handleSplices$1(G.calcSplices(t2, 0, J.get$length$asx(t2), t1, 0, t1.length));
    },
    _getTerminatorAt$1: function(index) {
      var t1, t2, terminator, subIter;
      t1 = J.getInterceptor(index);
      if (t1.$eq(index, -1))
        return this._templateExt._template_binding$_node;
      t2 = this._terminators;
      t1 = t1.$mul(index, 2);
      if (t1 >>> 0 !== t1 || t1 >= t2.length)
        return H.ioore(t2, t1);
      terminator = t2[t1];
      if (M.isSemanticTemplate(terminator)) {
        t1 = this._templateExt._template_binding$_node;
        t1 = terminator == null ? t1 == null : terminator === t1;
      } else
        t1 = true;
      if (t1)
        return terminator;
      subIter = M.nodeBindFallback(terminator).get$_template_binding$_iterator();
      if (subIter == null)
        return terminator;
      return subIter._getTerminatorAt$1(C.JSInt_methods._tdivFast$1(subIter._terminators.length, 2) - 1);
    },
    _insertInstanceAt$4: function(index, fragment, instanceNodes, instanceBindings) {
      var t1, previousTerminator, t2, terminator, $parent, insertBeforeNode;
      t1 = J.getInterceptor$n(index);
      previousTerminator = this._getTerminatorAt$1(t1.$sub(index, 1));
      t2 = fragment != null;
      if (t2)
        terminator = fragment.lastChild;
      else
        terminator = instanceNodes != null && J.get$isNotEmpty$asx(instanceNodes) ? J.get$last$ax(instanceNodes) : null;
      if (terminator == null)
        terminator = previousTerminator;
      t1 = t1.$mul(index, 2);
      H.IterableMixinWorkaround_insertAllList(this._terminators, t1, [terminator, instanceBindings]);
      $parent = J.get$parentNode$x(this._templateExt._template_binding$_node);
      insertBeforeNode = J.get$nextNode$x(previousTerminator);
      if (t2)
        $parent.insertBefore(fragment, insertBeforeNode);
      else if (instanceNodes != null)
        for (t1 = J.get$iterator$ax(instanceNodes); t1.moveNext$0();)
          $parent.insertBefore(t1.get$current(), insertBeforeNode);
    },
    _extractInstanceAt$1: function(index) {
      var instanceNodes, t1, previousTerminator, terminator, t2, t3, instanceBindings, node;
      instanceNodes = [];
      instanceNodes.$builtinTypeInfo = [W.Node];
      t1 = J.getInterceptor$n(index);
      previousTerminator = this._getTerminatorAt$1(t1.$sub(index, 1));
      terminator = this._getTerminatorAt$1(index);
      t2 = this._terminators;
      t3 = J.$add$ns(t1.$mul(index, 2), 1);
      if (t3 >>> 0 !== t3 || t3 >= t2.length)
        return H.ioore(t2, t3);
      instanceBindings = t2[t3];
      C.JSArray_methods.removeRange$2(t2, t1.$mul(index, 2), J.$add$ns(t1.$mul(index, 2), 2));
      J.get$parentNode$x(this._templateExt._template_binding$_node);
      for (t1 = J.getInterceptor$x(previousTerminator); !J.$eq(terminator, previousTerminator);) {
        node = t1.get$nextNode(previousTerminator);
        if (node == null ? terminator == null : node === terminator)
          terminator = previousTerminator;
        t2 = node.parentNode;
        if (t2 != null)
          t2.removeChild(node);
        instanceNodes.push(node);
      }
      return new M._BoundNodes(instanceNodes, instanceBindings);
    },
    _handleSplices$1: [function(splices) {
      var delegate, model, fragment, instanceBindings, e, s, t1, template, t2, delegate0, instanceCache, t3, t4, removeDelta, splice, t5, t6, addIndex, instance, instanceNodes, exception;
      if (this._closed || J.get$isEmpty$asx(splices) === true)
        return;
      t1 = this._templateExt;
      template = t1._template_binding$_node;
      if (J.get$parentNode$x(template) == null) {
        this.close$0(0);
        return;
      }
      t2 = this._iteratedValue;
      Q.ObservableList_applyChangeRecords(t2, this._presentValue, splices);
      delegate = t1._bindingDelegate;
      if (!this._initPrepareFunctions) {
        this._initPrepareFunctions = true;
        delegate0 = (!!J.getInterceptor(t1._template_binding$_node).$isTemplateBindExtension ? t1._template_binding$_node : t1).get$bindingDelegate();
        if (delegate0 != null) {
          this._instanceModelFn = delegate0.prepareInstanceModel$1(template);
          this._instancePositionChangedFn = null;
        }
      }
      instanceCache = P.HashMap_HashMap(P.identical$closure(), null, null, P.Object, M._BoundNodes);
      for (t3 = J.getInterceptor$ax(splices), t4 = t3.get$iterator(splices), removeDelta = 0; t4.moveNext$0();) {
        splice = t4.get$current();
        for (t5 = splice.get$removed(), t5 = t5.get$iterator(t5), t6 = J.getInterceptor$x(splice); t5.moveNext$0();)
          instanceCache.$indexSet(0, t5._current, this._extractInstanceAt$1(J.$add$ns(t6.get$index(splice), removeDelta)));
        t5 = splice.get$addedCount();
        if (typeof t5 !== "number")
          return H.iae(t5);
        removeDelta -= t5;
      }
      for (t3 = t3.get$iterator(splices); t3.moveNext$0();) {
        splice = t3.get$current();
        for (t4 = J.getInterceptor$x(splice), addIndex = t4.get$index(splice); J.$lt$n(addIndex, J.$add$ns(t4.get$index(splice), splice.get$addedCount())); ++addIndex) {
          if (addIndex >>> 0 !== addIndex || addIndex >= t2.length)
            return H.ioore(t2, addIndex);
          model = t2[addIndex];
          fragment = null;
          instance = instanceCache.remove$1(0, model);
          instanceBindings = null;
          if (instance != null && J.get$isNotEmpty$asx(J.get$nodes$x(instance))) {
            instanceBindings = instance.get$instanceBindings();
            instanceNodes = J.get$nodes$x(instance);
          } else {
            try {
              instanceBindings = [];
              if (this._instanceModelFn != null)
                model = this._instanceModelFn$1(model);
              if (model != null)
                fragment = t1.createInstance$3(model, delegate, instanceBindings);
            } catch (exception) {
              t5 = H.unwrapException(exception);
              e = t5;
              s = new H._StackTrace(exception, null);
              t5 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
              t5.$builtinTypeInfo = [null];
              new P._AsyncCompleter(t5).$builtinTypeInfo = [null];
              t6 = e;
              if (t6 == null)
                H.throwExpression(P.ArgumentError$("Error must not be null"));
              if (t5._state !== 0)
                H.throwExpression(P.StateError$("Future already completed"));
              t5._asyncCompleteError$2(t6, s);
            }

            instanceNodes = null;
          }
          this._insertInstanceAt$4(addIndex, fragment, instanceNodes, instanceBindings);
        }
      }
      for (t1 = instanceCache.get$values(instanceCache), t1 = H.setRuntimeTypeInfo(new H.MappedIterator(null, J.get$iterator$ax(t1._iterable), t1._f), [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        this._closeInstanceBindings$1(t1._current.get$instanceBindings());
    }, "call$1", "get$_handleSplices", 2, 0, 134, 135],
    _closeInstanceBindings$1: function(instanceBindings) {
      var t1;
      for (t1 = J.get$iterator$ax(instanceBindings); t1.moveNext$0();)
        J.close$0$x(t1.get$current());
    },
    _unobserve$0: function() {
      var t1 = this._listSub;
      if (t1 == null)
        return;
      t1.cancel$0();
      this._listSub = null;
    },
    close$0: function(_) {
      var t1, i;
      if (this._closed)
        return;
      this._unobserve$0();
      for (t1 = this._terminators, i = 1; i < t1.length; i += 2)
        this._closeInstanceBindings$1(t1[i]);
      C.JSArray_methods.set$length(t1, 0);
      this._closeDependencies$0();
      this._templateExt._template_binding$_iterator = null;
      this._closed = true;
    }
  },
  _BoundNodes: {
    "^": "Object;nodes>,instanceBindings<",
    $is_BoundNodes: true
  },
  _TextExtension: {
    "^": "NodeBindExtension;_template_binding$_node,_bindings,_templateInstance",
    bind$3$oneTime: function(_, $name, value, oneTime) {
      var t1;
      if (!J.$eq($name, "text"))
        return M.NodeBindExtension.prototype.bind$3$oneTime.call(this, this, $name, value, oneTime);
      if (oneTime) {
        t1 = value == null ? "" : H.S(value);
        J.set$text$x(this._template_binding$_node, t1);
        return;
      }
      this.unbind$1(0, $name);
      t1 = this.get$_updateText();
      t1.call$1(J.open$1$x(value, t1));
      this.get$bindings(this).$indexSet(0, $name, value);
      return value;
    },
    _updateText$1: [function(value) {
      var t1 = value == null ? "" : H.S(value);
      J.set$text$x(this._template_binding$_node, t1);
    }, "call$1", "get$_updateText", 2, 0, 30, 14]
  },
  _TextAreaElementExtension: {
    "^": "_ElementExtension;_template_binding$_node,_bindings,_templateInstance",
    get$_template_binding$_node: function() {
      return this._template_binding$_node;
    },
    bind$3$oneTime: function(_, $name, value, oneTime) {
      var t1, t2, t3, t4;
      if (!J.$eq($name, "value"))
        return M._ElementExtension.prototype.bind$3$oneTime.call(this, this, $name, value, oneTime);
      if (oneTime) {
        M._InputBinding__updateProperty(this._template_binding$_node, value, $name);
        return;
      }
      J.unbind$1$x(!!J.getInterceptor(this.get$_template_binding$_node()).$isNodeBindExtension ? this.get$_template_binding$_node() : this, $name);
      J.get$attributes$x(this._template_binding$_node).remove$1(0, $name);
      t1 = this.get$bindings(this);
      t2 = this._template_binding$_node;
      t3 = new M._InputBinding(t2, null, value, $name);
      t3._eventSub = M._InputBinding__getStreamForInputType(t2).listen$1(t3.get$_nodeChanged());
      t4 = t3.get$_template_binding$_updateNode();
      M._InputBinding__updateProperty(t2, J.open$1$x(t3._template_binding$_bindable, t4), $name);
      t1.$indexSet(0, $name, t3);
      return t3;
    }
  }
}],
["template_binding.src.binding_delegate", "package:template_binding/src/binding_delegate.dart", , O, {
  "^": "",
  BindingDelegate: {
    "^": "Object;",
    prepareBinding$3: function(path, $name, node) {
      return;
    },
    prepareInstanceModel$1: function(template) {
      return;
    }
  }
}],
["template_binding.src.mustache_tokens", "package:template_binding/src/mustache_tokens.dart", , S, {
  "^": "",
  MustacheTokens: {
    "^": "Object;_tokens,onlyOneTime<,_combinator",
    get$hasOnePath: function() {
      return this._tokens.length === 5;
    },
    get$isSimplePath: function() {
      var t1, t2;
      t1 = this._tokens;
      t2 = t1.length;
      if (t2 === 5) {
        if (0 >= t2)
          return H.ioore(t1, 0);
        if (J.$eq(t1[0], "")) {
          if (4 >= t1.length)
            return H.ioore(t1, 4);
          t1 = J.$eq(t1[4], "");
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    get$combinator: function() {
      return this._combinator;
    },
    combinator$1: function(arg0) {
      return this.get$combinator().call$1(arg0);
    },
    get$length: function(_) {
      return C.JSInt_methods._tdivFast$1(this._tokens.length, 4);
    },
    getOneTime$1: function(i) {
      var t1, t2;
      t1 = this._tokens;
      t2 = i * 4 + 1;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    getPath$1: function(i) {
      var t1, t2;
      t1 = this._tokens;
      t2 = i * 4 + 2;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    getPrepareBinding$1: function(i) {
      var t1, t2;
      t1 = this._tokens;
      t2 = i * 4 + 3;
      if (t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    _singleCombinator$1: [function(value) {
      var t1, t2, t3, t4;
      if (value == null)
        value = "";
      t1 = this._tokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = H.S(t1[0]) + H.S(value);
      t3 = t1.length;
      t4 = C.JSInt_methods._tdivFast$1(t3, 4) * 4;
      if (t4 >= t3)
        return H.ioore(t1, t4);
      return t2 + H.S(t1[t4]);
    }, "call$1", "get$_singleCombinator", 2, 0, 136, 14],
    _listCombinator$1: [function(values) {
      var t1, newValue, len, t2, i, value, t3, str;
      t1 = this._tokens;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      newValue = P.StringBuffer$(t1[0]);
      len = C.JSInt_methods._tdivFast$1(t1.length, 4);
      for (t2 = J.getInterceptor$asx(values), i = 0; i < len;) {
        value = t2.$index(values, i);
        if (value != null)
          newValue._contents += typeof value === "string" ? value : H.S(value);
        ++i;
        t3 = i * 4;
        if (t3 >= t1.length)
          return H.ioore(t1, t3);
        str = t1[t3];
        newValue._contents += typeof str === "string" ? str : H.S(str);
      }
      return newValue._contents;
    }, "call$1", "get$_listCombinator", 2, 0, 137, 138],
    MustacheTokens$_$2: function(_tokens, onlyOneTime) {
      this._combinator = this._tokens.length === 5 ? this.get$_singleCombinator() : this.get$_listCombinator();
    },
    static: {"^": "MustacheTokens__TOKEN_TEXT,MustacheTokens__TOKEN_ONETIME,MustacheTokens__TOKEN_PATH,MustacheTokens__TOKEN_PREPAREFN,MustacheTokens__TOKEN_SIZE,MustacheTokens__TOKEN_ENDTEXT", MustacheTokens_parse: function(s, fnFactory) {
        var $length, t1, t2, tokens, lastIndex, onlyOneTime, startIndex, oneTimeStart, t3, oneTime, terminator, endIndex, pathString, delegateFn;
        if (s == null || s.length === 0)
          return;
        $length = s.length;
        for (t1 = fnFactory == null, t2 = J.getInterceptor$asx(s), tokens = null, lastIndex = 0, onlyOneTime = true; lastIndex < $length;) {
          startIndex = t2.indexOf$2(s, "{{", lastIndex);
          oneTimeStart = C.JSString_methods.indexOf$2(s, "[[", lastIndex);
          if (oneTimeStart >= 0)
            t3 = startIndex < 0 || oneTimeStart < startIndex;
          else
            t3 = false;
          if (t3) {
            startIndex = oneTimeStart;
            oneTime = true;
            terminator = "]]";
          } else {
            oneTime = false;
            terminator = "}}";
          }
          endIndex = startIndex >= 0 ? C.JSString_methods.indexOf$2(s, terminator, startIndex + 2) : -1;
          if (endIndex < 0) {
            if (tokens == null)
              return;
            tokens.push(C.JSString_methods.substring$1(s, lastIndex));
            break;
          }
          if (tokens == null)
            tokens = [];
          tokens.push(C.JSString_methods.substring$2(s, lastIndex, startIndex));
          pathString = C.JSString_methods.trim$0(C.JSString_methods.substring$2(s, startIndex + 2, endIndex));
          tokens.push(oneTime);
          onlyOneTime = onlyOneTime && oneTime;
          delegateFn = t1 ? null : fnFactory.call$1(pathString);
          if (delegateFn == null)
            tokens.push(L.PropertyPath_PropertyPath(pathString));
          else
            tokens.push(null);
          tokens.push(delegateFn);
          lastIndex = endIndex + 2;
        }
        if (lastIndex === $length)
          tokens.push("");
        t1 = new S.MustacheTokens(tokens, onlyOneTime, null);
        t1.MustacheTokens$_$2(tokens, onlyOneTime);
        return t1;
      }}
  }
}],
["viewer", "package:dartdoc_viewer/viewer.dart", , Y, {
  "^": "",
  _concat: function(list1, list2) {
    return H.setRuntimeTypeInfo(new H.ExpandIterable([list1, list2], new Y._concat_closure()), [null, null]);
  },
  Viewer: {
    "^": "ChangeNotifier;_tracker,_viewer0$__$isDesktop,_finishedCompleter,_viewer0$__$homePage,_viewer0$__$startPage,_showPkgLibraries,_viewer0$__$libraries,_currentPage,_viewer0$__$isPanel,_isPanel,_viewer0$__$isMinimap,_isMinimap,_viewer0$__$isInherited,_viewer0$__$showObjectMembers,_hash,redirectToDartlang,_loadIndicator,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records",
    get$homePage: function(_) {
      return this._viewer0$__$homePage;
    },
    set$showPkgLibraries: function(newValue) {
      if (J.$eq(this._showPkgLibraries, newValue))
        return;
      this._showPkgLibraries = F.notifyPropertyChangeHelper(this, C.Symbol_showPkgLibraries, this._showPkgLibraries, newValue);
      this._updateLibraries$0();
    },
    get$libraries: function() {
      return this._viewer0$__$libraries;
    },
    _updateLibraries$0: function() {
      var t1 = this._currentPage;
      if (t1 == null)
        this._viewer0$__$libraries = F.notifyPropertyChangeHelper(this, C.Symbol_libraries, this._viewer0$__$libraries, []);
      else {
        t1 = t1.get$home().libraries;
        t1 = F.notifyPropertyChangeHelper(this, C.Symbol_libraries, this._viewer0$__$libraries, t1);
        this._viewer0$__$libraries = t1;
        if (this._showPkgLibraries !== true) {
          t1 = J.where$1$ax(t1, new Y.Viewer__updateLibraries_closure()).toList$0(0);
          this._viewer0$__$libraries = F.notifyPropertyChangeHelper(this, C.Symbol_libraries, this._viewer0$__$libraries, t1);
        }
      }
    },
    get$currentPage: function() {
      return this._currentPage;
    },
    set$currentPage: function(newPage) {
      var t1;
      if (J.$eq(this._currentPage, newPage))
        return;
      this._currentPage = F.notifyPropertyChangeHelper(this, C.Symbol_currentPage, this._currentPage, newPage);
      t1 = $._dartdocMain;
      if (t1 == null) {
        t1 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t1;
      }
      if (J.get$sdkVersionString$x(t1) == null)
        W.HttpRequest_getString(P.Uri__uriEncode(C.List_CVk, ($.useHistory ? H.S(Y.docsEntryPoint()) + "/docs/" : "docs/") + "latest.txt", C.Utf8Codec_false, false), null, null).then$1(new Y.Viewer_currentPage_closure()).catchError$1(new Y.Viewer_currentPage_closure0());
      this._updateLibraries$0();
    },
    get$isInherited: function(_) {
      return this._viewer0$__$isInherited;
    },
    set$isInherited: function(_, value) {
      this._viewer0$__$isInherited = F.notifyPropertyChangeHelper(this, C.Symbol_isInherited, this._viewer0$__$isInherited, value);
    },
    get$filter: function(_) {
      var t1 = new E.Filter(true, false);
      t1.showInherited = this._viewer0$__$isInherited;
      t1.showObjectMembers = this._viewer0$__$showObjectMembers;
      return t1;
    },
    _updateDesktopMode$1: [function(_) {
      var t1 = window.innerWidth;
      if (typeof t1 !== "number")
        return t1.$gt();
      t1 = F.notifyPropertyChangeHelper(this, C.Symbol_isDesktop, this._viewer0$__$isDesktop, t1 > 1006);
      this._viewer0$__$isDesktop = t1;
      t1 = t1 === true && this._isMinimap;
      this._viewer0$__$isMinimap = F.notifyPropertyChangeHelper(this, C.Symbol_isMinimap, this._viewer0$__$isMinimap, t1);
      t1 = this._viewer0$__$isDesktop === true && this._isPanel;
      this._viewer0$__$isPanel = F.notifyPropertyChangeHelper(this, C.Symbol_isPanel, this._viewer0$__$isPanel, t1);
    }, "call$1", "get$_updateDesktopMode", 2, 0, 30, 79],
    get$title: function(_) {
      var t1 = this._currentPage;
      return t1 == null ? "" : t1.get$decoratedName();
    },
    _scrollScreen$1: function(hash) {
      var t1 = {};
      t1.hash_0 = hash;
      if (hash === "")
        P.Timer_Timer(C.Duration_0, new Y.Viewer__scrollScreen_closure());
      else
        P.Timer_Timer(C.Duration_0, new Y.Viewer__scrollScreen_closure0(t1, this));
    },
    queryEverywhere$2: function($parent, id) {
      var t1, t2, t3, shadowChildren, allChildren, found;
      t1 = J.getInterceptor$x($parent);
      if (t1.get$id($parent) === id)
        return $parent;
      if (t1.get$shadowRoot($parent) != null) {
        t2 = t1.get$shadowRoot($parent);
        if (t2._docChildren == null) {
          t3 = new P.FilteredElementList(t2, new W._ChildNodeListLazy(t2));
          t3.$builtinTypeInfo = [null];
          t2._docChildren = t3;
        }
        shadowChildren = t2._docChildren;
      } else
        shadowChildren = C.List_empty;
      t1 = [t1.get$children($parent), shadowChildren];
      t2 = new Y.Viewer_queryEverywhere_closure();
      allChildren = new H.ExpandIterable(t1, t2);
      allChildren.$builtinTypeInfo = [null, null];
      t1 = new H.ExpandIterator(C.JSArray_methods.get$iterator(t1), t2, C.C_EmptyIterator, null);
      t1.$builtinTypeInfo = [H.getTypeArgumentByIndex(allChildren, 0), H.getTypeArgumentByIndex(allChildren, 1)];
      for (; t1.moveNext$0();) {
        found = this.queryEverywhere$2(t1._current, id);
        if (found != null)
          return found;
      }
      return;
    },
    _pageAndLocationFor$2: function(page, $location) {
      var t1, usablePage, canonicalLocation, matchingItem, myItem, validParent;
      if ($location.get$isEmpty($location) || $location.$eq(0, J.get$location$x(this._viewer0$__$homePage))) {
        t1 = this._viewer0$__$startPage;
        return [t1, J.get$location$x(t1)];
      }
      usablePage = page.get$firstItemUsableAsPage();
      canonicalLocation = $location.get$asMemberOrSubMemberNotAnchor();
      matchingItem = canonicalLocation.exactItem$1(this._viewer0$__$homePage);
      if (usablePage == null ? matchingItem == null : usablePage === matchingItem)
        return [usablePage, $location];
      if (matchingItem == null) {
        t1 = canonicalLocation.get$componentNames();
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        t1.pop();
        return this._pageAndLocationFor$2(usablePage, Y.DocsLocation$fromList(t1));
      }
      if (matchingItem.isOwnedBy$1(usablePage))
        return [usablePage, matchingItem.get$anchorHrefLocation()];
      t1 = this._viewer0$__$homePage;
      myItem = $location.item$1(0, t1);
      validParent = myItem == null ? J.get$location$x(t1) : J.get$location$x(myItem);
      return [validParent.exactItem$1(this._viewer0$__$homePage), $location];
    },
    _updatePage$3: function(page, $location, shouldPush) {
      var main, replacement, newPage, newLocation, t1, exception, url, path, t2, atIndex;
      replacement = this._pageAndLocationFor$2(page, $location);
      newPage = C.JSArray_methods.get$first(replacement);
      newLocation = C.JSArray_methods.get$last(replacement);
      t1 = J.getInterceptor(page);
      if (!t1.$eq(page, newPage) || !$location.$eq(0, newLocation))
        return this.handleLink$2(this._replaceLocation$1(newLocation), shouldPush);
      if (page != null && !t1.$eq(page, this._currentPage)) {
        main = window.document.querySelector("#dartdoc-main");
        try {
          J.hideOrShowNavigation$1$hide$x(main, true);
        } catch (exception) {
          if (!!J.getInterceptor(H.unwrapException(exception)).$isError)
            P.print("Catching and ignoring an error on hideOrShowNavigation");
          else
            throw exception;
        }

        this.set$currentPage(page);
      }
      this._hash = $location.get$anchorPlus();
      if ($.useHistory)
        this._replaceLocation$2($location, shouldPush);
      t1 = this._tracker;
      url = P.Uri_parse(window.location.href);
      path = url._path;
      t2 = url.query;
      if (t2 !== "")
        path = H.S(path) + "?" + H.S(t2);
      t2 = url.fragment;
      if (t2 !== "")
        path = H.S(path) + "#" + H.S(t2);
      atIndex = J.getInterceptor$asx(path).indexOf$1(path, "@");
      if (atIndex > 0)
        path = C.JSString_methods.substring$2(path, 0, atIndex);
      if (t1._lastLoc !== path) {
        t1._lastLoc = path;
        t2 = $.get$context();
        if (J.$index$asx(t2, "ga") != null) {
          t1 = P.LinkedHashMap_LinkedHashMap$_literal(["page", t1._lastLoc], null, null);
          t2.callMethod$2("ga", ["send", "pageview", P._wrapToDart(P.JsObject__convertDataTree(t1))]);
        }
      }
      this._scrollScreen$1($location.get$anchorPlus());
      return P._Future$immediate(true, null);
    },
    _rewriteLocation$1: function($location) {
      var t1, t2, t3, t4, newLocation;
      if ($location.subMemberName == null)
        return $location;
      t1 = $location.get$componentNames();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
      t1 = Y.DocsLocation$fromList(t1);
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      newLocation = new Y.DocsLocation(null, null, null, null, null);
      newLocation._extractPieces$1(C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], ""));
      newLocation.anchor = C.JSString_methods.$add("id_", $location.subMemberName);
      return newLocation;
    },
    _replaceLocation$2: function($location, shouldPush) {
      var newUri, encoded, t1, prefixed;
      newUri = $location.get$withAnchor();
      encoded = P.Uri__uriEncode(C.List_CVk, newUri, C.Utf8Codec_false, false);
      t1 = H.S(Y.entryPoint());
      prefixed = t1 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + newUri;
      if (shouldPush && $.useHistory)
        window.history.pushState(null, "", prefixed);
      else if (!$.useHistory)
        window.location.replace(prefixed);
      return encoded;
    },
    _replaceLocation$1: function(location) {
      return this._replaceLocation$2(location, true);
    },
    _loadAndUpdatePage$2: function($location, shouldPush) {
      var t1, t2, t3, t4, t5, destination, newLocation;
      t1 = $.get$pageIndex();
      t2 = $location.get$packagePlus();
      t3 = $location.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = $location.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = $location.subMemberName;
      destination = t1.$index(0, C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], ""));
      if (destination == null) {
        newLocation = this._rewriteLocation$1($location);
        if (!newLocation.$eq(0, $location))
          return this.handleLink$2(this._replaceLocation$1(newLocation), $.useHistory);
        else
          return this.getItem$1($location).then$1(new Y.Viewer__loadAndUpdatePage_closure(this, $location, shouldPush));
      } else
        return destination.load$0(0).then$1(new Y.Viewer__loadAndUpdatePage_closure0(this, $location, shouldPush, destination));
    },
    getItem$1: function($location) {
      return this.getLibrary$1($location).then$1(new Y.Viewer_getItem_closure(this, $location)).then$1(new Y.Viewer_getItem_closure0(this, $location));
    },
    getLibrary$1: function($location) {
      var t1, t2, t3, lib;
      t1 = $.get$pageIndex();
      t2 = H.S($location.get$packagePlus());
      t3 = $location.libraryName;
      lib = t1.$index(0, t2 + H.S(t3 == null ? "" : t3));
      if (lib == null)
        lib = this._viewer0$__$homePage.memberNamed$1($location.libraryName);
      if (lib == null)
        return P._Future$immediate(this._viewer0$__$homePage, null);
      return J.load$0$x(lib);
    },
    getMember$2: function(lib, $location) {
      var t1, member, t2, result;
      if (lib == null) {
        t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
        t1.$builtinTypeInfo = [null];
        t1._asyncComplete$1(null);
        return t1;
      }
      member = lib.memberNamed$1($location.memberName);
      if (member == null) {
        t1 = new P._Future(0, $.Zone__current, null, null, null, null, null, null);
        t1.$builtinTypeInfo = [null];
        t1._asyncComplete$1([lib, null]);
        return t1;
      }
      t1 = J.getInterceptor(member);
      if (!!t1.$isClass) {
        t1 = t1.load$0(member);
        t2 = $.Zone__current;
        t2.toString;
        result = new P._Future(0, t2, null, null, new Y.Viewer_getMember_closure(this, lib, member), null, P._registerErrorHandler(null, t2), null);
        result.$builtinTypeInfo = [null];
        t1._addListener$1(result);
        return result;
      } else {
        t1 = t1.load$0(member);
        t1.toString;
        t2 = $.Zone__current;
        t2.toString;
        result = new P._Future(0, t2, null, null, new Y.Viewer_getMember_closure0(lib, member), null, P._registerErrorHandler(null, t2), null);
        result.$builtinTypeInfo = [null];
        t1._addListener$1(result);
        return result;
      }
    },
    getSubMember$2: function(libWithMember, $location) {
      var t1;
      if (libWithMember == null)
        return P._Future$immediate([], null);
      t1 = J.getInterceptor$ax(libWithMember);
      if (t1.get$last(libWithMember) == null)
        return P._Future$immediate([t1.get$first(libWithMember)], null);
      return P._Future$immediate(Y._concat(libWithMember, [t1.get$last(libWithMember).memberNamed$1($location.subMemberName)]), null);
    },
    handleLink$2: function(uri, shouldPush) {
      var deprefixedUri, t1, $location, t2, t3;
      if (J.contains$1$asx(uri, "~")) {
        deprefixedUri = Y.locationDeprefixed(uri);
        t1 = $._dartdocMain;
        if (t1 == null) {
          t1 = document.querySelector("#dartdoc-main");
          $._dartdocMain = t1;
        }
        J.set$hostDocsVersion$x(t1, C.JSString_methods.substring$2(deprefixedUri, 0, J.getInterceptor$asx(deprefixedUri).indexOf$1(deprefixedUri, "~")));
        uri = C.JSString_methods.substring$1(deprefixedUri, C.JSString_methods.indexOf$1(deprefixedUri, "~") + 1);
      }
      $location = new Y.DocsLocation(null, null, null, null, null);
      $location._extractPieces$1(P.Uri__uriDecode(uri, C.Utf8Codec_false, false));
      if (J.$eq($location.libraryName, "home")) {
        this._updatePage$3(this._viewer0$__$homePage, $location, shouldPush);
        return P._Future$immediate(true, null);
      }
      if (this.get$loadIndicator() != null)
        J.set$display$x(this.get$loadIndicator().style, "");
      t1 = this._loadAndUpdatePage$2($location, shouldPush);
      t2 = this.get$hideLoadIndicator();
      t3 = $.Zone__current;
      t3.toString;
      t1._addListener$1(H.setRuntimeTypeInfo(new P._Future(0, t3, null, null, null, null, null, t2), [H.getTypeArgumentByIndex(t1, 0)]));
      return t1;
    },
    togglePanel$0: [function(_) {
      var t1 = !this._isPanel;
      this._isPanel = t1;
      t1 = this._viewer0$__$isDesktop === true && t1;
      this._viewer0$__$isPanel = F.notifyPropertyChangeHelper(this, C.Symbol_isPanel, this._viewer0$__$isPanel, t1);
    }, "call$0", "get$togglePanel", 0, 0, 10],
    toggleMinimap$0: [function(_) {
      var t1 = !this._isMinimap;
      this._isMinimap = t1;
      t1 = this._viewer0$__$isDesktop === true && t1;
      this._viewer0$__$isMinimap = F.notifyPropertyChangeHelper(this, C.Symbol_isMinimap, this._viewer0$__$isMinimap, t1);
    }, "call$0", "get$toggleMinimap", 0, 0, 10],
    togglePkg$0: [function(_) {
      this.set$showPkgLibraries(this._showPkgLibraries !== true);
    }, "call$0", "get$togglePkg", 0, 0, 10],
    toggleInherited$0: [function(_) {
      var t1 = this._viewer0$__$isInherited;
      this._viewer0$__$isInherited = F.notifyPropertyChangeHelper(this, C.Symbol_isInherited, t1, t1 !== true);
    }, "call$0", "get$toggleInherited", 0, 0, 10],
    toggleObjectMembers$0: [function(_) {
      var t1 = this._viewer0$__$showObjectMembers;
      this._viewer0$__$showObjectMembers = F.notifyPropertyChangeHelper(this, C.Symbol_showObjectMembers, t1, t1 !== true);
    }, "call$0", "get$toggleObjectMembers", 0, 0, 10],
    get$loadIndicator: function() {
      var t1, shadow;
      t1 = this._loadIndicator;
      if (t1 == null) {
        t1 = $._dartdocMain;
        if (t1 == null) {
          t1 = document.querySelector("#dartdoc-main");
          $._dartdocMain = t1;
        }
        t1.toString;
        shadow = t1.shadowRoot || t1.webkitShadowRoot;
        if (shadow == null)
          return;
        t1 = shadow.querySelector("#loading-indicator");
        this._loadIndicator = t1;
      }
      return t1;
    },
    hideLoadIndicator$0: [function() {
      if (this.get$loadIndicator() != null)
        J.set$display$x(this.get$loadIndicator().style, "none");
    }, "call$0", "get$hideLoadIndicator", 0, 0, 10],
    Viewer$1$redirectToDartlang: function(redirectToDartlang) {
      var t1;
      P.Future_wait([W.HttpRequest_getString(P.Uri__uriEncode(C.List_CVk, $.get$sourcePath(), C.Utf8Codec_false, false), null, null).then$1(new Y.Viewer_closure(this)), W.HttpRequest_getString(P.Uri__uriEncode(C.List_CVk, E.docsPath() + "index.json", C.Utf8Codec_false, false), null, null).then$1(new Y.Viewer_closure0())], false).then$1(new Y.Viewer_closure1(this));
      this._updateDesktopMode$1(null);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_resize._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$_updateDesktopMode()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
    },
    static: {Viewer$: function(redirectToDartlang) {
        var t1 = new Y.Viewer(new K.Tracker(null), null, H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]), null, null, false, null, null, true, true, true, true, true, false, null, redirectToDartlang, null, null, null);
        t1.Viewer$1$redirectToDartlang(redirectToDartlang);
        return t1;
      }}
  },
  Viewer__updateLibraries_closure: {
    "^": "Closure0:30;",
    call$1: [function(x) {
      return !!J.getInterceptor(x).$isLibrary;
    }, "call$1", null, 2, 0, null, 133, "call"],
    $isFunction: true
  },
  Viewer_currentPage_closure: {
    "^": "Closure0:30;",
    call$1: [function(value) {
      var t1 = $._dartdocMain;
      if (t1 == null) {
        t1 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t1;
      }
      J.set$sdkVersionString$x(t1, value);
    }, "call$1", null, 2, 0, null, 14, "call"],
    $isFunction: true
  },
  Viewer_currentPage_closure0: {
    "^": "Closure0:30;",
    call$1: [function(_) {
      return;
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  Viewer_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(response) {
      var libraries, t1, t2, startPageName, t3;
      libraries = C.JsonCodec_null_null.decode$1(response);
      t1 = this.this_0;
      t2 = E.Home$(libraries);
      t1._viewer0$__$homePage = F.notifyPropertyChangeHelper(t1, C.Symbol_homePage, t1._viewer0$__$homePage, t2);
      t2 = J.getInterceptor$asx(libraries);
      startPageName = t2.$index(libraries, "start-page");
      t3 = t1._viewer0$__$homePage;
      t3 = startPageName == null ? t3 : t3.memberNamed$2$orElse(startPageName, new Y.Viewer__closure(t1));
      t1._viewer0$__$startPage = F.notifyPropertyChangeHelper(t1, C.Symbol_startPage, t1._viewer0$__$startPage, t3);
      t1 = $._dartdocMain;
      if (t1 == null) {
        t1 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t1;
      }
      J.set$sdkVersionString$x(t1, t2.$index(libraries, "sdkVersion"));
    }, "call$1", null, 2, 0, null, 66, "call"],
    $isFunction: true
  },
  Viewer__closure: {
    "^": "Closure0:11;this_1",
    call$0: function() {
      return this.this_1._viewer0$__$homePage;
    },
    $isFunction: true
  },
  Viewer_closure0: {
    "^": "Closure0:2;",
    call$1: [function(json) {
      $.get$searchIndex().set$map(0, C.JsonCodec_null_null.decode$1(json));
    }, "call$1", null, 2, 0, null, 139, "call"],
    $isFunction: true
  },
  Viewer_closure1: {
    "^": "Closure0:30;this_2",
    call$1: [function(_) {
      var t1 = this.this_2._finishedCompleter.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(null);
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  Viewer__scrollScreen_closure: {
    "^": "Closure0:11;",
    call$0: [function() {
      C.Window_methods.scrollTo$2(window, 0, 0);
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Viewer__scrollScreen_closure0: {
    "^": "Closure0:11;box_0,this_1",
    call$0: [function() {
      var t1, t2, e;
      t1 = this.box_0;
      t2 = t1.hash_0;
      t1.hash_0 = C.JSString_methods.substring$2(t2, 1, t2.length);
      t2 = $._dartdocMain;
      if (t2 == null) {
        t2 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t2;
      }
      e = this.this_1.queryEverywhere$2(t2, t1.hash_0);
      if (e != null) {
        t1 = J.getInterceptor$x(e);
        t1.scrollIntoView$0(e);
        C.Window_methods.scrollBy$2(window, 0, -80);
        t1.focus$0(e);
      }
    }, "call$0", null, 0, 0, null, "call"],
    $isFunction: true
  },
  Viewer_queryEverywhere_closure: {
    "^": "Closure0:30;",
    call$1: function(x) {
      return x;
    },
    $isFunction: true
  },
  Viewer__loadAndUpdatePage_closure: {
    "^": "Closure0:30;this_0,location_1,shouldPush_2",
    call$1: [function(items) {
      var t1 = this.location_1;
      return this.this_0._updatePage$3(t1.itemFromList$1(J.toList$0$ax(items)), t1, this.shouldPush_2);
    }, "call$1", null, 2, 0, null, 140, "call"],
    $isFunction: true
  },
  Viewer__loadAndUpdatePage_closure0: {
    "^": "Closure0:30;this_3,location_4,shouldPush_5,destination_6",
    call$1: [function(_) {
      return this.this_3._updatePage$3(this.destination_6, this.location_4, this.shouldPush_5);
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  Viewer_getItem_closure: {
    "^": "Closure0:30;this_0,location_1",
    call$1: [function(lib) {
      return this.this_0.getMember$2(lib, this.location_1);
    }, "call$1", null, 2, 0, null, 141, "call"],
    $isFunction: true
  },
  Viewer_getItem_closure0: {
    "^": "Closure0:30;this_2,location_3",
    call$1: [function(libWithMember) {
      return this.this_2.getSubMember$2(libWithMember, this.location_3);
    }, "call$1", null, 2, 0, null, 142, "call"],
    $isFunction: true
  },
  Viewer_getMember_closure: {
    "^": "Closure0:144;this_0,lib_1,member_2",
    call$1: [function(mem) {
      var interfaces, t1, t2, t3;
      interfaces = [];
      for (t1 = J.get$iterator$ax(mem.get$interfaces()), t2 = this.this_0, t3 = this.lib_1; t1.moveNext$0();)
        interfaces.push(t2.getMember$2(t3, t1._current.get$loc()));
      return P.Future_wait(interfaces, false).then$1(new Y.Viewer_getMember__closure(t2, t3, this.member_2, mem));
    }, "call$1", null, 2, 0, null, 143, "call"],
    $isFunction: true
  },
  Viewer_getMember__closure: {
    "^": "Closure0:30;this_3,lib_4,member_5,mem_6",
    call$1: [function(loaded) {
      var t1, t2, t3;
      t1 = this.mem_6;
      t2 = this.lib_4;
      t3 = this.member_5;
      if (!J.$eq(t1.get$superClass().loc.memberName, "Object"))
        return this.this_3.getMember$2(t2, t1.get$superClass().loc).then$1(new Y.Viewer_getMember___closure(t2, t3));
      else
        return P._Future$immediate([t2, t3], null);
    }, "call$1", null, 2, 0, null, 145, "call"],
    $isFunction: true
  },
  Viewer_getMember___closure: {
    "^": "Closure0:30;lib_7,member_8",
    call$1: [function(_) {
      return [this.lib_7, this.member_8];
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  Viewer_getMember_closure0: {
    "^": "Closure0:30;lib_9,member_10",
    call$1: [function(mem) {
      return P._Future$immediate([this.lib_9, this.member_10], null);
    }, "call$1", null, 2, 0, null, 143, "call"],
    $isFunction: true
  },
  _concat_closure: {
    "^": "Closure0:30;",
    call$1: function(x) {
      return x;
    },
    $isFunction: true
  }
}],
["web.annotations", "package:dartdoc_viewer/components/annotations.dart", , Y, {
  "^": "",
  AnnotationElement: {
    "^": "PolymerElement_ChangeNotifier;_annotations$__$annotations,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$annotations: function(receiver) {
      return receiver._annotations$__$annotations;
    },
    set$annotations: function(receiver, value) {
      receiver._annotations$__$annotations = this.notifyPropertyChange$3(receiver, C.Symbol_annotations, receiver._annotations$__$annotations, value);
    },
    annotationsChanged$0: [function(receiver) {
      var t1, out, annotation, t2, t3, t4, t5, t6, str, hasParams;
      this._clearChildren$0(receiver);
      t1 = receiver._annotations$__$annotations;
      if (t1 == null || J.get$isEmpty$asx(J.get$annotations$x(t1)) === true)
        return;
      out = P.StringBuffer$("");
      for (t1 = J.get$iterator$ax(J.get$annotations$x(receiver._annotations$__$annotations)); t1.moveNext$0();) {
        annotation = t1.get$current();
        t2 = annotation.get$link();
        t3 = $.get$searchIndex()._search0$_map;
        t2 = t2.loc;
        t4 = t2.packageName;
        if (t4 == null)
          t4 = "";
        else
          t4 = t2.libraryName == null ? t4 : H.S(t4) + "/";
        t5 = t2.libraryName;
        if (t5 == null)
          t5 = "";
        t6 = t2.memberName;
        t6 = t6 == null ? "" : "." + H.S(t6);
        t2 = t2.subMemberName;
        if (t3.containsKey$1(C.JSArray_methods.join$1([t4, t5, t6, t2 == null ? "" : "." + H.S(t2)], "")) === true) {
          t2 = annotation.get$link().loc;
          t3 = t2.packageName;
          if (t3 == null)
            t3 = "";
          else
            t3 = t2.libraryName == null ? t3 : H.S(t3) + "/";
          t4 = t2.libraryName;
          if (t4 == null)
            t4 = "";
          t5 = t2.memberName;
          t5 = t5 == null ? "" : "." + H.S(t5);
          t6 = t2.subMemberName;
          t3 = C.JSArray_methods.join$1([t3, t4, t5, t6 == null ? "" : "." + H.S(t6)], "");
          if ($.get$viewer().redirectToDartlang) {
            t2 = t2.libraryName;
            t2 = t2 != null && J.startsWith$1$s(t2, "dart-");
          } else
            t2 = false;
          if (t2) {
            t2 = $._dartdocMain;
            if (t2 == null) {
              t2 = document.querySelector("#dartdoc-main");
              $._dartdocMain = t2;
            }
            t2 = "https://api.dartlang.org/apidocs/channels/" + J.get$sdkChannel$x(t2) + "/dartdoc-viewer/";
            t4 = $._dartdocMain;
            if (t4 == null) {
              t4 = document.querySelector("#dartdoc-main");
              $._dartdocMain = t4;
            }
            t3 = t2 + J.get$sdkRevisionNum$x(t4) + t3;
            t2 = t3;
          } else {
            t2 = H.S(Y.entryPoint());
            t2 = t2 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t3;
          }
          t2 = "<a href=\"" + t2 + "\" on-click=\"{{routeLink}}>" + H.S(annotation.get$shortName()) + "</a>";
          out._contents += t2;
        } else {
          t2 = annotation.get$link().loc;
          t3 = new Y.DocsLocation(null, null, null, null, null);
          t3.packageName = t2.packageName;
          t3.libraryName = t2.libraryName;
          t3.memberName = t2.memberName;
          t3.subMemberName = t2.subMemberName;
          t3.anchor = t2.anchor;
          t3.anchor = null;
          str = t3.get$name(t3);
          out._contents += typeof str === "string" ? str : H.S(str);
        }
        t2 = J.getInterceptor$x(annotation);
        hasParams = J.get$isNotEmpty$asx(t2.get$parameters(annotation));
        if (hasParams)
          out._contents += "(";
        str = J.join$1$ax(t2.get$parameters(annotation), ", ");
        t3 = out._contents += typeof str === "string" ? str : H.S(str);
        if (hasParams)
          out._contents = t3 + ")";
        if (!t2.$eq(annotation, J.get$last$ax(J.get$annotations$x(receiver._annotations$__$annotations))))
          out._contents += ",<br />";
      }
      if (receiver._annotations$__$annotations.get$supportedBrowsers().length !== 0) {
        out.write$1("<br>Supported on: ");
        out.write$1(C.JSArray_methods.join$1(receiver._annotations$__$annotations.get$supportedBrowsers(), ", "));
      }
      t1 = out._contents;
      t2 = $.get$nullSanitizer();
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, t1, t2, null));
    }, "call$0", "get$annotationsChanged", 0, 0, 10],
    static: {AnnotationElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.AnnotationElement_methods.Element$created$0(receiver);
        C.AnnotationElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  PolymerElement_ChangeNotifier: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["web.app", "package:dartdoc_viewer/app.dart", , V, {
  "^": "",
  navigate: [function($event) {
    var t1, t2, newLocation;
    t1 = window.location.pathname;
    t2 = window.location.hash;
    if (typeof t1 !== "string")
      return t1.$add();
    newLocation = J.$add$ns(t1, t2);
    if (!$.useHistory)
      newLocation = Y.locationDeprefixed(window.location.hash);
    t1 = $.get$viewer();
    if (t1._viewer0$__$homePage != null)
      t1.handleLink$2(newLocation, false);
  }, "call$1", "navigate$closure", 2, 0, 13, 47],
  initApp: function() {
    $.get$Polymer__ready().future.then$1(new V.initApp_closure());
  },
  initApp_closure: {
    "^": "Closure0:30;",
    call$1: [function(_) {
      var t1, hash, hashLocation, t2;
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_resize._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(new V.initApp__closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      t1 = $._dartdocMain;
      if (t1 == null) {
        t1 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t1;
      }
      J.hideOrShowNavigation$0$x(t1);
      hash = Y.locationDeprefixed(window.location.hash);
      hashLocation = J.startsWith$1$s(hash, "id_") ? "" : hash;
      if (!C.JSString_methods.get$isEmpty(hashLocation) || !$.useHistory)
        $.location = hashLocation;
      else {
        t1 = window.location.pathname;
        t2 = window.location.hash;
        if (typeof t1 !== "string")
          return t1.$add();
        $.location = J.$add$ns(t1, t2);
      }
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, C.EventStreamProvider_popstate._eventType, false), [null]);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(V.navigate$closure()), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)])._tryResume$0();
      $.get$viewer()._finishedCompleter.future.then$1(new V.initApp__closure0());
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  },
  initApp__closure: {
    "^": "Closure0:30;",
    call$1: [function($event) {
      var t1, t2;
      t1 = $.get$viewer();
      t2 = window.innerWidth;
      if (typeof t2 !== "number")
        return t2.$gt();
      t1._viewer0$__$isDesktop = F.notifyPropertyChangeHelper(t1, C.Symbol_isDesktop, t1._viewer0$__$isDesktop, t2 > 1006);
      t1 = $._dartdocMain;
      if (t1 == null) {
        t1 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t1;
      }
      J.collapseSearchAndOptionsIfNeeded$0$x(t1);
      t1 = $._dartdocMain;
      if (t1 == null) {
        t1 = document.querySelector("#dartdoc-main");
        $._dartdocMain = t1;
      }
      J.hideOrShowNavigation$0$x(t1);
    }, "call$1", null, 2, 0, null, 47, "call"],
    $isFunction: true
  },
  initApp__closure0: {
    "^": "Closure0:30;",
    call$1: [function(_) {
      var t1 = $.location;
      if (t1 != null && t1 !== "")
        $.get$viewer().handleLink$2(t1, $.useHistory);
      else {
        t1 = $.get$viewer();
        t1.set$currentPage(t1._viewer0$__$startPage);
      }
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  }
}],
["web.breadcrumbs", "package:dartdoc_viewer/components/breadcrumbs.dart", , U, {
  "^": "",
  Breadcrumbs: {
    "^": "PolymerElement_ChangeNotifier0;_breadcrumbs$__$breadcrumbs,_breadcrumbs$__$lastCrumb,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$breadcrumbs: function(receiver) {
      return receiver._breadcrumbs$__$breadcrumbs;
    },
    set$breadcrumbs: function(receiver, value) {
      receiver._breadcrumbs$__$breadcrumbs = this.notifyPropertyChange$3(receiver, C.Symbol_breadcrumbs, receiver._breadcrumbs$__$breadcrumbs, value);
    },
    get$lastCrumb: function(receiver) {
      return receiver._breadcrumbs$__$lastCrumb;
    },
    set$lastCrumb: function(receiver, value) {
      receiver._breadcrumbs$__$lastCrumb = this.notifyPropertyChange$3(receiver, C.Symbol_lastCrumb, receiver._breadcrumbs$__$lastCrumb, value);
    },
    get$syntax: function(receiver) {
      return $.get$defaultSyntax();
    },
    get$applyAuthorStyles: function(receiver) {
      return true;
    },
    enteredView$0: function(receiver) {
      var t1;
      A.Polymer.prototype.enteredView$0.call(this, receiver);
      t1 = $.get$viewer();
      this.registerObserver$2(receiver, "viewer", t1.get$changes(t1).listen$1(new U.Breadcrumbs_enteredView_closure(receiver)));
      this._updateBreadcrumbs$0(receiver);
    },
    _updateBreadcrumbs$0: function(receiver) {
      var t1, p, t2, t3;
      receiver._breadcrumbs$__$breadcrumbs = this.notifyPropertyChange$3(receiver, C.Symbol_breadcrumbs, receiver._breadcrumbs$__$breadcrumbs, []);
      receiver._breadcrumbs$__$lastCrumb = this.notifyPropertyChange$3(receiver, C.Symbol_lastCrumb, receiver._breadcrumbs$__$lastCrumb, null);
      t1 = $.get$viewer();
      if (t1._viewer0$__$homePage != null && t1._currentPage != null) {
        for (p = t1._currentPage; t2 = J.$eq(p, t1._viewer0$__$homePage), t3 = receiver._breadcrumbs$__$breadcrumbs, !t2; p = p.get$owner())
          J.add$1$ax(t3, p);
        t1 = J.toList$0$ax(J.get$reversed$ax(t3));
        receiver._breadcrumbs$__$breadcrumbs = this.notifyPropertyChange$3(receiver, C.Symbol_breadcrumbs, receiver._breadcrumbs$__$breadcrumbs, t1);
      }
      this.fire$1(receiver, "update");
    },
    static: {Breadcrumbs$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.Breadcrumbs_methods.Element$created$0(receiver);
        C.Breadcrumbs_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  PolymerElement_ChangeNotifier0: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  },
  Breadcrumbs_enteredView_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(changes) {
      var t1, change, t2;
      for (t1 = J.get$iterator$ax(changes); t1.moveNext$0();) {
        change = t1.get$current();
        t2 = J.getInterceptor$x(change);
        if (J.$eq(t2.get$name(change), C.Symbol_currentPage) || J.$eq(t2.get$name(change), C.Symbol_homePage)) {
          J._updateBreadcrumbs$0$x(this.this_0);
          return;
        }
      }
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  }
}],
["web.category", "package:dartdoc_viewer/components/category.dart", , O, {
  "^": "",
  CategoryElement: {
    "^": "DartdocElement_ChangeNotifier;_category$__$category,_category$__$items,_category$__$typedefs,_category$__$variables,_category$__$methods,_category$__$hasItems,_category$__$title,_category$__$stylizedName,_category$__$accordionStyle,_category$__$divClass,_category$__$caretStyle,_category$__$lineHeight,__isExpanded,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$category: function(receiver) {
      return receiver._category$__$category;
    },
    set$category: function(receiver, value) {
      receiver._category$__$category = this.notifyPropertyChange$3(receiver, C.Symbol_category, receiver._category$__$category, value);
    },
    get$items: function(receiver) {
      return receiver._category$__$items;
    },
    set$items: function(receiver, value) {
      receiver._category$__$items = this.notifyPropertyChange$3(receiver, C.Symbol_items, receiver._category$__$items, value);
    },
    get$typedefs: function(receiver) {
      return receiver._category$__$typedefs;
    },
    set$typedefs: function(receiver, value) {
      receiver._category$__$typedefs = this.notifyPropertyChange$3(receiver, C.Symbol_typedefs, receiver._category$__$typedefs, value);
    },
    get$variables: function(receiver) {
      return receiver._category$__$variables;
    },
    set$variables: function(receiver, value) {
      receiver._category$__$variables = this.notifyPropertyChange$3(receiver, C.Symbol_variables, receiver._category$__$variables, value);
    },
    get$methods: function(receiver) {
      return receiver._category$__$methods;
    },
    set$methods: function(receiver, value) {
      receiver._category$__$methods = this.notifyPropertyChange$3(receiver, C.Symbol_methods, receiver._category$__$methods, value);
    },
    get$hasItems: function(receiver) {
      return receiver._category$__$hasItems;
    },
    set$hasItems: function(receiver, value) {
      receiver._category$__$hasItems = this.notifyPropertyChange$3(receiver, C.Symbol_hasItems, receiver._category$__$hasItems, value);
    },
    get$title: function(receiver) {
      return receiver._category$__$title;
    },
    set$title: function(receiver, value) {
      receiver._category$__$title = this.notifyPropertyChange$3(receiver, C.Symbol_title, receiver._category$__$title, value);
    },
    get$stylizedName: function(receiver) {
      return receiver._category$__$stylizedName;
    },
    set$stylizedName: function(receiver, value) {
      receiver._category$__$stylizedName = this.notifyPropertyChange$3(receiver, C.Symbol_stylizedName, receiver._category$__$stylizedName, value);
    },
    get$accordionStyle: function(receiver) {
      return receiver._category$__$accordionStyle;
    },
    set$accordionStyle: function(receiver, value) {
      receiver._category$__$accordionStyle = this.notifyPropertyChange$3(receiver, C.Symbol_accordionStyle, receiver._category$__$accordionStyle, value);
    },
    get$divClass: function(receiver) {
      return receiver._category$__$divClass;
    },
    set$divClass: function(receiver, value) {
      receiver._category$__$divClass = this.notifyPropertyChange$3(receiver, C.Symbol_divClass, receiver._category$__$divClass, value);
    },
    get$caretStyle: function(receiver) {
      return receiver._category$__$caretStyle;
    },
    set$caretStyle: function(receiver, value) {
      receiver._category$__$caretStyle = this.notifyPropertyChange$3(receiver, C.Symbol_caretStyle, receiver._category$__$caretStyle, value);
    },
    get$lineHeight: function(receiver) {
      return receiver._category$__$lineHeight;
    },
    set$lineHeight: function(receiver, value) {
      receiver._category$__$lineHeight = this.notifyPropertyChange$3(receiver, C.Symbol_lineHeight, receiver._category$__$lineHeight, value);
    },
    set$_isExpanded: function(receiver, expanded) {
      var t1, t2;
      receiver.__isExpanded = expanded;
      t1 = expanded === true;
      t2 = t1 ? "" : "collapsed";
      receiver._category$__$accordionStyle = this.notifyPropertyChange$3(receiver, C.Symbol_accordionStyle, receiver._category$__$accordionStyle, t2);
      t2 = t1 ? "collapse in" : "collapse";
      receiver._category$__$divClass = this.notifyPropertyChange$3(receiver, C.Symbol_divClass, receiver._category$__$divClass, t2);
      t2 = t1 ? "" : "caret";
      receiver._category$__$caretStyle = this.notifyPropertyChange$3(receiver, C.Symbol_caretStyle, receiver._category$__$caretStyle, t2);
      t1 = t1 ? "auto" : "0px";
      receiver._category$__$lineHeight = this.notifyPropertyChange$3(receiver, C.Symbol_lineHeight, receiver._category$__$lineHeight, t1);
    },
    categoryChanged$0: [function(receiver) {
      var t1 = receiver._category$__$category;
      t1 = t1 == null ? "" : J.get$name$x(t1);
      receiver._category$__$title = this.notifyPropertyChange$3(receiver, C.Symbol_title, receiver._category$__$title, t1);
      t1 = receiver._category$__$category;
      t1 = t1 == null ? "" : J.replaceAll$2$s(J.get$name$x(t1), " ", "-");
      receiver._category$__$stylizedName = this.notifyPropertyChange$3(receiver, C.Symbol_stylizedName, receiver._category$__$stylizedName, t1);
    }, "call$0", "get$categoryChanged", 0, 0, 10],
    itemsChanged$0: [function(receiver) {
      return this._updateHasItems$0(receiver);
    }, "call$0", "get$itemsChanged", 0, 0, 10],
    variablesChanged$0: [function(receiver) {
      return this._updateHasItems$0(receiver);
    }, "call$0", "get$variablesChanged", 0, 0, 10],
    methodsChanged$0: [function(receiver) {
      return this._updateHasItems$0(receiver);
    }, "call$0", "get$methodsChanged", 0, 0, 10],
    typedefsChanged$0: [function(receiver) {
      return this._updateHasItems$0(receiver);
    }, "call$0", "get$typedefsChanged", 0, 0, 10],
    _updateHasItems$0: function(receiver) {
      var t1 = receiver._category$__$items;
      if (!(t1 != null && J.get$isNotEmpty$asx(t1))) {
        t1 = receiver._category$__$variables;
        if (!(t1 != null && J.get$isNotEmpty$asx(t1))) {
          t1 = receiver._category$__$methods;
          if (!(t1 != null && J.get$isNotEmpty$asx(t1))) {
            t1 = receiver._category$__$typedefs;
            t1 = t1 != null && J.get$isNotEmpty$asx(t1);
          } else
            t1 = true;
        } else
          t1 = true;
      } else
        t1 = true;
      receiver._category$__$hasItems = this.notifyPropertyChange$3(receiver, C.Symbol_hasItems, receiver._category$__$hasItems, t1);
    },
    hideShow$3: [function(receiver, $event, detail, target) {
      this.set$_isExpanded(receiver, receiver.__isExpanded !== true);
    }, "call$3", "get$hideShow", 6, 0, 146, 47, 147, 148],
    CategoryElement$created$0: function(receiver) {
      var t1 = $.get$viewer();
      this.registerObserver$2(receiver, "viewer", t1.get$changes(t1).listen$1(new O.CategoryElement$created_closure(receiver)));
      this.set$_isExpanded(receiver, t1._viewer0$__$isDesktop);
    },
    static: {CategoryElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._category$__$hasItems = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.CategoryElement_methods.Element$created$0(receiver);
        C.CategoryElement_methods.PolymerElement$created$0(receiver);
        C.CategoryElement_methods.CategoryElement$created$0(receiver);
        return receiver;
      }}
  },
  DartdocElement_ChangeNotifier: {
    "^": "DartdocElement+ChangeNotifier;",
    $isObservable: true
  },
  CategoryElement$created_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new O.CategoryElement$created__closure()) === true)
        J.set$_isExpanded$x(this.this_0, $.get$viewer()._viewer0$__$isDesktop);
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  },
  CategoryElement$created__closure: {
    "^": "Closure0:30;",
    call$1: function(c) {
      return J.$eq(J.get$name$x(c), C.Symbol_isDesktop);
    },
    $isFunction: true
  }
}],
["web.class_", "package:dartdoc_viewer/components/class.dart", , T, {
  "^": "",
  ClassElement: {
    "^": "MemberElement;lazyConstructors=,lazyOperators=,lazyInstanceFunctions=,lazyStaticFunctions=,lazyInstanceVariables=,lazyStaticVariables=,_loader,_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$defaultItem: function(receiver) {
      return $.get$ClassElement__defaultItem();
    },
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isClass;
    },
    showSubclass$3: function(receiver, $event, detail, target) {
      var t1;
      for (t1 = W._FrozenElementList$_wrap((receiver.shadowRoot || receiver.webkitShadowRoot).querySelectorAll(".hidden"), null), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        J.remove$1$ax(J.get$classes$x(t1._current), "hidden");
      J.get$classes$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#subclass-button")).add$1(0, "hidden");
    },
    leftView$0: function(receiver) {
      var t1;
      A.Polymer.prototype.leftView$0.call(this, receiver);
      t1 = receiver._loader;
      if (t1 != null) {
        t1._canceled = true;
        receiver._loader = null;
      }
    },
    _loadCategories$0: function(receiver) {
      var t1, categories;
      t1 = receiver._loader;
      if (t1 != null)
        t1._canceled = true;
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      t1 = X._LazyListCopier$(H.setRuntimeTypeInfo(new H.MappedListIterable(t1.get$categories(), new T.ClassElement__loadCategories_closure()), [null, null]).toList$0(0), [receiver.lazyConstructors, receiver.lazyOperators, receiver.lazyInstanceFunctions, receiver.lazyStaticFunctions, receiver.lazyInstanceVariables, receiver.lazyStaticVariables]);
      categories = new X.LazyListLoader(t1, 25, false);
      if ($.get$viewer()._hash !== "")
        t1.loadAll$0();
      else
        categories._loadItems$1(null);
      receiver._loader = categories;
    },
    itemChanged$0: [function(receiver) {
      U.MemberElement.prototype.itemChanged$0.call(this, receiver);
      this._loadCategories$0(receiver);
      if ((receiver.shadowRoot || receiver.webkitShadowRoot) != null) {
        this.addInterfaces$0(receiver);
        this.addSubclasses$0(receiver);
      }
    }, "call$0", "get$itemChanged", 0, 0, 10],
    addInterfaces$0: function(receiver) {
      var p, t1, t2;
      p = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#interfaces");
      if (p == null)
        return;
      t1 = J.getInterceptor$x(p);
      t1.get$children(p).clear$0(0);
      t2 = receiver._item;
      if (t2 == null) {
        t2 = this.get$defaultItem(receiver);
        receiver._item = t2;
      }
      if (J.get$isNotEmpty$asx(t2.get$interfaces())) {
        t1.insertAdjacentText$2(p, "beforeend", "Implements: ");
        t2 = receiver._item;
        if (t2 == null) {
          t2 = this.get$defaultItem(receiver);
          receiver._item = t2;
        }
        J.forEach$1$ax(this.makeLinks$1(receiver, t2.get$interfaces()), t1.get$append(p));
        t1.insertAdjacentText$2(p, "beforeend", " ");
      }
      t2 = receiver._item;
      if (t2 == null) {
        t2 = this.get$defaultItem(receiver);
        receiver._item = t2;
      }
      if (t2.get$superClass() != null) {
        t1.insertAdjacentText$2(p, "beforeend", "Extends: ");
        t2 = receiver._item;
        if (t2 == null) {
          t2 = this.get$defaultItem(receiver);
          receiver._item = t2;
        }
        J.forEach$1$ax(this.makeLinks$1(receiver, [t2.get$superClass()]), t1.get$append(p));
      }
    },
    addSubclasses$0: function(receiver) {
      var t1, p, t2, subclasses, links, ellipsis, t3;
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      if (J.$eq(t1.get$qualifiedName(), "dart.core.Object"))
        return;
      p = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#subclasses");
      t1 = J.getInterceptor$x(p);
      t1.get$children(p).clear$0(0);
      t2 = receiver._item;
      if (t2 == null) {
        t2 = this.get$defaultItem(receiver);
        receiver._item = t2;
      }
      subclasses = t2.get$subclasses();
      t2 = J.getInterceptor$ax(subclasses);
      links = this.makeLinks$1(receiver, t2.take$1(subclasses, 3));
      if (t2.get$isNotEmpty(subclasses)) {
        t1.insertAdjacentText$2(p, "beforeend", "Subclasses: ");
        J.forEach$1$ax(links, t1.get$append(p));
      }
      if (t2.get$length(subclasses) <= 3)
        return;
      ellipsis = W.AnchorElement_AnchorElement(null);
      t3 = J.getInterceptor$x(ellipsis);
      t3.set$classes(ellipsis, ["btn", "btn-link", "btn-xs"]);
      ellipsis.id = "subclass-button";
      ellipsis.textContent = "...";
      t3 = t3.get$onClick(ellipsis);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(new T.ClassElement_addSubclasses_closure(receiver)), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
      p.appendChild(ellipsis);
      J.forEach$1$ax(this.makeLinks$2$hidden(receiver, t2.skip$1(subclasses, 3), true), t1.get$append(p));
    },
    makeLinks$2$hidden: function(receiver, classes, hidden) {
      var t1 = {};
      t1.first_0 = !hidden;
      return J.map$1$ax(classes, new T.ClassElement_makeLinks_closure(receiver, hidden)).fold$2(0, [], new T.ClassElement_makeLinks_closure0(t1, hidden));
    },
    makeLinks$1: function($receiver, classes) {
      return this.makeLinks$2$hidden($receiver, classes, false);
    },
    makeLink$2$hidden: function(receiver, cls, hidden) {
      var t1, t2, t3;
      t1 = W.AnchorElement_AnchorElement(null);
      t2 = J.getInterceptor$x(t1);
      t2.set$href(t1, cls.get$prefixedLocation());
      t3 = t2.get$onClick(t1);
      H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(new T.ClassElement_makeLink_closure(receiver)), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
      t1.id = "subclass-hidden";
      t2.set$classes(t1, hidden ? ["hidden"] : []);
      t1.textContent = cls.get$simpleType();
      return t1;
    },
    ClassElement$created$0: function(receiver) {
      var t1 = $.get$viewer();
      this.registerObserver$2(receiver, "viewer", t1.get$changes(t1).listen$1(new T.ClassElement$created_closure(receiver)));
    },
    static: {"^": "ClassElement_MAX_SUBCLASSES_TO_SHOW,ClassElement__defaultItem", ClassElement$created: function(receiver) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
        t1 = Q.ObservableList$(null, null);
        t2 = Q.ObservableList$(null, null);
        t3 = Q.ObservableList$(null, null);
        t4 = Q.ObservableList$(null, null);
        t5 = Q.ObservableList$(null, null);
        t6 = Q.ObservableList$(null, null);
        t7 = $.get$Polymer__polymerSyntax();
        t8 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t9 = P.String;
        t10 = W.Element;
        t10 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t9, t10), null, null), [t9, t10]);
        receiver.lazyConstructors = t1;
        receiver.lazyOperators = t2;
        receiver.lazyInstanceFunctions = t3;
        receiver.lazyStaticFunctions = t4;
        receiver.lazyInstanceVariables = t5;
        receiver.lazyStaticVariables = t6;
        receiver.polymer$Polymer$syntax = t7;
        receiver.polymer$Polymer$_shadowRoots = t8;
        receiver.polymer$Polymer$$ = t10;
        C.ClassElement_methods.Element$created$0(receiver);
        C.ClassElement_methods.PolymerElement$created$0(receiver);
        C.ClassElement_methods.MemberElement$created$0(receiver);
        C.ClassElement_methods.ClassElement$created$0(receiver);
        return receiver;
      }}
  },
  ClassElement$created_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(changes) {
      if (J.any$1$ax(changes, new T.ClassElement$created__closure()) === true)
        J._loadCategories$0$x(this.this_0);
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  },
  ClassElement$created__closure: {
    "^": "Closure0:30;",
    call$1: function(c) {
      var t1 = J.getInterceptor$x(c);
      return J.$eq(t1.get$name(c), C.Symbol_isInherited) || J.$eq(t1.get$name(c), C.Symbol_showObjectMembers);
    },
    $isFunction: true
  },
  ClassElement__loadCategories_closure: {
    "^": "Closure0:30;",
    call$1: [function(x) {
      var t1 = $.get$viewer();
      return x.filteredContent$1(t1.get$filter(t1));
    }, "call$1", null, 2, 0, null, 133, "call"],
    $isFunction: true
  },
  ClassElement_addSubclasses_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function($event) {
      return J.showSubclass$3$x(this.this_0, null, null, null);
    }, "call$1", null, 2, 0, null, 47, "call"],
    $isFunction: true
  },
  ClassElement_makeLinks_closure: {
    "^": "Closure0:30;this_1,hidden_2",
    call$1: [function(cls) {
      return J.makeLink$2$hidden$x(this.this_1, cls, this.hidden_2);
    }, "call$1", null, 2, 0, null, 149, "call"],
    $isFunction: true
  },
  ClassElement_makeLinks_closure0: {
    "^": "Closure0:58;box_0,hidden_3",
    call$2: function(list, classLink) {
      var t1 = this.box_0;
      if (t1.first_0)
        t1.first_0 = false;
      else {
        t1 = document.createElement("span", null);
        t1.textContent = ", ";
        t1.id = "subclass-hidden";
        J.set$classes$x(t1, this.hidden_3 ? ["hidden"] : []);
        J.add$1$ax(list, t1);
      }
      J.add$1$ax(list, classLink);
      return list;
    },
    $isFunction: true
  },
  ClassElement_makeLink_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function($event) {
      return U.routeLink($event, null, J.get$target$x($event));
    }, "call$1", null, 2, 0, null, 47, "call"],
    $isFunction: true
  }
}],
["web.closure", "package:dartdoc_viewer/components/closure.dart", , Z, {
  "^": "",
  ClosureElement: {
    "^": "PolymerElement_ChangeNotifier1;_closure$__$closure,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$closure: function(receiver) {
      return receiver._closure$__$closure;
    },
    set$closure: function(receiver, value) {
      receiver._closure$__$closure = this.notifyPropertyChange$3(receiver, C.Symbol_closure, receiver._closure$__$closure, value);
    },
    closureChanged$0: [function(receiver) {
      var outerSpan, t1, parameterName;
      this._clearChildren$0(receiver);
      outerSpan = document.createElement("span", null);
      if (!receiver._closure$__$closure.get$returnType().get$isDynamic()) {
        t1 = W._ElementFactoryProvider_createElement_tag("dartdoc-type", null);
        J.set$type$x(t1, receiver._closure$__$closure.get$returnType());
        outerSpan.appendChild(t1);
        J.insertAdjacentText$2$x(outerSpan, "beforeend", " ");
      }
      parameterName = W.AnchorElement_AnchorElement(null);
      parameterName.textContent = J.get$name$x(receiver._closure$__$closure);
      J.set$href$x(parameterName, receiver._closure$__$closure.get$prefixedAnchorHref());
      parameterName.id = receiver._closure$__$closure.get$anchorHrefLocation().anchor;
      outerSpan.appendChild(parameterName);
      t1 = W._ElementFactoryProvider_createElement_tag("dartdoc-parameter", null);
      J.set$parameters$x(t1, J.get$parameters$x(receiver._closure$__$closure));
      outerSpan.appendChild(t1);
      receiver.appendChild(outerSpan);
    }, "call$0", "get$closureChanged", 0, 0, 10],
    static: {ClosureElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ClosureElement_methods.Element$created$0(receiver);
        C.ClosureElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  PolymerElement_ChangeNotifier1: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["web.comment", "package:dartdoc_viewer/components/comment.dart", , S, {
  "^": "",
  CommentElement: {
    "^": "DivElement_Polymer_ChangeNotifier;_comment$__$item,_comment$__$preview,_commentElement,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$item: function(receiver) {
      return receiver._comment$__$item;
    },
    set$item: function(receiver, value) {
      receiver._comment$__$item = this.notifyPropertyChange$3(receiver, C.Symbol_item, receiver._comment$__$item, value);
    },
    get$preview: function(receiver) {
      return receiver._comment$__$preview;
    },
    set$preview: function(receiver, value) {
      receiver._comment$__$preview = this.notifyPropertyChange$3(receiver, C.Symbol_preview, receiver._comment$__$preview, value);
    },
    itemChanged$0: [function(receiver) {
      return this._updateComment$0(receiver);
    }, "call$0", "get$itemChanged", 0, 0, 11],
    previewChanged$0: [function(receiver) {
      return this._updateComment$0(receiver);
    }, "call$0", "get$previewChanged", 0, 0, 11],
    enteredView$0: function(receiver) {
      A.Polymer.prototype.enteredView$0.call(this, receiver);
      $.get$searchIndex().onLoad$1(0, this.get$_updateComment(receiver));
    },
    _updateComment$0: [function(receiver) {
      var t1, comment, firstParagraph, links, codeBlocks, e, t2;
      t1 = receiver._commentElement;
      if (t1 != null) {
        J.remove$0$ax(t1);
        receiver._commentElement = null;
      }
      t1 = receiver._comment$__$item;
      if (t1 == null)
        return;
      comment = t1.get$comment();
      if (receiver._comment$__$preview === true) {
        t1 = J.getInterceptor(receiver._comment$__$item);
        t1 = !!t1.$isClass || !!t1.$isLibrary;
      } else
        t1 = false;
      if (t1)
        comment = H.interceptedTypeCast(receiver._comment$__$item, "$isLazyItem").previewComment;
      if (!J.$eq(comment, "") && comment != null) {
        t1 = W._ElementFactoryProvider_createElement_tag("div", null);
        receiver._commentElement = t1;
        J.appendHtml$1$x(t1, comment);
        firstParagraph = receiver._commentElement;
        t1 = J.getInterceptor(firstParagraph);
        firstParagraph = !!t1.$isParagraphElement ? firstParagraph : t1.querySelector$1(firstParagraph, "p");
        if (firstParagraph != null)
          J.add$1$ax(J.get$classes$x(firstParagraph), "firstParagraph");
        links = J.querySelectorAll$1$x(receiver._commentElement, "a");
        for (t1 = links.get$iterator(links); t1.moveNext$0();)
          this._resolveLink$1(receiver, t1._current);
        codeBlocks = J.querySelectorAll$1$x(receiver._commentElement, "code");
        for (t1 = codeBlocks.get$iterator(codeBlocks); t1.moveNext$0();) {
          e = t1._current;
          t2 = J.getInterceptor$x(e);
          t2.setInnerHtml$2$treeSanitizer(e, $.get$context().callMethod$2("prettyPrintOne", [t2.get$innerHtml(e), "dart"]), $.get$nullSanitizer());
        }
        receiver.appendChild(receiver._commentElement);
      }
    }, "call$0", "get$_updateComment", 0, 0, 10],
    _replaceWithParameterReference$2: function(receiver, link, loc) {
      var t1, item, newAnchor, t2, t3;
      t1 = $.get$viewer();
      item = loc.item$1(0, t1._viewer0$__$homePage);
      if (!J.getInterceptor(item).$isParameter)
        return false;
      newAnchor = W.AnchorElement_AnchorElement(null);
      t2 = item.get$anchorHrefLocation();
      t3 = item.get$anchorHref();
      if (t1.redirectToDartlang) {
        t1 = t2.libraryName;
        t1 = t1 != null && J.startsWith$1$s(t1, "dart-");
      } else
        t1 = false;
      if (t1)
        t1 = Y.fullDartlangLocation(t3);
      else {
        t1 = H.S(Y.entryPoint());
        t1 = t1 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t3;
      }
      J.set$href$x(newAnchor, t1);
      newAnchor.textContent = loc.get$lastName();
      J.replaceWith$1$x(link, newAnchor);
      return true;
    },
    _resolveLink$1: function(receiver, link) {
      var t1, loc, replaced, t2, t3, t4, t5, t6, t7;
      t1 = J.getInterceptor$x(link);
      if (t1.get$href(link) !== "")
        return;
      loc = new Y.DocsLocation(null, null, null, null, null);
      loc._extractPieces$1(t1.get$text(link));
      replaced = this._replaceWithParameterReference$2(receiver, link, loc);
      t1.get$onClick(link).listen$1(new S.CommentElement__resolveLink_closure(receiver));
      if (replaced)
        return;
      t2 = $.get$searchIndex();
      if (t2._search0$_map.containsKey$1(t1.get$text(link)) === true) {
        t2 = loc.packageName;
        if (t2 == null)
          t2 = "";
        else
          t2 = loc.libraryName == null ? t2 : H.S(t2) + "/";
        t3 = loc.libraryName;
        if (t3 == null)
          t3 = "";
        t4 = loc.memberName;
        t4 = t4 == null ? "" : "." + H.S(t4);
        t5 = loc.subMemberName;
        t2 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
        t3 = loc.anchor;
        t4 = new Y.DocsLocation(null, null, null, null, null);
        t4._extractPieces$1(t2 + (t3 == null ? "" : "#" + H.S(t3)));
        t2 = t4.packageName;
        if (t2 == null)
          t2 = "";
        else
          t2 = t4.libraryName == null ? t2 : H.S(t2) + "/";
        t3 = t4.libraryName;
        if (t3 == null)
          t3 = "";
        t5 = t4.memberName;
        t5 = t5 == null ? "" : "." + H.S(t5);
        t6 = t4.subMemberName;
        t2 = C.JSArray_methods.join$1([t2, t3, t5, t6 == null ? "" : "." + H.S(t6)], "");
        if ($.get$viewer().redirectToDartlang) {
          t3 = t4.libraryName;
          t3 = t3 != null && J.startsWith$1$s(t3, "dart-");
        } else
          t3 = false;
        if (t3) {
          t3 = $._dartdocMain;
          if (t3 == null) {
            t3 = document.querySelector("#dartdoc-main");
            $._dartdocMain = t3;
          }
          t3 = "https://api.dartlang.org/apidocs/channels/" + J.get$sdkChannel$x(t3) + "/dartdoc-viewer/";
          t5 = $._dartdocMain;
          if (t5 == null) {
            t5 = document.querySelector("#dartdoc-main");
            $._dartdocMain = t5;
          }
          t2 = t3 + J.get$sdkRevisionNum$x(t5) + t2;
        } else {
          t3 = H.S(Y.entryPoint());
          t2 = t3 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t2;
        }
        t1.set$href(link, t2);
        t2 = new Y.DocsLocation(null, null, null, null, null);
        t2.packageName = t4.packageName;
        t2.libraryName = t4.libraryName;
        t2.memberName = t4.memberName;
        t2.subMemberName = t4.subMemberName;
        t2.anchor = t4.anchor;
        t2.anchor = null;
        t1.set$text(link, t2.get$name(t2));
        return;
      }
      t3 = t2._search0$_map;
      t4 = loc.get$componentNames();
      if (0 >= t4.length)
        return H.ioore(t4, 0);
      t4.pop();
      t4 = Y.DocsLocation$fromList(t4);
      t5 = t4.packageName;
      if (t5 == null)
        t5 = "";
      else
        t5 = t4.libraryName == null ? t5 : H.S(t5) + "/";
      t6 = t4.libraryName;
      if (t6 == null)
        t6 = "";
      t7 = t4.memberName;
      t7 = t7 == null ? "" : "." + H.S(t7);
      t4 = t4.subMemberName;
      if (t3.containsKey$1(C.JSArray_methods.join$1([t5, t6, t7, t4 == null ? "" : "." + H.S(t4)], "")) === true) {
        t2 = loc.packageName;
        if (t2 == null)
          t2 = "";
        else
          t2 = loc.libraryName == null ? t2 : H.S(t2) + "/";
        t3 = loc.libraryName;
        if (t3 == null)
          t3 = "";
        t4 = loc.memberName;
        t4 = t4 == null ? "" : "." + H.S(t4);
        t5 = loc.subMemberName;
        t2 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
        t3 = loc.anchor;
        t4 = new Y.DocsLocation(null, null, null, null, null);
        t4._extractPieces$1(t2 + (t3 == null ? "" : "#" + H.S(t3)));
        t2 = t4.packageName;
        if (t2 == null)
          t2 = "";
        else
          t2 = t4.libraryName == null ? t2 : H.S(t2) + "/";
        t3 = t4.libraryName;
        if (t3 == null)
          t3 = "";
        t5 = t4.memberName;
        t5 = t5 == null ? "" : "." + H.S(t5);
        t6 = t4.subMemberName;
        t2 = C.JSArray_methods.join$1([t2, t3, t5, t6 == null ? "" : "." + H.S(t6)], "");
        if ($.get$viewer().redirectToDartlang) {
          t3 = t4.libraryName;
          t3 = t3 != null && J.startsWith$1$s(t3, "dart-");
        } else
          t3 = false;
        if (t3) {
          t3 = $._dartdocMain;
          if (t3 == null) {
            t3 = document.querySelector("#dartdoc-main");
            $._dartdocMain = t3;
          }
          t3 = "https://api.dartlang.org/apidocs/channels/" + J.get$sdkChannel$x(t3) + "/dartdoc-viewer/";
          t5 = $._dartdocMain;
          if (t5 == null) {
            t5 = document.querySelector("#dartdoc-main");
            $._dartdocMain = t5;
          }
          t2 = t3 + J.get$sdkRevisionNum$x(t5) + t2;
        } else {
          t3 = H.S(Y.entryPoint());
          t2 = t3 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t2;
        }
        t1.set$href(link, t2);
        t2 = new Y.DocsLocation(null, null, null, null, null);
        t2.packageName = t4.packageName;
        t2.libraryName = t4.libraryName;
        t2.memberName = t4.memberName;
        t2.subMemberName = t4.subMemberName;
        t2.anchor = t4.anchor;
        t2.anchor = null;
        t1.set$text(link, t2.get$name(t2));
        return;
      }
      loc.packageName = null;
      t2 = t2._search0$_map;
      t3 = loc.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = loc.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = loc.subMemberName;
      t3 = C.JSArray_methods.join$1(["", t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
      t4 = loc.anchor;
      if (t2.containsKey$1(t3 + (t4 == null ? "" : "#" + H.S(t4))) === true) {
        t2 = loc.packageName;
        if (t2 == null)
          t2 = "";
        else
          t2 = loc.libraryName == null ? t2 : H.S(t2) + "/";
        t3 = loc.libraryName;
        if (t3 == null)
          t3 = "";
        t4 = loc.memberName;
        t4 = t4 == null ? "" : "." + H.S(t4);
        t5 = loc.subMemberName;
        t2 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
        t3 = loc.anchor;
        t4 = new Y.DocsLocation(null, null, null, null, null);
        t4._extractPieces$1(t2 + (t3 == null ? "" : "#" + H.S(t3)));
        t2 = t4.packageName;
        if (t2 == null)
          t2 = "";
        else
          t2 = t4.libraryName == null ? t2 : H.S(t2) + "/";
        t3 = t4.libraryName;
        if (t3 == null)
          t3 = "";
        t5 = t4.memberName;
        t5 = t5 == null ? "" : "." + H.S(t5);
        t6 = t4.subMemberName;
        t2 = C.JSArray_methods.join$1([t2, t3, t5, t6 == null ? "" : "." + H.S(t6)], "");
        if ($.get$viewer().redirectToDartlang) {
          t3 = t4.libraryName;
          t3 = t3 != null && J.startsWith$1$s(t3, "dart-");
        } else
          t3 = false;
        if (t3) {
          t3 = $._dartdocMain;
          if (t3 == null) {
            t3 = document.querySelector("#dartdoc-main");
            $._dartdocMain = t3;
          }
          t3 = "https://api.dartlang.org/apidocs/channels/" + J.get$sdkChannel$x(t3) + "/dartdoc-viewer/";
          t5 = $._dartdocMain;
          if (t5 == null) {
            t5 = document.querySelector("#dartdoc-main");
            $._dartdocMain = t5;
          }
          t2 = t3 + J.get$sdkRevisionNum$x(t5) + t2;
        } else {
          t3 = H.S(Y.entryPoint());
          t2 = t3 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t2;
        }
        t1.set$href(link, t2);
        t2 = new Y.DocsLocation(null, null, null, null, null);
        t2.packageName = t4.packageName;
        t2.libraryName = t4.libraryName;
        t2.memberName = t4.memberName;
        t2.subMemberName = t4.subMemberName;
        t2.anchor = t4.anchor;
        t2.anchor = null;
        t1.set$text(link, t2.get$name(t2));
        return;
      }
      t2 = W._ElementFactoryProvider_createElement_tag("i", null);
      J.set$text$x(t2, t1.get$text(link));
      t1.replaceWith$1(link, t2);
    },
    rerouteLink$3: [function(receiver, $event, detail, target) {
      return U.routeLink($event, detail, target);
    }, "call$3", "get$rerouteLink", 6, 0, 150, 47, 147, 148],
    CommentElement$created$0: function(receiver) {
      this.polymerCreated$0(receiver);
      new W._ElementCssClassSet(receiver).add$1(0, "description");
    },
    static: {CommentElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._comment$__$preview = false;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.CommentElement_methods.Element$created$0(receiver);
        C.CommentElement_methods.CommentElement$created$0(receiver);
        return receiver;
      }}
  },
  DivElement_Polymer: {
    "^": "DivElement+Polymer;syntax:polymer$Polymer$syntax=",
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  DivElement_Polymer_ChangeNotifier: {
    "^": "DivElement_Polymer+ChangeNotifier;",
    $isObservable: true
  },
  CommentElement__resolveLink_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function($event) {
      return U.routeLink($event, null, J.get$target$x($event));
    }, "call$1", null, 2, 0, null, 47, "call"],
    $isFunction: true
  }
}],
["web.homepage", "package:dartdoc_viewer/components/homepage.dart", , Z, {
  "^": "",
  HomeElement: {
    "^": "MemberElement;_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$defaultItem: function(receiver) {
      return;
    },
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isHome;
    },
    static: {HomeElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.HomeElement_methods.Element$created$0(receiver);
        C.HomeElement_methods.PolymerElement$created$0(receiver);
        C.HomeElement_methods.MemberElement$created$0(receiver);
        return receiver;
      }}
  }
}],
["web.item", "package:dartdoc_viewer/components/item.dart", , M, {
  "^": "",
  ItemElement: {
    "^": "MemberElement;_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isItem;
    },
    get$defaultItem: function(receiver) {
      return $.get$ItemElement__defaultItem();
    },
    static: {"^": "ItemElement__defaultItem", ItemElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ItemElement_methods.Element$created$0(receiver);
        C.ItemElement_methods.PolymerElement$created$0(receiver);
        C.ItemElement_methods.MemberElement$created$0(receiver);
        return receiver;
      }}
  }
}],
["web.lazy_load", "package:dartdoc_viewer/lazy_load.dart", , X, {
  "^": "",
  LazyListLoader: {
    "^": "Object;_copier,_itemsPerFrame,_canceled",
    cancel$0: function() {
      this._canceled = true;
    },
    _loadItems$1: [function(_) {
      var t1;
      if (this._canceled)
        return;
      t1 = this._copier;
      t1.load$1(0, this._itemsPerFrame);
      if (t1.list < t1.src.length)
        C.Window_methods.get$animationFrame(window).then$1(this.get$_loadItems());
    }, "call$1", "get$_loadItems", 2, 0, 13, 79]
  },
  _LazyListCopier: {
    "^": "Object;list,offset,src,dest",
    next$0: [function() {
      var t1, t2, t3, t4;
      t1 = this.list;
      t2 = this.src;
      t3 = t2.length;
      if (t1 >= t3)
        return;
      t4 = this.dest;
      if (t1 >= 6)
        return H.ioore(t4, t1);
      t4 = t4[t1];
      if (t1 >= t3)
        return H.ioore(t2, t1);
      t4.add$1(0, J.$index$asx(t2[t1], this.offset++));
      this._maybeMoveToNextList$0();
    }, "call$0", "get$next", 0, 0, 10],
    _maybeMoveToNextList$0: function() {
      var t1, t2, t3;
      t1 = this.src;
      while (true) {
        t2 = this.list;
        if (t2 < t1.length) {
          t3 = this.offset;
          t2 = J.get$length$asx(t1[t2]);
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = t3 >= t2;
        } else
          t2 = false;
        if (!t2)
          break;
        ++this.list;
        this.offset = 0;
      }
    },
    loadAll$0: function() {
      var t1, t2, i, t3, t4;
      for (t1 = this.src, t2 = this.dest, i = 0; t3 = t1.length, i < t3; ++i) {
        if (i >= 6)
          return H.ioore(t2, i);
        t4 = t2[i];
        if (i >= t3)
          return H.ioore(t1, i);
        t4.addAll$1(0, t1[i]);
      }
    },
    load$1: function(_, count) {
      var t1, i;
      t1 = this.src;
      i = 0;
      while (true) {
        if (!(i < count && this.list < t1.length))
          break;
        this.next$0();
        ++i;
      }
    },
    _LazyListCopier$2: function(src, dest) {
      var t1;
      for (t1 = this.dest, t1 = H.setRuntimeTypeInfo(new H.ListIterator(t1, 6, 0, null), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
        J.clear$0$ax(t1._current);
      this._maybeMoveToNextList$0();
    },
    static: {_LazyListCopier$: function(src, dest) {
        var t1 = new X._LazyListCopier(0, 0, src, dest);
        t1._LazyListCopier$2(src, dest);
        return t1;
      }}
  }
}],
["web.library", "package:dartdoc_viewer/components/library.dart", , G, {
  "^": "",
  LibraryElement: {
    "^": "MemberElement;lazyOperators=,lazyVariables=,lazyFunctions=,lazyClasses=,lazyTypedefs=,lazyErrors=,_library$_loader,_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isLibrary;
    },
    get$defaultItem: function(receiver) {
      return $.get$LibraryElement__defaultItem();
    },
    leftView$0: function(receiver) {
      var t1;
      A.Polymer.prototype.leftView$0.call(this, receiver);
      t1 = receiver._library$_loader;
      if (t1 != null) {
        t1._canceled = true;
        receiver._library$_loader = null;
      }
    },
    itemChanged$0: [function(receiver) {
      var t1, t2, t3, t4, t5, t6;
      U.MemberElement.prototype.itemChanged$0.call(this, receiver);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
        t2 = t1;
      } else
        t2 = t1;
      if (t1 == null)
        return;
      t1 = receiver._library$_loader;
      if (t1 != null)
        t1._canceled = true;
      if (t2 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      } else
        t1 = t2;
      t1 = J.get$content$x(t1.get$operators());
      t2 = receiver._item;
      if (t2 == null) {
        t2 = this.get$defaultItem(receiver);
        receiver._item = t2;
      }
      t2 = J.get$content$x(J.get$variables$x(t2));
      t3 = receiver._item;
      if (t3 == null) {
        t3 = this.get$defaultItem(receiver);
        receiver._item = t3;
      }
      t3 = J.get$content$x(t3.get$functions());
      t4 = receiver._item;
      if (t4 == null) {
        t4 = this.get$defaultItem(receiver);
        receiver._item = t4;
      }
      t4 = J.get$content$x(J.get$classes$x(t4));
      t5 = receiver._item;
      if (t5 == null) {
        t5 = this.get$defaultItem(receiver);
        receiver._item = t5;
      }
      t5 = J.get$content$x(J.get$typedefs$x(t5));
      t6 = receiver._item;
      if (t6 == null) {
        t6 = this.get$defaultItem(receiver);
        receiver._item = t6;
      }
      t6 = X._LazyListCopier$([t1, t2, t3, t4, t5, J.get$content$x(t6.get$errors())], [receiver.lazyOperators, receiver.lazyVariables, receiver.lazyFunctions, receiver.lazyClasses, receiver.lazyTypedefs, receiver.lazyErrors]);
      t5 = new X.LazyListLoader(t6, 25, false);
      if ($.get$viewer()._hash !== "")
        t6.loadAll$0();
      else
        t5._loadItems$1(null);
      receiver._library$_loader = t5;
    }, "call$0", "get$itemChanged", 0, 0, 11],
    static: {"^": "LibraryElement__defaultItem", LibraryElement$created: function(receiver) {
        var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
        t1 = Q.ObservableList$(null, null);
        t2 = Q.ObservableList$(null, null);
        t3 = Q.ObservableList$(null, null);
        t4 = Q.ObservableList$(null, null);
        t5 = Q.ObservableList$(null, null);
        t6 = Q.ObservableList$(null, null);
        t7 = $.get$Polymer__polymerSyntax();
        t8 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t9 = P.String;
        t10 = W.Element;
        t10 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t9, t10), null, null), [t9, t10]);
        receiver.lazyOperators = t1;
        receiver.lazyVariables = t2;
        receiver.lazyFunctions = t3;
        receiver.lazyClasses = t4;
        receiver.lazyTypedefs = t5;
        receiver.lazyErrors = t6;
        receiver.polymer$Polymer$syntax = t7;
        receiver.polymer$Polymer$_shadowRoots = t8;
        receiver.polymer$Polymer$$ = t10;
        C.LibraryElement_methods.Element$created$0(receiver);
        C.LibraryElement_methods.PolymerElement$created$0(receiver);
        C.LibraryElement_methods.MemberElement$created$0(receiver);
        return receiver;
      }}
  }
}],
["web.library_panel", "package:dartdoc_viewer/components/library-panel.dart", , E, {
  "^": "",
  LibraryPanel: {
    "^": "DartdocElement;change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    shadowRootReady$2: function(receiver, root, template) {
      var t1;
      A.Polymer.prototype.shadowRootReady$2.call(this, receiver, root, template);
      t1 = $.get$viewer();
      this.registerObserver$2(receiver, "viewer", t1.get$changes(t1).listen$1(new E.LibraryPanel_shadowRootReady_closure(receiver)));
      this.onMutation$1(receiver, receiver.shadowRoot || receiver.webkitShadowRoot).then$1(this.get$_updateActiveLibrary(receiver));
    },
    _updateActiveLibrary$1: [function(receiver, _) {
      var t1, a, t2, t3, t4;
      for (t1 = W._FrozenElementList$_wrap((receiver.shadowRoot || receiver.webkitShadowRoot).querySelectorAll("a"), null), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        a = t1._current;
        t2 = J.getInterceptor$x(a);
        t3 = t2.get$classes(a);
        t2 = t2.get$text(a);
        t4 = $.get$viewer()._currentPage.get$decoratedName();
        t3.toggle$2("active", t2 == null ? t4 == null : t2 === t4);
      }
    }, "call$1", "get$_updateActiveLibrary", 2, 0, 13, 79],
    static: {LibraryPanel$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.LibraryPanel_methods.Element$created$0(receiver);
        C.LibraryPanel_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  LibraryPanel_shadowRootReady_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(changes) {
      var t1;
      for (t1 = J.get$iterator$ax(changes); t1.moveNext$0();)
        if (J.$eq(J.get$name$x(t1.get$current()), C.Symbol_currentPage)) {
          J._updateActiveLibrary$1$x(this.this_0, null);
          return;
        }
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  }
}],
["web.link", "package:dartdoc_viewer/components/link.dart", , Q, {
  "^": "",
  LinkElement: {
    "^": "PolymerElement_ChangeNotifier2;_link$__$type,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$type: function(receiver) {
      return receiver._link$__$type;
    },
    set$type: function(receiver, value) {
      receiver._link$__$type = this.notifyPropertyChange$3(receiver, C.Symbol_type, receiver._link$__$type, value);
    },
    enteredView$0: function(receiver) {
      A.Polymer.prototype.enteredView$0.call(this, receiver);
      $.get$searchIndex().onLoad$1(0, this.get$typeChanged(receiver));
    },
    typeChanged$0: [function(receiver) {
      var t1, t2, t3, t4, $location, child, t5;
      this._clearChildren$0(receiver);
      t1 = receiver._link$__$type;
      if (t1 == null)
        return;
      t1 = t1.get$loc();
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t1 = t1.subMemberName;
      $location = C.JSArray_methods.join$1([t2, t3, t4, t1 == null ? "" : "." + H.S(t1)], "");
      if ($.get$searchIndex()._search0$_map.containsKey$1($location) === true) {
        child = W.AnchorElement_AnchorElement(null);
        t1 = receiver._link$__$type.get$loc();
        t2 = t1.get$packagePlus();
        t3 = t1.libraryName;
        if (t3 == null)
          t3 = "";
        t4 = t1.memberName;
        t4 = t4 == null ? "" : "." + H.S(t4);
        t5 = t1.subMemberName;
        t1 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "") + t1.get$anchorPlus();
        t2 = H.S(Y.entryPoint());
        t3 = J.getInterceptor$x(child);
        t3.set$href(child, t2 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t1);
        t3 = t3.get$onClick(child);
        H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t3._html$_target, t3._eventType, W._wrapZone(new Q.LinkElement_typeChanged_closure(receiver)), t3._useCapture), [H.getTypeArgumentByIndex(t3, 0)])._tryResume$0();
      } else
        child = W._ElementFactoryProvider_createElement_tag("i", null);
      J.set$text$x(child, receiver._link$__$type.get$simpleType());
      receiver.appendChild(child);
    }, "call$0", "get$typeChanged", 0, 0, 10],
    rerouteLink$3: [function(receiver, $event, detail, target) {
      return U.routeLink($event, detail, target);
    }, "call$3", "get$rerouteLink", 6, 0, 150, 47, 147, 148],
    static: {LinkElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.LinkElement_methods.Element$created$0(receiver);
        C.LinkElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  PolymerElement_ChangeNotifier2: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  },
  LinkElement_typeChanged_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function($event) {
      return U.routeLink($event, null, J.get$target$x($event));
    }, "call$1", null, 2, 0, null, 47, "call"],
    $isFunction: true
  }
}],
["web.main", "package:dartdoc_viewer/components/main.dart", , A, {
  "^": "",
  MainElement: {
    "^": "DartdocElement_ChangeNotifier1;_main0$__$sdkVersionString,_main0$__$pageContentClass,_main0$__$shouldShowLibraryPanel,_main0$__$shouldShowLibraryMinimap,_main0$__$shouldShowClassMinimap,_main0$__$showOrHideLibraries,_main0$__$showOrHideMinimap,_main0$__$showOrHideInherited,_main0$__$showOrHideObjectMembers,_main0$__$showOrHidePackages,hostDocsVersion%,_openedAt,homePage=,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$sdkVersionString: function(receiver) {
      return receiver._main0$__$sdkVersionString;
    },
    set$sdkVersionString: function(receiver, value) {
      receiver._main0$__$sdkVersionString = this.notifyPropertyChange$3(receiver, C.Symbol_sdkVersionString, receiver._main0$__$sdkVersionString, value);
    },
    get$pageContentClass: function(receiver) {
      return receiver._main0$__$pageContentClass;
    },
    set$pageContentClass: function(receiver, value) {
      receiver._main0$__$pageContentClass = this.notifyPropertyChange$3(receiver, C.Symbol_pageContentClass, receiver._main0$__$pageContentClass, value);
    },
    get$shouldShowLibraryPanel: function(receiver) {
      return receiver._main0$__$shouldShowLibraryPanel;
    },
    set$shouldShowLibraryPanel: function(receiver, value) {
      receiver._main0$__$shouldShowLibraryPanel = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowLibraryPanel, receiver._main0$__$shouldShowLibraryPanel, value);
    },
    get$shouldShowLibraryMinimap: function(receiver) {
      return receiver._main0$__$shouldShowLibraryMinimap;
    },
    set$shouldShowLibraryMinimap: function(receiver, value) {
      receiver._main0$__$shouldShowLibraryMinimap = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowLibraryMinimap, receiver._main0$__$shouldShowLibraryMinimap, value);
    },
    get$shouldShowClassMinimap: function(receiver) {
      return receiver._main0$__$shouldShowClassMinimap;
    },
    set$shouldShowClassMinimap: function(receiver, value) {
      receiver._main0$__$shouldShowClassMinimap = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowClassMinimap, receiver._main0$__$shouldShowClassMinimap, value);
    },
    get$showOrHideLibraries: function(receiver) {
      return receiver._main0$__$showOrHideLibraries;
    },
    set$showOrHideLibraries: function(receiver, value) {
      receiver._main0$__$showOrHideLibraries = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHideLibraries, receiver._main0$__$showOrHideLibraries, value);
    },
    get$showOrHideMinimap: function(receiver) {
      return receiver._main0$__$showOrHideMinimap;
    },
    set$showOrHideMinimap: function(receiver, value) {
      receiver._main0$__$showOrHideMinimap = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHideMinimap, receiver._main0$__$showOrHideMinimap, value);
    },
    get$showOrHideInherited: function(receiver) {
      return receiver._main0$__$showOrHideInherited;
    },
    set$showOrHideInherited: function(receiver, value) {
      receiver._main0$__$showOrHideInherited = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHideInherited, receiver._main0$__$showOrHideInherited, value);
    },
    get$showOrHideObjectMembers: function(receiver) {
      return receiver._main0$__$showOrHideObjectMembers;
    },
    set$showOrHideObjectMembers: function(receiver, value) {
      receiver._main0$__$showOrHideObjectMembers = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHideObjectMembers, receiver._main0$__$showOrHideObjectMembers, value);
    },
    get$showOrHidePackages: function(receiver) {
      return receiver._main0$__$showOrHidePackages;
    },
    set$showOrHidePackages: function(receiver, value) {
      receiver._main0$__$showOrHidePackages = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHidePackages, receiver._main0$__$showOrHidePackages, value);
    },
    enteredView$0: function(receiver) {
      var t1;
      A.Polymer.prototype.enteredView$0.call(this, receiver);
      t1 = $.get$viewer();
      this.registerObserver$2(receiver, "viewer", t1.get$changes(t1).listen$1(this.get$_onViewerChange(receiver)));
      t1 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, C.EventStreamProvider_click._eventType, false), [null]);
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$hideOptionsMenuWhenClickedOutside(receiver)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this.registerObserver$2(receiver, "onclick", t1);
      this._onViewerChange$1(receiver, null);
    },
    _onViewerChange$1: [function(receiver, changes) {
      var t1, left, t2;
      t1 = $.get$viewer();
      if (t1._viewer0$__$isDesktop !== true)
        receiver._main0$__$pageContentClass = this.notifyPropertyChange$3(receiver, C.Symbol_pageContentClass, receiver._main0$__$pageContentClass, "");
      else {
        left = t1._viewer0$__$isPanel === true ? "margin-left " : "";
        t2 = left + (t1._viewer0$__$isMinimap === true ? "margin-right" : "");
        receiver._main0$__$pageContentClass = this.notifyPropertyChange$3(receiver, C.Symbol_pageContentClass, receiver._main0$__$pageContentClass, t2);
      }
      t2 = t1._currentPage != null && t1._viewer0$__$isPanel === true;
      receiver._main0$__$shouldShowLibraryPanel = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowLibraryPanel, receiver._main0$__$shouldShowLibraryPanel, t2);
      t2 = !!J.getInterceptor(t1._currentPage).$isClass && t1._viewer0$__$isMinimap === true;
      receiver._main0$__$shouldShowClassMinimap = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowClassMinimap, receiver._main0$__$shouldShowClassMinimap, t2);
      t2 = !!J.getInterceptor(t1._currentPage).$isLibrary && t1._viewer0$__$isMinimap === true;
      receiver._main0$__$shouldShowLibraryMinimap = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowLibraryMinimap, receiver._main0$__$shouldShowLibraryMinimap, t2);
      t2 = t1._viewer0$__$isPanel === true ? "Hide" : "Show";
      receiver._main0$__$showOrHideLibraries = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHideLibraries, receiver._main0$__$showOrHideLibraries, t2);
      t2 = t1._viewer0$__$isMinimap === true ? "Hide" : "Show";
      receiver._main0$__$showOrHideMinimap = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHideMinimap, receiver._main0$__$showOrHideMinimap, t2);
      t2 = t1._viewer0$__$isInherited === true ? "Hide" : "Show";
      receiver._main0$__$showOrHideInherited = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHideInherited, receiver._main0$__$showOrHideInherited, t2);
      t2 = t1._viewer0$__$showObjectMembers === true ? "Hide" : "Show";
      receiver._main0$__$showOrHideObjectMembers = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHideObjectMembers, receiver._main0$__$showOrHideObjectMembers, t2);
      t1 = t1._showPkgLibraries === true ? "Hide" : "Show";
      receiver._main0$__$showOrHidePackages = this.notifyPropertyChange$3(receiver, C.Symbol_showOrHidePackages, receiver._main0$__$showOrHidePackages, t1);
    }, "call$1", "get$_onViewerChange", 2, 0, 13, 117],
    _versionSubstringHelper$2: function(receiver, start, end) {
      var index, substringEndIndex, t1;
      if (!J.$eq(receiver._main0$__$sdkVersionString, "")) {
        index = J.lastIndexOf$1$asx(receiver._main0$__$sdkVersionString, start);
        if (index !== -1) {
          substringEndIndex = J.get$length$asx(receiver._main0$__$sdkVersionString);
          if (end != null)
            substringEndIndex = J.indexOf$2$asx(receiver._main0$__$sdkVersionString, end, index);
          if (!J.$eq(substringEndIndex, -1)) {
            t1 = receiver._main0$__$sdkVersionString;
            if (typeof index !== "number")
              return index.$add();
            return J.substring$2$s(t1, index + 1, substringEndIndex);
          }
        }
      }
      return "";
    },
    _versionSubstringHelper$1: function($receiver, start) {
      return this._versionSubstringHelper$2($receiver, start, null);
    },
    get$sdkChannel: function(receiver) {
      var channelString = this._versionSubstringHelper$2(receiver, ".", "-");
      if (channelString !== "edge" && channelString !== "")
        return channelString;
      return "be";
    },
    get$sdkRevisionNum: function(receiver) {
      var result = this._versionSubstringHelper$1(receiver, ".");
      if (result !== "")
        return result + "~";
      return result;
    },
    get$highLevelSdkVersion: function(receiver) {
      var t1, t2;
      if (J.indexOf$1$asx(receiver._main0$__$sdkVersionString, "-") !== -1) {
        t1 = receiver._main0$__$sdkVersionString;
        t2 = J.getInterceptor$asx(t1);
        t1 = t2.substring$2(t1, 0, t2.indexOf$1(t1, "-"));
      } else
        t1 = "";
      return t1;
    },
    togglePanel$0: [function(receiver) {
      return $.get$viewer().togglePanel$0(0);
    }, "call$0", "get$togglePanel", 0, 0, 10],
    toggleInherited$0: [function(receiver) {
      var t1, t2;
      t1 = $.get$viewer();
      t2 = t1._viewer0$__$isInherited;
      t1._viewer0$__$isInherited = F.notifyPropertyChangeHelper(t1, C.Symbol_isInherited, t2, t2 !== true);
      return;
    }, "call$0", "get$toggleInherited", 0, 0, 10],
    toggleObjectMembers$0: [function(receiver) {
      var t1, t2;
      t1 = $.get$viewer();
      t2 = t1._viewer0$__$showObjectMembers;
      t1._viewer0$__$showObjectMembers = F.notifyPropertyChangeHelper(t1, C.Symbol_showObjectMembers, t2, t2 !== true);
      return;
    }, "call$0", "get$toggleObjectMembers", 0, 0, 10],
    toggleMinimap$0: [function(receiver) {
      return $.get$viewer().toggleMinimap$0(0);
    }, "call$0", "get$toggleMinimap", 0, 0, 10],
    togglePkg$0: [function(receiver) {
      var t1 = $.get$viewer();
      t1.set$showPkgLibraries(t1._showPkgLibraries !== true);
      return;
    }, "call$0", "get$togglePkg", 0, 0, 10],
    collapseSearchAndOptionsIfNeeded$0: [function(receiver) {
      var permanentHeaders, searchAndOptions, wholeThing, navbar, collapsible, t1, allItems, $innerWidth, t2, t3, button, t4;
      permanentHeaders = W._FrozenElementList$_wrap((receiver.shadowRoot || receiver.webkitShadowRoot).querySelectorAll(".navbar-brand"), null);
      searchAndOptions = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#searchAndOptions");
      if (H.interceptedTypeCast((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("search-box"), "$isSearch")._search$__$isFocused === true)
        return;
      wholeThing = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".navbar-fixed-top");
      navbar = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#navbar");
      collapsible = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-content");
      t1 = J.getInterceptor$x(collapsible);
      t1.get$classes(collapsible).add$1(0, "in");
      allItems = permanentHeaders.toList$0(permanentHeaders);
      C.JSArray_methods.add$1(allItems, searchAndOptions);
      C.JSArray_methods.add$1(allItems, navbar);
      $innerWidth = H.IterableMixinWorkaround_fold(allItems, 0, new A.MainElement_collapseSearchAndOptionsIfNeeded_closure());
      wholeThing.toString;
      t2 = wholeThing.offsetWidth;
      t3 = new W._ContentCssRect(wholeThing, 0, 0, 0, 0)._addOrSubtractToBoxModel$2($.get$_WIDTH(), "content");
      if (typeof t2 !== "number")
        return t2.$add();
      button = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-button");
      if (typeof $innerWidth !== "number")
        return H.iae($innerWidth);
      t4 = J.getInterceptor$x(button);
      if (t2 + t3 <= $innerWidth) {
        t4.get$classes(button).add$1(0, "visible");
        t1.get$classes(collapsible).remove$1(0, "in");
      } else {
        t4.get$classes(button).remove$1(0, "visible");
        t1.get$classes(collapsible).add$1(0, "in");
      }
    }, "call$0", "get$collapseSearchAndOptionsIfNeeded", 0, 0, 10],
    toggleOptionsMenu$3: [function(receiver, $event, detail, target) {
      var list, t1;
      list = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".dropdown-menu").parentElement;
      t1 = J.getInterceptor$x(list);
      if (t1.get$classes(list).readClasses$0().contains$1(0, "open"))
        t1.get$classes(list).remove$1(0, "open");
      else {
        receiver._openedAt = J.get$timeStamp$x($event);
        t1.get$classes(list).add$1(0, "open");
      }
    }, "call$3", "get$toggleOptionsMenu", 6, 0, 151, 47, 147, 148],
    hideOptionsMenuWhenClickedOutside$1: [function(receiver, e) {
      var t1 = receiver._openedAt;
      if (t1 != null && J.$eq(t1, J.get$timeStamp$x(e)))
        return;
      J.get$classes$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".dropdown-menu").parentElement).remove$1(0, "open");
    }, "call$1", "get$hideOptionsMenuWhenClickedOutside", 2, 0, 152, 1],
    navHideShow$3: [function(receiver, $event, detail, target) {
      var nav = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-content");
      this.hideOrShowNavigation$2$hide$nav(receiver, J.get$classes$x(nav).readClasses$0().contains$1(0, "in"), nav);
    }, "call$3", "get$navHideShow", 6, 0, 150, 47, 147, 148],
    hideOrShowNavigation$2$hide$nav: function(receiver, hide, nav) {
      var button, t1, t2, navbar, body;
      if (H.interceptedTypeCast((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("search-box"), "$isSearch")._search$__$isFocused === true)
        return;
      if (nav == null)
        nav = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-content");
      button = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#nav-collapse-button");
      t1 = hide && J.get$display$x(J.getComputedStyle$0$x(button)) !== "none";
      t2 = J.getInterceptor$x(nav);
      if (t1)
        t2.get$classes(nav).remove$1(0, "in");
      else
        t2.get$classes(nav).add$1(0, "in");
      navbar = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".navbar-fixed-top");
      body = (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector(".main-body");
      navbar.toString;
      t1 = navbar.offsetHeight;
      t2 = new W._MarginCssRect(navbar, 0, 0, 0, 0)._addOrSubtractToBoxModel$2($.get$_HEIGHT(), "margin");
      if (typeof t1 !== "number")
        return t1.$add();
      if (J.get$position$x(J.getComputedStyle$0$x(navbar)) === "fixed")
        J.set$paddingTop$x(body.style, C.JSNumber_methods.toString$0(t1 + t2) + "px");
      else
        body.style.removeProperty("padding-top");
    },
    hideOrShowNavigation$1$hide: function($receiver, hide) {
      return this.hideOrShowNavigation$2$hide$nav($receiver, hide, null);
    },
    hideOrShowNavigation$0: function($receiver) {
      return this.hideOrShowNavigation$2$hide$nav($receiver, true, null);
    },
    static: {MainElement$created: function(receiver) {
        var t1, t2, t3, t4, t5;
        t1 = ($.useHistory ? "/dartdoc-viewer/" : "#") + "home";
        t2 = $.get$Polymer__polymerSyntax();
        t3 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t4 = P.String;
        t5 = W.Element;
        t5 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null), [t4, t5]);
        receiver.hostDocsVersion = "";
        receiver.homePage = t1;
        receiver.polymer$Polymer$syntax = t2;
        receiver.polymer$Polymer$_shadowRoots = t3;
        receiver.polymer$Polymer$$ = t5;
        C.MainElement_methods.Element$created$0(receiver);
        C.MainElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  DartdocElement_ChangeNotifier1: {
    "^": "DartdocElement+ChangeNotifier;",
    $isObservable: true
  },
  MainElement_collapseSearchAndOptionsIfNeeded_closure: {
    "^": "Closure0:58;",
    call$2: function(sum, element) {
      var t1, t2;
      t1 = J.get$marginEdge$x(element);
      t2 = J.get$offsetWidth$x(t1._html$_element);
      t1 = t1._addOrSubtractToBoxModel$2($.get$_WIDTH(), "margin");
      if (typeof t2 !== "number")
        return t2.$add();
      return J.$add$ns(sum, t2 + t1);
    },
    $isFunction: true
  }
}],
["web.member", "package:dartdoc_viewer/member.dart", , U, {
  "^": "",
  DartdocElement$created: function(receiver) {
    var t1, t2, t3, t4;
    t1 = $.get$Polymer__polymerSyntax();
    t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
    t3 = P.String;
    t4 = W.Element;
    t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
    receiver.polymer$Polymer$syntax = t1;
    receiver.polymer$Polymer$_shadowRoots = t2;
    receiver.polymer$Polymer$$ = t4;
    C.DartdocElement_methods.Element$created$0(receiver);
    C.DartdocElement_methods.PolymerElement$created$0(receiver);
    return receiver;
  },
  MemberElement$created: function(receiver) {
    var t1, t2, t3, t4;
    t1 = $.get$Polymer__polymerSyntax();
    t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
    t3 = P.String;
    t4 = W.Element;
    t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
    receiver.polymer$Polymer$syntax = t1;
    receiver.polymer$Polymer$_shadowRoots = t2;
    receiver.polymer$Polymer$$ = t4;
    C.MemberElement_methods.Element$created$0(receiver);
    C.MemberElement_methods.PolymerElement$created$0(receiver);
    C.MemberElement_methods.MemberElement$created$0(receiver);
    return receiver;
  },
  InheritedElement$created: function(receiver) {
    var t1, t2, t3, t4;
    t1 = $.get$Polymer__polymerSyntax();
    t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
    t3 = P.String;
    t4 = W.Element;
    t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
    receiver.polymer$Polymer$syntax = t1;
    receiver.polymer$Polymer$_shadowRoots = t2;
    receiver.polymer$Polymer$$ = t4;
    C.InheritedElement_methods.Element$created$0(receiver);
    C.InheritedElement_methods.PolymerElement$created$0(receiver);
    C.InheritedElement_methods.MemberElement$created$0(receiver);
    C.InheritedElement_methods.InheritedElement$created$0(receiver);
    return receiver;
  },
  routeLink: function(e, detail, target) {
    var t1, t2, $location, t3, t4, t5;
    if (!$.useHistory)
      return;
    if (!J.getInterceptor(target).$isAnchorElement)
      return;
    t1 = target.host;
    t2 = window.location.host;
    if ((t1 == null ? t2 == null : t1 === t2) && H.interceptedTypeCast(e, "$isMouseEvent").ctrlKey !== true) {
      J.preventDefault$0$x(e);
      $location = new Y.DocsLocation(null, null, null, null, null);
      $location._extractPieces$1(target.href);
      t1 = $.get$viewer();
      t2 = $location.get$packagePlus();
      t3 = $location.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = $location.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = $location.subMemberName;
      t1.handleLink$2(C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "") + $location.get$anchorPlus(), $.useHistory);
    }
  },
  NullTreeSanitizer: {
    "^": "Object;",
    sanitizeTree$1: function(node) {
    }
  },
  DartdocElement: {
    "^": "PolymerElement;",
    get$syntax: function(receiver) {
      return $.get$defaultSyntax();
    },
    get$applyAuthorStyles: function(receiver) {
      return true;
    },
    get$viewer: function(receiver) {
      return $.get$viewer();
    },
    rerouteLink$3: [function(receiver, $event, detail, target) {
      return U.routeLink($event, detail, target);
    }, "call$3", "get$rerouteLink", 6, 0, 121, 47, 147, 148]
  },
  MemberElement: {
    "^": "DartdocElement_ChangeNotifier0;",
    set$item: function(receiver, newItem) {
      if (newItem == null || this.wrongClass$1(receiver, newItem))
        return;
      receiver._item = this.notifyPropertyChange$3(receiver, C.Symbol_item, receiver._item, newItem);
    },
    get$item: function(receiver) {
      var t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      return t1;
    },
    get$idName: function(receiver) {
      return receiver._member$__$idName;
    },
    set$idName: function(receiver, value) {
      receiver._member$__$idName = this.notifyPropertyChange$3(receiver, C.Symbol_idName, receiver._member$__$idName, value);
    },
    itemChanged$0: [function(receiver) {
      var t1, t2;
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
        t2 = t1;
      } else
        t2 = t1;
      if (t1 == null)
        receiver._member$__$idName = this.notifyPropertyChange$3(receiver, C.Symbol_idName, receiver._member$__$idName, "");
      else {
        if (t2 == null) {
          t1 = this.get$defaultItem(receiver);
          receiver._item = t1;
        } else
          t1 = t2;
        t1 = t1.get$anchorHrefLocation().anchor;
        if (t1 == null)
          t1 = "";
        receiver._member$__$idName = this.notifyPropertyChange$3(receiver, C.Symbol_idName, receiver._member$__$idName, t1);
      }
    }, "call$0", "get$itemChanged", 0, 0, 11],
    MemberElement$created$0: function(receiver) {
      receiver._item = this.get$defaultItem(receiver);
    }
  },
  DartdocElement_ChangeNotifier0: {
    "^": "DartdocElement+ChangeNotifier;",
    $isObservable: true
  },
  InheritedElement: {
    "^": "MemberElement_ChangeNotifier;",
    get$inheritedFrom: function(receiver) {
      return receiver._member$__$inheritedFrom;
    },
    set$inheritedFrom: function(receiver, value) {
      receiver._member$__$inheritedFrom = this.notifyPropertyChange$3(receiver, C.Symbol_inheritedFrom, receiver._member$__$inheritedFrom, value);
    },
    get$commentFrom: function(receiver) {
      return receiver._member$__$commentFrom;
    },
    set$commentFrom: function(receiver, value) {
      receiver._member$__$commentFrom = this.notifyPropertyChange$3(receiver, C.Symbol_commentFrom, receiver._member$__$commentFrom, value);
    },
    get$isInherited: function(receiver) {
      return receiver._member$__$isInherited;
    },
    set$isInherited: function(receiver, value) {
      receiver._member$__$isInherited = this.notifyPropertyChange$3(receiver, C.Symbol_isInherited, receiver._member$__$isInherited, value);
    },
    get$hasInheritedComment: function(receiver) {
      return receiver._member$__$hasInheritedComment;
    },
    set$hasInheritedComment: function(receiver, value) {
      receiver._member$__$hasInheritedComment = this.notifyPropertyChange$3(receiver, C.Symbol_hasInheritedComment, receiver._member$__$hasInheritedComment, value);
    },
    get$shouldShowComment: function(receiver) {
      return receiver._member$__$shouldShowComment;
    },
    set$shouldShowComment: function(receiver, value) {
      receiver._member$__$shouldShowComment = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowComment, receiver._member$__$shouldShowComment, value);
    },
    get$shouldShowCommentFrom: function(receiver) {
      return receiver._member$__$shouldShowCommentFrom;
    },
    set$shouldShowCommentFrom: function(receiver, value) {
      receiver._member$__$shouldShowCommentFrom = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowCommentFrom, receiver._member$__$shouldShowCommentFrom, value);
    },
    itemChanged$0: [function(receiver) {
      U.MemberElement.prototype.itemChanged$0.call(this, receiver);
      this._update$0(receiver);
    }, "call$0", "get$itemChanged", 0, 0, 10],
    _update$0: function(receiver) {
      var t1, t2, t3, t4, t5;
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
        t2 = t1;
      } else
        t2 = t1;
      if (t1 == null)
        return;
      if (t2 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      } else
        t1 = t2;
      if (!J.$eq(J.get$inheritedFrom$x(t1), "")) {
        t1 = receiver._item;
        if (t1 == null) {
          t1 = this.get$defaultItem(receiver);
          receiver._item = t1;
        }
        t1 = J.get$inheritedFrom$x(t1) != null;
      } else
        t1 = false;
      receiver._member$__$isInherited = this.notifyPropertyChange$3(receiver, C.Symbol_isInherited, receiver._member$__$isInherited, t1);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      t2 = new Y.DocsLocation(null, null, null, null, null);
      t2._extractPieces$1(J.get$inheritedFrom$x(t1));
      t1 = t2.get$componentNames();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
      t1 = Y.DocsLocation$fromList(t1);
      t1.anchor = C.JSString_methods.$add("id_", t2.get$name(t2));
      t2 = t1.packageName;
      if (t2 == null)
        t2 = "";
      else
        t2 = t1.libraryName == null ? t2 : H.S(t2) + "/";
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = t1.subMemberName;
      t2 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
      t1 = t1.anchor;
      t3 = new Y.DocsLocation(null, null, null, null, null);
      t3._extractPieces$1(t2 + (t1 == null ? "" : "#" + H.S(t1)));
      receiver._member$__$inheritedFrom = this.notifyPropertyChange$3(receiver, C.Symbol_inheritedFrom, receiver._member$__$inheritedFrom, new E.LinkableType(t3));
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      if (!J.$eq(J.get$commentFrom$x(t1), "")) {
        t1 = receiver._item;
        if (t1 == null) {
          t1 = this.get$defaultItem(receiver);
          receiver._item = t1;
        }
        t1 = J.get$commentFrom$x(t1) != null;
      } else
        t1 = false;
      receiver._member$__$hasInheritedComment = this.notifyPropertyChange$3(receiver, C.Symbol_hasInheritedComment, receiver._member$__$hasInheritedComment, t1);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      t2 = new Y.DocsLocation(null, null, null, null, null);
      t2._extractPieces$1(J.get$commentFrom$x(t1));
      t1 = t2.get$componentNames();
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t1.pop();
      t1 = Y.DocsLocation$fromList(t1);
      t1.anchor = C.JSString_methods.$add("id_", t2.get$name(t2));
      t2 = t1.packageName;
      if (t2 == null)
        t2 = "";
      else
        t2 = t1.libraryName == null ? t2 : H.S(t2) + "/";
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = t1.subMemberName;
      t2 = C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "");
      t1 = t1.anchor;
      t3 = new Y.DocsLocation(null, null, null, null, null);
      t3._extractPieces$1(t2 + (t1 == null ? "" : "#" + H.S(t1)));
      receiver._member$__$commentFrom = this.notifyPropertyChange$3(receiver, C.Symbol_commentFrom, receiver._member$__$commentFrom, new E.LinkableType(t3));
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      if (t1.get$hasComment())
        t1 = receiver._member$__$hasInheritedComment !== true || $.get$viewer()._viewer0$__$isInherited === true;
      else
        t1 = false;
      receiver._member$__$shouldShowComment = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowComment, receiver._member$__$shouldShowComment, t1);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      t1 = t1.get$hasComment() && receiver._member$__$hasInheritedComment === true && $.get$viewer()._viewer0$__$isInherited === true;
      receiver._member$__$shouldShowCommentFrom = this.notifyPropertyChange$3(receiver, C.Symbol_shouldShowCommentFrom, receiver._member$__$shouldShowCommentFrom, t1);
    },
    InheritedElement$created$0: function(receiver) {
      var t1 = $.get$viewer();
      this.registerObserver$2(receiver, "isInherited", t1.get$changes(t1).listen$1(new U.InheritedElement$created_closure(receiver)));
    }
  },
  MemberElement_ChangeNotifier: {
    "^": "MemberElement+ChangeNotifier;",
    $isObservable: true
  },
  InheritedElement$created_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(changes) {
      var t1;
      for (t1 = J.get$iterator$ax(changes); t1.moveNext$0();)
        if (J.$eq(J.get$name$x(t1.get$current()), C.Symbol_isInherited)) {
          J._update$0$x(this.this_0);
          return;
        }
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  }
}],
["web.method", "package:dartdoc_viewer/components/method.dart", , X, {
  "^": "",
  registerMethodElement: [function() {
    A.Polymer_register("method-panel", C.Type_ASc);
    A.Polymer_register("dartdoc-method", C.Type_ASc);
  }, "call$0", "registerMethodElement$closure", 0, 0, 11],
  MethodElement: {
    "^": "InheritedElement_ChangeNotifier;_method$__$isNotConstructor,_method$__$modifiers,_method$__$constantModifier,_method$__$staticModifier,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_member$__$inheritedFrom,_member$__$commentFrom,_member$__$isInherited,_member$__$hasInheritedComment,_member$__$shouldShowComment,_member$__$shouldShowCommentFrom,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$isNotConstructor: function(receiver) {
      return receiver._method$__$isNotConstructor;
    },
    set$isNotConstructor: function(receiver, value) {
      receiver._method$__$isNotConstructor = this.notifyPropertyChange$3(receiver, C.Symbol_isNotConstructor, receiver._method$__$isNotConstructor, value);
    },
    get$modifiers: function(receiver) {
      return receiver._method$__$modifiers;
    },
    set$modifiers: function(receiver, value) {
      receiver._method$__$modifiers = this.notifyPropertyChange$3(receiver, C.Symbol_modifiers, receiver._method$__$modifiers, value);
    },
    get$constantModifier: function(receiver) {
      return receiver._method$__$constantModifier;
    },
    set$constantModifier: function(receiver, value) {
      receiver._method$__$constantModifier = this.notifyPropertyChange$3(receiver, C.Symbol_constantModifier, receiver._method$__$constantModifier, value);
    },
    get$staticModifier: function(receiver) {
      return receiver._method$__$staticModifier;
    },
    set$staticModifier: function(receiver, value) {
      receiver._method$__$staticModifier = this.notifyPropertyChange$3(receiver, C.Symbol_staticModifier, receiver._method$__$staticModifier, value);
    },
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isMethod;
    },
    itemChanged$0: [function(receiver) {
      var t1, t2;
      U.InheritedElement.prototype.itemChanged$0.call(this, receiver);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
        t2 = t1;
      } else
        t2 = t1;
      if (t1 == null)
        return;
      if (t2 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      } else
        t1 = t2;
      t1 = t1.get$isConstructor();
      receiver._method$__$isNotConstructor = this.notifyPropertyChange$3(receiver, C.Symbol_isNotConstructor, receiver._method$__$isNotConstructor, !t1);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      t1 = t1.get$isConstant() ? "const" : "";
      receiver._method$__$constantModifier = this.notifyPropertyChange$3(receiver, C.Symbol_constantModifier, receiver._method$__$constantModifier, t1);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      t1 = t1.get$isStatic() ? "static" : "";
      t1 = this.notifyPropertyChange$3(receiver, C.Symbol_staticModifier, receiver._method$__$staticModifier, t1);
      receiver._method$__$staticModifier = t1;
      t1 = J.$add$ns(receiver._method$__$constantModifier, t1);
      receiver._method$__$modifiers = this.notifyPropertyChange$3(receiver, C.Symbol_modifiers, receiver._method$__$modifiers, t1);
    }, "call$0", "get$itemChanged", 0, 0, 10],
    get$defaultItem: function(receiver) {
      return $.get$MethodElement__defaultItem();
    },
    static: {"^": "MethodElement__defaultItem", MethodElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.MethodElement_methods.Element$created$0(receiver);
        C.MethodElement_methods.PolymerElement$created$0(receiver);
        C.MethodElement_methods.MemberElement$created$0(receiver);
        C.MethodElement_methods.InheritedElement$created$0(receiver);
        return receiver;
      }}
  },
  InheritedElement_ChangeNotifier: {
    "^": "InheritedElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["web.minimap_class", "package:dartdoc_viewer/components/minimap-class.dart", , Q, {
  "^": "",
  MinimapElementClass: {
    "^": "MemberElement;_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isClass;
    },
    get$defaultItem: function(receiver) {
      return $.get$MinimapElementClass__defaultItem();
    },
    static: {"^": "MinimapElementClass__defaultItem", MinimapElementClass$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.MinimapElementClass_methods.Element$created$0(receiver);
        C.MinimapElementClass_methods.PolymerElement$created$0(receiver);
        C.MinimapElementClass_methods.MemberElement$created$0(receiver);
        return receiver;
      }}
  }
}],
["web.minimap_element", "package:dartdoc_viewer/components/minimap-element.dart", , Z, {
  "^": "",
  MinimapElement: {
    "^": "PolymerElement_ChangeNotifier3;_minimap_element$__$category,_minimap_element$__$item,_minimap_element$__$camelCaseName,_minimap_element$__$categoryLink,_minimap_element$__$itemsToShow,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$category: function(receiver) {
      return receiver._minimap_element$__$category;
    },
    set$category: function(receiver, value) {
      receiver._minimap_element$__$category = this.notifyPropertyChange$3(receiver, C.Symbol_category, receiver._minimap_element$__$category, value);
    },
    get$item: function(receiver) {
      return receiver._minimap_element$__$item;
    },
    set$item: function(receiver, value) {
      receiver._minimap_element$__$item = this.notifyPropertyChange$3(receiver, C.Symbol_item, receiver._minimap_element$__$item, value);
    },
    get$camelCaseName: function(receiver) {
      return receiver._minimap_element$__$camelCaseName;
    },
    set$camelCaseName: function(receiver, value) {
      receiver._minimap_element$__$camelCaseName = this.notifyPropertyChange$3(receiver, C.Symbol_camelCaseName, receiver._minimap_element$__$camelCaseName, value);
    },
    get$categoryLink: function(receiver) {
      return receiver._minimap_element$__$categoryLink;
    },
    set$categoryLink: function(receiver, value) {
      receiver._minimap_element$__$categoryLink = this.notifyPropertyChange$3(receiver, C.Symbol_categoryLink, receiver._minimap_element$__$categoryLink, value);
    },
    get$itemsToShow: function(receiver) {
      return receiver._minimap_element$__$itemsToShow;
    },
    set$itemsToShow: function(receiver, value) {
      receiver._minimap_element$__$itemsToShow = this.notifyPropertyChange$3(receiver, C.Symbol_itemsToShow, receiver._minimap_element$__$itemsToShow, value);
    },
    get$syntax: function(receiver) {
      return $.get$defaultSyntax();
    },
    get$applyAuthorStyles: function(receiver) {
      return true;
    },
    itemChanged$0: [function(receiver) {
      var t1;
      if (receiver._minimap_element$__$category == null || receiver._minimap_element$__$item == null)
        return;
      t1 = receiver._minimap_element$__$item.get$prefixedLinkHref() + "#" + J.replaceAll$2$s(J.get$name$x(receiver._minimap_element$__$category), " ", "-");
      receiver._minimap_element$__$categoryLink = this.notifyPropertyChange$3(receiver, C.Symbol_categoryLink, receiver._minimap_element$__$categoryLink, t1);
    }, "call$0", "get$itemChanged", 0, 0, 10],
    categoryChanged$0: [function(receiver) {
      var t1, t2, t3;
      if (receiver._minimap_element$__$category == null || receiver._minimap_element$__$item == null)
        return;
      this.itemChanged$0(receiver);
      t1 = G.toCamelCase(J.toLowerCase$0$s(J.get$name$x(receiver._minimap_element$__$category)), false);
      receiver._minimap_element$__$camelCaseName = this.notifyPropertyChange$3(receiver, C.Symbol_camelCaseName, receiver._minimap_element$__$camelCaseName, t1);
      t1 = receiver._minimap_element$__$category;
      t2 = $.get$viewer();
      t3 = new E.Filter(true, false);
      t3.showInherited = t2._viewer0$__$isInherited;
      t3.showObjectMembers = t2._viewer0$__$showObjectMembers;
      t3 = t1.filteredContent$1(t3);
      t1 = [];
      t1.$builtinTypeInfo = [null];
      t1 = new Q.ObservableList(null, null, t1, null, null);
      t1.$builtinTypeInfo = [null];
      t1.addAll$1(0, t3);
      receiver._minimap_element$__$itemsToShow = this.notifyPropertyChange$3(receiver, C.Symbol_itemsToShow, receiver._minimap_element$__$itemsToShow, t1);
    }, "call$0", "get$categoryChanged", 0, 0, 10],
    rerouteLink$3: [function(receiver, $event, detail, target) {
      return U.routeLink($event, detail, target);
    }, "call$3", "get$rerouteLink", 6, 0, 150, 47, 147, 148],
    MinimapElement$created$0: function(receiver) {
      var t1 = $.get$viewer();
      this.registerObserver$2(receiver, "isInherited", t1.get$changes(t1).listen$1(new Z.MinimapElement$created_closure(receiver)));
    },
    static: {MinimapElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.MinimapElement_methods.Element$created$0(receiver);
        C.MinimapElement_methods.PolymerElement$created$0(receiver);
        C.MinimapElement_methods.MinimapElement$created$0(receiver);
        return receiver;
      }}
  },
  PolymerElement_ChangeNotifier3: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  },
  MinimapElement$created_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(changes) {
      var t1, change, t2;
      for (t1 = J.get$iterator$ax(changes); t1.moveNext$0();) {
        change = t1.get$current();
        t2 = J.getInterceptor$x(change);
        if (J.$eq(t2.get$name(change), C.Symbol_isInherited) || J.$eq(t2.get$name(change), C.Symbol_showObjectMembers)) {
          J.categoryChanged$0$x(this.this_0);
          return;
        }
      }
    }, "call$1", null, 2, 0, null, 117, "call"],
    $isFunction: true
  }
}],
["web.minimap_library", "package:dartdoc_viewer/components/minimap-library.dart", , N, {
  "^": "",
  MinimapElementLibrary: {
    "^": "MemberElement;_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isLibrary;
    },
    get$defaultItem: function(receiver) {
      return $.get$MinimapElementLibrary__defaultItem();
    },
    static: {"^": "MinimapElementLibrary__defaultItem", MinimapElementLibrary$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.MinimapElementLibrary_methods.Element$created$0(receiver);
        C.MinimapElementLibrary_methods.PolymerElement$created$0(receiver);
        C.MinimapElementLibrary_methods.MemberElement$created$0(receiver);
        return receiver;
      }}
  }
}],
["web.page", "package:dartdoc_viewer/components/page.dart", , O, {
  "^": "",
  PageElement: {
    "^": "DartdocElement_ChangeNotifier2;_page$__$item,_page$__$isLibrary,_page$__$isMethod,_page$__$isClass,_page$__$isTypedef,_page$__$isHome,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$item: function(receiver) {
      return receiver._page$__$item;
    },
    set$item: function(receiver, value) {
      receiver._page$__$item = this.notifyPropertyChange$3(receiver, C.Symbol_item, receiver._page$__$item, value);
    },
    get$isLibrary: function(receiver) {
      return receiver._page$__$isLibrary;
    },
    set$isLibrary: function(receiver, value) {
      receiver._page$__$isLibrary = this.notifyPropertyChange$3(receiver, C.Symbol_isLibrary, receiver._page$__$isLibrary, value);
    },
    get$isMethod: function(receiver) {
      return receiver._page$__$isMethod;
    },
    set$isMethod: function(receiver, value) {
      receiver._page$__$isMethod = this.notifyPropertyChange$3(receiver, C.Symbol_isMethod, receiver._page$__$isMethod, value);
    },
    get$isClass: function(receiver) {
      return receiver._page$__$isClass;
    },
    set$isClass: function(receiver, value) {
      receiver._page$__$isClass = this.notifyPropertyChange$3(receiver, C.Symbol_isClass, receiver._page$__$isClass, value);
    },
    get$isTypedef: function(receiver) {
      return receiver._page$__$isTypedef;
    },
    set$isTypedef: function(receiver, value) {
      receiver._page$__$isTypedef = this.notifyPropertyChange$3(receiver, C.Symbol_isTypedef, receiver._page$__$isTypedef, value);
    },
    get$isHome: function(receiver) {
      return receiver._page$__$isHome;
    },
    set$isHome: function(receiver, value) {
      receiver._page$__$isHome = this.notifyPropertyChange$3(receiver, C.Symbol_isHome, receiver._page$__$isHome, value);
    },
    itemChanged$0: [function(receiver) {
      var t1 = receiver._page$__$item;
      receiver._page$__$isLibrary = this.notifyPropertyChange$3(receiver, C.Symbol_isLibrary, receiver._page$__$isLibrary, !!J.getInterceptor(t1).$isLibrary);
      t1 = receiver._page$__$item;
      receiver._page$__$isMethod = this.notifyPropertyChange$3(receiver, C.Symbol_isMethod, receiver._page$__$isMethod, !!J.getInterceptor(t1).$isMethod);
      t1 = receiver._page$__$item;
      receiver._page$__$isClass = this.notifyPropertyChange$3(receiver, C.Symbol_isClass, receiver._page$__$isClass, !!J.getInterceptor(t1).$isClass);
      t1 = receiver._page$__$item;
      receiver._page$__$isTypedef = this.notifyPropertyChange$3(receiver, C.Symbol_isTypedef, receiver._page$__$isTypedef, !!J.getInterceptor(t1).$isTypedef);
      t1 = receiver._page$__$item;
      receiver._page$__$isHome = this.notifyPropertyChange$3(receiver, C.Symbol_isHome, receiver._page$__$isHome, !!J.getInterceptor(t1).$isHome);
    }, "call$0", "get$itemChanged", 0, 0, 10],
    static: {PageElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.PageElement_methods.Element$created$0(receiver);
        C.PageElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  DartdocElement_ChangeNotifier2: {
    "^": "DartdocElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["web.parameters", "package:dartdoc_viewer/components/parameters.dart", , X, {
  "^": "",
  ParameterElement: {
    "^": "DartdocElement_ChangeNotifier3;_parameters$__$parameters,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$parameters: function(receiver) {
      return receiver._parameters$__$parameters;
    },
    set$parameters: function(receiver, value) {
      receiver._parameters$__$parameters = this.notifyPropertyChange$3(receiver, C.Symbol_parameters, receiver._parameters$__$parameters, value);
    },
    parametersChanged$0: [function(receiver) {
      var required, optional, t1, p;
      required = [];
      optional = [];
      t1 = receiver._parameters$__$parameters;
      if (t1 != null)
        for (t1 = J.get$iterator$ax(t1); t1.moveNext$0();) {
          p = t1.get$current();
          (p.get$isOptional() ? optional : required).push(p);
        }
      this._clearChildren$0(receiver);
      this.insertAdjacentText$2(receiver, "beforeend", "(");
      this.addParameters$3(receiver, required, "required", optional);
      this.addParameters$3(receiver, optional, "optional", optional);
      this.insertAdjacentText$2(receiver, "beforeend", ")");
    }, "call$0", "get$parametersChanged", 0, 0, 10],
    addParameters$3: function(receiver, elements, className, optional) {
      var outerSpan, t1, optionalOpeningDelimiter, t2, t3, t4, element, t5, t6, space, e, optionalClosingDelimiter;
      if (elements.length === 0)
        return;
      outerSpan = document.createElement("span", null);
      t1 = className === "optional";
      if (t1) {
        if (optional.length === 0)
          optionalOpeningDelimiter = "";
        else
          optionalOpeningDelimiter = C.JSArray_methods.get$first(optional).get$isNamed() ? "{" : "[";
        J.insertAdjacentText$2$x(outerSpan, "beforeend", optionalOpeningDelimiter);
      }
      for (t2 = H.setRuntimeTypeInfo(new H.ListIterator(elements, elements.length, 0, null), [H.getTypeArgumentByIndex(elements, 0)]), t3 = className === "required", t4 = J.getInterceptor$x(outerSpan); t2.moveNext$0();) {
        element = t2._current;
        t5 = J.getInterceptor$x(element);
        if (!t5.get$type(element).get$isDynamic()) {
          t6 = W._ElementFactoryProvider_createElement_tag("dartdoc-type", null);
          J.set$type$x(t6, t5.get$type(element));
          outerSpan.appendChild(t6);
          space = " ";
        } else
          space = "";
        t4.insertAdjacentText$2(outerSpan, "beforeend", space);
        if (element.get$functionDeclaration() != null) {
          t6 = W._ElementFactoryProvider_createElement_tag("dartdoc-closure", null);
          J.set$closure$x(t6, element.get$functionDeclaration());
          outerSpan.appendChild(t6);
        } else {
          e = document.createElement("a", null);
          e.textContent = t5.get$name(element);
          J.set$href$x(e, element.get$prefixedAnchorHref());
          e.id = element.get$anchorHrefLocation().anchor;
          outerSpan.appendChild(e);
        }
        t4.insertAdjacentText$2(outerSpan, "beforeend", element.get$decoration());
        if (t3 && optional.length !== 0 || !t5.$eq(element, C.JSArray_methods.get$last(elements)))
          t4.insertAdjacentText$2(outerSpan, "beforeend", ", ");
      }
      if (t1) {
        if (optional.length === 0)
          optionalClosingDelimiter = "";
        else
          optionalClosingDelimiter = C.JSArray_methods.get$first(optional).get$isNamed() ? "}" : "]";
        t4.insertAdjacentText$2(outerSpan, "beforeend", optionalClosingDelimiter);
      }
      receiver.appendChild(outerSpan);
    },
    static: {ParameterElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver._parameters$__$parameters = C.List_empty;
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.ParameterElement_methods.Element$created$0(receiver);
        C.ParameterElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  DartdocElement_ChangeNotifier3: {
    "^": "DartdocElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["web.results", "package:dartdoc_viewer/components/results.dart", , G, {
  "^": "",
  Result: {
    "^": "AnchorElement_Polymer_ChangeNotifier;_results$__$item,_results$__$descriptiveName,_results$__$descriptiveType,_results$__$outerLibrary,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$item: function(receiver) {
      return receiver._results$__$item;
    },
    set$item: function(receiver, value) {
      receiver._results$__$item = this.notifyPropertyChange$3(receiver, C.Symbol_item, receiver._results$__$item, value);
    },
    get$descriptiveName: function(receiver) {
      return receiver._results$__$descriptiveName;
    },
    set$descriptiveName: function(receiver, value) {
      receiver._results$__$descriptiveName = this.notifyPropertyChange$3(receiver, C.Symbol_descriptiveName, receiver._results$__$descriptiveName, value);
    },
    get$descriptiveType: function(receiver) {
      return receiver._results$__$descriptiveType;
    },
    set$descriptiveType: function(receiver, value) {
      receiver._results$__$descriptiveType = this.notifyPropertyChange$3(receiver, C.Symbol_descriptiveType, receiver._results$__$descriptiveType, value);
    },
    get$outerLibrary: function(receiver) {
      return receiver._results$__$outerLibrary;
    },
    set$outerLibrary: function(receiver, value) {
      receiver._results$__$outerLibrary = this.notifyPropertyChange$3(receiver, C.Symbol_outerLibrary, receiver._results$__$outerLibrary, value);
    },
    itemChanged$0: [function(receiver) {
      var t1 = this._getDescriptiveName$0(receiver);
      receiver._results$__$descriptiveName = this.notifyPropertyChange$3(receiver, C.Symbol_descriptiveName, receiver._results$__$descriptiveName, t1);
      t1 = this._getDescriptiveType$0(receiver);
      receiver._results$__$descriptiveType = this.notifyPropertyChange$3(receiver, C.Symbol_descriptiveType, receiver._results$__$descriptiveType, t1);
      t1 = this._getOuterLibrary$0(receiver);
      receiver._results$__$outerLibrary = this.notifyPropertyChange$3(receiver, C.Symbol_outerLibrary, receiver._results$__$outerLibrary, t1);
    }, "call$0", "get$itemChanged", 0, 0, 11],
    get$applyAuthorStyles: function(receiver) {
      return true;
    },
    _getDescriptiveName$0: function(receiver) {
      var t1, $name, t2, lib, className, constructorName;
      t1 = receiver._results$__$item;
      if ((t1 == null ? "none" : t1.get$element()) == null)
        return "";
      t1 = receiver._results$__$item;
      $name = J.split$1$s(t1 == null ? "none" : t1.get$element(), ".");
      t1 = receiver._results$__$item;
      if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "library")) {
        t1 = $.get$pageIndex();
        t2 = receiver._results$__$item;
        lib = t1.$index(0, t2 == null ? "none" : t2.get$element());
        if (lib == null)
          return "";
        return lib.get$decoratedName();
      } else {
        t1 = receiver._results$__$item;
        if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "constructor")) {
          t1 = $name.length;
          t2 = t1 - 2;
          if (t2 < 0)
            return H.ioore($name, t2);
          className = $name[t2];
          constructorName = C.JSArray_methods.get$last(J.split$1$s(C.JSArray_methods.get$last($name), "-"));
          return J.get$isEmpty$asx(constructorName) === true ? className : H.S(className) + "." + H.S(constructorName);
        }
      }
      return C.JSArray_methods.get$last($name);
    },
    _getDescriptiveType$0: function(receiver) {
      var t1, loc, t2, t3, t4, t5, names;
      t1 = receiver._results$__$item;
      if (t1 == null)
        return "";
      loc = new Y.DocsLocation(null, null, null, null, null);
      loc._extractPieces$1(t1.get$element());
      t1 = receiver._results$__$item;
      if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "class"))
        return "class";
      t1 = receiver._results$__$item;
      if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "library")) {
        t1 = loc.packageName;
        return t1 == null ? "library" : "library in " + H.S(t1);
      }
      t1 = $.get$searchIndex()._search0$_map;
      t2 = loc.get$componentNames();
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      t2.pop();
      t2 = Y.DocsLocation$fromList(t2);
      t3 = t2.get$packagePlus();
      t4 = t2.libraryName;
      if (t4 == null)
        t4 = "";
      t5 = t2.memberName;
      t5 = t5 == null ? "" : "." + H.S(t5);
      t2 = t2.subMemberName;
      if (J.$eq(J.$index$asx(t1, C.JSArray_methods.join$1([t3, t4, t5, t2 == null ? "" : "." + H.S(t2)], "")), "class")) {
        t1 = receiver._results$__$item;
        t1 = H.S(t1 == null ? "none" : J.get$type$x(t1)) + " in ";
        names = loc.get$componentNames();
        t2 = names.length;
        return t1 + H.S(t2 < 2 ? "" : names[t2 - 2]);
      }
      t1 = receiver._results$__$item;
      return t1 == null ? "none" : J.get$type$x(t1);
    },
    _getOuterLibrary$0: function(receiver) {
      var t1, loc, t2, libraryName, library, packageName;
      t1 = receiver._results$__$item;
      if (J.$eq(t1 == null ? "none" : J.get$type$x(t1), "library"))
        return "";
      t1 = receiver._results$__$item;
      t1 = t1 == null ? "none" : t1.get$element();
      loc = new Y.DocsLocation(null, null, null, null, null);
      loc._extractPieces$1(t1);
      t1 = H.S(loc.get$packagePlus());
      t2 = loc.libraryName;
      libraryName = t1 + H.S(t2 == null ? "" : t2);
      library = $.get$pageIndex().$index(0, libraryName);
      if (library == null)
        return "";
      packageName = loc.packageName;
      if (packageName == null)
        return "library " + H.S(library.get$decoratedName());
      else
        return "library " + H.S(library.get$decoratedName()) + " in " + H.S(packageName);
    },
    Result$created$0: function(receiver) {
      this.polymerCreated$0(receiver);
    },
    static: {Result$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.Result_methods.Element$created$0(receiver);
        C.Result_methods.Result$created$0(receiver);
        return receiver;
      }}
  },
  AnchorElement_Polymer: {
    "^": "AnchorElement+Polymer;syntax:polymer$Polymer$syntax=",
    $isPolymer: true,
    $isNodeBindExtension: true,
    $isObservable: true,
    $isElement: true,
    $isEventTarget: true,
    $isNode: true
  },
  AnchorElement_Polymer_ChangeNotifier: {
    "^": "AnchorElement_Polymer+ChangeNotifier;",
    $isObservable: true
  }
}],
["web.search", "package:dartdoc_viewer/components/search.dart", , M, {
  "^": "",
  Search: {
    "^": "PolymerElement_ChangeNotifier4;_search$__$searchQuery,_search$__$isFocused,_search$__$results,_search$__$dropdownOpen,currentIndex,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$searchQuery: function(receiver) {
      return receiver._search$__$searchQuery;
    },
    set$searchQuery: function(receiver, value) {
      receiver._search$__$searchQuery = this.notifyPropertyChange$3(receiver, C.Symbol_searchQuery, receiver._search$__$searchQuery, value);
    },
    get$isFocused: function(receiver) {
      return receiver._search$__$isFocused;
    },
    set$isFocused: function(receiver, value) {
      receiver._search$__$isFocused = this.notifyPropertyChange$3(receiver, C.Symbol_isFocused, receiver._search$__$isFocused, value);
    },
    get$results: function(receiver) {
      return receiver._search$__$results;
    },
    set$results: function(receiver, value) {
      receiver._search$__$results = this.notifyPropertyChange$3(receiver, C.Symbol_results, receiver._search$__$results, value);
    },
    get$dropdownOpen: function(receiver) {
      return receiver._search$__$dropdownOpen;
    },
    set$dropdownOpen: function(receiver, value) {
      receiver._search$__$dropdownOpen = this.notifyPropertyChange$3(receiver, C.Symbol_dropdownOpen, receiver._search$__$dropdownOpen, value);
    },
    get$syntax: function(receiver) {
      return $.get$defaultSyntax();
    },
    get$applyAuthorStyles: function(receiver) {
      return true;
    },
    searchQueryChanged$0: [function(receiver) {
      var t1, t2, t3, t4;
      receiver.currentIndex = -1;
      J.clear$0$ax(receiver._search$__$results);
      t1 = receiver._search$__$results;
      t2 = $.get$searchIndex();
      t3 = receiver._search$__$searchQuery;
      t4 = $.get$viewer()._viewer0$__$isDesktop === true ? 10 : 5;
      J.addAll$1$ax(t1, B.lookupSearchResults(t2, t3, t4, this.get$locationValidInContext(receiver)));
      this._updateDropdownOpen$0(receiver);
    }, "call$0", "get$searchQueryChanged", 0, 0, 10],
    _updateDropdownOpen$0: function(receiver) {
      var t1 = J.get$isEmpty$asx(receiver._search$__$searchQuery) !== true && receiver._search$__$isFocused === true ? "open" : "";
      receiver._search$__$dropdownOpen = this.notifyPropertyChange$3(receiver, C.Symbol_dropdownOpen, receiver._search$__$dropdownOpen, t1);
    },
    locationValidInContext$1: [function(receiver, $location) {
      var t1, currentContext, showPkg;
      t1 = $.get$viewer();
      currentContext = t1._currentPage.get$home();
      showPkg = t1._showPkgLibraries;
      t1 = t1._viewer0$__$homePage;
      if (currentContext == null ? t1 == null : currentContext === t1)
        if (showPkg === true)
          return true;
        else
          return $location.packageName == null;
      else
        return J.$eq($location.packageName, currentContext.name);
    }, "call$1", "get$locationValidInContext", 2, 0, 153],
    onBlurCallback$1: [function(receiver, _) {
      receiver._search$__$isFocused = this.notifyPropertyChange$3(receiver, C.Symbol_isFocused, receiver._search$__$isFocused, false);
      P._Future$immediate(null, null).then$1(new M.Search_onBlurCallback_closure(receiver));
    }, "call$1", "get$onBlurCallback", 2, 0, 13, 79],
    onFocusCallback$1: [function(receiver, _) {
      receiver._search$__$isFocused = this.notifyPropertyChange$3(receiver, C.Symbol_isFocused, receiver._search$__$isFocused, true);
    }, "call$1", "get$onFocusCallback", 2, 0, 13, 79],
    _searchRefId$1: function(receiver, element) {
      var t1;
      if (element == null)
        return;
      t1 = J.getInterceptor(element);
      if (!!t1.$isElement && element.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(element))._toHyphenedName$1("ref-id")) != null)
        return element.getAttribute("data-" + new W._DataAttributeMap(new W._ElementAttributeMap(element))._toHyphenedName$1("ref-id"));
      if (!!t1.$isShadowRoot)
        return this._searchRefId$1(receiver, element.host);
      return this._searchRefId$1(receiver, t1.get$parentNode(element));
    },
    selectDropDownItem$3: [function(receiver, $event, detail, target) {
      var refId;
      if (J.get$isEmpty$asx(receiver._search$__$results) === true)
        return;
      refId = this._searchRefId$1(receiver, J.get$target$x($event));
      if (refId != null)
        this._navigateTo$1(receiver, refId);
    }, "call$3", "get$selectDropDownItem", 6, 0, 150, 47, 147, 148],
    _navigateTo$1: function(receiver, refId) {
      var t1, t2, t3, t4, t5, encoded;
      if (refId == null || J.get$isEmpty$asx(refId) === true)
        return;
      t1 = new Y.DocsLocation(null, null, null, null, null);
      t1._extractPieces$1(refId);
      t2 = t1.get$packagePlus();
      t3 = t1.libraryName;
      if (t3 == null)
        t3 = "";
      t4 = t1.memberName;
      t4 = t4 == null ? "" : "." + H.S(t4);
      t5 = t1.subMemberName;
      encoded = P.Uri__uriEncode(C.List_CVk, C.JSArray_methods.join$1([t2, t3, t4, t5 == null ? "" : "." + H.S(t5)], "") + t1.get$anchorPlus(), C.Utf8Codec_false, false);
      t1 = $.get$viewer();
      t1.handleLink$2(encoded, $.useHistory);
      if ($.useHistory) {
        t2 = window.history;
        t3 = H.S(Y.entryPoint());
        t3 = t3 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + encoded;
        t1 = t1._currentPage;
        t1 = t1 == null ? "" : t1.get$decoratedName();
        t4 = H.S(Y.entryPoint());
        t2.pushState(t3, t1, t4 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + encoded);
      }
      receiver._search$__$searchQuery = this.notifyPropertyChange$3(receiver, C.Symbol_searchQuery, receiver._search$__$searchQuery, "");
      J.clear$0$ax(receiver._search$__$results);
    },
    enteredView$0: function(receiver) {
      var t1, t2;
      A.Polymer.prototype.enteredView$0.call(this, receiver);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_focus._eventType, true), [null]);
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$onFocusCallback(receiver)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this.registerObserver$2(receiver, "onfocus", t1);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(receiver, C.EventStreamProvider_blur._eventType, true), [null]);
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$onBlurCallback(receiver)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this.registerObserver$2(receiver, "onblur", t1);
      t1 = C.EventStreamProvider_keydown._eventType;
      t2 = H.setRuntimeTypeInfo(new W._ElementEventStreamImpl(receiver, t1, false), [null]);
      t2 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t2._html$_target, t2._eventType, W._wrapZone(this.get$handleUpDown(receiver)), t2._useCapture), [H.getTypeArgumentByIndex(t2, 0)]);
      t2._tryResume$0();
      this.registerObserver$2(receiver, "onkeydown", t2);
      t1 = H.setRuntimeTypeInfo(new W._EventStream(window, t1, false), [null]);
      t1 = H.setRuntimeTypeInfo(new W._EventStreamSubscription(0, t1._html$_target, t1._eventType, W._wrapZone(this.get$shortcutHandler(receiver)), t1._useCapture), [H.getTypeArgumentByIndex(t1, 0)]);
      t1._tryResume$0();
      this.registerObserver$2(receiver, "window.onkeydown", t1);
    },
    handleUpDown$1: [function(receiver, e) {
      var t1, t2, t3;
      t1 = J.getInterceptor$x(e);
      if (t1.get$keyCode(e) === 38) {
        t2 = receiver.currentIndex;
        if (t2 > 0) {
          --t2;
          receiver.currentIndex = t2;
          (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#search" + t2).parentElement.focus();
        } else if (t2 === 0)
          (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q").focus();
        t1.preventDefault$0(e);
      } else if (t1.get$keyCode(e) === 40) {
        t2 = receiver.currentIndex;
        t3 = J.$sub$n(J.get$length$asx(receiver._search$__$results), 1);
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (t2 < t3) {
          t2 = ++receiver.currentIndex;
          (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#search" + t2).parentElement.focus();
        }
        t1.preventDefault$0(e);
      } else if (t1.get$keyCode(e) === 13) {
        t2 = receiver._search$__$results;
        t3 = receiver.currentIndex;
        this._navigateTo$1(receiver, J.get$url$x(J.$index$asx(t2, t3 === -1 ? 0 : t3)));
        t1.preventDefault$0(e);
      }
    }, "call$1", "get$handleUpDown", 2, 0, 154, 1],
    shortcutHandler$1: [function(receiver, $event) {
      var t1, t2;
      t1 = J.getInterceptor$x($event);
      if (t1.get$keyCode($event) === 51 && t1.get$ctrlKey($event) === true) {
        (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q").focus();
        t1.preventDefault$0($event);
      } else {
        if (receiver._search$__$isFocused !== true)
          t2 = t1.get$keyCode($event) === 83 || t1.get$keyCode($event) === 191;
        else
          t2 = false;
        if (t2) {
          (receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q").focus();
          J.select$0$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q"));
          t1.preventDefault$0($event);
        } else if (t1.get$keyCode($event) === 27) {
          receiver._search$__$searchQuery = this.notifyPropertyChange$3(receiver, C.Symbol_searchQuery, receiver._search$__$searchQuery, "");
          J.set$value$x((receiver.shadowRoot || receiver.webkitShadowRoot).querySelector("#q"), "");
          t1.preventDefault$0($event);
        }
      }
    }, "call$1", "get$shortcutHandler", 2, 0, 154, 47],
    rerouteLink$3: [function(receiver, $event, detail, target) {
      return U.routeLink($event, detail, target);
    }, "call$3", "get$rerouteLink", 6, 0, 150, 47, 147, 148],
    $isSearch: true,
    static: {Search$created: function(receiver) {
        var t1, t2, t3, t4, t5;
        t1 = R._toObservableDeep([]);
        t2 = $.get$Polymer__polymerSyntax();
        t3 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t4 = P.String;
        t5 = W.Element;
        t5 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t4, t5), null, null), [t4, t5]);
        receiver._search$__$searchQuery = "";
        receiver._search$__$isFocused = false;
        receiver._search$__$results = t1;
        receiver.currentIndex = -1;
        receiver.polymer$Polymer$syntax = t2;
        receiver.polymer$Polymer$_shadowRoots = t3;
        receiver.polymer$Polymer$$ = t5;
        C.Search_methods.Element$created$0(receiver);
        C.Search_methods.PolymerElement$created$0(receiver);
        return receiver;
      }}
  },
  PolymerElement_ChangeNotifier4: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  },
  Search_onBlurCallback_closure: {
    "^": "Closure0:30;this_0",
    call$1: [function(_) {
      return J._updateDropdownOpen$0$x(this.this_0);
    }, "call$1", null, 2, 0, null, 79, "call"],
    $isFunction: true
  }
}],
["web.type", "package:dartdoc_viewer/components/type.dart", , N, {
  "^": "",
  TypeElement: {
    "^": "PolymerElement_ChangeNotifier5;_type$__$type,_child,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$type: function(receiver) {
      return receiver._type$__$type;
    },
    set$type: function(receiver, value) {
      receiver._type$__$type = this.notifyPropertyChange$3(receiver, C.Symbol_type, receiver._type$__$type, value);
    },
    enteredView$0: function(receiver) {
      A.Polymer.prototype.enteredView$0.call(this, receiver);
      this.typeChanged$0(receiver);
      $.get$searchIndex().onLoad$1(0, this.get$typeChanged(receiver));
    },
    typeChanged$0: [function(receiver) {
      var t1 = receiver._child;
      if (t1 != null)
        J.remove$0$ax(t1);
      t1 = receiver._type$__$type;
      if (t1 == null || t1.get$isDynamic())
        return;
      t1 = N.TypeElement_createInner(receiver._type$__$type);
      receiver._child = t1;
      receiver.appendChild(t1);
    }, "call$0", "get$typeChanged", 0, 0, 10],
    static: {TypeElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.TypeElement_methods.Element$created$0(receiver);
        C.TypeElement_methods.PolymerElement$created$0(receiver);
        return receiver;
      }, TypeElement_createInner: function(type) {
        var span, t1, t2, t3, t4, t5, t6, e, t7, element;
        span = document.createElement("span", null);
        t1 = J.getInterceptor$x(span);
        t1.get$classes(span).add$1(0, "type");
        t2 = $.get$searchIndex()._search0$_map;
        t3 = type.get$outer().loc;
        t4 = t3.packageName;
        if (t4 == null)
          t4 = "";
        else
          t4 = t3.libraryName == null ? t4 : H.S(t4) + "/";
        t5 = t3.libraryName;
        if (t5 == null)
          t5 = "";
        t6 = t3.memberName;
        t6 = t6 == null ? "" : "." + H.S(t6);
        t3 = t3.subMemberName;
        if (t2.containsKey$1(C.JSArray_methods.join$1([t4, t5, t6, t3 == null ? "" : "." + H.S(t3)], "")) === true) {
          e = document.createElement("a", null);
          t2 = type.get$outer().loc;
          t3 = new Y.DocsLocation(null, null, null, null, null);
          t3.packageName = t2.packageName;
          t3.libraryName = t2.libraryName;
          t3.memberName = t2.memberName;
          t3.subMemberName = t2.subMemberName;
          t3.anchor = t2.anchor;
          t3.anchor = null;
          e.textContent = t3.get$name(t3);
          t3 = J.getInterceptor$x(e);
          t2 = t3.get$onClick(e);
          t4 = t2._eventType;
          t5 = t2._useCapture;
          t6 = new W._EventStreamSubscription(0, t2._html$_target, t4, W._wrapZone(new N.TypeElement_createInner_closure()), t5);
          t6.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
          t2 = t6._onData;
          if (t2 != null && t6._pauseCount <= 0)
            J.addEventListener$3$x(t6._html$_target, t4, t2, t5);
          t2 = type.get$outer().loc;
          t4 = t2.packageName;
          if (t4 == null)
            t4 = "";
          else
            t4 = t2.libraryName == null ? t4 : H.S(t4) + "/";
          t5 = t2.libraryName;
          if (t5 == null)
            t5 = "";
          t6 = t2.memberName;
          t6 = t6 == null ? "" : "." + H.S(t6);
          t7 = t2.subMemberName;
          t4 = C.JSArray_methods.join$1([t4, t5, t6, t7 == null ? "" : "." + H.S(t7)], "");
          if ($.get$viewer().redirectToDartlang) {
            t2 = t2.libraryName;
            t2 = t2 != null && J.startsWith$1$s(t2, "dart-");
          } else
            t2 = false;
          if (t2) {
            t2 = $._dartdocMain;
            if (t2 == null) {
              t2 = document.querySelector("#dartdoc-main");
              $._dartdocMain = t2;
            }
            t2 = "https://api.dartlang.org/apidocs/channels/" + J.get$sdkChannel$x(t2) + "/dartdoc-viewer/";
            t5 = $._dartdocMain;
            if (t5 == null) {
              t5 = document.querySelector("#dartdoc-main");
              $._dartdocMain = t5;
            }
            t4 = t2 + J.get$sdkRevisionNum$x(t5) + t4;
            t2 = t4;
          } else {
            t2 = H.S(Y.entryPoint());
            t2 = t2 + ($.useHistory ? "/dartdoc-viewer/" : "#") + Y.getVersionStr() + t4;
          }
          t3.set$href(e, t2);
          span.appendChild(e);
        } else {
          t2 = type.get$outer().loc;
          t3 = new Y.DocsLocation(null, null, null, null, null);
          t3.packageName = t2.packageName;
          t3.libraryName = t2.libraryName;
          t3.memberName = t2.memberName;
          t3.subMemberName = t2.subMemberName;
          t3.anchor = t2.anchor;
          t3.anchor = null;
          t1.insertAdjacentText$2(span, "beforeend", t3.get$name(t3));
        }
        if (type.get$inner().length !== 0) {
          t1.insertAdjacentText$2(span, "beforeend", "<");
          t2 = type.get$inner();
          t3 = new H.ListIterator(t2, t2.length, 0, null);
          t3.$builtinTypeInfo = [H.getTypeArgumentByIndex(t2, 0)];
          for (; t3.moveNext$0();) {
            element = t3._current;
            if (!J.$eq(element, C.JSArray_methods.get$first(type.get$inner())))
              t1.insertAdjacentText$2(span, "beforeend", ", ");
            span.appendChild(N.TypeElement_createInner(element));
          }
          t1.insertAdjacentText$2(span, "beforeend", ">");
        }
        return span;
      }}
  },
  PolymerElement_ChangeNotifier5: {
    "^": "PolymerElement+ChangeNotifier;",
    $isObservable: true
  },
  TypeElement_createInner_closure: {
    "^": "Closure0:30;",
    call$1: [function($event) {
      return U.routeLink($event, null, J.get$target$x($event));
    }, "call$1", null, 2, 0, null, 47, "call"],
    $isFunction: true
  }
}],
["web.typedef", "package:dartdoc_viewer/components/typedef.dart", , E, {
  "^": "",
  TypedefElement: {
    "^": "MemberElement;_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isTypedef;
    },
    get$defaultItem: function(receiver) {
      return $.get$TypedefElement__defaultItem();
    },
    static: {"^": "TypedefElement__defaultItem", TypedefElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.TypedefElement_methods.Element$created$0(receiver);
        C.TypedefElement_methods.PolymerElement$created$0(receiver);
        C.TypedefElement_methods.MemberElement$created$0(receiver);
        return receiver;
      }}
  }
}],
["web.variable", "package:dartdoc_viewer/components/variable.dart", , F, {
  "^": "",
  VariableElement: {
    "^": "InheritedElement_ChangeNotifier0;_variable$__$annotations,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_member$__$inheritedFrom,_member$__$commentFrom,_member$__$isInherited,_member$__$hasInheritedComment,_member$__$shouldShowComment,_member$__$shouldShowCommentFrom,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$annotations: function(receiver) {
      return receiver._variable$__$annotations;
    },
    set$annotations: function(receiver, value) {
      receiver._variable$__$annotations = this.notifyPropertyChange$3(receiver, C.Symbol_annotations, receiver._variable$__$annotations, value);
    },
    get$defaultItem: function(receiver) {
      return $.get$VariableElement__defaultItem();
    },
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isVariable;
    },
    static: {"^": "VariableElement__defaultItem", VariableElement$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.VariableElement_methods.Element$created$0(receiver);
        C.VariableElement_methods.PolymerElement$created$0(receiver);
        C.VariableElement_methods.MemberElement$created$0(receiver);
        C.VariableElement_methods.InheritedElement$created$0(receiver);
        return receiver;
      }}
  },
  InheritedElement_ChangeNotifier0: {
    "^": "InheritedElement+ChangeNotifier;",
    $isObservable: true
  }
}],
["web.variable_heading", "package:dartdoc_viewer/components/variable-heading.dart", , E, {
  "^": "",
  VariableHeading: {
    "^": "MemberElement_ChangeNotifier0;_variable_heading$__$getter,_variable_heading$__$name,_variable_heading$__$isNotSetter,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,_item,_member$__$idName,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,change_notifier$ChangeNotifier$_changes,change_notifier$ChangeNotifier$_records,polymer$Polymer$_declaration,polymer$Polymer$_observers,polymer$Polymer$_unbound,polymer$Polymer$_unbindAllJob,polymer$Polymer$_propertyObserver,polymer$Polymer$syntax,polymer$Polymer$_shadowRoots,polymer$Polymer$$",
    get$getter: function(receiver) {
      return receiver._variable_heading$__$getter;
    },
    set$getter: function(receiver, value) {
      receiver._variable_heading$__$getter = this.notifyPropertyChange$3(receiver, C.Symbol_getter, receiver._variable_heading$__$getter, value);
    },
    get$name: function(receiver) {
      return receiver._variable_heading$__$name;
    },
    set$name: function(receiver, value) {
      receiver._variable_heading$__$name = this.notifyPropertyChange$3(receiver, C.Symbol_name, receiver._variable_heading$__$name, value);
    },
    get$isNotSetter: function(receiver) {
      return receiver._variable_heading$__$isNotSetter;
    },
    set$isNotSetter: function(receiver, value) {
      receiver._variable_heading$__$isNotSetter = this.notifyPropertyChange$3(receiver, C.Symbol_isNotSetter, receiver._variable_heading$__$isNotSetter, value);
    },
    get$defaultItem: function(receiver) {
      return $.get$VariableHeading__defaultItem();
    },
    wrongClass$1: function(receiver, newItem) {
      return !J.getInterceptor(newItem).$isVariable;
    },
    itemChanged$0: [function(receiver) {
      var t1, t2, n;
      U.MemberElement.prototype.itemChanged$0.call(this, receiver);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
        t2 = t1;
      } else
        t2 = t1;
      if (t1 == null)
        return;
      if (t2 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      } else
        t1 = t2;
      t1 = t1.get$isGetter() ? "get " : "";
      receiver._variable_heading$__$getter = this.notifyPropertyChange$3(receiver, C.Symbol_getter, receiver._variable_heading$__$getter, t1);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      t1 = t1.get$isSetter();
      receiver._variable_heading$__$isNotSetter = this.notifyPropertyChange$3(receiver, C.Symbol_isNotSetter, receiver._variable_heading$__$isNotSetter, !t1);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      n = J.get$name$x(t1);
      t1 = receiver._item;
      if (t1 == null) {
        t1 = this.get$defaultItem(receiver);
        receiver._item = t1;
      }
      if (t1.get$isSetter()) {
        t1 = J.getInterceptor$asx(n);
        t1 = t1.substring$2(n, 0, J.$sub$n(t1.get$length(n), 1));
      } else
        t1 = n;
      receiver._variable_heading$__$name = this.notifyPropertyChange$3(receiver, C.Symbol_name, receiver._variable_heading$__$name, t1);
    }, "call$0", "get$itemChanged", 0, 0, 10],
    static: {"^": "VariableHeading__defaultItem", VariableHeading$created: function(receiver) {
        var t1, t2, t3, t4;
        t1 = $.get$Polymer__polymerSyntax();
        t2 = P.HashMap_HashMap(null, null, null, P.String, W.ShadowRoot);
        t3 = P.String;
        t4 = W.Element;
        t4 = H.setRuntimeTypeInfo(new V.ObservableMap(P.HashMap_HashMap(null, null, null, t3, t4), null, null), [t3, t4]);
        receiver.polymer$Polymer$syntax = t1;
        receiver.polymer$Polymer$_shadowRoots = t2;
        receiver.polymer$Polymer$$ = t4;
        C.VariableHeading_methods.Element$created$0(receiver);
        C.VariableHeading_methods.PolymerElement$created$0(receiver);
        C.VariableHeading_methods.MemberElement$created$0(receiver);
        return receiver;
      }}
  },
  MemberElement_ChangeNotifier0: {
    "^": "MemberElement+ChangeNotifier;",
    $isObservable: true
  }
}],
]);
Isolate.$finishClasses($$, $, null);
$$ = null;

// Runtime type support
P.$int.$is$int = true;
P.$int.$isnum = true;
P.$int.$isComparable = true;
P.$int.$asComparable = [P.num];
P.$int.$isObject = true;
P.$double.$is$double = true;
P.$double.$isnum = true;
P.$double.$isComparable = true;
P.$double.$asComparable = [P.num];
P.$double.$isObject = true;
W.SpeechRecognitionResult.$isSpeechRecognitionResult = true;
W.SpeechRecognitionResult.$isObject = true;
W.SpeechInputResult.$isSpeechInputResult = true;
W.SpeechInputResult.$isObject = true;
W.Node.$isNode = true;
W.Node.$isObject = true;
W.Entry.$isObject = true;
P.String.$isString = true;
P.String.$isComparable = true;
P.String.$asComparable = [P.String];
P.String.$isObject = true;
P.num.$isnum = true;
P.num.$isComparable = true;
P.num.$asComparable = [P.num];
P.num.$isObject = true;
P.Duration.$isDuration = true;
P.Duration.$isComparable = true;
P.Duration.$asComparable = [P.Duration];
P.Duration.$isObject = true;
P.List.$isList = true;
P.List.$isIterable = true;
P.List.$isObject = true;
P.Object.$isObject = true;
P.Match.$isObject = true;
W.Element.$isElement = true;
W.Element.$isNode = true;
W.Element.$isObject = true;
N.Level.$isComparable = true;
N.Level.$asComparable = [N.Level];
N.Level.$isObject = true;
P._SplayTreeNode.$isObject = true;
K.IndexedValue.$isIndexedValue = true;
K.IndexedValue.$isObject = true;
U.EmptyExpression.$isExpression = true;
U.EmptyExpression.$isObject = true;
U.Invoke.$isExpression = true;
U.Invoke.$isObject = true;
U.Index.$isIndex = true;
U.Index.$isExpression = true;
U.Index.$isObject = true;
U.InExpression.$isExpression = true;
U.InExpression.$isObject = true;
U.TernaryOperator.$isExpression = true;
U.TernaryOperator.$isObject = true;
U.BinaryOperator.$isExpression = true;
U.BinaryOperator.$isObject = true;
U.Getter.$isGetter = true;
U.Getter.$isExpression = true;
U.Getter.$isObject = true;
U.Literal.$isExpression = true;
U.Literal.$isObject = true;
U.UnaryOperator.$isExpression = true;
U.UnaryOperator.$isObject = true;
U.Identifier.$isIdentifier = true;
U.Identifier.$isExpression = true;
U.Identifier.$isObject = true;
U.ListLiteral.$isExpression = true;
U.ListLiteral.$isObject = true;
U.MapLiteralEntry.$isExpression = true;
U.MapLiteralEntry.$isObject = true;
U.MapLiteral.$isExpression = true;
U.MapLiteral.$isObject = true;
P.Symbol0.$isSymbol0 = true;
P.Symbol0.$isObject = true;
P.Type.$isType = true;
P.Type.$isObject = true;
T.ChangeRecord.$isChangeRecord = true;
T.ChangeRecord.$isObject = true;
W.NodeValidator.$isNodeValidator = true;
W.NodeValidator.$isObject = true;
W.HttpRequest.$isObject = true;
W.ProgressEvent.$isEvent = true;
W.ProgressEvent.$isObject = true;
P.bool.$isbool = true;
P.bool.$isObject = true;
W.Event.$isEvent = true;
W.Event.$isObject = true;
G.ListChangeRecord.$isListChangeRecord = true;
G.ListChangeRecord.$isObject = true;
E.NestedType.$isObject = true;
E.Parameter.$isItem = true;
E.Parameter.$isObject = true;
E.Item.$isItem = true;
E.Item.$isObject = true;
W.MouseEvent.$isMouseEvent = true;
W.MouseEvent.$isEvent = true;
W.MouseEvent.$isObject = true;
P.Stream.$isStream = true;
P.Stream.$isObject = true;
P.StreamSubscription.$isStreamSubscription = true;
P.StreamSubscription.$isObject = true;
B.SearchResult.$isComparable = true;
B.SearchResult.$asComparable = [null];
B.SearchResult.$isObject = true;
B.Hit.$isObject = true;
W.PopStateEvent.$isEvent = true;
W.PopStateEvent.$isObject = true;
A.PolymerDeclaration.$isObject = true;
A.Bindable.$isObject = true;
N.Logger.$isObject = true;
L.PropertyPath.$isPropertyPath = true;
L.PropertyPath.$isObject = true;
M._BoundNodes.$isObject = true;
F.Observable.$isObject = true;
A.Polymer.$isElement = true;
A.Polymer.$isNode = true;
A.Polymer.$isObject = true;
W.KeyboardEvent.$isKeyboardEvent = true;
W.KeyboardEvent.$isEvent = true;
W.KeyboardEvent.$isObject = true;
H.RawReceivePortImpl.$isObject = true;
H._IsolateEvent.$isObject = true;
H._IsolateContext.$isObject = true;
W.ShadowRoot.$isNode = true;
W.ShadowRoot.$isObject = true;
Y.Token.$isObject = true;
U.Expression.$isExpression = true;
U.Expression.$isObject = true;
P.StackTrace.$isStackTrace = true;
P.StackTrace.$isObject = true;
E.Class.$isClass = true;
E.Class.$isItem = true;
E.Class.$isObject = true;
P._BufferingStreamSubscription.$is_BufferingStreamSubscription = true;
P._BufferingStreamSubscription.$is_EventSink = true;
P._BufferingStreamSubscription.$isStreamSubscription = true;
P._BufferingStreamSubscription.$isObject = true;
P._BroadcastSubscription.$is_BroadcastSubscription = true;
P._BroadcastSubscription.$is_BufferingStreamSubscription = true;
P._BroadcastSubscription.$is_EventSink = true;
P._BroadcastSubscription.$isStreamSubscription = true;
P._BroadcastSubscription.$isObject = true;
P.Comparable.$isComparable = true;
P.Comparable.$isObject = true;
W._Html5NodeValidator.$is_Html5NodeValidator = true;
W._Html5NodeValidator.$isNodeValidator = true;
W._Html5NodeValidator.$isObject = true;
P.Iterable.$isIterable = true;
P.Iterable.$isObject = true;
W.AnchorElement.$isAnchorElement = true;
W.AnchorElement.$isElement = true;
W.AnchorElement.$isNode = true;
W.AnchorElement.$isObject = true;
W.SpeechRecognitionAlternative.$isSpeechRecognitionAlternative = true;
W.SpeechRecognitionAlternative.$isObject = true;
P.Function.$isFunction = true;
P.Function.$isObject = true;
P._EventSink.$is_EventSink = true;
P._EventSink.$isObject = true;
P.Future.$isFuture = true;
P.Future.$isObject = true;
P._DelayedEvent.$is_DelayedEvent = true;
P._DelayedEvent.$isObject = true;
P.DateTime.$isDateTime = true;
P.DateTime.$isComparable = true;
P.DateTime.$asComparable = [null];
P.DateTime.$isObject = true;
Y.DocsLocation.$isDocsLocation = true;
Y.DocsLocation.$isObject = true;
L._Observer.$is_Observer = true;
L._Observer.$isObject = true;
P.Map.$isMap = true;
P.Map.$isObject = true;
A.Declaration.$isDeclaration = true;
A.Declaration.$isObject = true;
A.QueryOptions.$isQueryOptions = true;
A.QueryOptions.$isObject = true;
// getInterceptor methods
J.getInterceptor = function(receiver) {
  if (typeof receiver == "number") {
    if (Math.floor(receiver) == receiver)
      return J.JSInt.prototype;
    return J.JSDouble.prototype;
  }
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return J.JSNull.prototype;
  if (typeof receiver == "boolean")
    return J.JSBool.prototype;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$asx = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$ax = function(receiver) {
  if (receiver == null)
    return receiver;
  if (receiver.constructor == Array)
    return J.JSArray.prototype;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.getInterceptor$n = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$ns = function(receiver) {
  if (typeof receiver == "number")
    return J.JSNumber.prototype;
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$s = function(receiver) {
  if (typeof receiver == "string")
    return J.JSString.prototype;
  if (receiver == null)
    return receiver;
  if (!(receiver instanceof P.Object))
    return J.UnknownJavaScriptObject.prototype;
  return receiver;
};
J.getInterceptor$x = function(receiver) {
  if (receiver == null)
    return receiver;
  if (typeof receiver != "object")
    return receiver;
  if (receiver instanceof P.Object)
    return receiver;
  return J.getNativeInterceptor(receiver);
};
J.$add$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver + a0;
  return J.getInterceptor$ns(receiver).$add(receiver, a0);
};
J.$div$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver / a0;
  return J.getInterceptor$n(receiver).$div(receiver, a0);
};
J.$eq = function(receiver, a0) {
  if (receiver == null)
    return a0 == null;
  if (typeof receiver != "object")
    return a0 != null && receiver === a0;
  return J.getInterceptor(receiver).$eq(receiver, a0);
};
J.$ge$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver >= a0;
  return J.getInterceptor$n(receiver).$ge(receiver, a0);
};
J.$gt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver > a0;
  return J.getInterceptor$n(receiver).$gt(receiver, a0);
};
J.$index$asx = function(receiver, a0) {
  if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
    if (a0 >>> 0 === a0 && a0 < receiver.length)
      return receiver[a0];
  return J.getInterceptor$asx(receiver).$index(receiver, a0);
};
J.$indexSet$ax = function(receiver, a0, a1) {
  if ((receiver.constructor == Array || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName])) && !receiver.immutable$list && a0 >>> 0 === a0 && a0 < receiver.length)
    return receiver[a0] = a1;
  return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
};
J.$le$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver <= a0;
  return J.getInterceptor$n(receiver).$le(receiver, a0);
};
J.$lt$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver < a0;
  return J.getInterceptor$n(receiver).$lt(receiver, a0);
};
J.$mul$ns = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver * a0;
  return J.getInterceptor$ns(receiver).$mul(receiver, a0);
};
J.$negate$n = function(receiver) {
  if (typeof receiver == "number")
    return -receiver;
  return J.getInterceptor$n(receiver).$negate(receiver);
};
J.$shl$n = function(receiver, a0) {
  return J.getInterceptor$n(receiver).$shl(receiver, a0);
};
J.$sub$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return receiver - a0;
  return J.getInterceptor$n(receiver).$sub(receiver, a0);
};
J.$xor$n = function(receiver, a0) {
  if (typeof receiver == "number" && typeof a0 == "number")
    return (receiver ^ a0) >>> 0;
  return J.getInterceptor$n(receiver).$xor(receiver, a0);
};
J.__isolate_helper$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).__isolate_helper$_add$1(receiver, a0);
};
J._async$_add$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
};
J._clearChildren$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._clearChildren$0(receiver);
};
J._initCustomEvent$4$x = function(receiver, a0, a1, a2, a3) {
  return J.getInterceptor$x(receiver)._initCustomEvent$4(receiver, a0, a1, a2, a3);
};
J._initMouseEvent$15$x = function(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14) {
  return J.getInterceptor$x(receiver)._initMouseEvent$15(receiver, a0, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
};
J._loadCategories$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._loadCategories$0(receiver);
};
J._replaceChild$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
};
J._update$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._update$0(receiver);
};
J._updateActiveLibrary$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver)._updateActiveLibrary$1(receiver, a0);
};
J._updateBreadcrumbs$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._updateBreadcrumbs$0(receiver);
};
J._updateDropdownOpen$0$x = function(receiver) {
  return J.getInterceptor$x(receiver)._updateDropdownOpen$0(receiver);
};
J.accept$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).accept$1(receiver, a0);
};
J.add$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).add$1(receiver, a0);
};
J.addAll$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
};
J.addEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
};
J.any$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).any$1(receiver, a0);
};
J.append$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).append$1(receiver, a0);
};
J.appendHtml$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).appendHtml$1(receiver, a0);
};
J.attached$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).attached$0(receiver);
};
J.attributeChanged$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).attributeChanged$3(receiver, a0, a1, a2);
};
J.bind$3$oneTime$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).bind$3$oneTime(receiver, a0, a1, a2);
};
J.categoryChanged$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).categoryChanged$0(receiver);
};
J.clear$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).clear$0(receiver);
};
J.close$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).close$0(receiver);
};
J.codeUnitAt$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).codeUnitAt$1(receiver, a0);
};
J.collapseSearchAndOptionsIfNeeded$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).collapseSearchAndOptionsIfNeeded$0(receiver);
};
J.compareTo$1$ns = function(receiver, a0) {
  return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
};
J.contains$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
};
J.contains$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
};
J.createDocumentFragment$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).createDocumentFragment$0(receiver);
};
J.createFragment$2$treeSanitizer$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).createFragment$2$treeSanitizer(receiver, a0, a1);
};
J.createFragment$3$treeSanitizer$validator$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).createFragment$3$treeSanitizer$validator(receiver, a0, a1, a2);
};
J.detached$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).detached$0(receiver);
};
J.disconnect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).disconnect$0(receiver);
};
J.elementAt$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
};
J.endsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).endsWith$1(receiver, a0);
};
J.firstWhere$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).firstWhere$1(receiver, a0);
};
J.firstWhere$2$orElse$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).firstWhere$2$orElse(receiver, a0, a1);
};
J.fold$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).fold$2(receiver, a0, a1);
};
J.forEach$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
};
J.get$_children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_children(receiver);
};
J.get$_observe$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$_observe(receiver);
};
J.get$accordionStyle$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$accordionStyle(receiver);
};
J.get$annotations$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$annotations(receiver);
};
J.get$annotationsChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$annotationsChanged(receiver);
};
J.get$attributes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$attributes(receiver);
};
J.get$bindings$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$bindings(receiver);
};
J.get$breadcrumbs$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$breadcrumbs(receiver);
};
J.get$camelCaseName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$camelCaseName(receiver);
};
J.get$caretStyle$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$caretStyle(receiver);
};
J.get$category$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$category(receiver);
};
J.get$categoryChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$categoryChanged(receiver);
};
J.get$categoryLink$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$categoryLink(receiver);
};
J.get$children$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$children(receiver);
};
J.get$className$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$className(receiver);
};
J.get$classes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$classes(receiver);
};
J.get$closure$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$closure(receiver);
};
J.get$closureChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$closureChanged(receiver);
};
J.get$collapseSearchAndOptionsIfNeeded$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$collapseSearchAndOptionsIfNeeded(receiver);
};
J.get$commentFrom$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$commentFrom(receiver);
};
J.get$constantModifier$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$constantModifier(receiver);
};
J.get$content$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$content(receiver);
};
J.get$descriptiveName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$descriptiveName(receiver);
};
J.get$descriptiveType$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$descriptiveType(receiver);
};
J.get$display$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$display(receiver);
};
J.get$divClass$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$divClass(receiver);
};
J.get$dropdownOpen$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$dropdownOpen(receiver);
};
J.get$error$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$error(receiver);
};
J.get$first$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$first(receiver);
};
J.get$firstChild$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$firstChild(receiver);
};
J.get$getter$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$getter(receiver);
};
J.get$hasInheritedComment$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$hasInheritedComment(receiver);
};
J.get$hasItems$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$hasItems(receiver);
};
J.get$hashCode$ = function(receiver) {
  return J.getInterceptor(receiver).get$hashCode(receiver);
};
J.get$hideShow$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$hideShow(receiver);
};
J.get$highLevelSdkVersion$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$highLevelSdkVersion(receiver);
};
J.get$homePage$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$homePage(receiver);
};
J.get$hostDocsVersion$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$hostDocsVersion(receiver);
};
J.get$id$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$id(receiver);
};
J.get$idName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$idName(receiver);
};
J.get$index$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$index(receiver);
};
J.get$inheritedFrom$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$inheritedFrom(receiver);
};
J.get$isClass$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isClass(receiver);
};
J.get$isEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
};
J.get$isFinal$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isFinal(receiver);
};
J.get$isFocused$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isFocused(receiver);
};
J.get$isHome$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isHome(receiver);
};
J.get$isInherited$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isInherited(receiver);
};
J.get$isLibrary$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isLibrary(receiver);
};
J.get$isMethod$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isMethod(receiver);
};
J.get$isNotConstructor$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isNotConstructor(receiver);
};
J.get$isNotEmpty$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
};
J.get$isNotSetter$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isNotSetter(receiver);
};
J.get$isTypedef$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$isTypedef(receiver);
};
J.get$item$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$item(receiver);
};
J.get$itemChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$itemChanged(receiver);
};
J.get$items$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$items(receiver);
};
J.get$itemsChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$itemsChanged(receiver);
};
J.get$itemsToShow$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$itemsToShow(receiver);
};
J.get$iterator$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$iterator(receiver);
};
J.get$key$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$key(receiver);
};
J.get$kind$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$kind(receiver);
};
J.get$last$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$last(receiver);
};
J.get$lastCrumb$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lastCrumb(receiver);
};
J.get$lazyClasses$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyClasses(receiver);
};
J.get$lazyConstructors$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyConstructors(receiver);
};
J.get$lazyErrors$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyErrors(receiver);
};
J.get$lazyFunctions$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyFunctions(receiver);
};
J.get$lazyInstanceFunctions$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyInstanceFunctions(receiver);
};
J.get$lazyInstanceVariables$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyInstanceVariables(receiver);
};
J.get$lazyOperators$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyOperators(receiver);
};
J.get$lazyStaticFunctions$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyStaticFunctions(receiver);
};
J.get$lazyStaticVariables$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyStaticVariables(receiver);
};
J.get$lazyTypedefs$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyTypedefs(receiver);
};
J.get$lazyVariables$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lazyVariables(receiver);
};
J.get$left$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$left(receiver);
};
J.get$length$asx = function(receiver) {
  return J.getInterceptor$asx(receiver).get$length(receiver);
};
J.get$lineHeight$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lineHeight(receiver);
};
J.get$location$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$location(receiver);
};
J.get$lower$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$lower(receiver);
};
J.get$marginEdge$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$marginEdge(receiver);
};
J.get$method$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$method(receiver);
};
J.get$methods$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$methods(receiver);
};
J.get$methodsChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$methodsChanged(receiver);
};
J.get$modifiers$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$modifiers(receiver);
};
J.get$name$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$name(receiver);
};
J.get$navHideShow$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$navHideShow(receiver);
};
J.get$nextNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nextNode(receiver);
};
J.get$nodes$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$nodes(receiver);
};
J.get$offsetHeight$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offsetHeight(receiver);
};
J.get$offsetWidth$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$offsetWidth(receiver);
};
J.get$on$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$on(receiver);
};
J.get$outerLibrary$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$outerLibrary(receiver);
};
J.get$ownerDocument$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$ownerDocument(receiver);
};
J.get$pageContentClass$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$pageContentClass(receiver);
};
J.get$parameters$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parameters(receiver);
};
J.get$parametersChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parametersChanged(receiver);
};
J.get$parent$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parent(receiver);
};
J.get$parentNode$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$parentNode(receiver);
};
J.get$position$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$position(receiver);
};
J.get$preview$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$preview(receiver);
};
J.get$previewChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$previewChanged(receiver);
};
J.get$rerouteLink$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$rerouteLink(receiver);
};
J.get$responseText$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$responseText(receiver);
};
J.get$results$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$results(receiver);
};
J.get$reversed$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).get$reversed(receiver);
};
J.get$runtimeType$ = function(receiver) {
  return J.getInterceptor(receiver).get$runtimeType(receiver);
};
J.get$sdkChannel$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$sdkChannel(receiver);
};
J.get$sdkRevisionNum$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$sdkRevisionNum(receiver);
};
J.get$sdkVersionString$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$sdkVersionString(receiver);
};
J.get$searchQuery$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$searchQuery(receiver);
};
J.get$searchQueryChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$searchQueryChanged(receiver);
};
J.get$selectDropDownItem$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selectDropDownItem(receiver);
};
J.get$selectedIndex$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$selectedIndex(receiver);
};
J.get$shouldShowClassMinimap$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$shouldShowClassMinimap(receiver);
};
J.get$shouldShowComment$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$shouldShowComment(receiver);
};
J.get$shouldShowCommentFrom$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$shouldShowCommentFrom(receiver);
};
J.get$shouldShowLibraryMinimap$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$shouldShowLibraryMinimap(receiver);
};
J.get$shouldShowLibraryPanel$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$shouldShowLibraryPanel(receiver);
};
J.get$showOrHideInherited$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$showOrHideInherited(receiver);
};
J.get$showOrHideLibraries$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$showOrHideLibraries(receiver);
};
J.get$showOrHideMinimap$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$showOrHideMinimap(receiver);
};
J.get$showOrHideObjectMembers$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$showOrHideObjectMembers(receiver);
};
J.get$showOrHidePackages$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$showOrHidePackages(receiver);
};
J.get$staticModifier$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$staticModifier(receiver);
};
J.get$status$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$status(receiver);
};
J.get$stylizedName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$stylizedName(receiver);
};
J.get$tagName$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$tagName(receiver);
};
J.get$target$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$target(receiver);
};
J.get$text$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$text(receiver);
};
J.get$timeStamp$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$timeStamp(receiver);
};
J.get$title$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$title(receiver);
};
J.get$toggleInherited$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$toggleInherited(receiver);
};
J.get$toggleMinimap$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$toggleMinimap(receiver);
};
J.get$toggleObjectMembers$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$toggleObjectMembers(receiver);
};
J.get$toggleOptionsMenu$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$toggleOptionsMenu(receiver);
};
J.get$togglePanel$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$togglePanel(receiver);
};
J.get$togglePkg$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$togglePkg(receiver);
};
J.get$top$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$top(receiver);
};
J.get$type$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$type(receiver);
};
J.get$typeChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$typeChanged(receiver);
};
J.get$typedefs$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$typedefs(receiver);
};
J.get$typedefsChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$typedefsChanged(receiver);
};
J.get$url$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$url(receiver);
};
J.get$value$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$value(receiver);
};
J.get$values$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$values(receiver);
};
J.get$variables$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$variables(receiver);
};
J.get$variablesChanged$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$variablesChanged(receiver);
};
J.get$viewer$x = function(receiver) {
  return J.getInterceptor$x(receiver).get$viewer(receiver);
};
J.getBoundingClientRect$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getBoundingClientRect$0(receiver);
};
J.getComputedStyle$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).getComputedStyle$0(receiver);
};
J.getElementById$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).getElementById$1(receiver, a0);
};
J.hideOrShowNavigation$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).hideOrShowNavigation$0(receiver);
};
J.hideOrShowNavigation$1$hide$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).hideOrShowNavigation$1$hide(receiver, a0);
};
J.importNode$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).importNode$2(receiver, a0, a1);
};
J.indexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).indexOf$1(receiver, a0);
};
J.indexOf$2$asx = function(receiver, a0, a1) {
  return J.getInterceptor$asx(receiver).indexOf$2(receiver, a0, a1);
};
J.insertAdjacentText$2$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).insertAdjacentText$2(receiver, a0, a1);
};
J.join$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).join$1(receiver, a0);
};
J.lastIndexOf$1$asx = function(receiver, a0) {
  return J.getInterceptor$asx(receiver).lastIndexOf$1(receiver, a0);
};
J.load$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).load$0(receiver);
};
J.makeLink$2$hidden$x = function(receiver, a0, a1) {
  return J.getInterceptor$x(receiver).makeLink$2$hidden(receiver, a0, a1);
};
J.map$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).map$1(receiver, a0);
};
J.matchAsPrefix$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
};
J.matches$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matches$1(receiver, a0);
};
J.matchesWithAncestors$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).matchesWithAncestors$1(receiver, a0);
};
J.noSuchMethod$1 = function(receiver, a0) {
  return J.getInterceptor(receiver).noSuchMethod$1(receiver, a0);
};
J.open$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).open$1(receiver, a0);
};
J.preventDefault$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).preventDefault$0(receiver);
};
J.querySelector$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelector$1(receiver, a0);
};
J.querySelectorAll$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).querySelectorAll$1(receiver, a0);
};
J.reflectPropertyToAttribute$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).reflectPropertyToAttribute$1(receiver, a0);
};
J.remove$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).remove$0(receiver);
};
J.remove$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
};
J.removeEventListener$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
};
J.replaceAll$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).replaceAll$2(receiver, a0, a1);
};
J.replaceWith$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
};
J.round$0$n = function(receiver) {
  return J.getInterceptor$n(receiver).round$0(receiver);
};
J.select$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).select$0(receiver);
};
J.send$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).send$1(receiver, a0);
};
J.set$_dartDetail$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_dartDetail(receiver, value);
};
J.set$_isExpanded$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_isExpanded(receiver, value);
};
J.set$_selector$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$_selector(receiver, value);
};
J.set$accordionStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$accordionStyle(receiver, value);
};
J.set$annotations$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$annotations(receiver, value);
};
J.set$breadcrumbs$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$breadcrumbs(receiver, value);
};
J.set$camelCaseName$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$camelCaseName(receiver, value);
};
J.set$caretStyle$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$caretStyle(receiver, value);
};
J.set$category$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$category(receiver, value);
};
J.set$categoryLink$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$categoryLink(receiver, value);
};
J.set$checked$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$checked(receiver, value);
};
J.set$className$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$className(receiver, value);
};
J.set$classes$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$classes(receiver, value);
};
J.set$closure$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$closure(receiver, value);
};
J.set$commentFrom$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$commentFrom(receiver, value);
};
J.set$constantModifier$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$constantModifier(receiver, value);
};
J.set$descriptiveName$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$descriptiveName(receiver, value);
};
J.set$descriptiveType$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$descriptiveType(receiver, value);
};
J.set$display$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$display(receiver, value);
};
J.set$divClass$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$divClass(receiver, value);
};
J.set$dropdownOpen$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$dropdownOpen(receiver, value);
};
J.set$getter$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$getter(receiver, value);
};
J.set$hasInheritedComment$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$hasInheritedComment(receiver, value);
};
J.set$hasItems$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$hasItems(receiver, value);
};
J.set$hostDocsVersion$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$hostDocsVersion(receiver, value);
};
J.set$href$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$href(receiver, value);
};
J.set$idName$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$idName(receiver, value);
};
J.set$inheritedFrom$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$inheritedFrom(receiver, value);
};
J.set$isClass$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isClass(receiver, value);
};
J.set$isFocused$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isFocused(receiver, value);
};
J.set$isHome$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isHome(receiver, value);
};
J.set$isInherited$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isInherited(receiver, value);
};
J.set$isLibrary$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isLibrary(receiver, value);
};
J.set$isMethod$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isMethod(receiver, value);
};
J.set$isNotConstructor$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isNotConstructor(receiver, value);
};
J.set$isNotSetter$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isNotSetter(receiver, value);
};
J.set$isTypedef$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$isTypedef(receiver, value);
};
J.set$item$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$item(receiver, value);
};
J.set$items$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$items(receiver, value);
};
J.set$itemsToShow$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$itemsToShow(receiver, value);
};
J.set$lastCrumb$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lastCrumb(receiver, value);
};
J.set$lazyClasses$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyClasses(receiver, value);
};
J.set$lazyConstructors$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyConstructors(receiver, value);
};
J.set$lazyErrors$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyErrors(receiver, value);
};
J.set$lazyFunctions$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyFunctions(receiver, value);
};
J.set$lazyInstanceFunctions$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyInstanceFunctions(receiver, value);
};
J.set$lazyInstanceVariables$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyInstanceVariables(receiver, value);
};
J.set$lazyOperators$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyOperators(receiver, value);
};
J.set$lazyStaticFunctions$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyStaticFunctions(receiver, value);
};
J.set$lazyStaticVariables$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyStaticVariables(receiver, value);
};
J.set$lazyTypedefs$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyTypedefs(receiver, value);
};
J.set$lazyVariables$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lazyVariables(receiver, value);
};
J.set$length$asx = function(receiver, value) {
  return J.getInterceptor$asx(receiver).set$length(receiver, value);
};
J.set$lineHeight$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$lineHeight(receiver, value);
};
J.set$methods$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$methods(receiver, value);
};
J.set$modifiers$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$modifiers(receiver, value);
};
J.set$name$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$name(receiver, value);
};
J.set$outerLibrary$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$outerLibrary(receiver, value);
};
J.set$paddingTop$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$paddingTop(receiver, value);
};
J.set$pageContentClass$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$pageContentClass(receiver, value);
};
J.set$parameters$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$parameters(receiver, value);
};
J.set$position$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$position(receiver, value);
};
J.set$preview$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$preview(receiver, value);
};
J.set$results$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$results(receiver, value);
};
J.set$sdkVersionString$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$sdkVersionString(receiver, value);
};
J.set$searchQuery$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$searchQuery(receiver, value);
};
J.set$selectedIndex$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$selectedIndex(receiver, value);
};
J.set$shouldShowClassMinimap$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$shouldShowClassMinimap(receiver, value);
};
J.set$shouldShowComment$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$shouldShowComment(receiver, value);
};
J.set$shouldShowCommentFrom$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$shouldShowCommentFrom(receiver, value);
};
J.set$shouldShowLibraryMinimap$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$shouldShowLibraryMinimap(receiver, value);
};
J.set$shouldShowLibraryPanel$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$shouldShowLibraryPanel(receiver, value);
};
J.set$showOrHideInherited$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$showOrHideInherited(receiver, value);
};
J.set$showOrHideLibraries$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$showOrHideLibraries(receiver, value);
};
J.set$showOrHideMinimap$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$showOrHideMinimap(receiver, value);
};
J.set$showOrHideObjectMembers$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$showOrHideObjectMembers(receiver, value);
};
J.set$showOrHidePackages$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$showOrHidePackages(receiver, value);
};
J.set$staticModifier$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$staticModifier(receiver, value);
};
J.set$stylizedName$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$stylizedName(receiver, value);
};
J.set$text$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$text(receiver, value);
};
J.set$title$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$title(receiver, value);
};
J.set$type$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$type(receiver, value);
};
J.set$typedefs$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$typedefs(receiver, value);
};
J.set$url$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$url(receiver, value);
};
J.set$value$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$value(receiver, value);
};
J.set$variables$x = function(receiver, value) {
  return J.getInterceptor$x(receiver).set$variables(receiver, value);
};
J.showSubclass$3$x = function(receiver, a0, a1, a2) {
  return J.getInterceptor$x(receiver).showSubclass$3(receiver, a0, a1, a2);
};
J.sort$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
};
J.split$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).split$1(receiver, a0);
};
J.startsWith$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
};
J.sublist$2$ax = function(receiver, a0, a1) {
  return J.getInterceptor$ax(receiver).sublist$2(receiver, a0, a1);
};
J.substring$1$s = function(receiver, a0) {
  return J.getInterceptor$s(receiver).substring$1(receiver, a0);
};
J.substring$2$s = function(receiver, a0, a1) {
  return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
};
J.toList$0$ax = function(receiver) {
  return J.getInterceptor$ax(receiver).toList$0(receiver);
};
J.toList$1$growable$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).toList$1$growable(receiver, a0);
};
J.toLowerCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
};
J.toString$0 = function(receiver) {
  return J.getInterceptor(receiver).toString$0(receiver);
};
J.toUpperCase$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).toUpperCase$0(receiver);
};
J.trim$0$s = function(receiver) {
  return J.getInterceptor$s(receiver).trim$0(receiver);
};
J.unbind$1$x = function(receiver, a0) {
  return J.getInterceptor$x(receiver).unbind$1(receiver, a0);
};
J.unbindAll$0$x = function(receiver) {
  return J.getInterceptor$x(receiver).unbindAll$0(receiver);
};
J.where$1$ax = function(receiver, a0) {
  return J.getInterceptor$ax(receiver).where$1(receiver, a0);
};
C.AnnotationElement_methods = Y.AnnotationElement.prototype;
C.Breadcrumbs_methods = U.Breadcrumbs.prototype;
C.CategoryElement_methods = O.CategoryElement.prototype;
C.ClassElement_methods = T.ClassElement.prototype;
C.ClosureElement_methods = Z.ClosureElement.prototype;
C.CommentElement_methods = S.CommentElement.prototype;
C.DartdocElement_methods = U.DartdocElement.prototype;
C.HomeElement_methods = Z.HomeElement.prototype;
C.HttpRequest_methods = W.HttpRequest.prototype;
C.InheritedElement_methods = U.InheritedElement.prototype;
C.ItemElement_methods = M.ItemElement.prototype;
C.JSArray_methods = J.JSArray.prototype;
C.JSDouble_methods = J.JSDouble.prototype;
C.JSInt_methods = J.JSInt.prototype;
C.JSNull_methods = J.JSNull.prototype;
C.JSNumber_methods = J.JSNumber.prototype;
C.JSString_methods = J.JSString.prototype;
C.LibraryElement_methods = G.LibraryElement.prototype;
C.LibraryPanel_methods = E.LibraryPanel.prototype;
C.LinkElement_methods = Q.LinkElement.prototype;
C.MainElement_methods = A.MainElement.prototype;
C.MemberElement_methods = U.MemberElement.prototype;
C.MethodElement_methods = X.MethodElement.prototype;
C.MinimapElementClass_methods = Q.MinimapElementClass.prototype;
C.MinimapElementLibrary_methods = N.MinimapElementLibrary.prototype;
C.MinimapElement_methods = Z.MinimapElement.prototype;
C.MutationObserver_methods = W.MutationObserver.prototype;
C.NodeList_methods = W.NodeList.prototype;
C.PageElement_methods = O.PageElement.prototype;
C.ParameterElement_methods = X.ParameterElement.prototype;
C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
C.PolymerElement_methods = A.PolymerElement.prototype;
C.Result_methods = G.Result.prototype;
C.Search_methods = M.Search.prototype;
C.TypeElement_methods = N.TypeElement.prototype;
C.TypedefElement_methods = E.TypedefElement.prototype;
C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
C.VariableElement_methods = F.VariableElement.prototype;
C.VariableHeading_methods = E.VariableHeading.prototype;
C.Window_methods = W.Window.prototype;
C.C_DynamicRuntimeType = new H.DynamicRuntimeType();
C.C_EmptyExpression = new U.EmptyExpression();
C.C_EmptyIterator = new H.EmptyIterator();
C.C_OutOfMemoryError = new P.OutOfMemoryError();
C.C__DelayedDone = new P._DelayedDone();
C.C__ObserverSentinel = new L._ObserverSentinel();
C.C__RootZone = new P._RootZone();
C.DeclarationKind_0 = new A.DeclarationKind(0);
C.DeclarationKind_1 = new A.DeclarationKind(1);
C.DeclarationKind_2 = new A.DeclarationKind(2);
C.Symbol_typedefsChanged = new H.Symbol("typedefsChanged");
C.Type_EjN = H.createRuntimeType('Function');
Isolate.makeConstantList = function(list) {
  list.immutable$list = init;
  list.fixed$length = init;
  return list;
};
C.List_empty = Isolate.makeConstantList([]);
C.Declaration_0 = new A.Declaration(C.Symbol_typedefsChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_lineHeight = new H.Symbol("lineHeight");
C.Type_Ejg = H.createRuntimeType('String');
C.C_Reflectable = new K.Reflectable();
C.C_ObservableProperty = new K.ObservableProperty();
C.List_Reflectable_ObservableProperty = Isolate.makeConstantList([C.C_Reflectable, C.C_ObservableProperty]);
C.Declaration_0Sa = new A.Declaration(C.Symbol_lineHeight, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_isHome = new H.Symbol("isHome");
C.Type_EsU0 = H.createRuntimeType('bool');
C.Declaration_1R3 = new A.Declaration(C.Symbol_isHome, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_itemsChanged = new H.Symbol("itemsChanged");
C.Declaration_23h = new A.Declaration(C.Symbol_itemsChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_name = new H.Symbol("name");
C.Declaration_2T1 = new A.Declaration(C.Symbol_name, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_breadcrumbs = new H.Symbol("breadcrumbs");
C.Type_UWS = H.createRuntimeType('List');
C.Declaration_2p9 = new A.Declaration(C.Symbol_breadcrumbs, C.DeclarationKind_1, false, C.Type_UWS, false, C.List_Reflectable_ObservableProperty);
C.Symbol_isNotConstructor = new H.Symbol("isNotConstructor");
C.Declaration_36D = new A.Declaration(C.Symbol_isNotConstructor, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_parameters = new H.Symbol("parameters");
C.C_PublishedProperty = new A.PublishedProperty();
C.List_Reflectable_PublishedProperty = Isolate.makeConstantList([C.C_Reflectable, C.C_PublishedProperty]);
C.Declaration_43h = new A.Declaration(C.Symbol_parameters, C.DeclarationKind_1, false, C.Type_UWS, false, C.List_Reflectable_PublishedProperty);
C.Symbol_descriptiveName = new H.Symbol("descriptiveName");
C.Declaration_4GC = new A.Declaration(C.Symbol_descriptiveName, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_camelCaseName = new H.Symbol("camelCaseName");
C.Declaration_4wd = new A.Declaration(C.Symbol_camelCaseName, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_item = new H.Symbol("item");
C.Type_e5Z = H.createRuntimeType('dynamic');
C.List_PublishedProperty = Isolate.makeConstantList([C.C_PublishedProperty]);
C.Declaration_5l6 = new A.Declaration(C.Symbol_item, C.DeclarationKind_1, false, C.Type_e5Z, false, C.List_PublishedProperty);
C.Symbol_showOrHideLibraries = new H.Symbol("showOrHideLibraries");
C.Declaration_6L0 = new A.Declaration(C.Symbol_showOrHideLibraries, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_showOrHideObjectMembers = new H.Symbol("showOrHideObjectMembers");
C.Declaration_6Vn = new A.Declaration(C.Symbol_showOrHideObjectMembers, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_annotations = new H.Symbol("annotations");
C.Type_Del = H.createRuntimeType('AnnotationGroup');
C.Declaration_96m = new A.Declaration(C.Symbol_annotations, C.DeclarationKind_1, false, C.Type_Del, false, C.List_Reflectable_ObservableProperty);
C.Symbol_variablesChanged = new H.Symbol("variablesChanged");
C.Declaration_AHJ = new A.Declaration(C.Symbol_variablesChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_typeChanged = new H.Symbol("typeChanged");
C.Declaration_BeS = new A.Declaration(C.Symbol_typeChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_accordionStyle = new H.Symbol("accordionStyle");
C.Declaration_CTk = new A.Declaration(C.Symbol_accordionStyle, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_methodsChanged = new H.Symbol("methodsChanged");
C.Declaration_Chj = new A.Declaration(C.Symbol_methodsChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_descriptiveType = new H.Symbol("descriptiveType");
C.Declaration_DCQ = new A.Declaration(C.Symbol_descriptiveType, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_idName = new H.Symbol("idName");
C.Declaration_DZ5 = new A.Declaration(C.Symbol_idName, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Type_2jk = H.createRuntimeType('Item');
C.Declaration_EOZ = new A.Declaration(C.Symbol_item, C.DeclarationKind_1, false, C.Type_2jk, false, C.List_Reflectable_PublishedProperty);
C.Symbol_type = new H.Symbol("type");
C.Type_iQW = H.createRuntimeType('LinkableType');
C.Declaration_ESz = new A.Declaration(C.Symbol_type, C.DeclarationKind_1, false, C.Type_iQW, false, C.List_Reflectable_PublishedProperty);
C.Symbol_outerLibrary = new H.Symbol("outerLibrary");
C.Declaration_ESz0 = new A.Declaration(C.Symbol_outerLibrary, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_closure = new H.Symbol("closure");
C.Type_SlN = H.createRuntimeType('Closure');
C.Declaration_Ecu = new A.Declaration(C.Symbol_closure, C.DeclarationKind_1, false, C.Type_SlN, false, C.List_Reflectable_ObservableProperty);
C.Symbol_title = new H.Symbol("title");
C.Declaration_GNx = new A.Declaration(C.Symbol_title, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_itemsToShow = new H.Symbol("itemsToShow");
C.Type_pe4 = H.createRuntimeType('ObservableList');
C.Declaration_Gds = new A.Declaration(C.Symbol_itemsToShow, C.DeclarationKind_1, false, C.Type_pe4, false, C.List_Reflectable_ObservableProperty);
C.Symbol_shouldShowLibraryMinimap = new H.Symbol("shouldShowLibraryMinimap");
C.Declaration_IfQ = new A.Declaration(C.Symbol_shouldShowLibraryMinimap, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_homePage = new H.Symbol("homePage");
C.List_ObservableProperty = Isolate.makeConstantList([C.C_ObservableProperty]);
C.Declaration_Kvr = new A.Declaration(C.Symbol_homePage, C.DeclarationKind_0, true, C.Type_e5Z, false, C.List_ObservableProperty);
C.Type_sAl = H.createRuntimeType('NestedType');
C.Declaration_MSN = new A.Declaration(C.Symbol_type, C.DeclarationKind_1, false, C.Type_sAl, false, C.List_Reflectable_PublishedProperty);
C.Symbol_categoryChanged = new H.Symbol("categoryChanged");
C.Declaration_MYA = new A.Declaration(C.Symbol_categoryChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_shouldShowCommentFrom = new H.Symbol("shouldShowCommentFrom");
C.Declaration_NYu = new A.Declaration(C.Symbol_shouldShowCommentFrom, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_shouldShowClassMinimap = new H.Symbol("shouldShowClassMinimap");
C.Declaration_OWn = new A.Declaration(C.Symbol_shouldShowClassMinimap, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_typedefs = new H.Symbol("typedefs");
C.Declaration_PqF = new A.Declaration(C.Symbol_typedefs, C.DeclarationKind_1, false, C.Type_pe4, false, C.List_Reflectable_PublishedProperty);
C.Symbol_isTypedef = new H.Symbol("isTypedef");
C.Declaration_QGk = new A.Declaration(C.Symbol_isTypedef, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_shouldShowComment = new H.Symbol("shouldShowComment");
C.Declaration_QHx = new A.Declaration(C.Symbol_shouldShowComment, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_closureChanged = new H.Symbol("closureChanged");
C.Declaration_RWS = new A.Declaration(C.Symbol_closureChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Type_EK0 = H.createRuntimeType('Container');
C.Declaration_S49 = new A.Declaration(C.Symbol_item, C.DeclarationKind_1, false, C.Type_EK0, false, C.List_Reflectable_PublishedProperty);
C.Symbol_categoryLink = new H.Symbol("categoryLink");
C.Declaration_VWS = new A.Declaration(C.Symbol_categoryLink, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_pageContentClass = new H.Symbol("pageContentClass");
C.Declaration_VyH = new A.Declaration(C.Symbol_pageContentClass, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_previewChanged = new H.Symbol("previewChanged");
C.Declaration_XR8 = new A.Declaration(C.Symbol_previewChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_showOrHidePackages = new H.Symbol("showOrHidePackages");
C.Declaration_YYR = new A.Declaration(C.Symbol_showOrHidePackages, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_variables = new H.Symbol("variables");
C.Declaration_YyH = new A.Declaration(C.Symbol_variables, C.DeclarationKind_1, false, C.Type_pe4, false, C.List_Reflectable_PublishedProperty);
C.Symbol_constantModifier = new H.Symbol("constantModifier");
C.Declaration_aZ8 = new A.Declaration(C.Symbol_constantModifier, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_isClass = new H.Symbol("isClass");
C.Declaration_aZM = new A.Declaration(C.Symbol_isClass, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_staticModifier = new H.Symbol("staticModifier");
C.Declaration_aoF = new A.Declaration(C.Symbol_staticModifier, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_dropdownOpen = new H.Symbol("dropdownOpen");
C.Declaration_cUs = new A.Declaration(C.Symbol_dropdownOpen, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_getter = new H.Symbol("getter");
C.Declaration_cw1 = new A.Declaration(C.Symbol_getter, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_searchQueryChanged = new H.Symbol("searchQueryChanged");
C.Declaration_ewF = new A.Declaration(C.Symbol_searchQueryChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_isLibrary = new H.Symbol("isLibrary");
C.Declaration_ffs = new A.Declaration(C.Symbol_isLibrary, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_sdkVersionString = new H.Symbol("sdkVersionString");
C.Declaration_gOk = new A.Declaration(C.Symbol_sdkVersionString, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_results = new H.Symbol("results");
C.Declaration_ggw = new A.Declaration(C.Symbol_results, C.DeclarationKind_1, false, C.Type_pe4, false, C.List_Reflectable_ObservableProperty);
C.Symbol_showOrHideInherited = new H.Symbol("showOrHideInherited");
C.Declaration_hvg = new A.Declaration(C.Symbol_showOrHideInherited, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_parametersChanged = new H.Symbol("parametersChanged");
C.Declaration_iGr = new A.Declaration(C.Symbol_parametersChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_commentFrom = new H.Symbol("commentFrom");
C.Declaration_iL9 = new A.Declaration(C.Symbol_commentFrom, C.DeclarationKind_1, false, C.Type_iQW, false, C.List_Reflectable_ObservableProperty);
C.Symbol_category = new H.Symbol("category");
C.Type_2WX = H.createRuntimeType('Category');
C.Declaration_if1 = new A.Declaration(C.Symbol_category, C.DeclarationKind_1, false, C.Type_2WX, false, C.List_Reflectable_PublishedProperty);
C.Symbol_hasItems = new H.Symbol("hasItems");
C.Declaration_ilW = new A.Declaration(C.Symbol_hasItems, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_methods = new H.Symbol("methods");
C.Declaration_kyU = new A.Declaration(C.Symbol_methods, C.DeclarationKind_1, false, C.Type_pe4, false, C.List_Reflectable_PublishedProperty);
C.Symbol_preview = new H.Symbol("preview");
C.Declaration_lYV = new A.Declaration(C.Symbol_preview, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_PublishedProperty);
C.Symbol_annotationsChanged = new H.Symbol("annotationsChanged");
C.Declaration_m3R = new A.Declaration(C.Symbol_annotationsChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_shouldShowLibraryPanel = new H.Symbol("shouldShowLibraryPanel");
C.Declaration_mJb = new A.Declaration(C.Symbol_shouldShowLibraryPanel, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_isFocused = new H.Symbol("isFocused");
C.Declaration_mlf = new A.Declaration(C.Symbol_isFocused, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_showOrHideMinimap = new H.Symbol("showOrHideMinimap");
C.Declaration_mou = new A.Declaration(C.Symbol_showOrHideMinimap, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Type_cs0 = H.createRuntimeType('SearchResult');
C.Declaration_oQz = new A.Declaration(C.Symbol_item, C.DeclarationKind_1, false, C.Type_cs0, false, C.List_Reflectable_PublishedProperty);
C.Symbol_itemChanged = new H.Symbol("itemChanged");
C.Declaration_oRu = new A.Declaration(C.Symbol_itemChanged, C.DeclarationKind_2, false, C.Type_EjN, false, C.List_empty);
C.Symbol_stylizedName = new H.Symbol("stylizedName");
C.Declaration_oc4 = new A.Declaration(C.Symbol_stylizedName, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_lastCrumb = new H.Symbol("lastCrumb");
C.Declaration_oqK = new A.Declaration(C.Symbol_lastCrumb, C.DeclarationKind_1, false, C.Type_2jk, false, C.List_Reflectable_ObservableProperty);
C.Symbol_isInherited = new H.Symbol("isInherited");
C.Declaration_qBr = new A.Declaration(C.Symbol_isInherited, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_isMethod = new H.Symbol("isMethod");
C.Declaration_qtW = new A.Declaration(C.Symbol_isMethod, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Symbol_searchQuery = new H.Symbol("searchQuery");
C.Declaration_rPg = new A.Declaration(C.Symbol_searchQuery, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_PublishedProperty);
C.Symbol_inheritedFrom = new H.Symbol("inheritedFrom");
C.Declaration_s6Q = new A.Declaration(C.Symbol_inheritedFrom, C.DeclarationKind_1, false, C.Type_iQW, false, C.List_Reflectable_ObservableProperty);
C.Symbol_items = new H.Symbol("items");
C.Declaration_sYh = new A.Declaration(C.Symbol_items, C.DeclarationKind_1, false, C.Type_pe4, false, C.List_Reflectable_PublishedProperty);
C.Symbol_modifiers = new H.Symbol("modifiers");
C.Declaration_tsz = new A.Declaration(C.Symbol_modifiers, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_divClass = new H.Symbol("divClass");
C.Declaration_vEP = new A.Declaration(C.Symbol_divClass, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_isNotSetter = new H.Symbol("isNotSetter");
C.Declaration_wEo = new A.Declaration(C.Symbol_isNotSetter, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Declaration_wsa = new A.Declaration(C.Symbol_annotations, C.DeclarationKind_1, false, C.Type_Del, false, C.List_Reflectable_PublishedProperty);
C.Symbol_caretStyle = new H.Symbol("caretStyle");
C.Declaration_wsa0 = new A.Declaration(C.Symbol_caretStyle, C.DeclarationKind_1, false, C.Type_Ejg, false, C.List_Reflectable_ObservableProperty);
C.Symbol_hasInheritedComment = new H.Symbol("hasInheritedComment");
C.Declaration_yHT = new A.Declaration(C.Symbol_hasInheritedComment, C.DeclarationKind_1, false, C.Type_EsU0, false, C.List_Reflectable_ObservableProperty);
C.Duration_0 = new P.Duration(0);
C.EventStreamProvider_blur = H.setRuntimeTypeInfo(new W.EventStreamProvider("blur"), [W.Event]);
C.EventStreamProvider_change = H.setRuntimeTypeInfo(new W.EventStreamProvider("change"), [W.Event]);
C.EventStreamProvider_click = H.setRuntimeTypeInfo(new W.EventStreamProvider("click"), [W.MouseEvent]);
C.EventStreamProvider_error = H.setRuntimeTypeInfo(new W.EventStreamProvider("error"), [W.ProgressEvent]);
C.EventStreamProvider_focus = H.setRuntimeTypeInfo(new W.EventStreamProvider("focus"), [W.Event]);
C.EventStreamProvider_input = H.setRuntimeTypeInfo(new W.EventStreamProvider("input"), [W.Event]);
C.EventStreamProvider_keydown = H.setRuntimeTypeInfo(new W.EventStreamProvider("keydown"), [W.KeyboardEvent]);
C.EventStreamProvider_load = H.setRuntimeTypeInfo(new W.EventStreamProvider("load"), [W.ProgressEvent]);
C.EventStreamProvider_popstate = H.setRuntimeTypeInfo(new W.EventStreamProvider("popstate"), [W.PopStateEvent]);
C.EventStreamProvider_resize = H.setRuntimeTypeInfo(new W.EventStreamProvider("resize"), [W.Event]);
C.JS_CONST_0 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
C.JS_CONST_4hp = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
C.JS_CONST_8ZY = function getTagFallback(o) {
  var constructor = o.constructor;
  if (typeof constructor == "function") {
    var name = constructor.name;
    if (typeof name == "string" &&
        name.length > 2 &&
        name !== "Object" &&
        name !== "Function.prototype") {
      return name;
    }
  }
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
C.JS_CONST_Fs4 = function(hooks) { return hooks; }
;
C.JS_CONST_QJm = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
C.JS_CONST_aQP = function() {
  function typeNameInChrome(o) {
    var name = o.constructor.name;
    if (name) return name;
    var s = Object.prototype.toString.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = Object.prototype.toString.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: typeNameInChrome,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
C.JS_CONST_gkc = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
C.JS_CONST_rr7 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
C.JsonCodec_null_null = new P.JsonCodec(null, null);
C.JsonDecoder_null = new P.JsonDecoder(null);
C.Level_FINER_400 = new N.Level("FINER", 400);
C.Level_FINE_500 = new N.Level("FINE", 500);
C.Level_INFO_800 = new N.Level("INFO", 800);
C.Level_WARNING_900 = new N.Level("WARNING", 900);
C.C_DefaultEquality = new Z.DefaultEquality();
C.ListEquality_DefaultEquality = new Z.ListEquality(C.C_DefaultEquality);
C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(Isolate.makeConstantList([127, 2047, 65535, 1114111]), [P.$int]);
C.List_1GN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
C.List_6Pr = Isolate.makeConstantList([0, 0, 26624, 1023, 0, 0, 65534, 2047]);
C.Symbol_keys = new H.Symbol("keys");
C.Symbol_values = new H.Symbol("values");
C.Symbol_length = new H.Symbol("length");
C.Symbol_isEmpty = new H.Symbol("isEmpty");
C.Symbol_isNotEmpty = new H.Symbol("isNotEmpty");
C.List_8QI = Isolate.makeConstantList([C.Symbol_keys, C.Symbol_values, C.Symbol_length, C.Symbol_isEmpty, C.Symbol_isNotEmpty]);
C.List_CVk = Isolate.makeConstantList([0, 0, 63450, 45055, 65535, 34815, 65534, 18431]);
C.List_JYB = Isolate.makeConstantList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]);
C.List_Ss1 = Isolate.makeConstantList(["method", "operator", "getter", "setter", "variable", "constructor", "property"]);
C.List_Ynd = Isolate.makeConstantList(["==", "!=", "<=", ">=", "||", "&&"]);
C.List_in_this = Isolate.makeConstantList(["in", "this"]);
C.List_mC8 = Isolate.makeConstantList([43, 45, 42, 47, 33, 38, 37, 60, 61, 62, 63, 94, 124]);
C.List_nxB = Isolate.makeConstantList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]);
C.List_qNA = Isolate.makeConstantList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]);
C.List_qg4 = Isolate.makeConstantList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]);
C.List_wSV = H.setRuntimeTypeInfo(Isolate.makeConstantList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
C.List_ww8 = Isolate.makeConstantList([40, 41, 91, 93, 123, 125]);
C.List_yrN = H.setRuntimeTypeInfo(Isolate.makeConstantList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
C.List_05B = Isolate.makeConstantList(["caption", "col", "colgroup", "option", "optgroup", "tbody", "td", "tfoot", "th", "thead", "tr"]);
C.Map_05eTF = new H.ConstantStringMap(11, {caption: null, col: null, colgroup: null, option: null, optgroup: null, tbody: null, td: null, tfoot: null, th: null, thead: null, tr: null}, C.List_05B);
C.List_FKi = Isolate.makeConstantList(["!", ":", ",", ")", "]", "}", "?", "||", "&&", "|", "^", "&", "!=", "==", ">=", ">", "<=", "<", "+", "-", "%", "/", "*", "(", "[", ".", "{"]);
C.Map_FKtZ4 = new H.ConstantStringMap(27, {"!": 0, ":": 0, ",": 0, ")": 0, "]": 0, "}": 0, "?": 1, "||": 2, "&&": 3, "|": 4, "^": 5, "&": 6, "!=": 7, "==": 7, ">=": 8, ">": 8, "<=": 8, "<": 8, "+": 9, "-": 9, "%": 10, "/": 10, "*": 10, "(": 11, "[": 11, ".": 11, "{": 11}, C.List_FKi);
C.List_c9P = Isolate.makeConstantList(["name", "extends", "constructor", "noscript", "attributes"]);
C.Map_c94aj = new H.ConstantStringMap(5, {name: 1, extends: 1, constructor: 1, noscript: 1, attributes: 1}, C.List_c9P);
C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty);
C.List_gg9 = Isolate.makeConstantList(["library", "class", "typedef", "method", "getter", "setter", "operator", "property", "constructor"]);
C.Map_ggES6 = new H.ConstantStringMap(9, {library: 2, class: 2, typedef: 3, method: 4, getter: 4, setter: 4, operator: 4, property: 4, constructor: 4}, C.List_gg9);
C.List_qvT = Isolate.makeConstantList(["webkitanimationstart", "webkitanimationend", "webkittransitionend", "domfocusout", "domfocusin", "dommousescroll", "animationend", "animationiteration", "animationstart", "doubleclick", "fullscreenchange", "fullscreenerror", "keyadded", "keyerror", "keymessage", "needkey", "speechchange"]);
C.Map_qvMQu = new H.ConstantStringMap(17, {webkitanimationstart: "webkitAnimationStart", webkitanimationend: "webkitAnimationEnd", webkittransitionend: "webkitTransitionEnd", domfocusout: "DOMFocusOut", domfocusin: "DOMFocusIn", dommousescroll: "DOMMouseScroll", animationend: "webkitAnimationEnd", animationiteration: "webkitAnimationIteration", animationstart: "webkitAnimationStart", doubleclick: "dblclick", fullscreenchange: "webkitfullscreenchange", fullscreenerror: "webkitfullscreenerror", keyadded: "webkitkeyadded", keyerror: "webkitkeyerror", keymessage: "webkitkeymessage", needkey: "webkitneedkey", speechchange: "webkitSpeechChange"}, C.List_qvT);
C.List_enumerate = Isolate.makeConstantList(["enumerate"]);
C.Map_wgEsG = new H.ConstantStringMap(1, {enumerate: K.enumerate$closure()}, C.List_enumerate);
C.Type_fPs = H.createRuntimeType('HtmlElement');
C.Type_oGx = H.createRuntimeType('PublishedProperty');
C.List_JQl = Isolate.makeConstantList([C.Type_oGx]);
C.QueryOptions_sAl = new A.QueryOptions(true, true, true, C.Type_fPs, false, false, C.List_JQl, null);
C.Type_oqK = H.createRuntimeType('ObserveProperty');
C.List_M2f = Isolate.makeConstantList([C.Type_oqK]);
C.QueryOptions_xw8 = new A.QueryOptions(false, false, true, C.Type_fPs, false, true, C.List_M2f, null);
C.Symbol_anchorHref = new H.Symbol("anchorHref");
C.Symbol_breadcrumbName = new H.Symbol("breadcrumbName");
C.Symbol_call = new H.Symbol("call");
C.Symbol_classes = new H.Symbol("classes");
C.Symbol_comment = new H.Symbol("comment");
C.Symbol_constructors = new H.Symbol("constructors");
C.Symbol_currentPage = new H.Symbol("currentPage");
C.Symbol_decoratedName = new H.Symbol("decoratedName");
C.Symbol_errors = new H.Symbol("errors");
C.Symbol_functions = new H.Symbol("functions");
C.Symbol_hideShow = new H.Symbol("hideShow");
C.Symbol_highLevelSdkVersion = new H.Symbol("highLevelSdkVersion");
C.Symbol_instanceFunctions = new H.Symbol("instanceFunctions");
C.Symbol_instanceVariables = new H.Symbol("instanceVariables");
C.Symbol_isAbstract = new H.Symbol("isAbstract");
C.Symbol_isConstant = new H.Symbol("isConstant");
C.Symbol_isDesktop = new H.Symbol("isDesktop");
C.Symbol_isFinal = new H.Symbol("isFinal");
C.Symbol_isMinimap = new H.Symbol("isMinimap");
C.Symbol_isOperator = new H.Symbol("isOperator");
C.Symbol_isPanel = new H.Symbol("isPanel");
C.Symbol_isSetter = new H.Symbol("isSetter");
C.Symbol_isStatic = new H.Symbol("isStatic");
C.Symbol_kCz = new H.Symbol("collapseSearchAndOptionsIfNeeded");
C.Symbol_lazyClasses = new H.Symbol("lazyClasses");
C.Symbol_lazyConstructors = new H.Symbol("lazyConstructors");
C.Symbol_lazyErrors = new H.Symbol("lazyErrors");
C.Symbol_lazyFunctions = new H.Symbol("lazyFunctions");
C.Symbol_lazyInstanceFunctions = new H.Symbol("lazyInstanceFunctions");
C.Symbol_lazyInstanceVariables = new H.Symbol("lazyInstanceVariables");
C.Symbol_lazyOperators = new H.Symbol("lazyOperators");
C.Symbol_lazyStaticFunctions = new H.Symbol("lazyStaticFunctions");
C.Symbol_lazyStaticVariables = new H.Symbol("lazyStaticVariables");
C.Symbol_lazyTypedefs = new H.Symbol("lazyTypedefs");
C.Symbol_lazyVariables = new H.Symbol("lazyVariables");
C.Symbol_libraries = new H.Symbol("libraries");
C.Symbol_location = new H.Symbol("location");
C.Symbol_nameWithGeneric = new H.Symbol("nameWithGeneric");
C.Symbol_navHideShow = new H.Symbol("navHideShow");
C.Symbol_noSuchMethod = new H.Symbol("noSuchMethod");
C.Symbol_operators = new H.Symbol("operators");
C.Symbol_position = new H.Symbol("position");
C.Symbol_prefixedAnchorHref = new H.Symbol("prefixedAnchorHref");
C.Symbol_prefixedLinkHref = new H.Symbol("prefixedLinkHref");
C.Symbol_prefixedLocationWhenPossible = new H.Symbol("prefixedLocationWhenPossible");
C.Symbol_previewComment = new H.Symbol("previewComment");
C.Symbol_registerCallback = new H.Symbol("registerCallback");
C.Symbol_rerouteLink = new H.Symbol("rerouteLink");
C.Symbol_selectDropDownItem = new H.Symbol("selectDropDownItem");
C.Symbol_showObjectMembers = new H.Symbol("showObjectMembers");
C.Symbol_showPkgLibraries = new H.Symbol("showPkgLibraries");
C.Symbol_simpleType = new H.Symbol("simpleType");
C.Symbol_startPage = new H.Symbol("startPage");
C.Symbol_staticFunctions = new H.Symbol("staticFunctions");
C.Symbol_staticVariables = new H.Symbol("staticVariables");
C.Symbol_toggleInherited = new H.Symbol("toggleInherited");
C.Symbol_toggleMinimap = new H.Symbol("toggleMinimap");
C.Symbol_toggleObjectMembers = new H.Symbol("toggleObjectMembers");
C.Symbol_toggleOptionsMenu = new H.Symbol("toggleOptionsMenu");
C.Symbol_togglePanel = new H.Symbol("togglePanel");
C.Symbol_togglePkg = new H.Symbol("togglePkg");
C.Symbol_url = new H.Symbol("url");
C.Symbol_value = new H.Symbol("value");
C.Symbol_version = new H.Symbol("version");
C.Symbol_viewer = new H.Symbol("viewer");
C.Type_0uu = H.createRuntimeType('MemberElement');
C.Type_2pn = H.createRuntimeType('LinkElement');
C.Type_6L0 = H.createRuntimeType('Uint8List');
C.Type_6dg = H.createRuntimeType('DivElement');
C.Type_81T = H.createRuntimeType('MinimapElement');
C.Type_8TW = H.createRuntimeType('CategoryElement');
C.Type_8Wd = H.createRuntimeType('Search');
C.Type_AHF = H.createRuntimeType('VariableElement');
C.Type_AHF0 = H.createRuntimeType('NativeTypedArray');
C.Type_ASc = H.createRuntimeType('MethodElement');
C.Type_Art = H.createRuntimeType('Float32List');
C.Type_CAk = H.createRuntimeType('Uint16List');
C.Type_CxZ = H.createRuntimeType('_M6');
C.Type_ECG = H.createRuntimeType('ParameterElement');
C.Type_EOZ = H.createRuntimeType('_M1');
C.Type_EOZ0 = H.createRuntimeType('TypedefElement');
C.Type_EQs = H.createRuntimeType('GlobalEventHandlers');
C.Type_EkK = H.createRuntimeType('AnnotationElement');
C.Type_EsU = H.createRuntimeType('HomeElement');
C.Type_GNh = H.createRuntimeType('_M0');
C.Type_HVx = H.createRuntimeType('_M7');
C.Type_HqF = H.createRuntimeType('Object');
C.Type_I2I = H.createRuntimeType('PolymerElement');
C.Type_IFE = H.createRuntimeType('PageElement');
C.Type_IRg = H.createRuntimeType('MinimapElementLibrary');
C.Type_MhD = H.createRuntimeType('TypeElement');
C.Type_NQk = H.createRuntimeType('AnchorElement');
C.Type_NlB = H.createRuntimeType('NativeTypedArrayOfDouble');
C.Type_Opy = H.createRuntimeType('_M4');
C.Type_QGy = H.createRuntimeType('_M5');
C.Type_QXN = H.createRuntimeType('LibraryPanel');
C.Type_QuW = H.createRuntimeType('Uint8ClampedList');
C.Type_QyU = H.createRuntimeType('WindowEventHandlers');
C.Type_SnA = H.createRuntimeType('$int');
C.Type_TBz = H.createRuntimeType('ClosureElement');
C.Type_UoK = H.createRuntimeType('Int16List');
C.Type_VEs = H.createRuntimeType('MinimapElementClass');
C.Type_XXD = H.createRuntimeType('JSObject');
C.Type_Y5Q = H.createRuntimeType('MainElement');
C.Type_Ybt = H.createRuntimeType('ClassElement');
C.Type_ZMt = H.createRuntimeType('VariableHeading');
C.Type_ckn = H.createRuntimeType('Float64List');
C.Type_dTZ = H.createRuntimeType('Int32List');
C.Type_dVs = H.createRuntimeType('DateTime');
C.Type_eZO = H.createRuntimeType('Null');
C.Type_fzi = H.createRuntimeType('CommentElement');
C.Type_irB = H.createRuntimeType('Uint32List');
C.Type_j7u = H.createRuntimeType('Result');
C.Type_mp3 = H.createRuntimeType('Int8List');
C.Type_nVD = H.createRuntimeType('DartdocElement');
C.Type_oGP = H.createRuntimeType('ByteData');
C.Type_oyU = H.createRuntimeType('_M2');
C.Type_q6V = H.createRuntimeType('Breadcrumbs');
C.Type_qq1 = H.createRuntimeType('$double');
C.Type_rt6 = H.createRuntimeType('ItemElement');
C.Type_rxe = H.createRuntimeType('_M3');
C.Type_sBE = H.createRuntimeType('LibraryElement');
C.Type_wAg = H.createRuntimeType('ByteBuffer');
C.Type_wOW = H.createRuntimeType('NativeTypedArrayOfInt');
C.Type_wtN = H.createRuntimeType('InheritedElement');
C.Type_xM7 = H.createRuntimeType('num');
C.Utf8Codec_false = new P.Utf8Codec(false);
$.libraries_to_load = {};
$.Primitives_mirrorFunctionCacheName = "$cachedFunction";
$.Primitives_mirrorInvokeCacheName = "$cachedInvocation";
$.Closure_functionCounter = 0;
$.BoundClosure_selfFieldNameCache = null;
$.BoundClosure_receiverFieldNameCache = null;
$.RuntimeFunctionType_inAssert = false;
$.getTagFunction = null;
$.alternateTagFunction = null;
$.prototypeForTagFunction = null;
$.dispatchRecordsForInstanceTags = null;
$.interceptorsForUncacheableTags = null;
$.initNativeDispatchFlag = null;
$.printToZone = null;
$._nextCallback = null;
$._lastCallback = null;
$.Zone__current = C.C__RootZone;
$.Expando__keyCount = 0;
$.Element__parseDocument = null;
$.Element__parseRange = null;
$.Element__defaultValidator = null;
$.Element__defaultSanitizer = null;
$.Device__isOpera = null;
$.Device__isIE = null;
$.Device__isFirefox = null;
$.Device__isWebKit = null;
$.Device__cachedCssPrefix = null;
$.hierarchicalLoggingEnabled = false;
$._rootLevel = C.Level_INFO_800;
$.LogRecord__nextNumber = 0;
$._allObservablesCount = 0;
$._allObservables = null;
$._delivering = false;
$._Observer__nextBirthId = 0;
$._ObservedSet__lastSet = null;
$.Polymer__preparingElements = 0;
$._deployMode = false;
$._dartdocMain = null;
$.useHistory = true;
$.TemplateBindExtension__initStyles = null;
$.location = null;
$.mapTypeToInterceptor = [C.Type_fPs, W.HtmlElement, {}, C.Type_0uu, U.MemberElement, {created: U.MemberElement$created}, C.Type_2pn, Q.LinkElement, {created: Q.LinkElement$created}, C.Type_6dg, W.DivElement, {}, C.Type_81T, Z.MinimapElement, {created: Z.MinimapElement$created}, C.Type_8TW, O.CategoryElement, {created: O.CategoryElement$created}, C.Type_8Wd, M.Search, {created: M.Search$created}, C.Type_AHF, F.VariableElement, {created: F.VariableElement$created}, C.Type_AHF0, H.NativeTypedArray, {"": H.NativeTypedArray$}, C.Type_ASc, X.MethodElement, {created: X.MethodElement$created}, C.Type_ECG, X.ParameterElement, {created: X.ParameterElement$created}, C.Type_EOZ0, E.TypedefElement, {created: E.TypedefElement$created}, C.Type_EQs, W.GlobalEventHandlers, {}, C.Type_EkK, Y.AnnotationElement, {created: Y.AnnotationElement$created}, C.Type_EsU, Z.HomeElement, {created: Z.HomeElement$created}, C.Type_I2I, A.PolymerElement, {created: A.PolymerElement$created}, C.Type_IFE, O.PageElement, {created: O.PageElement$created}, C.Type_IRg, N.MinimapElementLibrary, {created: N.MinimapElementLibrary$created}, C.Type_MhD, N.TypeElement, {created: N.TypeElement$created}, C.Type_NQk, W.AnchorElement, {}, C.Type_NlB, H.NativeTypedArrayOfDouble, {"": H.NativeTypedArrayOfDouble$}, C.Type_QXN, E.LibraryPanel, {created: E.LibraryPanel$created}, C.Type_QyU, W.WindowEventHandlers, {}, C.Type_TBz, Z.ClosureElement, {created: Z.ClosureElement$created}, C.Type_VEs, Q.MinimapElementClass, {created: Q.MinimapElementClass$created}, C.Type_Y5Q, A.MainElement, {created: A.MainElement$created}, C.Type_Ybt, T.ClassElement, {created: T.ClassElement$created}, C.Type_ZMt, E.VariableHeading, {created: E.VariableHeading$created}, C.Type_fzi, S.CommentElement, {created: S.CommentElement$created}, C.Type_j7u, G.Result, {created: G.Result$created}, C.Type_nVD, U.DartdocElement, {created: U.DartdocElement$created}, C.Type_q6V, U.Breadcrumbs, {created: U.Breadcrumbs$created}, C.Type_rt6, M.ItemElement, {created: M.ItemElement$created}, C.Type_sBE, G.LibraryElement, {created: G.LibraryElement$created}, C.Type_wOW, H.NativeTypedArrayOfInt, {"": H.NativeTypedArrayOfInt$}, C.Type_wtN, U.InheritedElement, {created: U.InheritedElement$created}];
Isolate.$lazy($, "globalThis", "globalThis", "get$globalThis", function() {
  return function() {
    return this;
  }();
});
Isolate.$lazy($, "globalWindow", "globalWindow", "get$globalWindow", function() {
  return $.get$globalThis().window;
});
Isolate.$lazy($, "globalWorker", "globalWorker", "get$globalWorker", function() {
  return $.get$globalThis().Worker;
});
Isolate.$lazy($, "globalPostMessageDefined", "globalPostMessageDefined", "get$globalPostMessageDefined", function() {
  return $.get$globalThis().postMessage !== void 0;
});
Isolate.$lazy($, "thisScript", "IsolateNatives_thisScript", "get$IsolateNatives_thisScript", function() {
  return H.IsolateNatives_computeThisScript();
});
Isolate.$lazy($, "workerIds", "IsolateNatives_workerIds", "get$IsolateNatives_workerIds", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [P.$int]);
});
Isolate.$lazy($, "noSuchMethodPattern", "TypeErrorDecoder_noSuchMethodPattern", "get$TypeErrorDecoder_noSuchMethodPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "notClosurePattern", "TypeErrorDecoder_notClosurePattern", "get$TypeErrorDecoder_notClosurePattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null, toString: function() {
      return "$receiver$";
    }}));
});
Isolate.$lazy($, "nullCallPattern", "TypeErrorDecoder_nullCallPattern", "get$TypeErrorDecoder_nullCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
});
Isolate.$lazy($, "nullLiteralCallPattern", "TypeErrorDecoder_nullLiteralCallPattern", "get$TypeErrorDecoder_nullLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      null.$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedCallPattern", "TypeErrorDecoder_undefinedCallPattern", "get$TypeErrorDecoder_undefinedCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralCallPattern", "TypeErrorDecoder_undefinedLiteralCallPattern", "get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    var $argumentsExpr$ = '$arguments$';
    try {
      (void 0).$method$($argumentsExpr$);
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "nullPropertyPattern", "TypeErrorDecoder_nullPropertyPattern", "get$TypeErrorDecoder_nullPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
});
Isolate.$lazy($, "nullLiteralPropertyPattern", "TypeErrorDecoder_nullLiteralPropertyPattern", "get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      null.$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "undefinedPropertyPattern", "TypeErrorDecoder_undefinedPropertyPattern", "get$TypeErrorDecoder_undefinedPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
});
Isolate.$lazy($, "undefinedLiteralPropertyPattern", "TypeErrorDecoder_undefinedLiteralPropertyPattern", "get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
  return H.TypeErrorDecoder_extractPattern(function() {
    try {
      (void 0).$method$;
    } catch (e) {
      return e.message;
    }

  }());
});
Isolate.$lazy($, "sourcePath", "sourcePath", "get$sourcePath", function() {
  return E.docsPath() + "library_list.json";
});
Isolate.$lazy($, "_toStringList", "IterableMixinWorkaround__toStringList", "get$IterableMixinWorkaround__toStringList", function() {
  return [];
});
Isolate.$lazy($, "scheduleImmediateClosure", "_AsyncRun_scheduleImmediateClosure", "get$_AsyncRun_scheduleImmediateClosure", function() {
  return P._AsyncRun__initializeScheduleImmediate();
});
Isolate.$lazy($, "_toStringVisiting", "_toStringVisiting", "get$_toStringVisiting", function() {
  return P.HashSet_HashSet$identity(null);
});
Isolate.$lazy($, "_toStringList", "Maps__toStringList", "get$Maps__toStringList", function() {
  return [];
});
Isolate.$lazy($, "webkitEvents", "ElementEvents_webkitEvents", "get$ElementEvents_webkitEvents", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal(["animationend", "webkitAnimationEnd", "animationiteration", "webkitAnimationIteration", "animationstart", "webkitAnimationStart", "fullscreenchange", "webkitfullscreenchange", "fullscreenerror", "webkitfullscreenerror", "keyadded", "webkitkeyadded", "keyerror", "webkitkeyerror", "keymessage", "webkitkeymessage", "needkey", "webkitneedkey", "pointerlockchange", "webkitpointerlockchange", "pointerlockerror", "webkitpointerlockerror", "resourcetimingbufferfull", "webkitresourcetimingbufferfull", "transitionend", "webkitTransitionEnd", "speechchange", "webkitSpeechChange"], null, null);
});
Isolate.$lazy($, "_HEIGHT", "_HEIGHT", "get$_HEIGHT", function() {
  return ["top", "bottom"];
});
Isolate.$lazy($, "_WIDTH", "_WIDTH", "get$_WIDTH", function() {
  return ["right", "left"];
});
Isolate.$lazy($, "_allowedElements", "_Html5NodeValidator__allowedElements", "get$_Html5NodeValidator__allowedElements", function() {
  var t1 = P.LinkedHashSet_LinkedHashSet(null, null, null, null);
  t1.addAll$1(0, ["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"]);
  return t1;
});
Isolate.$lazy($, "_attributeValidators", "_Html5NodeValidator__attributeValidators", "get$_Html5NodeValidator__attributeValidators", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "context", "context", "get$context", function() {
  return P._wrapToDart(function() {
    return this;
  }());
});
Isolate.$lazy($, "_DART_OBJECT_PROPERTY_NAME", "_DART_OBJECT_PROPERTY_NAME", "get$_DART_OBJECT_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartObject");
});
Isolate.$lazy($, "_DART_CLOSURE_PROPERTY_NAME", "_DART_CLOSURE_PROPERTY_NAME", "get$_DART_CLOSURE_PROPERTY_NAME", function() {
  return init.getIsolateTag("_$dart_dartClosure");
});
Isolate.$lazy($, "_dartProxyCtor", "_dartProxyCtor", "get$_dartProxyCtor", function() {
  return function DartObject(o) {
    this.o = o;
  };
});
Isolate.$lazy($, "pageIndex", "pageIndex", "get$pageIndex", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(null, null);
});
Isolate.$lazy($, "packageMatch", "packageMatch", "get$packageMatch", function() {
  return new H.JSSyntaxRegExp("(\\w+)/", H.JSSyntaxRegExp_makeNative("(\\w+)/", false, true, false), null, null);
});
Isolate.$lazy($, "libraryMatch", "libraryMatch", "get$libraryMatch", function() {
  return new H.JSSyntaxRegExp("([\\w\\-\\:]+)", H.JSSyntaxRegExp_makeNative("([\\w\\-\\:]+)", false, true, false), null, null);
});
Isolate.$lazy($, "memberMatch", "memberMatch", "get$memberMatch", function() {
  return new H.JSSyntaxRegExp("\\.(\\w+)", H.JSSyntaxRegExp_makeNative("\\.(\\w+)", false, true, false), null, null);
});
Isolate.$lazy($, "subMemberMatch", "subMemberMatch", "get$subMemberMatch", function() {
  return new H.JSSyntaxRegExp("\\.([\\w\\<\\+\\|\\[\\]\\>\\/\\^\\=\\&\\*\\-\\%]+)", H.JSSyntaxRegExp_makeNative("\\.([\\w\\<\\+\\|\\[\\]\\>\\/\\^\\=\\&\\*\\-\\%]+)", false, true, false), null, null);
});
Isolate.$lazy($, "anchorMatch", "anchorMatch", "get$anchorMatch", function() {
  return $.useHistory ? new H.JSSyntaxRegExp("\\@([\\w\\<\\+\\|\\[\\]\\>\\/\\^\\=\\&\\*\\-\\%\\.\\,]+)", H.JSSyntaxRegExp_makeNative("\\@([\\w\\<\\+\\|\\[\\]\\>\\/\\^\\=\\&\\*\\-\\%\\.\\,]+)", false, true, false), null, null) : new H.JSSyntaxRegExp("\\#([\\w\\<\\+\\|\\[\\]\\>\\/\\^\\=\\&\\*\\-\\%\\.\\,]+)", H.JSSyntaxRegExp_makeNative("\\#([\\w\\<\\+\\|\\[\\]\\>\\/\\^\\=\\&\\*\\-\\%\\.\\,]+)", false, true, false), null, null);
});
Isolate.$lazy($, "_loggers", "Logger__loggers", "get$Logger__loggers", function() {
  return P.LinkedHashMap_LinkedHashMap$_empty(P.String, N.Logger);
});
Isolate.$lazy($, "_logger", "_logger0", "get$_logger0", function() {
  return N.Logger_Logger("Observable.dirtyCheck");
});
Isolate.$lazy($, "_instance", "_InvalidPropertyPath__instance", "get$_InvalidPropertyPath__instance", function() {
  return new L._InvalidPropertyPath([]);
});
Isolate.$lazy($, "_pathRegExp", "_pathRegExp", "get$_pathRegExp", function() {
  return new L.closure7().call$0();
});
Isolate.$lazy($, "_logger", "_logger", "get$_logger", function() {
  return N.Logger_Logger("observe.PathObserver");
});
Isolate.$lazy($, "_pathCache", "_pathCache", "get$_pathCache", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, L.PropertyPath);
});
Isolate.$lazy($, "_typesByName", "_typesByName", "get$_typesByName", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Type);
});
Isolate.$lazy($, "_declarations", "_declarations", "get$_declarations", function() {
  return P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, A.PolymerDeclaration);
});
Isolate.$lazy($, "_hasShadowDomPolyfill", "_hasShadowDomPolyfill", "get$_hasShadowDomPolyfill", function() {
  return $.get$context().hasProperty$1("ShadowDOMPolyfill");
});
Isolate.$lazy($, "_sheetLog", "_sheetLog", "get$_sheetLog", function() {
  return N.Logger_Logger("polymer.stylesheet");
});
Isolate.$lazy($, "_changedMethodQueryOptions", "_changedMethodQueryOptions", "get$_changedMethodQueryOptions", function() {
  return new A.QueryOptions(false, false, true, C.Type_fPs, false, true, null, A._isObserverMethod$closure());
});
Isolate.$lazy($, "_reverseEventTranslations", "_reverseEventTranslations", "get$_reverseEventTranslations", function() {
  return new A.closure9().call$0();
});
Isolate.$lazy($, "_ATTRIBUTES_REGEX", "_ATTRIBUTES_REGEX", "get$_ATTRIBUTES_REGEX", function() {
  return new H.JSSyntaxRegExp("\\s|,", H.JSSyntaxRegExp_makeNative("\\s|,", false, true, false), null, null);
});
Isolate.$lazy($, "bindPattern", "Polymer_bindPattern", "get$Polymer_bindPattern", function() {
  return new H.JSSyntaxRegExp("\\{\\{([^{}]*)}}", H.JSSyntaxRegExp_makeNative("\\{\\{([^{}]*)}}", false, true, false), null, null);
});
Isolate.$lazy($, "_polymerSyntax", "Polymer__polymerSyntax", "get$Polymer__polymerSyntax", function() {
  var t1 = P.LinkedHashMap_LinkedHashMap(null, null, null, P.String, P.Object);
  t1.addAll$1(0, C.Map_wgEsG);
  return new A.PolymerExpressionsWithEvents(t1);
});
Isolate.$lazy($, "_ready", "Polymer__ready", "get$Polymer__ready", function() {
  return H.setRuntimeTypeInfo(new P._AsyncCompleter(P._Future$(null)), [null]);
});
Isolate.$lazy($, "_observeLog", "_observeLog", "get$_observeLog", function() {
  return N.Logger_Logger("polymer.observe");
});
Isolate.$lazy($, "_eventsLog", "_eventsLog", "get$_eventsLog", function() {
  return N.Logger_Logger("polymer.events");
});
Isolate.$lazy($, "_unbindLog", "_unbindLog", "get$_unbindLog", function() {
  return N.Logger_Logger("polymer.unbind");
});
Isolate.$lazy($, "_bindLog", "_bindLog", "get$_bindLog", function() {
  return N.Logger_Logger("polymer.bind");
});
Isolate.$lazy($, "_shadowHost", "_shadowHost", "get$_shadowHost", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [A.Polymer]);
});
Isolate.$lazy($, "_typeHandlers", "_typeHandlers", "get$_typeHandlers", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal([C.Type_Ejg, new Z.closure0(), C.Type_eZO, new Z.closure1(), C.Type_dVs, new Z.closure2(), C.Type_EsU0, new Z.closure3(), C.Type_SnA, new Z.closure4(), C.Type_qq1, new Z.closure5()], null, null);
});
Isolate.$lazy($, "_BINARY_OPERATORS", "_BINARY_OPERATORS", "get$_BINARY_OPERATORS", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal(["+", new K.closure10(), "-", new K.closure11(), "*", new K.closure12(), "/", new K.closure13(), "==", new K.closure14(), "!=", new K.closure15(), ">", new K.closure16(), ">=", new K.closure17(), "<", new K.closure18(), "<=", new K.closure19(), "||", new K.closure20(), "&&", new K.closure21(), "|", new K.closure22()], null, null);
});
Isolate.$lazy($, "_UNARY_OPERATORS", "_UNARY_OPERATORS", "get$_UNARY_OPERATORS", function() {
  return P.LinkedHashMap_LinkedHashMap$_literal(["+", new K.closure23(), "-", new K.closure24(), "!", new K.closure25()], null, null);
});
Isolate.$lazy($, "searchIndex", "searchIndex", "get$searchIndex", function() {
  return new B.SearchIndex(P.LinkedHashMap_LinkedHashMap$_empty(null, null), []);
});
Isolate.$lazy($, "defaultSyntax", "defaultSyntax", "get$defaultSyntax", function() {
  return new F._DefaultSyntaxWithEvents();
});
Isolate.$lazy($, "objectAccessor", "objectAccessor", "get$objectAccessor", function() {
  return D.throwNotConfiguredError();
});
Isolate.$lazy($, "typeInspector", "typeInspector", "get$typeInspector", function() {
  return D.throwNotConfiguredError();
});
Isolate.$lazy($, "symbolConverter", "symbolConverter", "get$symbolConverter", function() {
  return D.throwNotConfiguredError();
});
Isolate.$lazy($, "_checkboxEventType", "_InputBinding__checkboxEventType", "get$_InputBinding__checkboxEventType", function() {
  return new M.closure8().call$0();
});
Isolate.$lazy($, "_contentsOwner", "TemplateBindExtension__contentsOwner", "get$TemplateBindExtension__contentsOwner", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [null]);
});
Isolate.$lazy($, "_ownerStagingDocument", "TemplateBindExtension__ownerStagingDocument", "get$TemplateBindExtension__ownerStagingDocument", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [null]);
});
Isolate.$lazy($, "_allTemplatesSelectors", "TemplateBindExtension__allTemplatesSelectors", "get$TemplateBindExtension__allTemplatesSelectors", function() {
  return "template, " + J.map$1$ax(C.Map_05eTF.get$keys(), new M.closure6()).join$1(0, ", ");
});
Isolate.$lazy($, "_templateCreator", "_templateCreator", "get$_templateCreator", function() {
  return H.setRuntimeTypeInfo(new P.Expando(null), [null]);
});
Isolate.$lazy($, "_expando", "_expando", "get$_expando", function() {
  return H.setRuntimeTypeInfo(new P.Expando("template_binding"), [null]);
});
Isolate.$lazy($, "viewer", "viewer", "get$viewer", function() {
  return Y.Viewer$(false);
});
Isolate.$lazy($, "_defaultItem", "ClassElement__defaultItem", "get$ClassElement__defaultItem", function() {
  return E.Class$forPlaceholder("loading.loading", "<span>loading</span>");
});
Isolate.$lazy($, "_defaultItem", "ItemElement__defaultItem", "get$ItemElement__defaultItem", function() {
  return E.Class$forPlaceholder("loading.loading", "<span>loading</span>");
});
Isolate.$lazy($, "_defaultItem", "LibraryElement__defaultItem", "get$LibraryElement__defaultItem", function() {
  return E.Library$forPlaceholder(P.LinkedHashMap_LinkedHashMap$_literal(["name", "loading", "preview", "<span>loading</span>"], null, null));
});
Isolate.$lazy($, "nullSanitizer", "nullSanitizer", "get$nullSanitizer", function() {
  return new U.NullTreeSanitizer();
});
Isolate.$lazy($, "_defaultItem", "MethodElement__defaultItem", "get$MethodElement__defaultItem", function() {
  return E.Method$(P.LinkedHashMap_LinkedHashMap$_literal(["name", "Loading", "qualifiedName", "Loading", "comment", "", "parameters", null, "return", [null]], null, null), "", "", "", true, false, null);
});
Isolate.$lazy($, "_defaultItem", "MinimapElementClass__defaultItem", "get$MinimapElementClass__defaultItem", function() {
  return E.Class$forPlaceholder("loading.loading", "<span>loading</span>");
});
Isolate.$lazy($, "_defaultItem", "MinimapElementLibrary__defaultItem", "get$MinimapElementLibrary__defaultItem", function() {
  return E.Library$forPlaceholder(P.LinkedHashMap_LinkedHashMap$_literal(["name", "loading", "qualifiedName", "loading", "preview", "<span>loading</span>"], null, null));
});
Isolate.$lazy($, "_defaultItem", "TypedefElement__defaultItem", "get$TypedefElement__defaultItem", function() {
  return E.Typedef$(P.LinkedHashMap_LinkedHashMap$_literal(["name", "loading", "qualifiedName", "loading"], null, null));
});
Isolate.$lazy($, "_defaultItem", "VariableElement__defaultItem", "get$VariableElement__defaultItem", function() {
  return E.Variable$(P.LinkedHashMap_LinkedHashMap$_literal(["type", [null], "name", "loading"], null, null), "", "", false, false, null);
});
Isolate.$lazy($, "_defaultItem", "VariableHeading__defaultItem", "get$VariableHeading__defaultItem", function() {
  return E.Variable$(P.LinkedHashMap_LinkedHashMap$_literal(["type", [null], "name", "loading"], null, null), "", "", false, false, null);
});
// Native classes

init.functionAliases = {};
;
init.metadata = ["sender",
"e",
{func: "dynamic__String", args: [P.String]},
"closure",
"isolate",
"numberOfArguments",
"arg1",
"arg2",
"arg3",
"arg4",
{func: "void_", void: true},
{func: "args0"},
{func: "void__void_", void: true, args: [{func: "void_", void: true}]},
{func: "void__dynamic", void: true, args: [null]},
"value",
{func: "void__dynamic__StackTrace", void: true, args: [null], opt: [P.StackTrace]},
,
"error",
"stackTrace",
{func: "bool__dynamic_dynamic", ret: P.bool, args: [null, null]},
"a",
"b",
{func: "int__dynamic", ret: P.$int, args: [null]},
{func: "int__Comparable_Comparable", ret: P.$int, args: [P.Comparable, P.Comparable]},
{func: "bool__Object_Object", ret: P.bool, args: [P.Object, P.Object]},
{func: "int__Object", ret: P.$int, args: [P.Object]},
{func: "bool__Element_String_String__Html5NodeValidator", ret: P.bool, args: [W.Element, P.String, P.String, W._Html5NodeValidator]},
"element",
"attributeName",
"context",
{func: "args1", args: [null]},
"receiver",
{func: "args4", args: [null, null, null, null]},
"name",
"oldValue",
"newValue",
"callback",
"captureThis",
"self",
"arguments",
"o",
{func: "Object__dynamic", ret: P.Object, args: [null]},
{func: "bool__Symbol", ret: P.bool, args: [P.Symbol0]},
"symbol",
{func: "Iterable__Iterable", ret: [P.Iterable, K.IndexedValue], args: [P.Iterable]},
"iterable",
{func: "bool__dynamic", ret: P.bool, args: [null]},
"event",
{func: "String__int", ret: P.String, args: [P.$int]},
"index",
{func: "Element__int", ret: W.Element, args: [P.$int]},
{func: "Node__Node", ret: W.Node, args: [W.Node]},
"newChild",
{func: "SpeechRecognitionAlternative__int", ret: W.SpeechRecognitionAlternative, args: [P.$int]},
{func: "Node__int", ret: W.Node, args: [P.$int]},
{func: "SpeechInputResult__int", ret: W.SpeechInputResult, args: [P.$int]},
{func: "SpeechRecognitionResult__int", ret: W.SpeechRecognitionResult, args: [P.$int]},
"invocation",
{func: "args2", args: [null, null]},
"key",
{func: "dynamic__String_dynamic", args: [P.String, null]},
{func: "dynamic__dynamic_String", args: [null, P.String]},
"clazz",
{func: "dynamic__Item_Item", args: [E.Item, E.Item]},
"each",
{func: "Future__dynamic", ret: P.Future, args: [null]},
"response",
"item",
"annotation",
"data",
{func: "void__Object__StackTrace", void: true, args: [P.Object], opt: [P.StackTrace]},
"theError",
"theStackTrace",
{func: "dynamic__Object", args: [P.Object]},
{func: "dynamic__dynamic__dynamic", args: [null], opt: [null]},
{func: "bool_", ret: P.bool},
"ignored",
"st",
{func: "dynamic__bool", args: [P.bool]},
"_",
{func: "dynamic__dynamic_StackTrace", args: [null, P.StackTrace]},
{func: "void__dynamic_StackTrace", void: true, args: [null, P.StackTrace]},
"arg",
{func: "void__int_int", void: true, args: [P.$int, P.$int]},
{func: "dynamic__Symbol_dynamic", args: [P.Symbol0, null]},
{func: "int__String", ret: P.$int, args: [P.String]},
{func: "double__String", ret: P.$double, args: [P.String]},
{func: "bool__int", ret: P.bool, args: [P.$int]},
{func: "int__int", ret: P.$int, args: [P.$int]},
{func: "int__dynamic_dynamic", ret: P.$int, args: [null, null]},
{func: "void__String", void: true, args: [P.String]},
"byteString",
{func: "int__int_int", ret: P.$int, args: [P.$int, P.$int]},
"xhr",
"time",
"k",
"v",
{func: "dynamic__String_String", args: [P.String, P.String]},
"attr",
{func: "void__Node", void: true, args: [W.Node]},
{func: "dynamic__int", args: [P.$int]},
{func: "dynamic__int_dynamic", args: [P.$int, null]},
{func: "List__Item__bool", ret: [P.List, E.Item], args: [E.Item], named: {includeAllItems: P.bool}},
false,
"root",
"includeAllItems",
{func: "Item__Item", ret: E.Item, args: [E.Item]},
"s",
{func: "void__Object", void: true, args: [P.Object]},
"records",
{func: "dynamic__PropertyPath_dynamic", args: [L.PropertyPath, null]},
{func: "void__String_String", void: true, args: [P.String, P.String]},
{func: "void__List_Map_List", void: true, args: [P.List, P.Map, P.List]},
{func: "void__Event", void: true, args: [W.Event]},
"mutations",
"observer",
"i",
"changes",
"model",
"node",
"oneTime",
{func: "args3", args: [null, null, null]},
{func: "void__List", void: true, args: [[P.List, T.ChangeRecord]]},
"jsElem",
"extendee",
{func: "dynamic__dynamic_String_String", args: [null, P.String, P.String]},
{func: "dynamic__List", args: [[P.List, T.ChangeRecord]]},
{func: "Getter__Expression_String", ret: U.Getter, args: [U.Expression, P.String]},
"g",
"n",
{func: "Index__Expression_Expression", ret: U.Index, args: [U.Expression, U.Expression]},
{func: "dynamic__Expression", args: [U.Expression]},
{func: "int__num", ret: P.$int, args: [P.num]},
"x",
{func: "void__List0", void: true, args: [[P.List, G.ListChangeRecord]]},
"splices",
{func: "String__Object", ret: P.String, args: [P.Object]},
{func: "String__List", ret: P.String, args: [[P.List, P.Object]]},
"values",
"json",
"items",
"lib",
"libWithMember",
"mem",
{func: "dynamic__Class", args: [E.Class]},
"loaded",
{func: "void__dynamic_dynamic_AnchorElement", void: true, args: [null, null, W.AnchorElement]},
"detail",
"target",
"cls",
{func: "void__dynamic_dynamic_dynamic", void: true, args: [null, null, null]},
{func: "void__MouseEvent_dynamic_dynamic", void: true, args: [W.MouseEvent, null, null]},
{func: "void__MouseEvent", void: true, args: [W.MouseEvent]},
{func: "bool__DocsLocation", ret: P.bool, args: [Y.DocsLocation]},
{func: "void__KeyboardEvent", void: true, args: [W.KeyboardEvent]},
];
$ = null;
Isolate = Isolate.$finishIsolateConstructor(Isolate);
$ = new Isolate();
function convertToFastObject(properties) {
  function MyClass() {
  }
  MyClass.prototype = properties;
  new MyClass();
  return properties;
}
;
A = convertToFastObject(A);
B = convertToFastObject(B);
C = convertToFastObject(C);
D = convertToFastObject(D);
E = convertToFastObject(E);
F = convertToFastObject(F);
G = convertToFastObject(G);
H = convertToFastObject(H);
J = convertToFastObject(J);
K = convertToFastObject(K);
L = convertToFastObject(L);
M = convertToFastObject(M);
N = convertToFastObject(N);
O = convertToFastObject(O);
P = convertToFastObject(P);
Q = convertToFastObject(Q);
R = convertToFastObject(R);
S = convertToFastObject(S);
T = convertToFastObject(T);
U = convertToFastObject(U);
V = convertToFastObject(V);
W = convertToFastObject(W);
X = convertToFastObject(X);
Y = convertToFastObject(Y);
Z = convertToFastObject(Z);
!function() {
  function intern(s) {
    var o = {};
    o[s] = 1;
    return Object.keys(convertToFastObject(o))[0];
  }
  init.getIsolateTag = function(name) {
    return intern("___dart_" + name + init.isolateTag);
  };
  var tableProperty = "___dart_isolate_tags_";
  var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
  var rootProperty = "_ZxYxX";
  for (var i = 0;; i++) {
    var property = intern(rootProperty + "_" + i + "_");
    if (!(property in usedProperties)) {
      usedProperties[property] = 1;
      init.isolateTag = property;
      break;
    }
  }
}();
init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
// BEGIN invoke [main].
;(function(callback) {
  if (typeof document === "undefined") {
    callback(null);
    return;
  }
  if (document.currentScript) {
    callback(document.currentScript);
    return;
  }
  var scripts = document.scripts;
  function onLoad(event) {
    for (var i = 0; i < scripts.length; ++i) {
      scripts[i].removeEventListener("load", onLoad, false);
    }
    callback(event.target);
  }
  for (var i = 0; i < scripts.length; ++i) {
    scripts[i].addEventListener("load", onLoad, false);
  }
})(function(currentScript) {
  init.currentScript = currentScript;
  if (typeof dartMainRunner === "function") {
    dartMainRunner(function(a) {
      H.startRootIsolate(E.main1$closure(), a);
    }, []);
  } else {
    (function(a) {
      H.startRootIsolate(E.main1$closure(), a);
    })([]);
  }
});
;
// END invoke [main].
function init() {
  Isolate.$isolateProperties = {};
  function generateAccessor(fieldDescriptor, accessors, cls) {
    var fieldInformation = fieldDescriptor.split("-");
    var field = fieldInformation[0];
    var len = field.length;
    var code = field.charCodeAt(len - 1);
    var reflectable;
    if (fieldInformation.length > 1)
      reflectable = true;
    else
      reflectable = false;
    code = code >= 60 && code <= 64 ? code - 59 : code >= 123 && code <= 126 ? code - 117 : code >= 37 && code <= 43 ? code - 27 : 0;
    if (code) {
      var getterCode = code & 3;
      var setterCode = code >> 2;
      var accessorName = field = field.substring(0, len - 1);
      var divider = field.indexOf(":");
      if (divider > 0) {
        accessorName = field.substring(0, divider);
        field = field.substring(divider + 1);
      }
      if (getterCode) {
        var args = getterCode & 2 ? "receiver" : "";
        var receiver = getterCode & 1 ? "this" : "receiver";
        var body = "return " + receiver + "." + field;
        var property = cls + ".prototype.get$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
      if (setterCode) {
        var args = setterCode & 2 ? "receiver, value" : "value";
        var receiver = setterCode & 1 ? "this" : "receiver";
        var body = receiver + "." + field + " = value";
        var property = cls + ".prototype.set$" + accessorName + "=";
        var fn = "function(" + args + "){" + body + "}";
        if (reflectable)
          accessors.push(property + "$reflectable(" + fn + ");\n");
        else
          accessors.push(property + fn + ";\n");
      }
    }
    return field;
  }
  Isolate.$isolateProperties.$generateAccessor = generateAccessor;
  function defineClass(name, cls, fields) {
    var accessors = [];
    var str = "function " + cls + "(";
    var body = "";
    for (var i = 0; i < fields.length; i++) {
      if (i != 0)
        str += ", ";
      var field = generateAccessor(fields[i], accessors, cls);
      var parameter = "parameter_" + field;
      str += parameter;
      body += "this." + field + " = " + parameter + ";\n";
    }
    str += ") {\n" + body + "}\n";
    str += cls + ".builtin$cls=\"" + name + "\";\n";
    str += "$desc=$collectedClasses." + cls + ";\n";
    str += "if($desc instanceof Array) $desc = $desc[1];\n";
    str += cls + ".prototype = $desc;\n";
    if (typeof defineClass.name != "string") {
      str += cls + ".name=\"" + cls + "\";\n";
    }
    str += accessors.join("");
    return str;
  }
  var inheritFrom = function() {
    function tmp() {
    }
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    return function(constructor, superConstructor) {
      tmp.prototype = superConstructor.prototype;
      var object = new tmp();
      var properties = constructor.prototype;
      for (var member in properties)
        if (hasOwnProperty.call(properties, member))
          object[member] = properties[member];
      object.constructor = constructor;
      constructor.prototype = object;
      return object;
    };
  }();
  Isolate.$finishClasses = function(collectedClasses, isolateProperties, existingIsolateProperties) {
    var pendingClasses = {};
    if (!init.allClasses)
      init.allClasses = {};
    var allClasses = init.allClasses;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    if (typeof dart_precompiled == "function") {
      var constructors = dart_precompiled(collectedClasses);
    } else {
      var combinedConstructorFunction = "function $reflectable(fn){fn.$reflectable=1;return fn};\n" + "var $desc;\n";
      var constructorsList = [];
    }
    for (var cls in collectedClasses) {
      if (hasOwnProperty.call(collectedClasses, cls)) {
        var desc = collectedClasses[cls];
        if (desc instanceof Array)
          desc = desc[1];
        var classData = desc["^"], supr, name = cls, fields = classData;
        if (typeof classData == "string") {
          var split = classData.split("/");
          if (split.length == 2) {
            name = split[0];
            fields = split[1];
          }
        }
        var s = fields.split(";");
        fields = s[1] == "" ? [] : s[1].split(",");
        supr = s[0];
        split = supr.split(":");
        if (split.length == 2) {
          supr = split[0];
          var functionSignature = split[1];
          if (functionSignature)
            desc.$signature = function(s) {
              return function() {
                return init.metadata[s];
              };
            }(functionSignature);
        }
        if (supr && supr.indexOf("+") > 0) {
          s = supr.split("+");
          supr = s[0];
          var mixin = collectedClasses[s[1]];
          if (mixin instanceof Array)
            mixin = mixin[1];
          for (var d in mixin) {
            if (hasOwnProperty.call(mixin, d) && !hasOwnProperty.call(desc, d))
              desc[d] = mixin[d];
          }
        }
        if (typeof dart_precompiled != "function") {
          combinedConstructorFunction += defineClass(name, cls, fields);
          constructorsList.push(cls);
        }
        if (supr)
          pendingClasses[cls] = supr;
      }
    }
    if (typeof dart_precompiled != "function") {
      combinedConstructorFunction += "return [\n  " + constructorsList.join(",\n  ") + "\n]";
      var constructors = new Function("$collectedClasses", combinedConstructorFunction)(collectedClasses);
      combinedConstructorFunction = null;
    }
    for (var i = 0; i < constructors.length; i++) {
      var constructor = constructors[i];
      var cls = constructor.name;
      var desc = collectedClasses[cls];
      var globalObject = isolateProperties;
      if (desc instanceof Array) {
        globalObject = desc[0] || isolateProperties;
        desc = desc[1];
      }
      allClasses[cls] = constructor;
      globalObject[cls] = constructor;
    }
    constructors = null;
    var finishedClasses = {};
    init.interceptorsByTag = Object.create(null);
    init.leafTags = {};
    function finishClass(cls) {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      if (hasOwnProperty.call(finishedClasses, cls))
        return;
      finishedClasses[cls] = true;
      var superclass = pendingClasses[cls];
      if (!superclass || typeof superclass != "string")
        return;
      finishClass(superclass);
      var constructor = allClasses[cls];
      var superConstructor = allClasses[superclass];
      if (!superConstructor)
        superConstructor = existingIsolateProperties[superclass];
      var prototype = inheritFrom(constructor, superConstructor);
      if (hasOwnProperty.call(prototype, "%")) {
        var nativeSpec = prototype["%"].split(";");
        if (nativeSpec[0]) {
          var tags = nativeSpec[0].split("|");
          for (var i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = true;
          }
        }
        if (nativeSpec[1]) {
          tags = nativeSpec[1].split("|");
          if (nativeSpec[2]) {
            var subclasses = nativeSpec[2].split("|");
            for (var i = 0; i < subclasses.length; i++) {
              var subclass = allClasses[subclasses[i]];
              subclass.$nativeSuperclassTag = tags[0];
            }
          }
          for (i = 0; i < tags.length; i++) {
            init.interceptorsByTag[tags[i]] = constructor;
            init.leafTags[tags[i]] = false;
          }
        }
      }
    }
    for (var cls in pendingClasses)
      finishClass(cls);
  };
  Isolate.$lazy = function(prototype, staticName, fieldName, getterName, lazyValue) {
    var sentinelUndefined = {};
    var sentinelInProgress = {};
    prototype[fieldName] = sentinelUndefined;
    prototype[getterName] = function() {
      var result = $[fieldName];
      try {
        if (result === sentinelUndefined) {
          $[fieldName] = sentinelInProgress;
          try {
            result = $[fieldName] = lazyValue();
          } finally {
            if (result === sentinelUndefined)
              if ($[fieldName] === sentinelInProgress)
                $[fieldName] = null;
          }
        } else {
          if (result === sentinelInProgress)
            H.throwCyclicInit(staticName);
        }
        return result;
      } finally {
        $[getterName] = function() {
          return this[fieldName];
        };
      }
    };
  };
  Isolate.$finishIsolateConstructor = function(oldIsolate) {
    var isolateProperties = oldIsolate.$isolateProperties;
    function Isolate() {
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      for (var staticName in isolateProperties)
        if (hasOwnProperty.call(isolateProperties, staticName))
          this[staticName] = isolateProperties[staticName];
      function ForceEfficientMap() {
      }
      ForceEfficientMap.prototype = this;
      new ForceEfficientMap();
    }
    Isolate.prototype = oldIsolate.prototype;
    Isolate.prototype.constructor = Isolate;
    Isolate.$isolateProperties = isolateProperties;
    Isolate.$finishClasses = oldIsolate.$finishClasses;
    Isolate.makeConstantList = oldIsolate.makeConstantList;
    return Isolate;
  };
}
})()
{
  var message =
      'Deprecation: Automatic generation of output for Content Security\n' +
      'Policy is deprecated and will be removed with the next development\n' +
      'release. Use the --csp option to generate CSP restricted output.';
  if (typeof dartPrint == "function") {
    dartPrint(message);
  } else if (typeof console == "object" && typeof console.log == "function") {
    console.log(message);
  } else if (typeof print == "function") {
    print(message);
  }
}
function dart_precompiled($collectedClasses) {
  var $desc;
  function HtmlElement() {
  }
  HtmlElement.builtin$cls = "HtmlElement";
  if (!"name" in HtmlElement)
    HtmlElement.name = "HtmlElement";
  $desc = $collectedClasses.HtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement.prototype = $desc;
  function _EntryArray() {
  }
  _EntryArray.builtin$cls = "_EntryArray";
  if (!"name" in _EntryArray)
    _EntryArray.name = "_EntryArray";
  $desc = $collectedClasses._EntryArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EntryArray.prototype = $desc;
  function AnchorElement() {
  }
  AnchorElement.builtin$cls = "AnchorElement";
  if (!"name" in AnchorElement)
    AnchorElement.name = "AnchorElement";
  $desc = $collectedClasses.AnchorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement.prototype = $desc;
  AnchorElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AnchorElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  AnchorElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  AnchorElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AnchorElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  AnchorElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AnchorElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AnchorElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AnimationEvent() {
  }
  AnimationEvent.builtin$cls = "AnimationEvent";
  if (!"name" in AnimationEvent)
    AnimationEvent.name = "AnimationEvent";
  $desc = $collectedClasses.AnimationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationEvent.prototype = $desc;
  function AreaElement() {
  }
  AreaElement.builtin$cls = "AreaElement";
  if (!"name" in AreaElement)
    AreaElement.name = "AreaElement";
  $desc = $collectedClasses.AreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AreaElement.prototype = $desc;
  AreaElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AreaElement.prototype.get$hostname = function(receiver) {
    return receiver.hostname;
  };
  AreaElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  AreaElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  AreaElement.prototype.get$port = function(receiver) {
    return receiver.port;
  };
  AreaElement.prototype.get$protocol = function(receiver) {
    return receiver.protocol;
  };
  function AudioElement() {
  }
  AudioElement.builtin$cls = "AudioElement";
  if (!"name" in AudioElement)
    AudioElement.name = "AudioElement";
  $desc = $collectedClasses.AudioElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioElement.prototype = $desc;
  function AutocompleteErrorEvent() {
  }
  AutocompleteErrorEvent.builtin$cls = "AutocompleteErrorEvent";
  if (!"name" in AutocompleteErrorEvent)
    AutocompleteErrorEvent.name = "AutocompleteErrorEvent";
  $desc = $collectedClasses.AutocompleteErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AutocompleteErrorEvent.prototype = $desc;
  function BRElement() {
  }
  BRElement.builtin$cls = "BRElement";
  if (!"name" in BRElement)
    BRElement.name = "BRElement";
  $desc = $collectedClasses.BRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BRElement.prototype = $desc;
  function BaseElement() {
  }
  BaseElement.builtin$cls = "BaseElement";
  if (!"name" in BaseElement)
    BaseElement.name = "BaseElement";
  $desc = $collectedClasses.BaseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BaseElement.prototype = $desc;
  BaseElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  BaseElement.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  BaseElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function BeforeLoadEvent() {
  }
  BeforeLoadEvent.builtin$cls = "BeforeLoadEvent";
  if (!"name" in BeforeLoadEvent)
    BeforeLoadEvent.name = "BeforeLoadEvent";
  $desc = $collectedClasses.BeforeLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeLoadEvent.prototype = $desc;
  BeforeLoadEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function BeforeUnloadEvent() {
  }
  BeforeUnloadEvent.builtin$cls = "BeforeUnloadEvent";
  if (!"name" in BeforeUnloadEvent)
    BeforeUnloadEvent.name = "BeforeUnloadEvent";
  $desc = $collectedClasses.BeforeUnloadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BeforeUnloadEvent.prototype = $desc;
  function Blob() {
  }
  Blob.builtin$cls = "Blob";
  if (!"name" in Blob)
    Blob.name = "Blob";
  $desc = $collectedClasses.Blob;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Blob.prototype = $desc;
  Blob.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function BodyElement() {
  }
  BodyElement.builtin$cls = "BodyElement";
  if (!"name" in BodyElement)
    BodyElement.name = "BodyElement";
  $desc = $collectedClasses.BodyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BodyElement.prototype = $desc;
  function ButtonElement() {
  }
  ButtonElement.builtin$cls = "ButtonElement";
  if (!"name" in ButtonElement)
    ButtonElement.name = "ButtonElement";
  $desc = $collectedClasses.ButtonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ButtonElement.prototype = $desc;
  ButtonElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  ButtonElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ButtonElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ButtonElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ButtonElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ButtonElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ButtonElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function CDataSection() {
  }
  CDataSection.builtin$cls = "CDataSection";
  if (!"name" in CDataSection)
    CDataSection.name = "CDataSection";
  $desc = $collectedClasses.CDataSection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CDataSection.prototype = $desc;
  function CanvasElement() {
  }
  CanvasElement.builtin$cls = "CanvasElement";
  if (!"name" in CanvasElement)
    CanvasElement.name = "CanvasElement";
  $desc = $collectedClasses.CanvasElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CanvasElement.prototype = $desc;
  function CharacterData() {
  }
  CharacterData.builtin$cls = "CharacterData";
  if (!"name" in CharacterData)
    CharacterData.name = "CharacterData";
  $desc = $collectedClasses.CharacterData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CharacterData.prototype = $desc;
  CharacterData.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CloseEvent() {
  }
  CloseEvent.builtin$cls = "CloseEvent";
  if (!"name" in CloseEvent)
    CloseEvent.name = "CloseEvent";
  $desc = $collectedClasses.CloseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CloseEvent.prototype = $desc;
  function Comment() {
  }
  Comment.builtin$cls = "Comment";
  if (!"name" in Comment)
    Comment.name = "Comment";
  $desc = $collectedClasses.Comment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comment.prototype = $desc;
  function CompositionEvent() {
  }
  CompositionEvent.builtin$cls = "CompositionEvent";
  if (!"name" in CompositionEvent)
    CompositionEvent.name = "CompositionEvent";
  $desc = $collectedClasses.CompositionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompositionEvent.prototype = $desc;
  function ContentElement() {
  }
  ContentElement.builtin$cls = "ContentElement";
  if (!"name" in ContentElement)
    ContentElement.name = "ContentElement";
  $desc = $collectedClasses.ContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContentElement.prototype = $desc;
  function CssFontFaceLoadEvent() {
  }
  CssFontFaceLoadEvent.builtin$cls = "CssFontFaceLoadEvent";
  if (!"name" in CssFontFaceLoadEvent)
    CssFontFaceLoadEvent.name = "CssFontFaceLoadEvent";
  $desc = $collectedClasses.CssFontFaceLoadEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssFontFaceLoadEvent.prototype = $desc;
  function CssStyleDeclaration() {
  }
  CssStyleDeclaration.builtin$cls = "CssStyleDeclaration";
  if (!"name" in CssStyleDeclaration)
    CssStyleDeclaration.name = "CssStyleDeclaration";
  $desc = $collectedClasses.CssStyleDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclaration.prototype = $desc;
  CssStyleDeclaration.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function CustomEvent() {
  }
  CustomEvent.builtin$cls = "CustomEvent";
  if (!"name" in CustomEvent)
    CustomEvent.name = "CustomEvent";
  $desc = $collectedClasses.CustomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CustomEvent.prototype = $desc;
  CustomEvent.prototype.set$_dartDetail = function(receiver, v) {
    return receiver._dartDetail = v;
  };
  function DListElement() {
  }
  DListElement.builtin$cls = "DListElement";
  if (!"name" in DListElement)
    DListElement.name = "DListElement";
  $desc = $collectedClasses.DListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DListElement.prototype = $desc;
  function DataListElement() {
  }
  DataListElement.builtin$cls = "DataListElement";
  if (!"name" in DataListElement)
    DataListElement.name = "DataListElement";
  $desc = $collectedClasses.DataListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DataListElement.prototype = $desc;
  function DetailsElement() {
  }
  DetailsElement.builtin$cls = "DetailsElement";
  if (!"name" in DetailsElement)
    DetailsElement.name = "DetailsElement";
  $desc = $collectedClasses.DetailsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DetailsElement.prototype = $desc;
  function DeviceMotionEvent() {
  }
  DeviceMotionEvent.builtin$cls = "DeviceMotionEvent";
  if (!"name" in DeviceMotionEvent)
    DeviceMotionEvent.name = "DeviceMotionEvent";
  $desc = $collectedClasses.DeviceMotionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceMotionEvent.prototype = $desc;
  function DeviceOrientationEvent() {
  }
  DeviceOrientationEvent.builtin$cls = "DeviceOrientationEvent";
  if (!"name" in DeviceOrientationEvent)
    DeviceOrientationEvent.name = "DeviceOrientationEvent";
  $desc = $collectedClasses.DeviceOrientationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeviceOrientationEvent.prototype = $desc;
  function DialogElement() {
  }
  DialogElement.builtin$cls = "DialogElement";
  if (!"name" in DialogElement)
    DialogElement.name = "DialogElement";
  $desc = $collectedClasses.DialogElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DialogElement.prototype = $desc;
  function DivElement() {
  }
  DivElement.builtin$cls = "DivElement";
  if (!"name" in DivElement)
    DivElement.name = "DivElement";
  $desc = $collectedClasses.DivElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement.prototype = $desc;
  function Document() {
  }
  Document.builtin$cls = "Document";
  if (!"name" in Document)
    Document.name = "Document";
  $desc = $collectedClasses.Document;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Document.prototype = $desc;
  function DocumentFragment() {
  }
  DocumentFragment.builtin$cls = "DocumentFragment";
  if (!"name" in DocumentFragment)
    DocumentFragment.name = "DocumentFragment";
  $desc = $collectedClasses.DocumentFragment;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocumentFragment.prototype = $desc;
  function DomError() {
  }
  DomError.builtin$cls = "DomError";
  if (!"name" in DomError)
    DomError.name = "DomError";
  $desc = $collectedClasses.DomError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomError.prototype = $desc;
  DomError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function DomException() {
  }
  DomException.builtin$cls = "DomException";
  if (!"name" in DomException)
    DomException.name = "DomException";
  $desc = $collectedClasses.DomException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomException.prototype = $desc;
  function DomImplementation() {
  }
  DomImplementation.builtin$cls = "DomImplementation";
  if (!"name" in DomImplementation)
    DomImplementation.name = "DomImplementation";
  $desc = $collectedClasses.DomImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DomImplementation.prototype = $desc;
  function Element() {
  }
  Element.builtin$cls = "Element";
  if (!"name" in Element)
    Element.name = "Element";
  $desc = $collectedClasses.Element;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element.prototype = $desc;
  Element.prototype.get$title = function(receiver) {
    return receiver.title;
  };
  Element.prototype.set$title = function(receiver, v) {
    return receiver.title = v;
  };
  Element.prototype.get$className = function(receiver) {
    return receiver.className;
  };
  Element.prototype.set$className = function(receiver, v) {
    return receiver.className = v;
  };
  Element.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  Element.prototype.get$offsetHeight = function(receiver) {
    return receiver.offsetHeight;
  };
  Element.prototype.get$offsetWidth = function(receiver) {
    return receiver.offsetWidth;
  };
  Element.prototype.get$tagName = function(receiver) {
    return receiver.tagName;
  };
  function EmbedElement() {
  }
  EmbedElement.builtin$cls = "EmbedElement";
  if (!"name" in EmbedElement)
    EmbedElement.name = "EmbedElement";
  $desc = $collectedClasses.EmbedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmbedElement.prototype = $desc;
  EmbedElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  EmbedElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  EmbedElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  EmbedElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ErrorEvent() {
  }
  ErrorEvent.builtin$cls = "ErrorEvent";
  if (!"name" in ErrorEvent)
    ErrorEvent.name = "ErrorEvent";
  $desc = $collectedClasses.ErrorEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ErrorEvent.prototype = $desc;
  ErrorEvent.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function Event() {
  }
  Event.builtin$cls = "Event";
  if (!"name" in Event)
    Event.name = "Event";
  $desc = $collectedClasses.Event;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Event.prototype = $desc;
  Event.prototype.set$_selector = function(receiver, v) {
    return receiver._selector = v;
  };
  Event.prototype.get$bubbles = function(receiver) {
    return receiver.bubbles;
  };
  Event.prototype.get$path = function(receiver) {
    return receiver.path;
  };
  Event.prototype.get$timeStamp = function(receiver) {
    return receiver.timeStamp;
  };
  Event.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function EventTarget() {
  }
  EventTarget.builtin$cls = "EventTarget";
  if (!"name" in EventTarget)
    EventTarget.name = "EventTarget";
  $desc = $collectedClasses.EventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventTarget.prototype = $desc;
  function FieldSetElement() {
  }
  FieldSetElement.builtin$cls = "FieldSetElement";
  if (!"name" in FieldSetElement)
    FieldSetElement.name = "FieldSetElement";
  $desc = $collectedClasses.FieldSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FieldSetElement.prototype = $desc;
  FieldSetElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  FieldSetElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FieldSetElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  FieldSetElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function File() {
  }
  File.builtin$cls = "File";
  if (!"name" in File)
    File.name = "File";
  $desc = $collectedClasses.File;
  if ($desc instanceof Array)
    $desc = $desc[1];
  File.prototype = $desc;
  File.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function FileError() {
  }
  FileError.builtin$cls = "FileError";
  if (!"name" in FileError)
    FileError.name = "FileError";
  $desc = $collectedClasses.FileError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FileError.prototype = $desc;
  function FocusEvent() {
  }
  FocusEvent.builtin$cls = "FocusEvent";
  if (!"name" in FocusEvent)
    FocusEvent.name = "FocusEvent";
  $desc = $collectedClasses.FocusEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FocusEvent.prototype = $desc;
  function FormElement() {
  }
  FormElement.builtin$cls = "FormElement";
  if (!"name" in FormElement)
    FormElement.name = "FormElement";
  $desc = $collectedClasses.FormElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormElement.prototype = $desc;
  FormElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  FormElement.prototype.get$method = function(receiver) {
    return receiver.method;
  };
  FormElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  FormElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  FormElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function HRElement() {
  }
  HRElement.builtin$cls = "HRElement";
  if (!"name" in HRElement)
    HRElement.name = "HRElement";
  $desc = $collectedClasses.HRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HRElement.prototype = $desc;
  function HashChangeEvent() {
  }
  HashChangeEvent.builtin$cls = "HashChangeEvent";
  if (!"name" in HashChangeEvent)
    HashChangeEvent.name = "HashChangeEvent";
  $desc = $collectedClasses.HashChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashChangeEvent.prototype = $desc;
  function HeadElement() {
  }
  HeadElement.builtin$cls = "HeadElement";
  if (!"name" in HeadElement)
    HeadElement.name = "HeadElement";
  $desc = $collectedClasses.HeadElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadElement.prototype = $desc;
  function HeadingElement() {
  }
  HeadingElement.builtin$cls = "HeadingElement";
  if (!"name" in HeadingElement)
    HeadingElement.name = "HeadingElement";
  $desc = $collectedClasses.HeadingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HeadingElement.prototype = $desc;
  function History() {
  }
  History.builtin$cls = "History";
  if (!"name" in History)
    History.name = "History";
  $desc = $collectedClasses.History;
  if ($desc instanceof Array)
    $desc = $desc[1];
  History.prototype = $desc;
  History.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function HtmlCollection() {
  }
  HtmlCollection.builtin$cls = "HtmlCollection";
  if (!"name" in HtmlCollection)
    HtmlCollection.name = "HtmlCollection";
  $desc = $collectedClasses.HtmlCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlCollection.prototype = $desc;
  function HtmlDocument() {
  }
  HtmlDocument.builtin$cls = "HtmlDocument";
  if (!"name" in HtmlDocument)
    HtmlDocument.name = "HtmlDocument";
  $desc = $collectedClasses.HtmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlDocument.prototype = $desc;
  function HtmlFormControlsCollection() {
  }
  HtmlFormControlsCollection.builtin$cls = "HtmlFormControlsCollection";
  if (!"name" in HtmlFormControlsCollection)
    HtmlFormControlsCollection.name = "HtmlFormControlsCollection";
  $desc = $collectedClasses.HtmlFormControlsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlFormControlsCollection.prototype = $desc;
  function HtmlHtmlElement() {
  }
  HtmlHtmlElement.builtin$cls = "HtmlHtmlElement";
  if (!"name" in HtmlHtmlElement)
    HtmlHtmlElement.name = "HtmlHtmlElement";
  $desc = $collectedClasses.HtmlHtmlElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlHtmlElement.prototype = $desc;
  function HtmlOptionsCollection() {
  }
  HtmlOptionsCollection.builtin$cls = "HtmlOptionsCollection";
  if (!"name" in HtmlOptionsCollection)
    HtmlOptionsCollection.name = "HtmlOptionsCollection";
  $desc = $collectedClasses.HtmlOptionsCollection;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlOptionsCollection.prototype = $desc;
  function HttpRequest() {
  }
  HttpRequest.builtin$cls = "HttpRequest";
  if (!"name" in HttpRequest)
    HttpRequest.name = "HttpRequest";
  $desc = $collectedClasses.HttpRequest;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest.prototype = $desc;
  HttpRequest.prototype.get$responseText = function(receiver) {
    return receiver.responseText;
  };
  HttpRequest.prototype.get$status = function(receiver) {
    return receiver.status;
  };
  function HttpRequestEventTarget() {
  }
  HttpRequestEventTarget.builtin$cls = "HttpRequestEventTarget";
  if (!"name" in HttpRequestEventTarget)
    HttpRequestEventTarget.name = "HttpRequestEventTarget";
  $desc = $collectedClasses.HttpRequestEventTarget;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequestEventTarget.prototype = $desc;
  function IFrameElement() {
  }
  IFrameElement.builtin$cls = "IFrameElement";
  if (!"name" in IFrameElement)
    IFrameElement.name = "IFrameElement";
  $desc = $collectedClasses.IFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IFrameElement.prototype = $desc;
  IFrameElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  IFrameElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function ImageData() {
  }
  ImageData.builtin$cls = "ImageData";
  if (!"name" in ImageData)
    ImageData.name = "ImageData";
  $desc = $collectedClasses.ImageData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageData.prototype = $desc;
  function ImageElement() {
  }
  ImageElement.builtin$cls = "ImageElement";
  if (!"name" in ImageElement)
    ImageElement.name = "ImageElement";
  $desc = $collectedClasses.ImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement.prototype = $desc;
  function InputElement() {
  }
  InputElement.builtin$cls = "InputElement";
  if (!"name" in InputElement)
    InputElement.name = "InputElement";
  $desc = $collectedClasses.InputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InputElement.prototype = $desc;
  InputElement.prototype.get$checked = function(receiver) {
    return receiver.checked;
  };
  InputElement.prototype.set$checked = function(receiver, v) {
    return receiver.checked = v;
  };
  InputElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  InputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  InputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  InputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  InputElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  InputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  InputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function InstallEvent() {
  }
  InstallEvent.builtin$cls = "InstallEvent";
  if (!"name" in InstallEvent)
    InstallEvent.name = "InstallEvent";
  $desc = $collectedClasses.InstallEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InstallEvent.prototype = $desc;
  function InstallPhaseEvent() {
  }
  InstallPhaseEvent.builtin$cls = "InstallPhaseEvent";
  if (!"name" in InstallPhaseEvent)
    InstallPhaseEvent.name = "InstallPhaseEvent";
  $desc = $collectedClasses.InstallPhaseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InstallPhaseEvent.prototype = $desc;
  function KeyboardEvent() {
  }
  KeyboardEvent.builtin$cls = "KeyboardEvent";
  if (!"name" in KeyboardEvent)
    KeyboardEvent.name = "KeyboardEvent";
  $desc = $collectedClasses.KeyboardEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyboardEvent.prototype = $desc;
  KeyboardEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  KeyboardEvent.prototype.get$location = function(receiver) {
    return receiver.location;
  };
  function KeygenElement() {
  }
  KeygenElement.builtin$cls = "KeygenElement";
  if (!"name" in KeygenElement)
    KeygenElement.name = "KeygenElement";
  $desc = $collectedClasses.KeygenElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeygenElement.prototype = $desc;
  KeygenElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  KeygenElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  KeygenElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  KeygenElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function LIElement() {
  }
  LIElement.builtin$cls = "LIElement";
  if (!"name" in LIElement)
    LIElement.name = "LIElement";
  $desc = $collectedClasses.LIElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LIElement.prototype = $desc;
  LIElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  LIElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function LabelElement() {
  }
  LabelElement.builtin$cls = "LabelElement";
  if (!"name" in LabelElement)
    LabelElement.name = "LabelElement";
  $desc = $collectedClasses.LabelElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LabelElement.prototype = $desc;
  LabelElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  function LegendElement() {
  }
  LegendElement.builtin$cls = "LegendElement";
  if (!"name" in LegendElement)
    LegendElement.name = "LegendElement";
  $desc = $collectedClasses.LegendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LegendElement.prototype = $desc;
  LegendElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  function LinkElement0() {
  }
  LinkElement0.builtin$cls = "LinkElement0";
  if (!"name" in LinkElement0)
    LinkElement0.name = "LinkElement0";
  $desc = $collectedClasses.LinkElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement0.prototype = $desc;
  LinkElement0.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  LinkElement0.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  LinkElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  LinkElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function Location() {
  }
  Location.builtin$cls = "Location";
  if (!"name" in Location)
    Location.name = "Location";
  $desc = $collectedClasses.Location;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Location.prototype = $desc;
  Location.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  Location.prototype.set$href = function(receiver, v) {
    return receiver.href = v;
  };
  function MapElement() {
  }
  MapElement.builtin$cls = "MapElement";
  if (!"name" in MapElement)
    MapElement.name = "MapElement";
  $desc = $collectedClasses.MapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapElement.prototype = $desc;
  MapElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MapElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MediaElement() {
  }
  MediaElement.builtin$cls = "MediaElement";
  if (!"name" in MediaElement)
    MediaElement.name = "MediaElement";
  $desc = $collectedClasses.MediaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaElement.prototype = $desc;
  MediaElement.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function MediaError() {
  }
  MediaError.builtin$cls = "MediaError";
  if (!"name" in MediaError)
    MediaError.name = "MediaError";
  $desc = $collectedClasses.MediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaError.prototype = $desc;
  function MediaKeyError() {
  }
  MediaKeyError.builtin$cls = "MediaKeyError";
  if (!"name" in MediaKeyError)
    MediaKeyError.name = "MediaKeyError";
  $desc = $collectedClasses.MediaKeyError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyError.prototype = $desc;
  function MediaKeyEvent() {
  }
  MediaKeyEvent.builtin$cls = "MediaKeyEvent";
  if (!"name" in MediaKeyEvent)
    MediaKeyEvent.name = "MediaKeyEvent";
  $desc = $collectedClasses.MediaKeyEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyEvent.prototype = $desc;
  function MediaKeyMessageEvent() {
  }
  MediaKeyMessageEvent.builtin$cls = "MediaKeyMessageEvent";
  if (!"name" in MediaKeyMessageEvent)
    MediaKeyMessageEvent.name = "MediaKeyMessageEvent";
  $desc = $collectedClasses.MediaKeyMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyMessageEvent.prototype = $desc;
  function MediaKeyNeededEvent() {
  }
  MediaKeyNeededEvent.builtin$cls = "MediaKeyNeededEvent";
  if (!"name" in MediaKeyNeededEvent)
    MediaKeyNeededEvent.name = "MediaKeyNeededEvent";
  $desc = $collectedClasses.MediaKeyNeededEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaKeyNeededEvent.prototype = $desc;
  function MediaStream() {
  }
  MediaStream.builtin$cls = "MediaStream";
  if (!"name" in MediaStream)
    MediaStream.name = "MediaStream";
  $desc = $collectedClasses.MediaStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStream.prototype = $desc;
  MediaStream.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  function MediaStreamEvent() {
  }
  MediaStreamEvent.builtin$cls = "MediaStreamEvent";
  if (!"name" in MediaStreamEvent)
    MediaStreamEvent.name = "MediaStreamEvent";
  $desc = $collectedClasses.MediaStreamEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamEvent.prototype = $desc;
  function MediaStreamTrack() {
  }
  MediaStreamTrack.builtin$cls = "MediaStreamTrack";
  if (!"name" in MediaStreamTrack)
    MediaStreamTrack.name = "MediaStreamTrack";
  $desc = $collectedClasses.MediaStreamTrack;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrack.prototype = $desc;
  MediaStreamTrack.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MediaStreamTrack.prototype.get$kind = function(receiver) {
    return receiver.kind;
  };
  function MediaStreamTrackEvent() {
  }
  MediaStreamTrackEvent.builtin$cls = "MediaStreamTrackEvent";
  if (!"name" in MediaStreamTrackEvent)
    MediaStreamTrackEvent.name = "MediaStreamTrackEvent";
  $desc = $collectedClasses.MediaStreamTrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MediaStreamTrackEvent.prototype = $desc;
  function MenuElement() {
  }
  MenuElement.builtin$cls = "MenuElement";
  if (!"name" in MenuElement)
    MenuElement.name = "MenuElement";
  $desc = $collectedClasses.MenuElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MenuElement.prototype = $desc;
  function MessageEvent() {
  }
  MessageEvent.builtin$cls = "MessageEvent";
  if (!"name" in MessageEvent)
    MessageEvent.name = "MessageEvent";
  $desc = $collectedClasses.MessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MessageEvent.prototype = $desc;
  function MetaElement() {
  }
  MetaElement.builtin$cls = "MetaElement";
  if (!"name" in MetaElement)
    MetaElement.name = "MetaElement";
  $desc = $collectedClasses.MetaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetaElement.prototype = $desc;
  MetaElement.prototype.get$content = function(receiver) {
    return receiver.content;
  };
  MetaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MetaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  function MeterElement() {
  }
  MeterElement.builtin$cls = "MeterElement";
  if (!"name" in MeterElement)
    MeterElement.name = "MeterElement";
  $desc = $collectedClasses.MeterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MeterElement.prototype = $desc;
  MeterElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  MeterElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function MidiConnectionEvent() {
  }
  MidiConnectionEvent.builtin$cls = "MidiConnectionEvent";
  if (!"name" in MidiConnectionEvent)
    MidiConnectionEvent.name = "MidiConnectionEvent";
  $desc = $collectedClasses.MidiConnectionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiConnectionEvent.prototype = $desc;
  function MidiInput() {
  }
  MidiInput.builtin$cls = "MidiInput";
  if (!"name" in MidiInput)
    MidiInput.name = "MidiInput";
  $desc = $collectedClasses.MidiInput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiInput.prototype = $desc;
  function MidiMessageEvent() {
  }
  MidiMessageEvent.builtin$cls = "MidiMessageEvent";
  if (!"name" in MidiMessageEvent)
    MidiMessageEvent.name = "MidiMessageEvent";
  $desc = $collectedClasses.MidiMessageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiMessageEvent.prototype = $desc;
  function MidiOutput() {
  }
  MidiOutput.builtin$cls = "MidiOutput";
  if (!"name" in MidiOutput)
    MidiOutput.name = "MidiOutput";
  $desc = $collectedClasses.MidiOutput;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiOutput.prototype = $desc;
  function MidiPort() {
  }
  MidiPort.builtin$cls = "MidiPort";
  if (!"name" in MidiPort)
    MidiPort.name = "MidiPort";
  $desc = $collectedClasses.MidiPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MidiPort.prototype = $desc;
  MidiPort.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  MidiPort.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  MidiPort.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function ModElement() {
  }
  ModElement.builtin$cls = "ModElement";
  if (!"name" in ModElement)
    ModElement.name = "ModElement";
  $desc = $collectedClasses.ModElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ModElement.prototype = $desc;
  function MouseEvent() {
  }
  MouseEvent.builtin$cls = "MouseEvent";
  if (!"name" in MouseEvent)
    MouseEvent.name = "MouseEvent";
  $desc = $collectedClasses.MouseEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MouseEvent.prototype = $desc;
  MouseEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  function MutationObserver() {
  }
  MutationObserver.builtin$cls = "MutationObserver";
  if (!"name" in MutationObserver)
    MutationObserver.name = "MutationObserver";
  $desc = $collectedClasses.MutationObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationObserver.prototype = $desc;
  function MutationRecord() {
  }
  MutationRecord.builtin$cls = "MutationRecord";
  if (!"name" in MutationRecord)
    MutationRecord.name = "MutationRecord";
  $desc = $collectedClasses.MutationRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationRecord.prototype = $desc;
  MutationRecord.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  MutationRecord.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function Navigator() {
  }
  Navigator.builtin$cls = "Navigator";
  if (!"name" in Navigator)
    Navigator.name = "Navigator";
  $desc = $collectedClasses.Navigator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Navigator.prototype = $desc;
  function NavigatorUserMediaError() {
  }
  NavigatorUserMediaError.builtin$cls = "NavigatorUserMediaError";
  if (!"name" in NavigatorUserMediaError)
    NavigatorUserMediaError.name = "NavigatorUserMediaError";
  $desc = $collectedClasses.NavigatorUserMediaError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NavigatorUserMediaError.prototype = $desc;
  NavigatorUserMediaError.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function Node() {
  }
  Node.builtin$cls = "Node";
  if (!"name" in Node)
    Node.name = "Node";
  $desc = $collectedClasses.Node;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Node.prototype = $desc;
  Node.prototype.get$firstChild = function(receiver) {
    return receiver.firstChild;
  };
  Node.prototype.get$nextNode = function(receiver) {
    return receiver.nextSibling;
  };
  Node.prototype.get$ownerDocument = function(receiver) {
    return receiver.ownerDocument;
  };
  Node.prototype.get$parent = function(receiver) {
    return receiver.parentElement;
  };
  Node.prototype.get$parentNode = function(receiver) {
    return receiver.parentNode;
  };
  Node.prototype.get$text = function(receiver) {
    return receiver.textContent;
  };
  Node.prototype.set$text = function(receiver, v) {
    return receiver.textContent = v;
  };
  function NodeList() {
  }
  NodeList.builtin$cls = "NodeList";
  if (!"name" in NodeList)
    NodeList.name = "NodeList";
  $desc = $collectedClasses.NodeList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeList.prototype = $desc;
  function OListElement() {
  }
  OListElement.builtin$cls = "OListElement";
  if (!"name" in OListElement)
    OListElement.name = "OListElement";
  $desc = $collectedClasses.OListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OListElement.prototype = $desc;
  OListElement.prototype.get$reversed = function(receiver) {
    return receiver.reversed;
  };
  OListElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OListElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function ObjectElement() {
  }
  ObjectElement.builtin$cls = "ObjectElement";
  if (!"name" in ObjectElement)
    ObjectElement.name = "ObjectElement";
  $desc = $collectedClasses.ObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObjectElement.prototype = $desc;
  ObjectElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  ObjectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ObjectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ObjectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ObjectElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function OptGroupElement() {
  }
  OptGroupElement.builtin$cls = "OptGroupElement";
  if (!"name" in OptGroupElement)
    OptGroupElement.name = "OptGroupElement";
  $desc = $collectedClasses.OptGroupElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptGroupElement.prototype = $desc;
  function OptionElement() {
  }
  OptionElement.builtin$cls = "OptionElement";
  if (!"name" in OptionElement)
    OptionElement.name = "OptionElement";
  $desc = $collectedClasses.OptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OptionElement.prototype = $desc;
  OptionElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  OptionElement.prototype.get$index = function(receiver) {
    return receiver.index;
  };
  OptionElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OptionElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OutputElement() {
  }
  OutputElement.builtin$cls = "OutputElement";
  if (!"name" in OutputElement)
    OutputElement.name = "OutputElement";
  $desc = $collectedClasses.OutputElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutputElement.prototype = $desc;
  OutputElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  OutputElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  OutputElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  OutputElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  OutputElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  OutputElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function OverflowEvent() {
  }
  OverflowEvent.builtin$cls = "OverflowEvent";
  if (!"name" in OverflowEvent)
    OverflowEvent.name = "OverflowEvent";
  $desc = $collectedClasses.OverflowEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OverflowEvent.prototype = $desc;
  function PageTransitionEvent() {
  }
  PageTransitionEvent.builtin$cls = "PageTransitionEvent";
  if (!"name" in PageTransitionEvent)
    PageTransitionEvent.name = "PageTransitionEvent";
  $desc = $collectedClasses.PageTransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageTransitionEvent.prototype = $desc;
  function ParagraphElement() {
  }
  ParagraphElement.builtin$cls = "ParagraphElement";
  if (!"name" in ParagraphElement)
    ParagraphElement.name = "ParagraphElement";
  $desc = $collectedClasses.ParagraphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParagraphElement.prototype = $desc;
  function ParamElement() {
  }
  ParamElement.builtin$cls = "ParamElement";
  if (!"name" in ParamElement)
    ParamElement.name = "ParamElement";
  $desc = $collectedClasses.ParamElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParamElement.prototype = $desc;
  ParamElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  ParamElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  ParamElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ParamElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function PopStateEvent() {
  }
  PopStateEvent.builtin$cls = "PopStateEvent";
  if (!"name" in PopStateEvent)
    PopStateEvent.name = "PopStateEvent";
  $desc = $collectedClasses.PopStateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PopStateEvent.prototype = $desc;
  function PositionError() {
  }
  PositionError.builtin$cls = "PositionError";
  if (!"name" in PositionError)
    PositionError.name = "PositionError";
  $desc = $collectedClasses.PositionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PositionError.prototype = $desc;
  function PreElement() {
  }
  PreElement.builtin$cls = "PreElement";
  if (!"name" in PreElement)
    PreElement.name = "PreElement";
  $desc = $collectedClasses.PreElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PreElement.prototype = $desc;
  function ProcessingInstruction() {
  }
  ProcessingInstruction.builtin$cls = "ProcessingInstruction";
  if (!"name" in ProcessingInstruction)
    ProcessingInstruction.name = "ProcessingInstruction";
  $desc = $collectedClasses.ProcessingInstruction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProcessingInstruction.prototype = $desc;
  ProcessingInstruction.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  function ProgressElement() {
  }
  ProgressElement.builtin$cls = "ProgressElement";
  if (!"name" in ProgressElement)
    ProgressElement.name = "ProgressElement";
  $desc = $collectedClasses.ProgressElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressElement.prototype = $desc;
  ProgressElement.prototype.get$position = function(receiver) {
    return receiver.position;
  };
  ProgressElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  ProgressElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ProgressEvent() {
  }
  ProgressEvent.builtin$cls = "ProgressEvent";
  if (!"name" in ProgressEvent)
    ProgressEvent.name = "ProgressEvent";
  $desc = $collectedClasses.ProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ProgressEvent.prototype = $desc;
  function QuoteElement() {
  }
  QuoteElement.builtin$cls = "QuoteElement";
  if (!"name" in QuoteElement)
    QuoteElement.name = "QuoteElement";
  $desc = $collectedClasses.QuoteElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QuoteElement.prototype = $desc;
  function Range() {
  }
  Range.builtin$cls = "Range";
  if (!"name" in Range)
    Range.name = "Range";
  $desc = $collectedClasses.Range;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Range.prototype = $desc;
  function ResourceProgressEvent() {
  }
  ResourceProgressEvent.builtin$cls = "ResourceProgressEvent";
  if (!"name" in ResourceProgressEvent)
    ResourceProgressEvent.name = "ResourceProgressEvent";
  $desc = $collectedClasses.ResourceProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ResourceProgressEvent.prototype = $desc;
  ResourceProgressEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function RtcDataChannelEvent() {
  }
  RtcDataChannelEvent.builtin$cls = "RtcDataChannelEvent";
  if (!"name" in RtcDataChannelEvent)
    RtcDataChannelEvent.name = "RtcDataChannelEvent";
  $desc = $collectedClasses.RtcDataChannelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDataChannelEvent.prototype = $desc;
  function RtcDtmfToneChangeEvent() {
  }
  RtcDtmfToneChangeEvent.builtin$cls = "RtcDtmfToneChangeEvent";
  if (!"name" in RtcDtmfToneChangeEvent)
    RtcDtmfToneChangeEvent.name = "RtcDtmfToneChangeEvent";
  $desc = $collectedClasses.RtcDtmfToneChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcDtmfToneChangeEvent.prototype = $desc;
  function RtcIceCandidateEvent() {
  }
  RtcIceCandidateEvent.builtin$cls = "RtcIceCandidateEvent";
  if (!"name" in RtcIceCandidateEvent)
    RtcIceCandidateEvent.name = "RtcIceCandidateEvent";
  $desc = $collectedClasses.RtcIceCandidateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RtcIceCandidateEvent.prototype = $desc;
  function ScriptElement0() {
  }
  ScriptElement0.builtin$cls = "ScriptElement0";
  if (!"name" in ScriptElement0)
    ScriptElement0.name = "ScriptElement0";
  $desc = $collectedClasses.ScriptElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement0.prototype = $desc;
  ScriptElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SecurityPolicyViolationEvent() {
  }
  SecurityPolicyViolationEvent.builtin$cls = "SecurityPolicyViolationEvent";
  if (!"name" in SecurityPolicyViolationEvent)
    SecurityPolicyViolationEvent.name = "SecurityPolicyViolationEvent";
  $desc = $collectedClasses.SecurityPolicyViolationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SecurityPolicyViolationEvent.prototype = $desc;
  function SelectElement() {
  }
  SelectElement.builtin$cls = "SelectElement";
  if (!"name" in SelectElement)
    SelectElement.name = "SelectElement";
  $desc = $collectedClasses.SelectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SelectElement.prototype = $desc;
  SelectElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  SelectElement.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  SelectElement.prototype.set$length = function(receiver, v) {
    return receiver.length = v;
  };
  SelectElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  SelectElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  SelectElement.prototype.get$selectedIndex = function(receiver) {
    return receiver.selectedIndex;
  };
  SelectElement.prototype.set$selectedIndex = function(receiver, v) {
    return receiver.selectedIndex = v;
  };
  SelectElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SelectElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  SelectElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function ShadowElement() {
  }
  ShadowElement.builtin$cls = "ShadowElement";
  if (!"name" in ShadowElement)
    ShadowElement.name = "ShadowElement";
  $desc = $collectedClasses.ShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowElement.prototype = $desc;
  function ShadowRoot() {
  }
  ShadowRoot.builtin$cls = "ShadowRoot";
  if (!"name" in ShadowRoot)
    ShadowRoot.name = "ShadowRoot";
  $desc = $collectedClasses.ShadowRoot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ShadowRoot.prototype = $desc;
  ShadowRoot.prototype.get$innerHtml = function(receiver) {
    return receiver.innerHTML;
  };
  function SourceElement() {
  }
  SourceElement.builtin$cls = "SourceElement";
  if (!"name" in SourceElement)
    SourceElement.name = "SourceElement";
  $desc = $collectedClasses.SourceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SourceElement.prototype = $desc;
  SourceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  SourceElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SpanElement() {
  }
  SpanElement.builtin$cls = "SpanElement";
  if (!"name" in SpanElement)
    SpanElement.name = "SpanElement";
  $desc = $collectedClasses.SpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpanElement.prototype = $desc;
  function SpeechInputEvent() {
  }
  SpeechInputEvent.builtin$cls = "SpeechInputEvent";
  if (!"name" in SpeechInputEvent)
    SpeechInputEvent.name = "SpeechInputEvent";
  $desc = $collectedClasses.SpeechInputEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputEvent.prototype = $desc;
  SpeechInputEvent.prototype.get$results = function(receiver) {
    return receiver.results;
  };
  function SpeechInputResult() {
  }
  SpeechInputResult.builtin$cls = "SpeechInputResult";
  if (!"name" in SpeechInputResult)
    SpeechInputResult.name = "SpeechInputResult";
  $desc = $collectedClasses.SpeechInputResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechInputResult.prototype = $desc;
  function SpeechRecognitionAlternative() {
  }
  SpeechRecognitionAlternative.builtin$cls = "SpeechRecognitionAlternative";
  if (!"name" in SpeechRecognitionAlternative)
    SpeechRecognitionAlternative.name = "SpeechRecognitionAlternative";
  $desc = $collectedClasses.SpeechRecognitionAlternative;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionAlternative.prototype = $desc;
  function SpeechRecognitionError() {
  }
  SpeechRecognitionError.builtin$cls = "SpeechRecognitionError";
  if (!"name" in SpeechRecognitionError)
    SpeechRecognitionError.name = "SpeechRecognitionError";
  $desc = $collectedClasses.SpeechRecognitionError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionError.prototype = $desc;
  SpeechRecognitionError.prototype.get$error = function(receiver) {
    return receiver.error;
  };
  function SpeechRecognitionEvent() {
  }
  SpeechRecognitionEvent.builtin$cls = "SpeechRecognitionEvent";
  if (!"name" in SpeechRecognitionEvent)
    SpeechRecognitionEvent.name = "SpeechRecognitionEvent";
  $desc = $collectedClasses.SpeechRecognitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionEvent.prototype = $desc;
  SpeechRecognitionEvent.prototype.get$results = function(receiver) {
    return receiver.results;
  };
  function SpeechRecognitionResult() {
  }
  SpeechRecognitionResult.builtin$cls = "SpeechRecognitionResult";
  if (!"name" in SpeechRecognitionResult)
    SpeechRecognitionResult.name = "SpeechRecognitionResult";
  $desc = $collectedClasses.SpeechRecognitionResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechRecognitionResult.prototype = $desc;
  SpeechRecognitionResult.prototype.get$isFinal = function(receiver) {
    return receiver.isFinal;
  };
  SpeechRecognitionResult.prototype.get$length = function(receiver) {
    return receiver.length;
  };
  function SpeechSynthesisEvent() {
  }
  SpeechSynthesisEvent.builtin$cls = "SpeechSynthesisEvent";
  if (!"name" in SpeechSynthesisEvent)
    SpeechSynthesisEvent.name = "SpeechSynthesisEvent";
  $desc = $collectedClasses.SpeechSynthesisEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SpeechSynthesisEvent.prototype = $desc;
  SpeechSynthesisEvent.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  function StorageEvent() {
  }
  StorageEvent.builtin$cls = "StorageEvent";
  if (!"name" in StorageEvent)
    StorageEvent.name = "StorageEvent";
  $desc = $collectedClasses.StorageEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StorageEvent.prototype = $desc;
  StorageEvent.prototype.get$key = function(receiver) {
    return receiver.key;
  };
  StorageEvent.prototype.get$url = function(receiver) {
    return receiver.url;
  };
  function StyleElement() {
  }
  StyleElement.builtin$cls = "StyleElement";
  if (!"name" in StyleElement)
    StyleElement.name = "StyleElement";
  $desc = $collectedClasses.StyleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement.prototype = $desc;
  StyleElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  StyleElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function TableCaptionElement() {
  }
  TableCaptionElement.builtin$cls = "TableCaptionElement";
  if (!"name" in TableCaptionElement)
    TableCaptionElement.name = "TableCaptionElement";
  $desc = $collectedClasses.TableCaptionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCaptionElement.prototype = $desc;
  function TableCellElement() {
  }
  TableCellElement.builtin$cls = "TableCellElement";
  if (!"name" in TableCellElement)
    TableCellElement.name = "TableCellElement";
  $desc = $collectedClasses.TableCellElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableCellElement.prototype = $desc;
  function TableColElement() {
  }
  TableColElement.builtin$cls = "TableColElement";
  if (!"name" in TableColElement)
    TableColElement.name = "TableColElement";
  $desc = $collectedClasses.TableColElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableColElement.prototype = $desc;
  function TableElement() {
  }
  TableElement.builtin$cls = "TableElement";
  if (!"name" in TableElement)
    TableElement.name = "TableElement";
  $desc = $collectedClasses.TableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableElement.prototype = $desc;
  function TableRowElement() {
  }
  TableRowElement.builtin$cls = "TableRowElement";
  if (!"name" in TableRowElement)
    TableRowElement.name = "TableRowElement";
  $desc = $collectedClasses.TableRowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableRowElement.prototype = $desc;
  function TableSectionElement() {
  }
  TableSectionElement.builtin$cls = "TableSectionElement";
  if (!"name" in TableSectionElement)
    TableSectionElement.name = "TableSectionElement";
  $desc = $collectedClasses.TableSectionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TableSectionElement.prototype = $desc;
  function TemplateElement() {
  }
  TemplateElement.builtin$cls = "TemplateElement";
  if (!"name" in TemplateElement)
    TemplateElement.name = "TemplateElement";
  $desc = $collectedClasses.TemplateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateElement.prototype = $desc;
  TemplateElement.prototype.get$content = function(receiver) {
    return receiver.content;
  };
  function Text() {
  }
  Text.builtin$cls = "Text";
  if (!"name" in Text)
    Text.name = "Text";
  $desc = $collectedClasses.Text;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Text.prototype = $desc;
  function TextAreaElement() {
  }
  TextAreaElement.builtin$cls = "TextAreaElement";
  if (!"name" in TextAreaElement)
    TextAreaElement.name = "TextAreaElement";
  $desc = $collectedClasses.TextAreaElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextAreaElement.prototype = $desc;
  TextAreaElement.prototype.get$form = function(receiver) {
    return receiver.form;
  };
  TextAreaElement.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  TextAreaElement.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  TextAreaElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  TextAreaElement.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  TextAreaElement.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function TextEvent() {
  }
  TextEvent.builtin$cls = "TextEvent";
  if (!"name" in TextEvent)
    TextEvent.name = "TextEvent";
  $desc = $collectedClasses.TextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextEvent.prototype = $desc;
  function TextTrack() {
  }
  TextTrack.builtin$cls = "TextTrack";
  if (!"name" in TextTrack)
    TextTrack.name = "TextTrack";
  $desc = $collectedClasses.TextTrack;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextTrack.prototype = $desc;
  TextTrack.prototype.get$id = function(receiver) {
    return receiver.id;
  };
  TextTrack.prototype.get$kind = function(receiver) {
    return receiver.kind;
  };
  function TitleElement() {
  }
  TitleElement.builtin$cls = "TitleElement";
  if (!"name" in TitleElement)
    TitleElement.name = "TitleElement";
  $desc = $collectedClasses.TitleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement.prototype = $desc;
  function TouchEvent() {
  }
  TouchEvent.builtin$cls = "TouchEvent";
  if (!"name" in TouchEvent)
    TouchEvent.name = "TouchEvent";
  $desc = $collectedClasses.TouchEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TouchEvent.prototype = $desc;
  TouchEvent.prototype.get$ctrlKey = function(receiver) {
    return receiver.ctrlKey;
  };
  function TrackElement() {
  }
  TrackElement.builtin$cls = "TrackElement";
  if (!"name" in TrackElement)
    TrackElement.name = "TrackElement";
  $desc = $collectedClasses.TrackElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackElement.prototype = $desc;
  TrackElement.prototype.get$kind = function(receiver) {
    return receiver.kind;
  };
  function TrackEvent() {
  }
  TrackEvent.builtin$cls = "TrackEvent";
  if (!"name" in TrackEvent)
    TrackEvent.name = "TrackEvent";
  $desc = $collectedClasses.TrackEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TrackEvent.prototype = $desc;
  function TransitionEvent() {
  }
  TransitionEvent.builtin$cls = "TransitionEvent";
  if (!"name" in TransitionEvent)
    TransitionEvent.name = "TransitionEvent";
  $desc = $collectedClasses.TransitionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TransitionEvent.prototype = $desc;
  function UIEvent() {
  }
  UIEvent.builtin$cls = "UIEvent";
  if (!"name" in UIEvent)
    UIEvent.name = "UIEvent";
  $desc = $collectedClasses.UIEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UIEvent.prototype = $desc;
  function UListElement() {
  }
  UListElement.builtin$cls = "UListElement";
  if (!"name" in UListElement)
    UListElement.name = "UListElement";
  $desc = $collectedClasses.UListElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UListElement.prototype = $desc;
  function UnknownElement() {
  }
  UnknownElement.builtin$cls = "UnknownElement";
  if (!"name" in UnknownElement)
    UnknownElement.name = "UnknownElement";
  $desc = $collectedClasses.UnknownElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownElement.prototype = $desc;
  function VideoElement() {
  }
  VideoElement.builtin$cls = "VideoElement";
  if (!"name" in VideoElement)
    VideoElement.name = "VideoElement";
  $desc = $collectedClasses.VideoElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VideoElement.prototype = $desc;
  function WheelEvent() {
  }
  WheelEvent.builtin$cls = "WheelEvent";
  if (!"name" in WheelEvent)
    WheelEvent.name = "WheelEvent";
  $desc = $collectedClasses.WheelEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WheelEvent.prototype = $desc;
  function Window() {
  }
  Window.builtin$cls = "Window";
  if (!"name" in Window)
    Window.name = "Window";
  $desc = $collectedClasses.Window;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window.prototype = $desc;
  Window.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  Window.prototype.set$name = function(receiver, v) {
    return receiver.name = v;
  };
  Window.prototype.get$status = function(receiver) {
    return receiver.status;
  };
  function XmlDocument() {
  }
  XmlDocument.builtin$cls = "XmlDocument";
  if (!"name" in XmlDocument)
    XmlDocument.name = "XmlDocument";
  $desc = $collectedClasses.XmlDocument;
  if ($desc instanceof Array)
    $desc = $desc[1];
  XmlDocument.prototype = $desc;
  function _Attr() {
  }
  _Attr.builtin$cls = "_Attr";
  if (!"name" in _Attr)
    _Attr.name = "_Attr";
  $desc = $collectedClasses._Attr;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Attr.prototype = $desc;
  _Attr.prototype.get$name = function(receiver) {
    return receiver.name;
  };
  _Attr.prototype.get$value = function(receiver) {
    return receiver.value;
  };
  _Attr.prototype.set$value = function(receiver, v) {
    return receiver.value = v;
  };
  function _ClientRect() {
  }
  _ClientRect.builtin$cls = "_ClientRect";
  if (!"name" in _ClientRect)
    _ClientRect.name = "_ClientRect";
  $desc = $collectedClasses._ClientRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ClientRect.prototype = $desc;
  _ClientRect.prototype.get$bottom = function(receiver) {
    return receiver.bottom;
  };
  _ClientRect.prototype.get$height = function(receiver) {
    return receiver.height;
  };
  _ClientRect.prototype.get$left = function(receiver) {
    return receiver.left;
  };
  _ClientRect.prototype.get$right = function(receiver) {
    return receiver.right;
  };
  _ClientRect.prototype.get$top = function(receiver) {
    return receiver.top;
  };
  _ClientRect.prototype.get$width = function(receiver) {
    return receiver.width;
  };
  function _DocumentType() {
  }
  _DocumentType.builtin$cls = "_DocumentType";
  if (!"name" in _DocumentType)
    _DocumentType.name = "_DocumentType";
  $desc = $collectedClasses._DocumentType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DocumentType.prototype = $desc;
  function _HTMLAppletElement() {
  }
  _HTMLAppletElement.builtin$cls = "_HTMLAppletElement";
  if (!"name" in _HTMLAppletElement)
    _HTMLAppletElement.name = "_HTMLAppletElement";
  $desc = $collectedClasses._HTMLAppletElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLAppletElement.prototype = $desc;
  function _HTMLDirectoryElement() {
  }
  _HTMLDirectoryElement.builtin$cls = "_HTMLDirectoryElement";
  if (!"name" in _HTMLDirectoryElement)
    _HTMLDirectoryElement.name = "_HTMLDirectoryElement";
  $desc = $collectedClasses._HTMLDirectoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLDirectoryElement.prototype = $desc;
  function _HTMLFontElement() {
  }
  _HTMLFontElement.builtin$cls = "_HTMLFontElement";
  if (!"name" in _HTMLFontElement)
    _HTMLFontElement.name = "_HTMLFontElement";
  $desc = $collectedClasses._HTMLFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFontElement.prototype = $desc;
  function _HTMLFrameElement() {
  }
  _HTMLFrameElement.builtin$cls = "_HTMLFrameElement";
  if (!"name" in _HTMLFrameElement)
    _HTMLFrameElement.name = "_HTMLFrameElement";
  $desc = $collectedClasses._HTMLFrameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameElement.prototype = $desc;
  function _HTMLFrameSetElement() {
  }
  _HTMLFrameSetElement.builtin$cls = "_HTMLFrameSetElement";
  if (!"name" in _HTMLFrameSetElement)
    _HTMLFrameSetElement.name = "_HTMLFrameSetElement";
  $desc = $collectedClasses._HTMLFrameSetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLFrameSetElement.prototype = $desc;
  function _HTMLMarqueeElement() {
  }
  _HTMLMarqueeElement.builtin$cls = "_HTMLMarqueeElement";
  if (!"name" in _HTMLMarqueeElement)
    _HTMLMarqueeElement.name = "_HTMLMarqueeElement";
  $desc = $collectedClasses._HTMLMarqueeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HTMLMarqueeElement.prototype = $desc;
  function _MutationEvent() {
  }
  _MutationEvent.builtin$cls = "_MutationEvent";
  if (!"name" in _MutationEvent)
    _MutationEvent.name = "_MutationEvent";
  $desc = $collectedClasses._MutationEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MutationEvent.prototype = $desc;
  function _NamedNodeMap() {
  }
  _NamedNodeMap.builtin$cls = "_NamedNodeMap";
  if (!"name" in _NamedNodeMap)
    _NamedNodeMap.name = "_NamedNodeMap";
  $desc = $collectedClasses._NamedNodeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NamedNodeMap.prototype = $desc;
  function _Notation() {
  }
  _Notation.builtin$cls = "_Notation";
  if (!"name" in _Notation)
    _Notation.name = "_Notation";
  $desc = $collectedClasses._Notation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Notation.prototype = $desc;
  function _SpeechInputResultList() {
  }
  _SpeechInputResultList.builtin$cls = "_SpeechInputResultList";
  if (!"name" in _SpeechInputResultList)
    _SpeechInputResultList.name = "_SpeechInputResultList";
  $desc = $collectedClasses._SpeechInputResultList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SpeechInputResultList.prototype = $desc;
  function _SpeechRecognitionResultList() {
  }
  _SpeechRecognitionResultList.builtin$cls = "_SpeechRecognitionResultList";
  if (!"name" in _SpeechRecognitionResultList)
    _SpeechRecognitionResultList.name = "_SpeechRecognitionResultList";
  $desc = $collectedClasses._SpeechRecognitionResultList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SpeechRecognitionResultList.prototype = $desc;
  function _XMLHttpRequestProgressEvent() {
  }
  _XMLHttpRequestProgressEvent.builtin$cls = "_XMLHttpRequestProgressEvent";
  if (!"name" in _XMLHttpRequestProgressEvent)
    _XMLHttpRequestProgressEvent.name = "_XMLHttpRequestProgressEvent";
  $desc = $collectedClasses._XMLHttpRequestProgressEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _XMLHttpRequestProgressEvent.prototype = $desc;
  function KeyRange() {
  }
  KeyRange.builtin$cls = "KeyRange";
  if (!"name" in KeyRange)
    KeyRange.name = "KeyRange";
  $desc = $collectedClasses.KeyRange;
  if ($desc instanceof Array)
    $desc = $desc[1];
  KeyRange.prototype = $desc;
  KeyRange.prototype.get$lower = function(receiver) {
    return receiver.lower;
  };
  function VersionChangeEvent() {
  }
  VersionChangeEvent.builtin$cls = "VersionChangeEvent";
  if (!"name" in VersionChangeEvent)
    VersionChangeEvent.name = "VersionChangeEvent";
  $desc = $collectedClasses.VersionChangeEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VersionChangeEvent.prototype = $desc;
  function AElement() {
  }
  AElement.builtin$cls = "AElement";
  if (!"name" in AElement)
    AElement.name = "AElement";
  $desc = $collectedClasses.AElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AElement.prototype = $desc;
  AElement.prototype.get$target = function(receiver) {
    return receiver.target;
  };
  AElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function AltGlyphElement() {
  }
  AltGlyphElement.builtin$cls = "AltGlyphElement";
  if (!"name" in AltGlyphElement)
    AltGlyphElement.name = "AltGlyphElement";
  $desc = $collectedClasses.AltGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AltGlyphElement.prototype = $desc;
  AltGlyphElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function AnimateElement() {
  }
  AnimateElement.builtin$cls = "AnimateElement";
  if (!"name" in AnimateElement)
    AnimateElement.name = "AnimateElement";
  $desc = $collectedClasses.AnimateElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateElement.prototype = $desc;
  function AnimateMotionElement() {
  }
  AnimateMotionElement.builtin$cls = "AnimateMotionElement";
  if (!"name" in AnimateMotionElement)
    AnimateMotionElement.name = "AnimateMotionElement";
  $desc = $collectedClasses.AnimateMotionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateMotionElement.prototype = $desc;
  function AnimateTransformElement() {
  }
  AnimateTransformElement.builtin$cls = "AnimateTransformElement";
  if (!"name" in AnimateTransformElement)
    AnimateTransformElement.name = "AnimateTransformElement";
  $desc = $collectedClasses.AnimateTransformElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimateTransformElement.prototype = $desc;
  function AnimatedEnumeration() {
  }
  AnimatedEnumeration.builtin$cls = "AnimatedEnumeration";
  if (!"name" in AnimatedEnumeration)
    AnimatedEnumeration.name = "AnimatedEnumeration";
  $desc = $collectedClasses.AnimatedEnumeration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedEnumeration.prototype = $desc;
  function AnimatedLength() {
  }
  AnimatedLength.builtin$cls = "AnimatedLength";
  if (!"name" in AnimatedLength)
    AnimatedLength.name = "AnimatedLength";
  $desc = $collectedClasses.AnimatedLength;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLength.prototype = $desc;
  function AnimatedLengthList() {
  }
  AnimatedLengthList.builtin$cls = "AnimatedLengthList";
  if (!"name" in AnimatedLengthList)
    AnimatedLengthList.name = "AnimatedLengthList";
  $desc = $collectedClasses.AnimatedLengthList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedLengthList.prototype = $desc;
  function AnimatedNumber() {
  }
  AnimatedNumber.builtin$cls = "AnimatedNumber";
  if (!"name" in AnimatedNumber)
    AnimatedNumber.name = "AnimatedNumber";
  $desc = $collectedClasses.AnimatedNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumber.prototype = $desc;
  function AnimatedNumberList() {
  }
  AnimatedNumberList.builtin$cls = "AnimatedNumberList";
  if (!"name" in AnimatedNumberList)
    AnimatedNumberList.name = "AnimatedNumberList";
  $desc = $collectedClasses.AnimatedNumberList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedNumberList.prototype = $desc;
  function AnimatedString() {
  }
  AnimatedString.builtin$cls = "AnimatedString";
  if (!"name" in AnimatedString)
    AnimatedString.name = "AnimatedString";
  $desc = $collectedClasses.AnimatedString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimatedString.prototype = $desc;
  function AnimationElement() {
  }
  AnimationElement.builtin$cls = "AnimationElement";
  if (!"name" in AnimationElement)
    AnimationElement.name = "AnimationElement";
  $desc = $collectedClasses.AnimationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnimationElement.prototype = $desc;
  function CircleElement() {
  }
  CircleElement.builtin$cls = "CircleElement";
  if (!"name" in CircleElement)
    CircleElement.name = "CircleElement";
  $desc = $collectedClasses.CircleElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CircleElement.prototype = $desc;
  function ClipPathElement() {
  }
  ClipPathElement.builtin$cls = "ClipPathElement";
  if (!"name" in ClipPathElement)
    ClipPathElement.name = "ClipPathElement";
  $desc = $collectedClasses.ClipPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClipPathElement.prototype = $desc;
  function DefsElement() {
  }
  DefsElement.builtin$cls = "DefsElement";
  if (!"name" in DefsElement)
    DefsElement.name = "DefsElement";
  $desc = $collectedClasses.DefsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefsElement.prototype = $desc;
  function DescElement() {
  }
  DescElement.builtin$cls = "DescElement";
  if (!"name" in DescElement)
    DescElement.name = "DescElement";
  $desc = $collectedClasses.DescElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DescElement.prototype = $desc;
  function DiscardElement() {
  }
  DiscardElement.builtin$cls = "DiscardElement";
  if (!"name" in DiscardElement)
    DiscardElement.name = "DiscardElement";
  $desc = $collectedClasses.DiscardElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DiscardElement.prototype = $desc;
  function EllipseElement() {
  }
  EllipseElement.builtin$cls = "EllipseElement";
  if (!"name" in EllipseElement)
    EllipseElement.name = "EllipseElement";
  $desc = $collectedClasses.EllipseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EllipseElement.prototype = $desc;
  function FEBlendElement() {
  }
  FEBlendElement.builtin$cls = "FEBlendElement";
  if (!"name" in FEBlendElement)
    FEBlendElement.name = "FEBlendElement";
  $desc = $collectedClasses.FEBlendElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEBlendElement.prototype = $desc;
  function FEColorMatrixElement() {
  }
  FEColorMatrixElement.builtin$cls = "FEColorMatrixElement";
  if (!"name" in FEColorMatrixElement)
    FEColorMatrixElement.name = "FEColorMatrixElement";
  $desc = $collectedClasses.FEColorMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEColorMatrixElement.prototype = $desc;
  FEColorMatrixElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  FEColorMatrixElement.prototype.get$values = function(receiver) {
    return receiver.values;
  };
  function FEComponentTransferElement() {
  }
  FEComponentTransferElement.builtin$cls = "FEComponentTransferElement";
  if (!"name" in FEComponentTransferElement)
    FEComponentTransferElement.name = "FEComponentTransferElement";
  $desc = $collectedClasses.FEComponentTransferElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEComponentTransferElement.prototype = $desc;
  function FECompositeElement() {
  }
  FECompositeElement.builtin$cls = "FECompositeElement";
  if (!"name" in FECompositeElement)
    FECompositeElement.name = "FECompositeElement";
  $desc = $collectedClasses.FECompositeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FECompositeElement.prototype = $desc;
  FECompositeElement.prototype.get$operator = function(receiver) {
    return receiver.operator;
  };
  function FEConvolveMatrixElement() {
  }
  FEConvolveMatrixElement.builtin$cls = "FEConvolveMatrixElement";
  if (!"name" in FEConvolveMatrixElement)
    FEConvolveMatrixElement.name = "FEConvolveMatrixElement";
  $desc = $collectedClasses.FEConvolveMatrixElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEConvolveMatrixElement.prototype = $desc;
  function FEDiffuseLightingElement() {
  }
  FEDiffuseLightingElement.builtin$cls = "FEDiffuseLightingElement";
  if (!"name" in FEDiffuseLightingElement)
    FEDiffuseLightingElement.name = "FEDiffuseLightingElement";
  $desc = $collectedClasses.FEDiffuseLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDiffuseLightingElement.prototype = $desc;
  function FEDisplacementMapElement() {
  }
  FEDisplacementMapElement.builtin$cls = "FEDisplacementMapElement";
  if (!"name" in FEDisplacementMapElement)
    FEDisplacementMapElement.name = "FEDisplacementMapElement";
  $desc = $collectedClasses.FEDisplacementMapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDisplacementMapElement.prototype = $desc;
  function FEDistantLightElement() {
  }
  FEDistantLightElement.builtin$cls = "FEDistantLightElement";
  if (!"name" in FEDistantLightElement)
    FEDistantLightElement.name = "FEDistantLightElement";
  $desc = $collectedClasses.FEDistantLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEDistantLightElement.prototype = $desc;
  function FEFloodElement() {
  }
  FEFloodElement.builtin$cls = "FEFloodElement";
  if (!"name" in FEFloodElement)
    FEFloodElement.name = "FEFloodElement";
  $desc = $collectedClasses.FEFloodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFloodElement.prototype = $desc;
  function FEFuncAElement() {
  }
  FEFuncAElement.builtin$cls = "FEFuncAElement";
  if (!"name" in FEFuncAElement)
    FEFuncAElement.name = "FEFuncAElement";
  $desc = $collectedClasses.FEFuncAElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncAElement.prototype = $desc;
  function FEFuncBElement() {
  }
  FEFuncBElement.builtin$cls = "FEFuncBElement";
  if (!"name" in FEFuncBElement)
    FEFuncBElement.name = "FEFuncBElement";
  $desc = $collectedClasses.FEFuncBElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncBElement.prototype = $desc;
  function FEFuncGElement() {
  }
  FEFuncGElement.builtin$cls = "FEFuncGElement";
  if (!"name" in FEFuncGElement)
    FEFuncGElement.name = "FEFuncGElement";
  $desc = $collectedClasses.FEFuncGElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncGElement.prototype = $desc;
  function FEFuncRElement() {
  }
  FEFuncRElement.builtin$cls = "FEFuncRElement";
  if (!"name" in FEFuncRElement)
    FEFuncRElement.name = "FEFuncRElement";
  $desc = $collectedClasses.FEFuncRElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEFuncRElement.prototype = $desc;
  function FEGaussianBlurElement() {
  }
  FEGaussianBlurElement.builtin$cls = "FEGaussianBlurElement";
  if (!"name" in FEGaussianBlurElement)
    FEGaussianBlurElement.name = "FEGaussianBlurElement";
  $desc = $collectedClasses.FEGaussianBlurElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEGaussianBlurElement.prototype = $desc;
  function FEImageElement() {
  }
  FEImageElement.builtin$cls = "FEImageElement";
  if (!"name" in FEImageElement)
    FEImageElement.name = "FEImageElement";
  $desc = $collectedClasses.FEImageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEImageElement.prototype = $desc;
  FEImageElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function FEMergeElement() {
  }
  FEMergeElement.builtin$cls = "FEMergeElement";
  if (!"name" in FEMergeElement)
    FEMergeElement.name = "FEMergeElement";
  $desc = $collectedClasses.FEMergeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeElement.prototype = $desc;
  function FEMergeNodeElement() {
  }
  FEMergeNodeElement.builtin$cls = "FEMergeNodeElement";
  if (!"name" in FEMergeNodeElement)
    FEMergeNodeElement.name = "FEMergeNodeElement";
  $desc = $collectedClasses.FEMergeNodeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMergeNodeElement.prototype = $desc;
  function FEMorphologyElement() {
  }
  FEMorphologyElement.builtin$cls = "FEMorphologyElement";
  if (!"name" in FEMorphologyElement)
    FEMorphologyElement.name = "FEMorphologyElement";
  $desc = $collectedClasses.FEMorphologyElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEMorphologyElement.prototype = $desc;
  FEMorphologyElement.prototype.get$operator = function(receiver) {
    return receiver.operator;
  };
  function FEOffsetElement() {
  }
  FEOffsetElement.builtin$cls = "FEOffsetElement";
  if (!"name" in FEOffsetElement)
    FEOffsetElement.name = "FEOffsetElement";
  $desc = $collectedClasses.FEOffsetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEOffsetElement.prototype = $desc;
  function FEPointLightElement() {
  }
  FEPointLightElement.builtin$cls = "FEPointLightElement";
  if (!"name" in FEPointLightElement)
    FEPointLightElement.name = "FEPointLightElement";
  $desc = $collectedClasses.FEPointLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FEPointLightElement.prototype = $desc;
  function FESpecularLightingElement() {
  }
  FESpecularLightingElement.builtin$cls = "FESpecularLightingElement";
  if (!"name" in FESpecularLightingElement)
    FESpecularLightingElement.name = "FESpecularLightingElement";
  $desc = $collectedClasses.FESpecularLightingElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpecularLightingElement.prototype = $desc;
  function FESpotLightElement() {
  }
  FESpotLightElement.builtin$cls = "FESpotLightElement";
  if (!"name" in FESpotLightElement)
    FESpotLightElement.name = "FESpotLightElement";
  $desc = $collectedClasses.FESpotLightElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FESpotLightElement.prototype = $desc;
  function FETileElement() {
  }
  FETileElement.builtin$cls = "FETileElement";
  if (!"name" in FETileElement)
    FETileElement.name = "FETileElement";
  $desc = $collectedClasses.FETileElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETileElement.prototype = $desc;
  function FETurbulenceElement() {
  }
  FETurbulenceElement.builtin$cls = "FETurbulenceElement";
  if (!"name" in FETurbulenceElement)
    FETurbulenceElement.name = "FETurbulenceElement";
  $desc = $collectedClasses.FETurbulenceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FETurbulenceElement.prototype = $desc;
  FETurbulenceElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  function FilterElement() {
  }
  FilterElement.builtin$cls = "FilterElement";
  if (!"name" in FilterElement)
    FilterElement.name = "FilterElement";
  $desc = $collectedClasses.FilterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilterElement.prototype = $desc;
  FilterElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function ForeignObjectElement() {
  }
  ForeignObjectElement.builtin$cls = "ForeignObjectElement";
  if (!"name" in ForeignObjectElement)
    ForeignObjectElement.name = "ForeignObjectElement";
  $desc = $collectedClasses.ForeignObjectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ForeignObjectElement.prototype = $desc;
  function GElement() {
  }
  GElement.builtin$cls = "GElement";
  if (!"name" in GElement)
    GElement.name = "GElement";
  $desc = $collectedClasses.GElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GElement.prototype = $desc;
  function GeometryElement() {
  }
  GeometryElement.builtin$cls = "GeometryElement";
  if (!"name" in GeometryElement)
    GeometryElement.name = "GeometryElement";
  $desc = $collectedClasses.GeometryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeometryElement.prototype = $desc;
  function GraphicsElement() {
  }
  GraphicsElement.builtin$cls = "GraphicsElement";
  if (!"name" in GraphicsElement)
    GraphicsElement.name = "GraphicsElement";
  $desc = $collectedClasses.GraphicsElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GraphicsElement.prototype = $desc;
  function ImageElement0() {
  }
  ImageElement0.builtin$cls = "ImageElement0";
  if (!"name" in ImageElement0)
    ImageElement0.name = "ImageElement0";
  $desc = $collectedClasses.ImageElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImageElement0.prototype = $desc;
  ImageElement0.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function LineElement() {
  }
  LineElement.builtin$cls = "LineElement";
  if (!"name" in LineElement)
    LineElement.name = "LineElement";
  $desc = $collectedClasses.LineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LineElement.prototype = $desc;
  function LinearGradientElement() {
  }
  LinearGradientElement.builtin$cls = "LinearGradientElement";
  if (!"name" in LinearGradientElement)
    LinearGradientElement.name = "LinearGradientElement";
  $desc = $collectedClasses.LinearGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinearGradientElement.prototype = $desc;
  function MarkerElement() {
  }
  MarkerElement.builtin$cls = "MarkerElement";
  if (!"name" in MarkerElement)
    MarkerElement.name = "MarkerElement";
  $desc = $collectedClasses.MarkerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MarkerElement.prototype = $desc;
  function MaskElement() {
  }
  MaskElement.builtin$cls = "MaskElement";
  if (!"name" in MaskElement)
    MaskElement.name = "MaskElement";
  $desc = $collectedClasses.MaskElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MaskElement.prototype = $desc;
  function MetadataElement() {
  }
  MetadataElement.builtin$cls = "MetadataElement";
  if (!"name" in MetadataElement)
    MetadataElement.name = "MetadataElement";
  $desc = $collectedClasses.MetadataElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MetadataElement.prototype = $desc;
  function PathElement() {
  }
  PathElement.builtin$cls = "PathElement";
  if (!"name" in PathElement)
    PathElement.name = "PathElement";
  $desc = $collectedClasses.PathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathElement.prototype = $desc;
  function PatternElement() {
  }
  PatternElement.builtin$cls = "PatternElement";
  if (!"name" in PatternElement)
    PatternElement.name = "PatternElement";
  $desc = $collectedClasses.PatternElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PatternElement.prototype = $desc;
  PatternElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function PolygonElement() {
  }
  PolygonElement.builtin$cls = "PolygonElement";
  if (!"name" in PolygonElement)
    PolygonElement.name = "PolygonElement";
  $desc = $collectedClasses.PolygonElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolygonElement.prototype = $desc;
  function PolylineElement() {
  }
  PolylineElement.builtin$cls = "PolylineElement";
  if (!"name" in PolylineElement)
    PolylineElement.name = "PolylineElement";
  $desc = $collectedClasses.PolylineElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolylineElement.prototype = $desc;
  function RadialGradientElement() {
  }
  RadialGradientElement.builtin$cls = "RadialGradientElement";
  if (!"name" in RadialGradientElement)
    RadialGradientElement.name = "RadialGradientElement";
  $desc = $collectedClasses.RadialGradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RadialGradientElement.prototype = $desc;
  function RectElement() {
  }
  RectElement.builtin$cls = "RectElement";
  if (!"name" in RectElement)
    RectElement.name = "RectElement";
  $desc = $collectedClasses.RectElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RectElement.prototype = $desc;
  function ScriptElement() {
  }
  ScriptElement.builtin$cls = "ScriptElement";
  if (!"name" in ScriptElement)
    ScriptElement.name = "ScriptElement";
  $desc = $collectedClasses.ScriptElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ScriptElement.prototype = $desc;
  ScriptElement.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  ScriptElement.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  ScriptElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function SetElement() {
  }
  SetElement.builtin$cls = "SetElement";
  if (!"name" in SetElement)
    SetElement.name = "SetElement";
  $desc = $collectedClasses.SetElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SetElement.prototype = $desc;
  function StopElement() {
  }
  StopElement.builtin$cls = "StopElement";
  if (!"name" in StopElement)
    StopElement.name = "StopElement";
  $desc = $collectedClasses.StopElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StopElement.prototype = $desc;
  function StyleElement0() {
  }
  StyleElement0.builtin$cls = "StyleElement0";
  if (!"name" in StyleElement0)
    StyleElement0.name = "StyleElement0";
  $desc = $collectedClasses.StyleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StyleElement0.prototype = $desc;
  StyleElement0.prototype.get$type = function(receiver) {
    return receiver.type;
  };
  StyleElement0.prototype.set$type = function(receiver, v) {
    return receiver.type = v;
  };
  function SvgElement() {
  }
  SvgElement.builtin$cls = "SvgElement";
  if (!"name" in SvgElement)
    SvgElement.name = "SvgElement";
  $desc = $collectedClasses.SvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgElement.prototype = $desc;
  function SvgSvgElement() {
  }
  SvgSvgElement.builtin$cls = "SvgSvgElement";
  if (!"name" in SvgSvgElement)
    SvgSvgElement.name = "SvgSvgElement";
  $desc = $collectedClasses.SvgSvgElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SvgSvgElement.prototype = $desc;
  function SwitchElement() {
  }
  SwitchElement.builtin$cls = "SwitchElement";
  if (!"name" in SwitchElement)
    SwitchElement.name = "SwitchElement";
  $desc = $collectedClasses.SwitchElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SwitchElement.prototype = $desc;
  function SymbolElement() {
  }
  SymbolElement.builtin$cls = "SymbolElement";
  if (!"name" in SymbolElement)
    SymbolElement.name = "SymbolElement";
  $desc = $collectedClasses.SymbolElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SymbolElement.prototype = $desc;
  function TSpanElement() {
  }
  TSpanElement.builtin$cls = "TSpanElement";
  if (!"name" in TSpanElement)
    TSpanElement.name = "TSpanElement";
  $desc = $collectedClasses.TSpanElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TSpanElement.prototype = $desc;
  function TextContentElement() {
  }
  TextContentElement.builtin$cls = "TextContentElement";
  if (!"name" in TextContentElement)
    TextContentElement.name = "TextContentElement";
  $desc = $collectedClasses.TextContentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextContentElement.prototype = $desc;
  function TextElement() {
  }
  TextElement.builtin$cls = "TextElement";
  if (!"name" in TextElement)
    TextElement.name = "TextElement";
  $desc = $collectedClasses.TextElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextElement.prototype = $desc;
  function TextPathElement() {
  }
  TextPathElement.builtin$cls = "TextPathElement";
  if (!"name" in TextPathElement)
    TextPathElement.name = "TextPathElement";
  $desc = $collectedClasses.TextPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPathElement.prototype = $desc;
  TextPathElement.prototype.get$method = function(receiver) {
    return receiver.method;
  };
  TextPathElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function TextPositioningElement() {
  }
  TextPositioningElement.builtin$cls = "TextPositioningElement";
  if (!"name" in TextPositioningElement)
    TextPositioningElement.name = "TextPositioningElement";
  $desc = $collectedClasses.TextPositioningElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TextPositioningElement.prototype = $desc;
  function TitleElement0() {
  }
  TitleElement0.builtin$cls = "TitleElement0";
  if (!"name" in TitleElement0)
    TitleElement0.name = "TitleElement0";
  $desc = $collectedClasses.TitleElement0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TitleElement0.prototype = $desc;
  function UseElement() {
  }
  UseElement.builtin$cls = "UseElement";
  if (!"name" in UseElement)
    UseElement.name = "UseElement";
  $desc = $collectedClasses.UseElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UseElement.prototype = $desc;
  UseElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function ViewElement() {
  }
  ViewElement.builtin$cls = "ViewElement";
  if (!"name" in ViewElement)
    ViewElement.name = "ViewElement";
  $desc = $collectedClasses.ViewElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ViewElement.prototype = $desc;
  function ZoomEvent() {
  }
  ZoomEvent.builtin$cls = "ZoomEvent";
  if (!"name" in ZoomEvent)
    ZoomEvent.name = "ZoomEvent";
  $desc = $collectedClasses.ZoomEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ZoomEvent.prototype = $desc;
  function _GradientElement() {
  }
  _GradientElement.builtin$cls = "_GradientElement";
  if (!"name" in _GradientElement)
    _GradientElement.name = "_GradientElement";
  $desc = $collectedClasses._GradientElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GradientElement.prototype = $desc;
  _GradientElement.prototype.get$href = function(receiver) {
    return receiver.href;
  };
  function _SVGAltGlyphDefElement() {
  }
  _SVGAltGlyphDefElement.builtin$cls = "_SVGAltGlyphDefElement";
  if (!"name" in _SVGAltGlyphDefElement)
    _SVGAltGlyphDefElement.name = "_SVGAltGlyphDefElement";
  $desc = $collectedClasses._SVGAltGlyphDefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphDefElement.prototype = $desc;
  function _SVGAltGlyphItemElement() {
  }
  _SVGAltGlyphItemElement.builtin$cls = "_SVGAltGlyphItemElement";
  if (!"name" in _SVGAltGlyphItemElement)
    _SVGAltGlyphItemElement.name = "_SVGAltGlyphItemElement";
  $desc = $collectedClasses._SVGAltGlyphItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGAltGlyphItemElement.prototype = $desc;
  function _SVGComponentTransferFunctionElement() {
  }
  _SVGComponentTransferFunctionElement.builtin$cls = "_SVGComponentTransferFunctionElement";
  if (!"name" in _SVGComponentTransferFunctionElement)
    _SVGComponentTransferFunctionElement.name = "_SVGComponentTransferFunctionElement";
  $desc = $collectedClasses._SVGComponentTransferFunctionElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGComponentTransferFunctionElement.prototype = $desc;
  function _SVGCursorElement() {
  }
  _SVGCursorElement.builtin$cls = "_SVGCursorElement";
  if (!"name" in _SVGCursorElement)
    _SVGCursorElement.name = "_SVGCursorElement";
  $desc = $collectedClasses._SVGCursorElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGCursorElement.prototype = $desc;
  function _SVGFEDropShadowElement() {
  }
  _SVGFEDropShadowElement.builtin$cls = "_SVGFEDropShadowElement";
  if (!"name" in _SVGFEDropShadowElement)
    _SVGFEDropShadowElement.name = "_SVGFEDropShadowElement";
  $desc = $collectedClasses._SVGFEDropShadowElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFEDropShadowElement.prototype = $desc;
  function _SVGFontElement() {
  }
  _SVGFontElement.builtin$cls = "_SVGFontElement";
  if (!"name" in _SVGFontElement)
    _SVGFontElement.name = "_SVGFontElement";
  $desc = $collectedClasses._SVGFontElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontElement.prototype = $desc;
  function _SVGFontFaceElement() {
  }
  _SVGFontFaceElement.builtin$cls = "_SVGFontFaceElement";
  if (!"name" in _SVGFontFaceElement)
    _SVGFontFaceElement.name = "_SVGFontFaceElement";
  $desc = $collectedClasses._SVGFontFaceElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceElement.prototype = $desc;
  function _SVGFontFaceFormatElement() {
  }
  _SVGFontFaceFormatElement.builtin$cls = "_SVGFontFaceFormatElement";
  if (!"name" in _SVGFontFaceFormatElement)
    _SVGFontFaceFormatElement.name = "_SVGFontFaceFormatElement";
  $desc = $collectedClasses._SVGFontFaceFormatElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceFormatElement.prototype = $desc;
  function _SVGFontFaceNameElement() {
  }
  _SVGFontFaceNameElement.builtin$cls = "_SVGFontFaceNameElement";
  if (!"name" in _SVGFontFaceNameElement)
    _SVGFontFaceNameElement.name = "_SVGFontFaceNameElement";
  $desc = $collectedClasses._SVGFontFaceNameElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceNameElement.prototype = $desc;
  function _SVGFontFaceSrcElement() {
  }
  _SVGFontFaceSrcElement.builtin$cls = "_SVGFontFaceSrcElement";
  if (!"name" in _SVGFontFaceSrcElement)
    _SVGFontFaceSrcElement.name = "_SVGFontFaceSrcElement";
  $desc = $collectedClasses._SVGFontFaceSrcElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceSrcElement.prototype = $desc;
  function _SVGFontFaceUriElement() {
  }
  _SVGFontFaceUriElement.builtin$cls = "_SVGFontFaceUriElement";
  if (!"name" in _SVGFontFaceUriElement)
    _SVGFontFaceUriElement.name = "_SVGFontFaceUriElement";
  $desc = $collectedClasses._SVGFontFaceUriElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGFontFaceUriElement.prototype = $desc;
  function _SVGGlyphElement() {
  }
  _SVGGlyphElement.builtin$cls = "_SVGGlyphElement";
  if (!"name" in _SVGGlyphElement)
    _SVGGlyphElement.name = "_SVGGlyphElement";
  $desc = $collectedClasses._SVGGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphElement.prototype = $desc;
  function _SVGGlyphRefElement() {
  }
  _SVGGlyphRefElement.builtin$cls = "_SVGGlyphRefElement";
  if (!"name" in _SVGGlyphRefElement)
    _SVGGlyphRefElement.name = "_SVGGlyphRefElement";
  $desc = $collectedClasses._SVGGlyphRefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGGlyphRefElement.prototype = $desc;
  function _SVGHKernElement() {
  }
  _SVGHKernElement.builtin$cls = "_SVGHKernElement";
  if (!"name" in _SVGHKernElement)
    _SVGHKernElement.name = "_SVGHKernElement";
  $desc = $collectedClasses._SVGHKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGHKernElement.prototype = $desc;
  function _SVGMPathElement() {
  }
  _SVGMPathElement.builtin$cls = "_SVGMPathElement";
  if (!"name" in _SVGMPathElement)
    _SVGMPathElement.name = "_SVGMPathElement";
  $desc = $collectedClasses._SVGMPathElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMPathElement.prototype = $desc;
  function _SVGMissingGlyphElement() {
  }
  _SVGMissingGlyphElement.builtin$cls = "_SVGMissingGlyphElement";
  if (!"name" in _SVGMissingGlyphElement)
    _SVGMissingGlyphElement.name = "_SVGMissingGlyphElement";
  $desc = $collectedClasses._SVGMissingGlyphElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGMissingGlyphElement.prototype = $desc;
  function _SVGVKernElement() {
  }
  _SVGVKernElement.builtin$cls = "_SVGVKernElement";
  if (!"name" in _SVGVKernElement)
    _SVGVKernElement.name = "_SVGVKernElement";
  $desc = $collectedClasses._SVGVKernElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SVGVKernElement.prototype = $desc;
  function AudioProcessingEvent() {
  }
  AudioProcessingEvent.builtin$cls = "AudioProcessingEvent";
  if (!"name" in AudioProcessingEvent)
    AudioProcessingEvent.name = "AudioProcessingEvent";
  $desc = $collectedClasses.AudioProcessingEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AudioProcessingEvent.prototype = $desc;
  function OfflineAudioCompletionEvent() {
  }
  OfflineAudioCompletionEvent.builtin$cls = "OfflineAudioCompletionEvent";
  if (!"name" in OfflineAudioCompletionEvent)
    OfflineAudioCompletionEvent.name = "OfflineAudioCompletionEvent";
  $desc = $collectedClasses.OfflineAudioCompletionEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OfflineAudioCompletionEvent.prototype = $desc;
  function ContextEvent() {
  }
  ContextEvent.builtin$cls = "ContextEvent";
  if (!"name" in ContextEvent)
    ContextEvent.name = "ContextEvent";
  $desc = $collectedClasses.ContextEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ContextEvent.prototype = $desc;
  function SqlError() {
  }
  SqlError.builtin$cls = "SqlError";
  if (!"name" in SqlError)
    SqlError.name = "SqlError";
  $desc = $collectedClasses.SqlError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SqlError.prototype = $desc;
  function NativeByteBuffer() {
  }
  NativeByteBuffer.builtin$cls = "NativeByteBuffer";
  if (!"name" in NativeByteBuffer)
    NativeByteBuffer.name = "NativeByteBuffer";
  $desc = $collectedClasses.NativeByteBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteBuffer.prototype = $desc;
  function NativeTypedData() {
  }
  NativeTypedData.builtin$cls = "NativeTypedData";
  if (!"name" in NativeTypedData)
    NativeTypedData.name = "NativeTypedData";
  $desc = $collectedClasses.NativeTypedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedData.prototype = $desc;
  function NativeByteData() {
  }
  NativeByteData.builtin$cls = "NativeByteData";
  if (!"name" in NativeByteData)
    NativeByteData.name = "NativeByteData";
  $desc = $collectedClasses.NativeByteData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeByteData.prototype = $desc;
  function NativeFloat32List() {
  }
  NativeFloat32List.builtin$cls = "NativeFloat32List";
  if (!"name" in NativeFloat32List)
    NativeFloat32List.name = "NativeFloat32List";
  $desc = $collectedClasses.NativeFloat32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat32List.prototype = $desc;
  function NativeFloat64List() {
  }
  NativeFloat64List.builtin$cls = "NativeFloat64List";
  if (!"name" in NativeFloat64List)
    NativeFloat64List.name = "NativeFloat64List";
  $desc = $collectedClasses.NativeFloat64List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeFloat64List.prototype = $desc;
  function NativeInt16List() {
  }
  NativeInt16List.builtin$cls = "NativeInt16List";
  if (!"name" in NativeInt16List)
    NativeInt16List.name = "NativeInt16List";
  $desc = $collectedClasses.NativeInt16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt16List.prototype = $desc;
  function NativeInt32List() {
  }
  NativeInt32List.builtin$cls = "NativeInt32List";
  if (!"name" in NativeInt32List)
    NativeInt32List.name = "NativeInt32List";
  $desc = $collectedClasses.NativeInt32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt32List.prototype = $desc;
  function NativeInt8List() {
  }
  NativeInt8List.builtin$cls = "NativeInt8List";
  if (!"name" in NativeInt8List)
    NativeInt8List.name = "NativeInt8List";
  $desc = $collectedClasses.NativeInt8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeInt8List.prototype = $desc;
  function NativeUint16List() {
  }
  NativeUint16List.builtin$cls = "NativeUint16List";
  if (!"name" in NativeUint16List)
    NativeUint16List.name = "NativeUint16List";
  $desc = $collectedClasses.NativeUint16List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint16List.prototype = $desc;
  function NativeUint32List() {
  }
  NativeUint32List.builtin$cls = "NativeUint32List";
  if (!"name" in NativeUint32List)
    NativeUint32List.name = "NativeUint32List";
  $desc = $collectedClasses.NativeUint32List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint32List.prototype = $desc;
  function NativeUint8ClampedList() {
  }
  NativeUint8ClampedList.builtin$cls = "NativeUint8ClampedList";
  if (!"name" in NativeUint8ClampedList)
    NativeUint8ClampedList.name = "NativeUint8ClampedList";
  $desc = $collectedClasses.NativeUint8ClampedList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8ClampedList.prototype = $desc;
  function NativeUint8List() {
  }
  NativeUint8List.builtin$cls = "NativeUint8List";
  if (!"name" in NativeUint8List)
    NativeUint8List.name = "NativeUint8List";
  $desc = $collectedClasses.NativeUint8List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeUint8List.prototype = $desc;
  function JS_CONST(code) {
    this.code = code;
  }
  JS_CONST.builtin$cls = "JS_CONST";
  if (!"name" in JS_CONST)
    JS_CONST.name = "JS_CONST";
  $desc = $collectedClasses.JS_CONST;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JS_CONST.prototype = $desc;
  function Interceptor() {
  }
  Interceptor.builtin$cls = "Interceptor";
  if (!"name" in Interceptor)
    Interceptor.name = "Interceptor";
  $desc = $collectedClasses.Interceptor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor.prototype = $desc;
  function JSBool() {
  }
  JSBool.builtin$cls = "JSBool";
  if (!"name" in JSBool)
    JSBool.name = "JSBool";
  $desc = $collectedClasses.JSBool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSBool.prototype = $desc;
  function JSNull() {
  }
  JSNull.builtin$cls = "JSNull";
  if (!"name" in JSNull)
    JSNull.name = "JSNull";
  $desc = $collectedClasses.JSNull;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNull.prototype = $desc;
  function JavaScriptObject() {
  }
  JavaScriptObject.builtin$cls = "JavaScriptObject";
  if (!"name" in JavaScriptObject)
    JavaScriptObject.name = "JavaScriptObject";
  $desc = $collectedClasses.JavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JavaScriptObject.prototype = $desc;
  function PlainJavaScriptObject() {
  }
  PlainJavaScriptObject.builtin$cls = "PlainJavaScriptObject";
  if (!"name" in PlainJavaScriptObject)
    PlainJavaScriptObject.name = "PlainJavaScriptObject";
  $desc = $collectedClasses.PlainJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PlainJavaScriptObject.prototype = $desc;
  function UnknownJavaScriptObject() {
  }
  UnknownJavaScriptObject.builtin$cls = "UnknownJavaScriptObject";
  if (!"name" in UnknownJavaScriptObject)
    UnknownJavaScriptObject.name = "UnknownJavaScriptObject";
  $desc = $collectedClasses.UnknownJavaScriptObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJavaScriptObject.prototype = $desc;
  function JSArray() {
  }
  JSArray.builtin$cls = "JSArray";
  if (!"name" in JSArray)
    JSArray.name = "JSArray";
  $desc = $collectedClasses.JSArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSArray.prototype = $desc;
  function JSNumber() {
  }
  JSNumber.builtin$cls = "JSNumber";
  if (!"name" in JSNumber)
    JSNumber.name = "JSNumber";
  $desc = $collectedClasses.JSNumber;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSNumber.prototype = $desc;
  function JSInt() {
  }
  JSInt.builtin$cls = "JSInt";
  if (!"name" in JSInt)
    JSInt.name = "JSInt";
  $desc = $collectedClasses.JSInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInt.prototype = $desc;
  function JSDouble() {
  }
  JSDouble.builtin$cls = "JSDouble";
  if (!"name" in JSDouble)
    JSDouble.name = "JSDouble";
  $desc = $collectedClasses.JSDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSDouble.prototype = $desc;
  function JSString() {
  }
  JSString.builtin$cls = "JSString";
  if (!"name" in JSString)
    JSString.name = "JSString";
  $desc = $collectedClasses.JSString;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSString.prototype = $desc;
  function _CodeUnits(__interceptors$_string) {
    this.__interceptors$_string = __interceptors$_string;
  }
  _CodeUnits.builtin$cls = "_CodeUnits";
  if (!"name" in _CodeUnits)
    _CodeUnits.name = "_CodeUnits";
  $desc = $collectedClasses._CodeUnits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CodeUnits.prototype = $desc;
  function startRootIsolate_closure(box_0, entry_1) {
    this.box_0 = box_0;
    this.entry_1 = entry_1;
  }
  startRootIsolate_closure.builtin$cls = "startRootIsolate_closure";
  if (!"name" in startRootIsolate_closure)
    startRootIsolate_closure.name = "startRootIsolate_closure";
  $desc = $collectedClasses.startRootIsolate_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure.prototype = $desc;
  function startRootIsolate_closure0(box_0, entry_2) {
    this.box_0 = box_0;
    this.entry_2 = entry_2;
  }
  startRootIsolate_closure0.builtin$cls = "startRootIsolate_closure0";
  if (!"name" in startRootIsolate_closure0)
    startRootIsolate_closure0.name = "startRootIsolate_closure0";
  $desc = $collectedClasses.startRootIsolate_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  startRootIsolate_closure0.prototype = $desc;
  function _Manager(nextIsolateId, currentManagerId, nextManagerId, currentContext, rootContext, topEventLoop, fromCommandLine, isWorker, supportsWorkers, isolates, mainManager, managers, entry) {
    this.nextIsolateId = nextIsolateId;
    this.currentManagerId = currentManagerId;
    this.nextManagerId = nextManagerId;
    this.currentContext = currentContext;
    this.rootContext = rootContext;
    this.topEventLoop = topEventLoop;
    this.fromCommandLine = fromCommandLine;
    this.isWorker = isWorker;
    this.supportsWorkers = supportsWorkers;
    this.isolates = isolates;
    this.mainManager = mainManager;
    this.managers = managers;
    this.entry = entry;
  }
  _Manager.builtin$cls = "_Manager";
  if (!"name" in _Manager)
    _Manager.name = "_Manager";
  $desc = $collectedClasses._Manager;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Manager.prototype = $desc;
  function _IsolateContext(id, ports, weakPorts, isolateStatics, controlPort, pauseCapability, terminateCapability, isPaused, delayedEvents, pauseTokens, doneHandlers, _scheduledControlEvents, _isExecutingEvent, errorsAreFatal) {
    this.id = id;
    this.ports = ports;
    this.weakPorts = weakPorts;
    this.isolateStatics = isolateStatics;
    this.controlPort = controlPort;
    this.pauseCapability = pauseCapability;
    this.terminateCapability = terminateCapability;
    this.isPaused = isPaused;
    this.delayedEvents = delayedEvents;
    this.pauseTokens = pauseTokens;
    this.doneHandlers = doneHandlers;
    this._scheduledControlEvents = _scheduledControlEvents;
    this._isExecutingEvent = _isExecutingEvent;
    this.errorsAreFatal = errorsAreFatal;
  }
  _IsolateContext.builtin$cls = "_IsolateContext";
  if (!"name" in _IsolateContext)
    _IsolateContext.name = "_IsolateContext";
  $desc = $collectedClasses._IsolateContext;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext.prototype = $desc;
  _IsolateContext.prototype.get$id = function(receiver) {
    return this.id;
  };
  _IsolateContext.prototype.get$isolateStatics = function() {
    return this.isolateStatics;
  };
  _IsolateContext.prototype.get$controlPort = function() {
    return this.controlPort;
  };
  _IsolateContext.prototype.get$isPaused = function() {
    return this.isPaused;
  };
  _IsolateContext.prototype.get$delayedEvents = function() {
    return this.delayedEvents;
  };
  function _IsolateContext_handlePing_respond(responsePort_0) {
    this.responsePort_0 = responsePort_0;
  }
  _IsolateContext_handlePing_respond.builtin$cls = "_IsolateContext_handlePing_respond";
  if (!"name" in _IsolateContext_handlePing_respond)
    _IsolateContext_handlePing_respond.name = "_IsolateContext_handlePing_respond";
  $desc = $collectedClasses._IsolateContext_handlePing_respond;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateContext_handlePing_respond.prototype = $desc;
  function _EventLoop(events, _activeJsAsyncCount) {
    this.events = events;
    this._activeJsAsyncCount = _activeJsAsyncCount;
  }
  _EventLoop.builtin$cls = "_EventLoop";
  if (!"name" in _EventLoop)
    _EventLoop.name = "_EventLoop";
  $desc = $collectedClasses._EventLoop;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop.prototype = $desc;
  function _EventLoop__runHelper_next(this_0) {
    this.this_0 = this_0;
  }
  _EventLoop__runHelper_next.builtin$cls = "_EventLoop__runHelper_next";
  if (!"name" in _EventLoop__runHelper_next)
    _EventLoop__runHelper_next.name = "_EventLoop__runHelper_next";
  $desc = $collectedClasses._EventLoop__runHelper_next;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventLoop__runHelper_next.prototype = $desc;
  function _IsolateEvent(isolate, fn, message) {
    this.isolate = isolate;
    this.fn = fn;
    this.message = message;
  }
  _IsolateEvent.builtin$cls = "_IsolateEvent";
  if (!"name" in _IsolateEvent)
    _IsolateEvent.name = "_IsolateEvent";
  $desc = $collectedClasses._IsolateEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IsolateEvent.prototype = $desc;
  function _MainManagerStub() {
  }
  _MainManagerStub.builtin$cls = "_MainManagerStub";
  if (!"name" in _MainManagerStub)
    _MainManagerStub.name = "_MainManagerStub";
  $desc = $collectedClasses._MainManagerStub;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MainManagerStub.prototype = $desc;
  function IsolateNatives__processWorkerMessage_closure(entryPoint_0, args_1, message_2, isSpawnUri_3, startPaused_4, replyTo_5) {
    this.entryPoint_0 = entryPoint_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
    this.startPaused_4 = startPaused_4;
    this.replyTo_5 = replyTo_5;
  }
  IsolateNatives__processWorkerMessage_closure.builtin$cls = "IsolateNatives__processWorkerMessage_closure";
  if (!"name" in IsolateNatives__processWorkerMessage_closure)
    IsolateNatives__processWorkerMessage_closure.name = "IsolateNatives__processWorkerMessage_closure";
  $desc = $collectedClasses.IsolateNatives__processWorkerMessage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__processWorkerMessage_closure.prototype = $desc;
  function IsolateNatives__startIsolate_runStartFunction(topLevel_0, args_1, message_2, isSpawnUri_3) {
    this.topLevel_0 = topLevel_0;
    this.args_1 = args_1;
    this.message_2 = message_2;
    this.isSpawnUri_3 = isSpawnUri_3;
  }
  IsolateNatives__startIsolate_runStartFunction.builtin$cls = "IsolateNatives__startIsolate_runStartFunction";
  if (!"name" in IsolateNatives__startIsolate_runStartFunction)
    IsolateNatives__startIsolate_runStartFunction.name = "IsolateNatives__startIsolate_runStartFunction";
  $desc = $collectedClasses.IsolateNatives__startIsolate_runStartFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IsolateNatives__startIsolate_runStartFunction.prototype = $desc;
  function _BaseSendPort() {
  }
  _BaseSendPort.builtin$cls = "_BaseSendPort";
  if (!"name" in _BaseSendPort)
    _BaseSendPort.name = "_BaseSendPort";
  $desc = $collectedClasses._BaseSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseSendPort.prototype = $desc;
  function _NativeJsSendPort(_receivePort, _isolateId) {
    this._receivePort = _receivePort;
    this._isolateId = _isolateId;
  }
  _NativeJsSendPort.builtin$cls = "_NativeJsSendPort";
  if (!"name" in _NativeJsSendPort)
    _NativeJsSendPort.name = "_NativeJsSendPort";
  $desc = $collectedClasses._NativeJsSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort.prototype = $desc;
  function _NativeJsSendPort_send_closure(box_0, this_1, shouldSerialize_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.shouldSerialize_2 = shouldSerialize_2;
  }
  _NativeJsSendPort_send_closure.builtin$cls = "_NativeJsSendPort_send_closure";
  if (!"name" in _NativeJsSendPort_send_closure)
    _NativeJsSendPort_send_closure.name = "_NativeJsSendPort_send_closure";
  $desc = $collectedClasses._NativeJsSendPort_send_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _NativeJsSendPort_send_closure.prototype = $desc;
  function _WorkerSendPort(_workerId, _receivePortId, _isolateId) {
    this._workerId = _workerId;
    this._receivePortId = _receivePortId;
    this._isolateId = _isolateId;
  }
  _WorkerSendPort.builtin$cls = "_WorkerSendPort";
  if (!"name" in _WorkerSendPort)
    _WorkerSendPort.name = "_WorkerSendPort";
  $desc = $collectedClasses._WorkerSendPort;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WorkerSendPort.prototype = $desc;
  function RawReceivePortImpl(_id, _handler, __isolate_helper$_isClosed) {
    this._id = _id;
    this._handler = _handler;
    this.__isolate_helper$_isClosed = __isolate_helper$_isClosed;
  }
  RawReceivePortImpl.builtin$cls = "RawReceivePortImpl";
  if (!"name" in RawReceivePortImpl)
    RawReceivePortImpl.name = "RawReceivePortImpl";
  $desc = $collectedClasses.RawReceivePortImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RawReceivePortImpl.prototype = $desc;
  RawReceivePortImpl.prototype.get$_id = function() {
    return this._id;
  };
  RawReceivePortImpl.prototype.get$__isolate_helper$_isClosed = function() {
    return this.__isolate_helper$_isClosed;
  };
  function _JsSerializer(_nextFreeRefId, _visited) {
    this._nextFreeRefId = _nextFreeRefId;
    this._visited = _visited;
  }
  _JsSerializer.builtin$cls = "_JsSerializer";
  if (!"name" in _JsSerializer)
    _JsSerializer.name = "_JsSerializer";
  $desc = $collectedClasses._JsSerializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsSerializer.prototype = $desc;
  function _JsCopier(_visited) {
    this._visited = _visited;
  }
  _JsCopier.builtin$cls = "_JsCopier";
  if (!"name" in _JsCopier)
    _JsCopier.name = "_JsCopier";
  $desc = $collectedClasses._JsCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsCopier.prototype = $desc;
  function _JsDeserializer(_deserialized) {
    this._deserialized = _deserialized;
  }
  _JsDeserializer.builtin$cls = "_JsDeserializer";
  if (!"name" in _JsDeserializer)
    _JsDeserializer.name = "_JsDeserializer";
  $desc = $collectedClasses._JsDeserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsDeserializer.prototype = $desc;
  function _JsVisitedMap(tagged) {
    this.tagged = tagged;
  }
  _JsVisitedMap.builtin$cls = "_JsVisitedMap";
  if (!"name" in _JsVisitedMap)
    _JsVisitedMap.name = "_JsVisitedMap";
  $desc = $collectedClasses._JsVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _JsVisitedMap.prototype = $desc;
  function _MessageTraverserVisitedMap() {
  }
  _MessageTraverserVisitedMap.builtin$cls = "_MessageTraverserVisitedMap";
  if (!"name" in _MessageTraverserVisitedMap)
    _MessageTraverserVisitedMap.name = "_MessageTraverserVisitedMap";
  $desc = $collectedClasses._MessageTraverserVisitedMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverserVisitedMap.prototype = $desc;
  function _MessageTraverser() {
  }
  _MessageTraverser.builtin$cls = "_MessageTraverser";
  if (!"name" in _MessageTraverser)
    _MessageTraverser.name = "_MessageTraverser";
  $desc = $collectedClasses._MessageTraverser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MessageTraverser.prototype = $desc;
  function _Copier() {
  }
  _Copier.builtin$cls = "_Copier";
  if (!"name" in _Copier)
    _Copier.name = "_Copier";
  $desc = $collectedClasses._Copier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier.prototype = $desc;
  function _Copier_visitMap_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  _Copier_visitMap_closure.builtin$cls = "_Copier_visitMap_closure";
  if (!"name" in _Copier_visitMap_closure)
    _Copier_visitMap_closure.name = "_Copier_visitMap_closure";
  $desc = $collectedClasses._Copier_visitMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Copier_visitMap_closure.prototype = $desc;
  function _Serializer() {
  }
  _Serializer.builtin$cls = "_Serializer";
  if (!"name" in _Serializer)
    _Serializer.name = "_Serializer";
  $desc = $collectedClasses._Serializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Serializer.prototype = $desc;
  function _Deserializer() {
  }
  _Deserializer.builtin$cls = "_Deserializer";
  if (!"name" in _Deserializer)
    _Deserializer.name = "_Deserializer";
  $desc = $collectedClasses._Deserializer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Deserializer.prototype = $desc;
  function TimerImpl(_once, _inEventLoop, _handle) {
    this._once = _once;
    this._inEventLoop = _inEventLoop;
    this._handle = _handle;
  }
  TimerImpl.builtin$cls = "TimerImpl";
  if (!"name" in TimerImpl)
    TimerImpl.name = "TimerImpl";
  $desc = $collectedClasses.TimerImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl.prototype = $desc;
  function TimerImpl_internalCallback(this_0, callback_1) {
    this.this_0 = this_0;
    this.callback_1 = callback_1;
  }
  TimerImpl_internalCallback.builtin$cls = "TimerImpl_internalCallback";
  if (!"name" in TimerImpl_internalCallback)
    TimerImpl_internalCallback.name = "TimerImpl_internalCallback";
  $desc = $collectedClasses.TimerImpl_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback.prototype = $desc;
  function TimerImpl_internalCallback0(this_2, callback_3) {
    this.this_2 = this_2;
    this.callback_3 = callback_3;
  }
  TimerImpl_internalCallback0.builtin$cls = "TimerImpl_internalCallback0";
  if (!"name" in TimerImpl_internalCallback0)
    TimerImpl_internalCallback0.name = "TimerImpl_internalCallback0";
  $desc = $collectedClasses.TimerImpl_internalCallback0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TimerImpl_internalCallback0.prototype = $desc;
  function CapabilityImpl(_id) {
    this._id = _id;
  }
  CapabilityImpl.builtin$cls = "CapabilityImpl";
  if (!"name" in CapabilityImpl)
    CapabilityImpl.name = "CapabilityImpl";
  $desc = $collectedClasses.CapabilityImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CapabilityImpl.prototype = $desc;
  CapabilityImpl.prototype.get$_id = function() {
    return this._id;
  };
  function ConstantMap() {
  }
  ConstantMap.builtin$cls = "ConstantMap";
  if (!"name" in ConstantMap)
    ConstantMap.name = "ConstantMap";
  $desc = $collectedClasses.ConstantMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantMap.prototype = $desc;
  function ConstantStringMap(length, _jsObject, _keys) {
    this.length = length;
    this._jsObject = _jsObject;
    this._keys = _keys;
  }
  ConstantStringMap.builtin$cls = "ConstantStringMap";
  if (!"name" in ConstantStringMap)
    ConstantStringMap.name = "ConstantStringMap";
  $desc = $collectedClasses.ConstantStringMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap.prototype = $desc;
  ConstantStringMap.prototype.get$length = function(receiver) {
    return this.length;
  };
  function ConstantStringMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  ConstantStringMap_values_closure.builtin$cls = "ConstantStringMap_values_closure";
  if (!"name" in ConstantStringMap_values_closure)
    ConstantStringMap_values_closure.name = "ConstantStringMap_values_closure";
  $desc = $collectedClasses.ConstantStringMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConstantStringMap_values_closure.prototype = $desc;
  function _ConstantMapKeyIterable(__js_helper$_map) {
    this.__js_helper$_map = __js_helper$_map;
  }
  _ConstantMapKeyIterable.builtin$cls = "_ConstantMapKeyIterable";
  if (!"name" in _ConstantMapKeyIterable)
    _ConstantMapKeyIterable.name = "_ConstantMapKeyIterable";
  $desc = $collectedClasses._ConstantMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ConstantMapKeyIterable.prototype = $desc;
  function JSInvocationMirror(__js_helper$_memberName, _internalName, _kind, _arguments, _namedArgumentNames, _namedIndices) {
    this.__js_helper$_memberName = __js_helper$_memberName;
    this._internalName = _internalName;
    this._kind = _kind;
    this._arguments = _arguments;
    this._namedArgumentNames = _namedArgumentNames;
    this._namedIndices = _namedIndices;
  }
  JSInvocationMirror.builtin$cls = "JSInvocationMirror";
  if (!"name" in JSInvocationMirror)
    JSInvocationMirror.name = "JSInvocationMirror";
  $desc = $collectedClasses.JSInvocationMirror;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSInvocationMirror.prototype = $desc;
  function ReflectionInfo(jsFunction, data, isAccessor, requiredParameterCount, optionalParameterCount, areOptionalParametersNamed, functionType, cachedSortedIndices) {
    this.jsFunction = jsFunction;
    this.data = data;
    this.isAccessor = isAccessor;
    this.requiredParameterCount = requiredParameterCount;
    this.optionalParameterCount = optionalParameterCount;
    this.areOptionalParametersNamed = areOptionalParametersNamed;
    this.functionType = functionType;
    this.cachedSortedIndices = cachedSortedIndices;
  }
  ReflectionInfo.builtin$cls = "ReflectionInfo";
  if (!"name" in ReflectionInfo)
    ReflectionInfo.name = "ReflectionInfo";
  $desc = $collectedClasses.ReflectionInfo;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo.prototype = $desc;
  function ReflectionInfo_sortedIndex_closure(box_0, this_1, positions_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.positions_2 = positions_2;
  }
  ReflectionInfo_sortedIndex_closure.builtin$cls = "ReflectionInfo_sortedIndex_closure";
  if (!"name" in ReflectionInfo_sortedIndex_closure)
    ReflectionInfo_sortedIndex_closure.name = "ReflectionInfo_sortedIndex_closure";
  $desc = $collectedClasses.ReflectionInfo_sortedIndex_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReflectionInfo_sortedIndex_closure.prototype = $desc;
  function Primitives_functionNoSuchMethod_closure(box_0, arguments_1, namedArgumentList_2) {
    this.box_0 = box_0;
    this.arguments_1 = arguments_1;
    this.namedArgumentList_2 = namedArgumentList_2;
  }
  Primitives_functionNoSuchMethod_closure.builtin$cls = "Primitives_functionNoSuchMethod_closure";
  if (!"name" in Primitives_functionNoSuchMethod_closure)
    Primitives_functionNoSuchMethod_closure.name = "Primitives_functionNoSuchMethod_closure";
  $desc = $collectedClasses.Primitives_functionNoSuchMethod_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_functionNoSuchMethod_closure.prototype = $desc;
  function Primitives_applyFunction_closure(box_0, defaultArguments_1) {
    this.box_0 = box_0;
    this.defaultArguments_1 = defaultArguments_1;
  }
  Primitives_applyFunction_closure.builtin$cls = "Primitives_applyFunction_closure";
  if (!"name" in Primitives_applyFunction_closure)
    Primitives_applyFunction_closure.name = "Primitives_applyFunction_closure";
  $desc = $collectedClasses.Primitives_applyFunction_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Primitives_applyFunction_closure.prototype = $desc;
  function TypeErrorDecoder(_pattern, _arguments, _argumentsExpr, _expr, _method, _receiver) {
    this._pattern = _pattern;
    this._arguments = _arguments;
    this._argumentsExpr = _argumentsExpr;
    this._expr = _expr;
    this._method = _method;
    this._receiver = _receiver;
  }
  TypeErrorDecoder.builtin$cls = "TypeErrorDecoder";
  if (!"name" in TypeErrorDecoder)
    TypeErrorDecoder.name = "TypeErrorDecoder";
  $desc = $collectedClasses.TypeErrorDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeErrorDecoder.prototype = $desc;
  function NullError(_message, _method) {
    this._message = _message;
    this._method = _method;
  }
  NullError.builtin$cls = "NullError";
  if (!"name" in NullError)
    NullError.name = "NullError";
  $desc = $collectedClasses.NullError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullError.prototype = $desc;
  function JsNoSuchMethodError(_message, _method, _receiver) {
    this._message = _message;
    this._method = _method;
    this._receiver = _receiver;
  }
  JsNoSuchMethodError.builtin$cls = "JsNoSuchMethodError";
  if (!"name" in JsNoSuchMethodError)
    JsNoSuchMethodError.name = "JsNoSuchMethodError";
  $desc = $collectedClasses.JsNoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsNoSuchMethodError.prototype = $desc;
  function UnknownJsTypeError(_message) {
    this._message = _message;
  }
  UnknownJsTypeError.builtin$cls = "UnknownJsTypeError";
  if (!"name" in UnknownJsTypeError)
    UnknownJsTypeError.name = "UnknownJsTypeError";
  $desc = $collectedClasses.UnknownJsTypeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnknownJsTypeError.prototype = $desc;
  function unwrapException_saveStackTrace(ex_0) {
    this.ex_0 = ex_0;
  }
  unwrapException_saveStackTrace.builtin$cls = "unwrapException_saveStackTrace";
  if (!"name" in unwrapException_saveStackTrace)
    unwrapException_saveStackTrace.name = "unwrapException_saveStackTrace";
  $desc = $collectedClasses.unwrapException_saveStackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  unwrapException_saveStackTrace.prototype = $desc;
  function _StackTrace(_exception, _trace) {
    this._exception = _exception;
    this._trace = _trace;
  }
  _StackTrace.builtin$cls = "_StackTrace";
  if (!"name" in _StackTrace)
    _StackTrace.name = "_StackTrace";
  $desc = $collectedClasses._StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StackTrace.prototype = $desc;
  function invokeClosure_closure(closure_0) {
    this.closure_0 = closure_0;
  }
  invokeClosure_closure.builtin$cls = "invokeClosure_closure";
  if (!"name" in invokeClosure_closure)
    invokeClosure_closure.name = "invokeClosure_closure";
  $desc = $collectedClasses.invokeClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure.prototype = $desc;
  function invokeClosure_closure0(closure_1, arg1_2) {
    this.closure_1 = closure_1;
    this.arg1_2 = arg1_2;
  }
  invokeClosure_closure0.builtin$cls = "invokeClosure_closure0";
  if (!"name" in invokeClosure_closure0)
    invokeClosure_closure0.name = "invokeClosure_closure0";
  $desc = $collectedClasses.invokeClosure_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure0.prototype = $desc;
  function invokeClosure_closure1(closure_3, arg1_4, arg2_5) {
    this.closure_3 = closure_3;
    this.arg1_4 = arg1_4;
    this.arg2_5 = arg2_5;
  }
  invokeClosure_closure1.builtin$cls = "invokeClosure_closure1";
  if (!"name" in invokeClosure_closure1)
    invokeClosure_closure1.name = "invokeClosure_closure1";
  $desc = $collectedClasses.invokeClosure_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure1.prototype = $desc;
  function invokeClosure_closure2(closure_6, arg1_7, arg2_8, arg3_9) {
    this.closure_6 = closure_6;
    this.arg1_7 = arg1_7;
    this.arg2_8 = arg2_8;
    this.arg3_9 = arg3_9;
  }
  invokeClosure_closure2.builtin$cls = "invokeClosure_closure2";
  if (!"name" in invokeClosure_closure2)
    invokeClosure_closure2.name = "invokeClosure_closure2";
  $desc = $collectedClasses.invokeClosure_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure2.prototype = $desc;
  function invokeClosure_closure3(closure_10, arg1_11, arg2_12, arg3_13, arg4_14) {
    this.closure_10 = closure_10;
    this.arg1_11 = arg1_11;
    this.arg2_12 = arg2_12;
    this.arg3_13 = arg3_13;
    this.arg4_14 = arg4_14;
  }
  invokeClosure_closure3.builtin$cls = "invokeClosure_closure3";
  if (!"name" in invokeClosure_closure3)
    invokeClosure_closure3.name = "invokeClosure_closure3";
  $desc = $collectedClasses.invokeClosure_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  invokeClosure_closure3.prototype = $desc;
  function Closure0() {
  }
  Closure0.builtin$cls = "Closure0";
  if (!"name" in Closure0)
    Closure0.name = "Closure0";
  $desc = $collectedClasses.Closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure0.prototype = $desc;
  function TearOffClosure() {
  }
  TearOffClosure.builtin$cls = "TearOffClosure";
  if (!"name" in TearOffClosure)
    TearOffClosure.name = "TearOffClosure";
  $desc = $collectedClasses.TearOffClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TearOffClosure.prototype = $desc;
  function BoundClosure(_self, _target, _receiver, __js_helper$_name) {
    this._self = _self;
    this._target = _target;
    this._receiver = _receiver;
    this.__js_helper$_name = __js_helper$_name;
  }
  BoundClosure.builtin$cls = "BoundClosure";
  if (!"name" in BoundClosure)
    BoundClosure.name = "BoundClosure";
  $desc = $collectedClasses.BoundClosure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BoundClosure.prototype = $desc;
  function CastErrorImplementation(message) {
    this.message = message;
  }
  CastErrorImplementation.builtin$cls = "CastErrorImplementation";
  if (!"name" in CastErrorImplementation)
    CastErrorImplementation.name = "CastErrorImplementation";
  $desc = $collectedClasses.CastErrorImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CastErrorImplementation.prototype = $desc;
  function RuntimeError(message) {
    this.message = message;
  }
  RuntimeError.builtin$cls = "RuntimeError";
  if (!"name" in RuntimeError)
    RuntimeError.name = "RuntimeError";
  $desc = $collectedClasses.RuntimeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeError.prototype = $desc;
  function RuntimeType() {
  }
  RuntimeType.builtin$cls = "RuntimeType";
  if (!"name" in RuntimeType)
    RuntimeType.name = "RuntimeType";
  $desc = $collectedClasses.RuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeType.prototype = $desc;
  function RuntimeFunctionType(returnType, parameterTypes, optionalParameterTypes, namedParameters) {
    this.returnType = returnType;
    this.parameterTypes = parameterTypes;
    this.optionalParameterTypes = optionalParameterTypes;
    this.namedParameters = namedParameters;
  }
  RuntimeFunctionType.builtin$cls = "RuntimeFunctionType";
  if (!"name" in RuntimeFunctionType)
    RuntimeFunctionType.name = "RuntimeFunctionType";
  $desc = $collectedClasses.RuntimeFunctionType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeFunctionType.prototype = $desc;
  RuntimeFunctionType.prototype.get$returnType = function() {
    return this.returnType;
  };
  function DynamicRuntimeType() {
  }
  DynamicRuntimeType.builtin$cls = "DynamicRuntimeType";
  if (!"name" in DynamicRuntimeType)
    DynamicRuntimeType.name = "DynamicRuntimeType";
  $desc = $collectedClasses.DynamicRuntimeType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DynamicRuntimeType.prototype = $desc;
  function RuntimeTypePlain(name) {
    this.name = name;
  }
  RuntimeTypePlain.builtin$cls = "RuntimeTypePlain";
  if (!"name" in RuntimeTypePlain)
    RuntimeTypePlain.name = "RuntimeTypePlain";
  $desc = $collectedClasses.RuntimeTypePlain;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeTypePlain.prototype = $desc;
  RuntimeTypePlain.prototype.get$name = function(receiver) {
    return this.name;
  };
  function RuntimeTypeGeneric(name, arguments, rti) {
    this.name = name;
    this.arguments = arguments;
    this.rti = rti;
  }
  RuntimeTypeGeneric.builtin$cls = "RuntimeTypeGeneric";
  if (!"name" in RuntimeTypeGeneric)
    RuntimeTypeGeneric.name = "RuntimeTypeGeneric";
  $desc = $collectedClasses.RuntimeTypeGeneric;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuntimeTypeGeneric.prototype = $desc;
  RuntimeTypeGeneric.prototype.get$name = function(receiver) {
    return this.name;
  };
  RuntimeTypeGeneric.prototype.get$arguments = function() {
    return this.arguments;
  };
  function TypeImpl(_typeName, _unmangledName) {
    this._typeName = _typeName;
    this._unmangledName = _unmangledName;
  }
  TypeImpl.builtin$cls = "TypeImpl";
  if (!"name" in TypeImpl)
    TypeImpl.name = "TypeImpl";
  $desc = $collectedClasses.TypeImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeImpl.prototype = $desc;
  function initHooks_closure(getTag_0) {
    this.getTag_0 = getTag_0;
  }
  initHooks_closure.builtin$cls = "initHooks_closure";
  if (!"name" in initHooks_closure)
    initHooks_closure.name = "initHooks_closure";
  $desc = $collectedClasses.initHooks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure.prototype = $desc;
  function initHooks_closure0(getUnknownTag_1) {
    this.getUnknownTag_1 = getUnknownTag_1;
  }
  initHooks_closure0.builtin$cls = "initHooks_closure0";
  if (!"name" in initHooks_closure0)
    initHooks_closure0.name = "initHooks_closure0";
  $desc = $collectedClasses.initHooks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure0.prototype = $desc;
  function initHooks_closure1(prototypeForTag_2) {
    this.prototypeForTag_2 = prototypeForTag_2;
  }
  initHooks_closure1.builtin$cls = "initHooks_closure1";
  if (!"name" in initHooks_closure1)
    initHooks_closure1.name = "initHooks_closure1";
  $desc = $collectedClasses.initHooks_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initHooks_closure1.prototype = $desc;
  function JSSyntaxRegExp(pattern, _nativeRegExp, _nativeGlobalRegExp, _nativeAnchoredRegExp) {
    this.pattern = pattern;
    this._nativeRegExp = _nativeRegExp;
    this._nativeGlobalRegExp = _nativeGlobalRegExp;
    this._nativeAnchoredRegExp = _nativeAnchoredRegExp;
  }
  JSSyntaxRegExp.builtin$cls = "JSSyntaxRegExp";
  if (!"name" in JSSyntaxRegExp)
    JSSyntaxRegExp.name = "JSSyntaxRegExp";
  $desc = $collectedClasses.JSSyntaxRegExp;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JSSyntaxRegExp.prototype = $desc;
  function _MatchImplementation(pattern, _match) {
    this.pattern = pattern;
    this._match = _match;
  }
  _MatchImplementation.builtin$cls = "_MatchImplementation";
  if (!"name" in _MatchImplementation)
    _MatchImplementation.name = "_MatchImplementation";
  $desc = $collectedClasses._MatchImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MatchImplementation.prototype = $desc;
  function _AllMatchesIterable(_re, _string) {
    this._re = _re;
    this._string = _string;
  }
  _AllMatchesIterable.builtin$cls = "_AllMatchesIterable";
  if (!"name" in _AllMatchesIterable)
    _AllMatchesIterable.name = "_AllMatchesIterable";
  $desc = $collectedClasses._AllMatchesIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterable.prototype = $desc;
  function _AllMatchesIterator(_regExp, _string, __js_helper$_current) {
    this._regExp = _regExp;
    this._string = _string;
    this.__js_helper$_current = __js_helper$_current;
  }
  _AllMatchesIterator.builtin$cls = "_AllMatchesIterator";
  if (!"name" in _AllMatchesIterator)
    _AllMatchesIterator.name = "_AllMatchesIterator";
  $desc = $collectedClasses._AllMatchesIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AllMatchesIterator.prototype = $desc;
  function StringMatch(start, input, pattern) {
    this.start = start;
    this.input = input;
    this.pattern = pattern;
  }
  StringMatch.builtin$cls = "StringMatch";
  if (!"name" in StringMatch)
    StringMatch.name = "StringMatch";
  $desc = $collectedClasses.StringMatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringMatch.prototype = $desc;
  function main_closure() {
  }
  main_closure.builtin$cls = "main_closure";
  if (!"name" in main_closure)
    main_closure.name = "main_closure";
  $desc = $collectedClasses.main_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure.prototype = $desc;
  function main_closure0() {
  }
  main_closure0.builtin$cls = "main_closure0";
  if (!"name" in main_closure0)
    main_closure0.name = "main_closure0";
  $desc = $collectedClasses.main_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure0.prototype = $desc;
  function main_closure1() {
  }
  main_closure1.builtin$cls = "main_closure1";
  if (!"name" in main_closure1)
    main_closure1.name = "main_closure1";
  $desc = $collectedClasses.main_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure1.prototype = $desc;
  function main_closure2() {
  }
  main_closure2.builtin$cls = "main_closure2";
  if (!"name" in main_closure2)
    main_closure2.name = "main_closure2";
  $desc = $collectedClasses.main_closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure2.prototype = $desc;
  function main_closure3() {
  }
  main_closure3.builtin$cls = "main_closure3";
  if (!"name" in main_closure3)
    main_closure3.name = "main_closure3";
  $desc = $collectedClasses.main_closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure3.prototype = $desc;
  function main_closure4() {
  }
  main_closure4.builtin$cls = "main_closure4";
  if (!"name" in main_closure4)
    main_closure4.name = "main_closure4";
  $desc = $collectedClasses.main_closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure4.prototype = $desc;
  function main_closure5() {
  }
  main_closure5.builtin$cls = "main_closure5";
  if (!"name" in main_closure5)
    main_closure5.name = "main_closure5";
  $desc = $collectedClasses.main_closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure5.prototype = $desc;
  function main_closure6() {
  }
  main_closure6.builtin$cls = "main_closure6";
  if (!"name" in main_closure6)
    main_closure6.name = "main_closure6";
  $desc = $collectedClasses.main_closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure6.prototype = $desc;
  function main_closure7() {
  }
  main_closure7.builtin$cls = "main_closure7";
  if (!"name" in main_closure7)
    main_closure7.name = "main_closure7";
  $desc = $collectedClasses.main_closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure7.prototype = $desc;
  function main_closure8() {
  }
  main_closure8.builtin$cls = "main_closure8";
  if (!"name" in main_closure8)
    main_closure8.name = "main_closure8";
  $desc = $collectedClasses.main_closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure8.prototype = $desc;
  function main_closure9() {
  }
  main_closure9.builtin$cls = "main_closure9";
  if (!"name" in main_closure9)
    main_closure9.name = "main_closure9";
  $desc = $collectedClasses.main_closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure9.prototype = $desc;
  function main_closure10() {
  }
  main_closure10.builtin$cls = "main_closure10";
  if (!"name" in main_closure10)
    main_closure10.name = "main_closure10";
  $desc = $collectedClasses.main_closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure10.prototype = $desc;
  function main_closure11() {
  }
  main_closure11.builtin$cls = "main_closure11";
  if (!"name" in main_closure11)
    main_closure11.name = "main_closure11";
  $desc = $collectedClasses.main_closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure11.prototype = $desc;
  function main_closure12() {
  }
  main_closure12.builtin$cls = "main_closure12";
  if (!"name" in main_closure12)
    main_closure12.name = "main_closure12";
  $desc = $collectedClasses.main_closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure12.prototype = $desc;
  function main_closure13() {
  }
  main_closure13.builtin$cls = "main_closure13";
  if (!"name" in main_closure13)
    main_closure13.name = "main_closure13";
  $desc = $collectedClasses.main_closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure13.prototype = $desc;
  function main_closure14() {
  }
  main_closure14.builtin$cls = "main_closure14";
  if (!"name" in main_closure14)
    main_closure14.name = "main_closure14";
  $desc = $collectedClasses.main_closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure14.prototype = $desc;
  function main_closure15() {
  }
  main_closure15.builtin$cls = "main_closure15";
  if (!"name" in main_closure15)
    main_closure15.name = "main_closure15";
  $desc = $collectedClasses.main_closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure15.prototype = $desc;
  function main_closure16() {
  }
  main_closure16.builtin$cls = "main_closure16";
  if (!"name" in main_closure16)
    main_closure16.name = "main_closure16";
  $desc = $collectedClasses.main_closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure16.prototype = $desc;
  function main_closure17() {
  }
  main_closure17.builtin$cls = "main_closure17";
  if (!"name" in main_closure17)
    main_closure17.name = "main_closure17";
  $desc = $collectedClasses.main_closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure17.prototype = $desc;
  function main_closure18() {
  }
  main_closure18.builtin$cls = "main_closure18";
  if (!"name" in main_closure18)
    main_closure18.name = "main_closure18";
  $desc = $collectedClasses.main_closure18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure18.prototype = $desc;
  function main_closure19() {
  }
  main_closure19.builtin$cls = "main_closure19";
  if (!"name" in main_closure19)
    main_closure19.name = "main_closure19";
  $desc = $collectedClasses.main_closure19;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure19.prototype = $desc;
  function main_closure20() {
  }
  main_closure20.builtin$cls = "main_closure20";
  if (!"name" in main_closure20)
    main_closure20.name = "main_closure20";
  $desc = $collectedClasses.main_closure20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure20.prototype = $desc;
  function main_closure21() {
  }
  main_closure21.builtin$cls = "main_closure21";
  if (!"name" in main_closure21)
    main_closure21.name = "main_closure21";
  $desc = $collectedClasses.main_closure21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure21.prototype = $desc;
  function main_closure22() {
  }
  main_closure22.builtin$cls = "main_closure22";
  if (!"name" in main_closure22)
    main_closure22.name = "main_closure22";
  $desc = $collectedClasses.main_closure22;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure22.prototype = $desc;
  function main_closure23() {
  }
  main_closure23.builtin$cls = "main_closure23";
  if (!"name" in main_closure23)
    main_closure23.name = "main_closure23";
  $desc = $collectedClasses.main_closure23;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure23.prototype = $desc;
  function main_closure24() {
  }
  main_closure24.builtin$cls = "main_closure24";
  if (!"name" in main_closure24)
    main_closure24.name = "main_closure24";
  $desc = $collectedClasses.main_closure24;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure24.prototype = $desc;
  function main_closure25() {
  }
  main_closure25.builtin$cls = "main_closure25";
  if (!"name" in main_closure25)
    main_closure25.name = "main_closure25";
  $desc = $collectedClasses.main_closure25;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure25.prototype = $desc;
  function main_closure26() {
  }
  main_closure26.builtin$cls = "main_closure26";
  if (!"name" in main_closure26)
    main_closure26.name = "main_closure26";
  $desc = $collectedClasses.main_closure26;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure26.prototype = $desc;
  function main_closure27() {
  }
  main_closure27.builtin$cls = "main_closure27";
  if (!"name" in main_closure27)
    main_closure27.name = "main_closure27";
  $desc = $collectedClasses.main_closure27;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure27.prototype = $desc;
  function main_closure28() {
  }
  main_closure28.builtin$cls = "main_closure28";
  if (!"name" in main_closure28)
    main_closure28.name = "main_closure28";
  $desc = $collectedClasses.main_closure28;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure28.prototype = $desc;
  function main_closure29() {
  }
  main_closure29.builtin$cls = "main_closure29";
  if (!"name" in main_closure29)
    main_closure29.name = "main_closure29";
  $desc = $collectedClasses.main_closure29;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure29.prototype = $desc;
  function main_closure30() {
  }
  main_closure30.builtin$cls = "main_closure30";
  if (!"name" in main_closure30)
    main_closure30.name = "main_closure30";
  $desc = $collectedClasses.main_closure30;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure30.prototype = $desc;
  function main_closure31() {
  }
  main_closure31.builtin$cls = "main_closure31";
  if (!"name" in main_closure31)
    main_closure31.name = "main_closure31";
  $desc = $collectedClasses.main_closure31;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure31.prototype = $desc;
  function main_closure32() {
  }
  main_closure32.builtin$cls = "main_closure32";
  if (!"name" in main_closure32)
    main_closure32.name = "main_closure32";
  $desc = $collectedClasses.main_closure32;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure32.prototype = $desc;
  function main_closure33() {
  }
  main_closure33.builtin$cls = "main_closure33";
  if (!"name" in main_closure33)
    main_closure33.name = "main_closure33";
  $desc = $collectedClasses.main_closure33;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure33.prototype = $desc;
  function main_closure34() {
  }
  main_closure34.builtin$cls = "main_closure34";
  if (!"name" in main_closure34)
    main_closure34.name = "main_closure34";
  $desc = $collectedClasses.main_closure34;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure34.prototype = $desc;
  function main_closure35() {
  }
  main_closure35.builtin$cls = "main_closure35";
  if (!"name" in main_closure35)
    main_closure35.name = "main_closure35";
  $desc = $collectedClasses.main_closure35;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure35.prototype = $desc;
  function main_closure36() {
  }
  main_closure36.builtin$cls = "main_closure36";
  if (!"name" in main_closure36)
    main_closure36.name = "main_closure36";
  $desc = $collectedClasses.main_closure36;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure36.prototype = $desc;
  function main_closure37() {
  }
  main_closure37.builtin$cls = "main_closure37";
  if (!"name" in main_closure37)
    main_closure37.name = "main_closure37";
  $desc = $collectedClasses.main_closure37;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure37.prototype = $desc;
  function main_closure38() {
  }
  main_closure38.builtin$cls = "main_closure38";
  if (!"name" in main_closure38)
    main_closure38.name = "main_closure38";
  $desc = $collectedClasses.main_closure38;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure38.prototype = $desc;
  function main_closure39() {
  }
  main_closure39.builtin$cls = "main_closure39";
  if (!"name" in main_closure39)
    main_closure39.name = "main_closure39";
  $desc = $collectedClasses.main_closure39;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure39.prototype = $desc;
  function main_closure40() {
  }
  main_closure40.builtin$cls = "main_closure40";
  if (!"name" in main_closure40)
    main_closure40.name = "main_closure40";
  $desc = $collectedClasses.main_closure40;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure40.prototype = $desc;
  function main_closure41() {
  }
  main_closure41.builtin$cls = "main_closure41";
  if (!"name" in main_closure41)
    main_closure41.name = "main_closure41";
  $desc = $collectedClasses.main_closure41;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure41.prototype = $desc;
  function main_closure42() {
  }
  main_closure42.builtin$cls = "main_closure42";
  if (!"name" in main_closure42)
    main_closure42.name = "main_closure42";
  $desc = $collectedClasses.main_closure42;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure42.prototype = $desc;
  function main_closure43() {
  }
  main_closure43.builtin$cls = "main_closure43";
  if (!"name" in main_closure43)
    main_closure43.name = "main_closure43";
  $desc = $collectedClasses.main_closure43;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure43.prototype = $desc;
  function main_closure44() {
  }
  main_closure44.builtin$cls = "main_closure44";
  if (!"name" in main_closure44)
    main_closure44.name = "main_closure44";
  $desc = $collectedClasses.main_closure44;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure44.prototype = $desc;
  function main_closure45() {
  }
  main_closure45.builtin$cls = "main_closure45";
  if (!"name" in main_closure45)
    main_closure45.name = "main_closure45";
  $desc = $collectedClasses.main_closure45;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure45.prototype = $desc;
  function main_closure46() {
  }
  main_closure46.builtin$cls = "main_closure46";
  if (!"name" in main_closure46)
    main_closure46.name = "main_closure46";
  $desc = $collectedClasses.main_closure46;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure46.prototype = $desc;
  function main_closure47() {
  }
  main_closure47.builtin$cls = "main_closure47";
  if (!"name" in main_closure47)
    main_closure47.name = "main_closure47";
  $desc = $collectedClasses.main_closure47;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure47.prototype = $desc;
  function main_closure48() {
  }
  main_closure48.builtin$cls = "main_closure48";
  if (!"name" in main_closure48)
    main_closure48.name = "main_closure48";
  $desc = $collectedClasses.main_closure48;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure48.prototype = $desc;
  function main_closure49() {
  }
  main_closure49.builtin$cls = "main_closure49";
  if (!"name" in main_closure49)
    main_closure49.name = "main_closure49";
  $desc = $collectedClasses.main_closure49;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure49.prototype = $desc;
  function main_closure50() {
  }
  main_closure50.builtin$cls = "main_closure50";
  if (!"name" in main_closure50)
    main_closure50.name = "main_closure50";
  $desc = $collectedClasses.main_closure50;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure50.prototype = $desc;
  function main_closure51() {
  }
  main_closure51.builtin$cls = "main_closure51";
  if (!"name" in main_closure51)
    main_closure51.name = "main_closure51";
  $desc = $collectedClasses.main_closure51;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure51.prototype = $desc;
  function main_closure52() {
  }
  main_closure52.builtin$cls = "main_closure52";
  if (!"name" in main_closure52)
    main_closure52.name = "main_closure52";
  $desc = $collectedClasses.main_closure52;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure52.prototype = $desc;
  function main_closure53() {
  }
  main_closure53.builtin$cls = "main_closure53";
  if (!"name" in main_closure53)
    main_closure53.name = "main_closure53";
  $desc = $collectedClasses.main_closure53;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure53.prototype = $desc;
  function main_closure54() {
  }
  main_closure54.builtin$cls = "main_closure54";
  if (!"name" in main_closure54)
    main_closure54.name = "main_closure54";
  $desc = $collectedClasses.main_closure54;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure54.prototype = $desc;
  function main_closure55() {
  }
  main_closure55.builtin$cls = "main_closure55";
  if (!"name" in main_closure55)
    main_closure55.name = "main_closure55";
  $desc = $collectedClasses.main_closure55;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure55.prototype = $desc;
  function main_closure56() {
  }
  main_closure56.builtin$cls = "main_closure56";
  if (!"name" in main_closure56)
    main_closure56.name = "main_closure56";
  $desc = $collectedClasses.main_closure56;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure56.prototype = $desc;
  function main_closure57() {
  }
  main_closure57.builtin$cls = "main_closure57";
  if (!"name" in main_closure57)
    main_closure57.name = "main_closure57";
  $desc = $collectedClasses.main_closure57;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure57.prototype = $desc;
  function main_closure58() {
  }
  main_closure58.builtin$cls = "main_closure58";
  if (!"name" in main_closure58)
    main_closure58.name = "main_closure58";
  $desc = $collectedClasses.main_closure58;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure58.prototype = $desc;
  function main_closure59() {
  }
  main_closure59.builtin$cls = "main_closure59";
  if (!"name" in main_closure59)
    main_closure59.name = "main_closure59";
  $desc = $collectedClasses.main_closure59;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure59.prototype = $desc;
  function main_closure60() {
  }
  main_closure60.builtin$cls = "main_closure60";
  if (!"name" in main_closure60)
    main_closure60.name = "main_closure60";
  $desc = $collectedClasses.main_closure60;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure60.prototype = $desc;
  function main_closure61() {
  }
  main_closure61.builtin$cls = "main_closure61";
  if (!"name" in main_closure61)
    main_closure61.name = "main_closure61";
  $desc = $collectedClasses.main_closure61;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure61.prototype = $desc;
  function main_closure62() {
  }
  main_closure62.builtin$cls = "main_closure62";
  if (!"name" in main_closure62)
    main_closure62.name = "main_closure62";
  $desc = $collectedClasses.main_closure62;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure62.prototype = $desc;
  function main_closure63() {
  }
  main_closure63.builtin$cls = "main_closure63";
  if (!"name" in main_closure63)
    main_closure63.name = "main_closure63";
  $desc = $collectedClasses.main_closure63;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure63.prototype = $desc;
  function main_closure64() {
  }
  main_closure64.builtin$cls = "main_closure64";
  if (!"name" in main_closure64)
    main_closure64.name = "main_closure64";
  $desc = $collectedClasses.main_closure64;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure64.prototype = $desc;
  function main_closure65() {
  }
  main_closure65.builtin$cls = "main_closure65";
  if (!"name" in main_closure65)
    main_closure65.name = "main_closure65";
  $desc = $collectedClasses.main_closure65;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure65.prototype = $desc;
  function main_closure66() {
  }
  main_closure66.builtin$cls = "main_closure66";
  if (!"name" in main_closure66)
    main_closure66.name = "main_closure66";
  $desc = $collectedClasses.main_closure66;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure66.prototype = $desc;
  function main_closure67() {
  }
  main_closure67.builtin$cls = "main_closure67";
  if (!"name" in main_closure67)
    main_closure67.name = "main_closure67";
  $desc = $collectedClasses.main_closure67;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure67.prototype = $desc;
  function main_closure68() {
  }
  main_closure68.builtin$cls = "main_closure68";
  if (!"name" in main_closure68)
    main_closure68.name = "main_closure68";
  $desc = $collectedClasses.main_closure68;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure68.prototype = $desc;
  function main_closure69() {
  }
  main_closure69.builtin$cls = "main_closure69";
  if (!"name" in main_closure69)
    main_closure69.name = "main_closure69";
  $desc = $collectedClasses.main_closure69;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure69.prototype = $desc;
  function main_closure70() {
  }
  main_closure70.builtin$cls = "main_closure70";
  if (!"name" in main_closure70)
    main_closure70.name = "main_closure70";
  $desc = $collectedClasses.main_closure70;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure70.prototype = $desc;
  function main_closure71() {
  }
  main_closure71.builtin$cls = "main_closure71";
  if (!"name" in main_closure71)
    main_closure71.name = "main_closure71";
  $desc = $collectedClasses.main_closure71;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure71.prototype = $desc;
  function main_closure72() {
  }
  main_closure72.builtin$cls = "main_closure72";
  if (!"name" in main_closure72)
    main_closure72.name = "main_closure72";
  $desc = $collectedClasses.main_closure72;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure72.prototype = $desc;
  function main_closure73() {
  }
  main_closure73.builtin$cls = "main_closure73";
  if (!"name" in main_closure73)
    main_closure73.name = "main_closure73";
  $desc = $collectedClasses.main_closure73;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure73.prototype = $desc;
  function main_closure74() {
  }
  main_closure74.builtin$cls = "main_closure74";
  if (!"name" in main_closure74)
    main_closure74.name = "main_closure74";
  $desc = $collectedClasses.main_closure74;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure74.prototype = $desc;
  function main_closure75() {
  }
  main_closure75.builtin$cls = "main_closure75";
  if (!"name" in main_closure75)
    main_closure75.name = "main_closure75";
  $desc = $collectedClasses.main_closure75;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure75.prototype = $desc;
  function main_closure76() {
  }
  main_closure76.builtin$cls = "main_closure76";
  if (!"name" in main_closure76)
    main_closure76.name = "main_closure76";
  $desc = $collectedClasses.main_closure76;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure76.prototype = $desc;
  function main_closure77() {
  }
  main_closure77.builtin$cls = "main_closure77";
  if (!"name" in main_closure77)
    main_closure77.name = "main_closure77";
  $desc = $collectedClasses.main_closure77;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure77.prototype = $desc;
  function main_closure78() {
  }
  main_closure78.builtin$cls = "main_closure78";
  if (!"name" in main_closure78)
    main_closure78.name = "main_closure78";
  $desc = $collectedClasses.main_closure78;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure78.prototype = $desc;
  function main_closure79() {
  }
  main_closure79.builtin$cls = "main_closure79";
  if (!"name" in main_closure79)
    main_closure79.name = "main_closure79";
  $desc = $collectedClasses.main_closure79;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure79.prototype = $desc;
  function main_closure80() {
  }
  main_closure80.builtin$cls = "main_closure80";
  if (!"name" in main_closure80)
    main_closure80.name = "main_closure80";
  $desc = $collectedClasses.main_closure80;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure80.prototype = $desc;
  function main_closure81() {
  }
  main_closure81.builtin$cls = "main_closure81";
  if (!"name" in main_closure81)
    main_closure81.name = "main_closure81";
  $desc = $collectedClasses.main_closure81;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure81.prototype = $desc;
  function main_closure82() {
  }
  main_closure82.builtin$cls = "main_closure82";
  if (!"name" in main_closure82)
    main_closure82.name = "main_closure82";
  $desc = $collectedClasses.main_closure82;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure82.prototype = $desc;
  function main_closure83() {
  }
  main_closure83.builtin$cls = "main_closure83";
  if (!"name" in main_closure83)
    main_closure83.name = "main_closure83";
  $desc = $collectedClasses.main_closure83;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure83.prototype = $desc;
  function main_closure84() {
  }
  main_closure84.builtin$cls = "main_closure84";
  if (!"name" in main_closure84)
    main_closure84.name = "main_closure84";
  $desc = $collectedClasses.main_closure84;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure84.prototype = $desc;
  function main_closure85() {
  }
  main_closure85.builtin$cls = "main_closure85";
  if (!"name" in main_closure85)
    main_closure85.name = "main_closure85";
  $desc = $collectedClasses.main_closure85;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure85.prototype = $desc;
  function main_closure86() {
  }
  main_closure86.builtin$cls = "main_closure86";
  if (!"name" in main_closure86)
    main_closure86.name = "main_closure86";
  $desc = $collectedClasses.main_closure86;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure86.prototype = $desc;
  function main_closure87() {
  }
  main_closure87.builtin$cls = "main_closure87";
  if (!"name" in main_closure87)
    main_closure87.name = "main_closure87";
  $desc = $collectedClasses.main_closure87;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure87.prototype = $desc;
  function main_closure88() {
  }
  main_closure88.builtin$cls = "main_closure88";
  if (!"name" in main_closure88)
    main_closure88.name = "main_closure88";
  $desc = $collectedClasses.main_closure88;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure88.prototype = $desc;
  function main_closure89() {
  }
  main_closure89.builtin$cls = "main_closure89";
  if (!"name" in main_closure89)
    main_closure89.name = "main_closure89";
  $desc = $collectedClasses.main_closure89;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure89.prototype = $desc;
  function main_closure90() {
  }
  main_closure90.builtin$cls = "main_closure90";
  if (!"name" in main_closure90)
    main_closure90.name = "main_closure90";
  $desc = $collectedClasses.main_closure90;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure90.prototype = $desc;
  function main_closure91() {
  }
  main_closure91.builtin$cls = "main_closure91";
  if (!"name" in main_closure91)
    main_closure91.name = "main_closure91";
  $desc = $collectedClasses.main_closure91;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure91.prototype = $desc;
  function main_closure92() {
  }
  main_closure92.builtin$cls = "main_closure92";
  if (!"name" in main_closure92)
    main_closure92.name = "main_closure92";
  $desc = $collectedClasses.main_closure92;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure92.prototype = $desc;
  function main_closure93() {
  }
  main_closure93.builtin$cls = "main_closure93";
  if (!"name" in main_closure93)
    main_closure93.name = "main_closure93";
  $desc = $collectedClasses.main_closure93;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure93.prototype = $desc;
  function main_closure94() {
  }
  main_closure94.builtin$cls = "main_closure94";
  if (!"name" in main_closure94)
    main_closure94.name = "main_closure94";
  $desc = $collectedClasses.main_closure94;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure94.prototype = $desc;
  function main_closure95() {
  }
  main_closure95.builtin$cls = "main_closure95";
  if (!"name" in main_closure95)
    main_closure95.name = "main_closure95";
  $desc = $collectedClasses.main_closure95;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure95.prototype = $desc;
  function main_closure96() {
  }
  main_closure96.builtin$cls = "main_closure96";
  if (!"name" in main_closure96)
    main_closure96.name = "main_closure96";
  $desc = $collectedClasses.main_closure96;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure96.prototype = $desc;
  function main_closure97() {
  }
  main_closure97.builtin$cls = "main_closure97";
  if (!"name" in main_closure97)
    main_closure97.name = "main_closure97";
  $desc = $collectedClasses.main_closure97;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure97.prototype = $desc;
  function main_closure98() {
  }
  main_closure98.builtin$cls = "main_closure98";
  if (!"name" in main_closure98)
    main_closure98.name = "main_closure98";
  $desc = $collectedClasses.main_closure98;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure98.prototype = $desc;
  function main_closure99() {
  }
  main_closure99.builtin$cls = "main_closure99";
  if (!"name" in main_closure99)
    main_closure99.name = "main_closure99";
  $desc = $collectedClasses.main_closure99;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure99.prototype = $desc;
  function main_closure100() {
  }
  main_closure100.builtin$cls = "main_closure100";
  if (!"name" in main_closure100)
    main_closure100.name = "main_closure100";
  $desc = $collectedClasses.main_closure100;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure100.prototype = $desc;
  function main_closure101() {
  }
  main_closure101.builtin$cls = "main_closure101";
  if (!"name" in main_closure101)
    main_closure101.name = "main_closure101";
  $desc = $collectedClasses.main_closure101;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure101.prototype = $desc;
  function main_closure102() {
  }
  main_closure102.builtin$cls = "main_closure102";
  if (!"name" in main_closure102)
    main_closure102.name = "main_closure102";
  $desc = $collectedClasses.main_closure102;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure102.prototype = $desc;
  function main_closure103() {
  }
  main_closure103.builtin$cls = "main_closure103";
  if (!"name" in main_closure103)
    main_closure103.name = "main_closure103";
  $desc = $collectedClasses.main_closure103;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure103.prototype = $desc;
  function main_closure104() {
  }
  main_closure104.builtin$cls = "main_closure104";
  if (!"name" in main_closure104)
    main_closure104.name = "main_closure104";
  $desc = $collectedClasses.main_closure104;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure104.prototype = $desc;
  function main_closure105() {
  }
  main_closure105.builtin$cls = "main_closure105";
  if (!"name" in main_closure105)
    main_closure105.name = "main_closure105";
  $desc = $collectedClasses.main_closure105;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure105.prototype = $desc;
  function main_closure106() {
  }
  main_closure106.builtin$cls = "main_closure106";
  if (!"name" in main_closure106)
    main_closure106.name = "main_closure106";
  $desc = $collectedClasses.main_closure106;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure106.prototype = $desc;
  function main_closure107() {
  }
  main_closure107.builtin$cls = "main_closure107";
  if (!"name" in main_closure107)
    main_closure107.name = "main_closure107";
  $desc = $collectedClasses.main_closure107;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure107.prototype = $desc;
  function main_closure108() {
  }
  main_closure108.builtin$cls = "main_closure108";
  if (!"name" in main_closure108)
    main_closure108.name = "main_closure108";
  $desc = $collectedClasses.main_closure108;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure108.prototype = $desc;
  function main_closure109() {
  }
  main_closure109.builtin$cls = "main_closure109";
  if (!"name" in main_closure109)
    main_closure109.name = "main_closure109";
  $desc = $collectedClasses.main_closure109;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure109.prototype = $desc;
  function main_closure110() {
  }
  main_closure110.builtin$cls = "main_closure110";
  if (!"name" in main_closure110)
    main_closure110.name = "main_closure110";
  $desc = $collectedClasses.main_closure110;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure110.prototype = $desc;
  function main_closure111() {
  }
  main_closure111.builtin$cls = "main_closure111";
  if (!"name" in main_closure111)
    main_closure111.name = "main_closure111";
  $desc = $collectedClasses.main_closure111;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure111.prototype = $desc;
  function main_closure112() {
  }
  main_closure112.builtin$cls = "main_closure112";
  if (!"name" in main_closure112)
    main_closure112.name = "main_closure112";
  $desc = $collectedClasses.main_closure112;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure112.prototype = $desc;
  function main_closure113() {
  }
  main_closure113.builtin$cls = "main_closure113";
  if (!"name" in main_closure113)
    main_closure113.name = "main_closure113";
  $desc = $collectedClasses.main_closure113;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure113.prototype = $desc;
  function main_closure114() {
  }
  main_closure114.builtin$cls = "main_closure114";
  if (!"name" in main_closure114)
    main_closure114.name = "main_closure114";
  $desc = $collectedClasses.main_closure114;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure114.prototype = $desc;
  function main_closure115() {
  }
  main_closure115.builtin$cls = "main_closure115";
  if (!"name" in main_closure115)
    main_closure115.name = "main_closure115";
  $desc = $collectedClasses.main_closure115;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure115.prototype = $desc;
  function main_closure116() {
  }
  main_closure116.builtin$cls = "main_closure116";
  if (!"name" in main_closure116)
    main_closure116.name = "main_closure116";
  $desc = $collectedClasses.main_closure116;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure116.prototype = $desc;
  function main_closure117() {
  }
  main_closure117.builtin$cls = "main_closure117";
  if (!"name" in main_closure117)
    main_closure117.name = "main_closure117";
  $desc = $collectedClasses.main_closure117;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure117.prototype = $desc;
  function main_closure118() {
  }
  main_closure118.builtin$cls = "main_closure118";
  if (!"name" in main_closure118)
    main_closure118.name = "main_closure118";
  $desc = $collectedClasses.main_closure118;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure118.prototype = $desc;
  function main_closure119() {
  }
  main_closure119.builtin$cls = "main_closure119";
  if (!"name" in main_closure119)
    main_closure119.name = "main_closure119";
  $desc = $collectedClasses.main_closure119;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure119.prototype = $desc;
  function main_closure120() {
  }
  main_closure120.builtin$cls = "main_closure120";
  if (!"name" in main_closure120)
    main_closure120.name = "main_closure120";
  $desc = $collectedClasses.main_closure120;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure120.prototype = $desc;
  function main_closure121() {
  }
  main_closure121.builtin$cls = "main_closure121";
  if (!"name" in main_closure121)
    main_closure121.name = "main_closure121";
  $desc = $collectedClasses.main_closure121;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure121.prototype = $desc;
  function main_closure122() {
  }
  main_closure122.builtin$cls = "main_closure122";
  if (!"name" in main_closure122)
    main_closure122.name = "main_closure122";
  $desc = $collectedClasses.main_closure122;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure122.prototype = $desc;
  function main_closure123() {
  }
  main_closure123.builtin$cls = "main_closure123";
  if (!"name" in main_closure123)
    main_closure123.name = "main_closure123";
  $desc = $collectedClasses.main_closure123;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure123.prototype = $desc;
  function main_closure124() {
  }
  main_closure124.builtin$cls = "main_closure124";
  if (!"name" in main_closure124)
    main_closure124.name = "main_closure124";
  $desc = $collectedClasses.main_closure124;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure124.prototype = $desc;
  function main_closure125() {
  }
  main_closure125.builtin$cls = "main_closure125";
  if (!"name" in main_closure125)
    main_closure125.name = "main_closure125";
  $desc = $collectedClasses.main_closure125;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure125.prototype = $desc;
  function main_closure126() {
  }
  main_closure126.builtin$cls = "main_closure126";
  if (!"name" in main_closure126)
    main_closure126.name = "main_closure126";
  $desc = $collectedClasses.main_closure126;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure126.prototype = $desc;
  function main_closure127() {
  }
  main_closure127.builtin$cls = "main_closure127";
  if (!"name" in main_closure127)
    main_closure127.name = "main_closure127";
  $desc = $collectedClasses.main_closure127;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure127.prototype = $desc;
  function main_closure128() {
  }
  main_closure128.builtin$cls = "main_closure128";
  if (!"name" in main_closure128)
    main_closure128.name = "main_closure128";
  $desc = $collectedClasses.main_closure128;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure128.prototype = $desc;
  function main_closure129() {
  }
  main_closure129.builtin$cls = "main_closure129";
  if (!"name" in main_closure129)
    main_closure129.name = "main_closure129";
  $desc = $collectedClasses.main_closure129;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure129.prototype = $desc;
  function main_closure130() {
  }
  main_closure130.builtin$cls = "main_closure130";
  if (!"name" in main_closure130)
    main_closure130.name = "main_closure130";
  $desc = $collectedClasses.main_closure130;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure130.prototype = $desc;
  function main_closure131() {
  }
  main_closure131.builtin$cls = "main_closure131";
  if (!"name" in main_closure131)
    main_closure131.name = "main_closure131";
  $desc = $collectedClasses.main_closure131;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure131.prototype = $desc;
  function main_closure132() {
  }
  main_closure132.builtin$cls = "main_closure132";
  if (!"name" in main_closure132)
    main_closure132.name = "main_closure132";
  $desc = $collectedClasses.main_closure132;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure132.prototype = $desc;
  function main_closure133() {
  }
  main_closure133.builtin$cls = "main_closure133";
  if (!"name" in main_closure133)
    main_closure133.name = "main_closure133";
  $desc = $collectedClasses.main_closure133;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure133.prototype = $desc;
  function main_closure134() {
  }
  main_closure134.builtin$cls = "main_closure134";
  if (!"name" in main_closure134)
    main_closure134.name = "main_closure134";
  $desc = $collectedClasses.main_closure134;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure134.prototype = $desc;
  function main_closure135() {
  }
  main_closure135.builtin$cls = "main_closure135";
  if (!"name" in main_closure135)
    main_closure135.name = "main_closure135";
  $desc = $collectedClasses.main_closure135;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure135.prototype = $desc;
  function main_closure136() {
  }
  main_closure136.builtin$cls = "main_closure136";
  if (!"name" in main_closure136)
    main_closure136.name = "main_closure136";
  $desc = $collectedClasses.main_closure136;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure136.prototype = $desc;
  function main_closure137() {
  }
  main_closure137.builtin$cls = "main_closure137";
  if (!"name" in main_closure137)
    main_closure137.name = "main_closure137";
  $desc = $collectedClasses.main_closure137;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure137.prototype = $desc;
  function main_closure138() {
  }
  main_closure138.builtin$cls = "main_closure138";
  if (!"name" in main_closure138)
    main_closure138.name = "main_closure138";
  $desc = $collectedClasses.main_closure138;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure138.prototype = $desc;
  function main_closure139() {
  }
  main_closure139.builtin$cls = "main_closure139";
  if (!"name" in main_closure139)
    main_closure139.name = "main_closure139";
  $desc = $collectedClasses.main_closure139;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure139.prototype = $desc;
  function main_closure140() {
  }
  main_closure140.builtin$cls = "main_closure140";
  if (!"name" in main_closure140)
    main_closure140.name = "main_closure140";
  $desc = $collectedClasses.main_closure140;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure140.prototype = $desc;
  function main_closure141() {
  }
  main_closure141.builtin$cls = "main_closure141";
  if (!"name" in main_closure141)
    main_closure141.name = "main_closure141";
  $desc = $collectedClasses.main_closure141;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure141.prototype = $desc;
  function main_closure142() {
  }
  main_closure142.builtin$cls = "main_closure142";
  if (!"name" in main_closure142)
    main_closure142.name = "main_closure142";
  $desc = $collectedClasses.main_closure142;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure142.prototype = $desc;
  function main_closure143() {
  }
  main_closure143.builtin$cls = "main_closure143";
  if (!"name" in main_closure143)
    main_closure143.name = "main_closure143";
  $desc = $collectedClasses.main_closure143;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure143.prototype = $desc;
  function main_closure144() {
  }
  main_closure144.builtin$cls = "main_closure144";
  if (!"name" in main_closure144)
    main_closure144.name = "main_closure144";
  $desc = $collectedClasses.main_closure144;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure144.prototype = $desc;
  function main_closure145() {
  }
  main_closure145.builtin$cls = "main_closure145";
  if (!"name" in main_closure145)
    main_closure145.name = "main_closure145";
  $desc = $collectedClasses.main_closure145;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure145.prototype = $desc;
  function main_closure146() {
  }
  main_closure146.builtin$cls = "main_closure146";
  if (!"name" in main_closure146)
    main_closure146.name = "main_closure146";
  $desc = $collectedClasses.main_closure146;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure146.prototype = $desc;
  function main_closure147() {
  }
  main_closure147.builtin$cls = "main_closure147";
  if (!"name" in main_closure147)
    main_closure147.name = "main_closure147";
  $desc = $collectedClasses.main_closure147;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure147.prototype = $desc;
  function main_closure148() {
  }
  main_closure148.builtin$cls = "main_closure148";
  if (!"name" in main_closure148)
    main_closure148.name = "main_closure148";
  $desc = $collectedClasses.main_closure148;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure148.prototype = $desc;
  function main_closure149() {
  }
  main_closure149.builtin$cls = "main_closure149";
  if (!"name" in main_closure149)
    main_closure149.name = "main_closure149";
  $desc = $collectedClasses.main_closure149;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure149.prototype = $desc;
  function main_closure150() {
  }
  main_closure150.builtin$cls = "main_closure150";
  if (!"name" in main_closure150)
    main_closure150.name = "main_closure150";
  $desc = $collectedClasses.main_closure150;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure150.prototype = $desc;
  function main_closure151() {
  }
  main_closure151.builtin$cls = "main_closure151";
  if (!"name" in main_closure151)
    main_closure151.name = "main_closure151";
  $desc = $collectedClasses.main_closure151;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure151.prototype = $desc;
  function main_closure152() {
  }
  main_closure152.builtin$cls = "main_closure152";
  if (!"name" in main_closure152)
    main_closure152.name = "main_closure152";
  $desc = $collectedClasses.main_closure152;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure152.prototype = $desc;
  function main_closure153() {
  }
  main_closure153.builtin$cls = "main_closure153";
  if (!"name" in main_closure153)
    main_closure153.name = "main_closure153";
  $desc = $collectedClasses.main_closure153;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure153.prototype = $desc;
  function main_closure154() {
  }
  main_closure154.builtin$cls = "main_closure154";
  if (!"name" in main_closure154)
    main_closure154.name = "main_closure154";
  $desc = $collectedClasses.main_closure154;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure154.prototype = $desc;
  function main_closure155() {
  }
  main_closure155.builtin$cls = "main_closure155";
  if (!"name" in main_closure155)
    main_closure155.name = "main_closure155";
  $desc = $collectedClasses.main_closure155;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure155.prototype = $desc;
  function main_closure156() {
  }
  main_closure156.builtin$cls = "main_closure156";
  if (!"name" in main_closure156)
    main_closure156.name = "main_closure156";
  $desc = $collectedClasses.main_closure156;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure156.prototype = $desc;
  function main_closure157() {
  }
  main_closure157.builtin$cls = "main_closure157";
  if (!"name" in main_closure157)
    main_closure157.name = "main_closure157";
  $desc = $collectedClasses.main_closure157;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure157.prototype = $desc;
  function main_closure158() {
  }
  main_closure158.builtin$cls = "main_closure158";
  if (!"name" in main_closure158)
    main_closure158.name = "main_closure158";
  $desc = $collectedClasses.main_closure158;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure158.prototype = $desc;
  function main_closure159() {
  }
  main_closure159.builtin$cls = "main_closure159";
  if (!"name" in main_closure159)
    main_closure159.name = "main_closure159";
  $desc = $collectedClasses.main_closure159;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure159.prototype = $desc;
  function main_closure160() {
  }
  main_closure160.builtin$cls = "main_closure160";
  if (!"name" in main_closure160)
    main_closure160.name = "main_closure160";
  $desc = $collectedClasses.main_closure160;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure160.prototype = $desc;
  function main_closure161() {
  }
  main_closure161.builtin$cls = "main_closure161";
  if (!"name" in main_closure161)
    main_closure161.name = "main_closure161";
  $desc = $collectedClasses.main_closure161;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure161.prototype = $desc;
  function main_closure162() {
  }
  main_closure162.builtin$cls = "main_closure162";
  if (!"name" in main_closure162)
    main_closure162.name = "main_closure162";
  $desc = $collectedClasses.main_closure162;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure162.prototype = $desc;
  function main_closure163() {
  }
  main_closure163.builtin$cls = "main_closure163";
  if (!"name" in main_closure163)
    main_closure163.name = "main_closure163";
  $desc = $collectedClasses.main_closure163;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure163.prototype = $desc;
  function main_closure164() {
  }
  main_closure164.builtin$cls = "main_closure164";
  if (!"name" in main_closure164)
    main_closure164.name = "main_closure164";
  $desc = $collectedClasses.main_closure164;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure164.prototype = $desc;
  function main_closure165() {
  }
  main_closure165.builtin$cls = "main_closure165";
  if (!"name" in main_closure165)
    main_closure165.name = "main_closure165";
  $desc = $collectedClasses.main_closure165;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure165.prototype = $desc;
  function main_closure166() {
  }
  main_closure166.builtin$cls = "main_closure166";
  if (!"name" in main_closure166)
    main_closure166.name = "main_closure166";
  $desc = $collectedClasses.main_closure166;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure166.prototype = $desc;
  function main_closure167() {
  }
  main_closure167.builtin$cls = "main_closure167";
  if (!"name" in main_closure167)
    main_closure167.name = "main_closure167";
  $desc = $collectedClasses.main_closure167;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure167.prototype = $desc;
  function main_closure168() {
  }
  main_closure168.builtin$cls = "main_closure168";
  if (!"name" in main_closure168)
    main_closure168.name = "main_closure168";
  $desc = $collectedClasses.main_closure168;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure168.prototype = $desc;
  function main_closure169() {
  }
  main_closure169.builtin$cls = "main_closure169";
  if (!"name" in main_closure169)
    main_closure169.name = "main_closure169";
  $desc = $collectedClasses.main_closure169;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure169.prototype = $desc;
  function main_closure170() {
  }
  main_closure170.builtin$cls = "main_closure170";
  if (!"name" in main_closure170)
    main_closure170.name = "main_closure170";
  $desc = $collectedClasses.main_closure170;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure170.prototype = $desc;
  function main_closure171() {
  }
  main_closure171.builtin$cls = "main_closure171";
  if (!"name" in main_closure171)
    main_closure171.name = "main_closure171";
  $desc = $collectedClasses.main_closure171;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure171.prototype = $desc;
  function main_closure172() {
  }
  main_closure172.builtin$cls = "main_closure172";
  if (!"name" in main_closure172)
    main_closure172.name = "main_closure172";
  $desc = $collectedClasses.main_closure172;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure172.prototype = $desc;
  function main_closure173() {
  }
  main_closure173.builtin$cls = "main_closure173";
  if (!"name" in main_closure173)
    main_closure173.name = "main_closure173";
  $desc = $collectedClasses.main_closure173;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure173.prototype = $desc;
  function main_closure174() {
  }
  main_closure174.builtin$cls = "main_closure174";
  if (!"name" in main_closure174)
    main_closure174.name = "main_closure174";
  $desc = $collectedClasses.main_closure174;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure174.prototype = $desc;
  function main_closure175() {
  }
  main_closure175.builtin$cls = "main_closure175";
  if (!"name" in main_closure175)
    main_closure175.name = "main_closure175";
  $desc = $collectedClasses.main_closure175;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure175.prototype = $desc;
  function main_closure176() {
  }
  main_closure176.builtin$cls = "main_closure176";
  if (!"name" in main_closure176)
    main_closure176.name = "main_closure176";
  $desc = $collectedClasses.main_closure176;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure176.prototype = $desc;
  function main_closure177() {
  }
  main_closure177.builtin$cls = "main_closure177";
  if (!"name" in main_closure177)
    main_closure177.name = "main_closure177";
  $desc = $collectedClasses.main_closure177;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure177.prototype = $desc;
  function main_closure178() {
  }
  main_closure178.builtin$cls = "main_closure178";
  if (!"name" in main_closure178)
    main_closure178.name = "main_closure178";
  $desc = $collectedClasses.main_closure178;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure178.prototype = $desc;
  function main_closure179() {
  }
  main_closure179.builtin$cls = "main_closure179";
  if (!"name" in main_closure179)
    main_closure179.name = "main_closure179";
  $desc = $collectedClasses.main_closure179;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure179.prototype = $desc;
  function main_closure180() {
  }
  main_closure180.builtin$cls = "main_closure180";
  if (!"name" in main_closure180)
    main_closure180.name = "main_closure180";
  $desc = $collectedClasses.main_closure180;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure180.prototype = $desc;
  function main_closure181() {
  }
  main_closure181.builtin$cls = "main_closure181";
  if (!"name" in main_closure181)
    main_closure181.name = "main_closure181";
  $desc = $collectedClasses.main_closure181;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure181.prototype = $desc;
  function main_closure182() {
  }
  main_closure182.builtin$cls = "main_closure182";
  if (!"name" in main_closure182)
    main_closure182.name = "main_closure182";
  $desc = $collectedClasses.main_closure182;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure182.prototype = $desc;
  function main_closure183() {
  }
  main_closure183.builtin$cls = "main_closure183";
  if (!"name" in main_closure183)
    main_closure183.name = "main_closure183";
  $desc = $collectedClasses.main_closure183;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure183.prototype = $desc;
  function main_closure184() {
  }
  main_closure184.builtin$cls = "main_closure184";
  if (!"name" in main_closure184)
    main_closure184.name = "main_closure184";
  $desc = $collectedClasses.main_closure184;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure184.prototype = $desc;
  function main_closure185() {
  }
  main_closure185.builtin$cls = "main_closure185";
  if (!"name" in main_closure185)
    main_closure185.name = "main_closure185";
  $desc = $collectedClasses.main_closure185;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure185.prototype = $desc;
  function main_closure186() {
  }
  main_closure186.builtin$cls = "main_closure186";
  if (!"name" in main_closure186)
    main_closure186.name = "main_closure186";
  $desc = $collectedClasses.main_closure186;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure186.prototype = $desc;
  function main_closure187() {
  }
  main_closure187.builtin$cls = "main_closure187";
  if (!"name" in main_closure187)
    main_closure187.name = "main_closure187";
  $desc = $collectedClasses.main_closure187;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure187.prototype = $desc;
  function main_closure188() {
  }
  main_closure188.builtin$cls = "main_closure188";
  if (!"name" in main_closure188)
    main_closure188.name = "main_closure188";
  $desc = $collectedClasses.main_closure188;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure188.prototype = $desc;
  function main_closure189() {
  }
  main_closure189.builtin$cls = "main_closure189";
  if (!"name" in main_closure189)
    main_closure189.name = "main_closure189";
  $desc = $collectedClasses.main_closure189;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure189.prototype = $desc;
  function main_closure190() {
  }
  main_closure190.builtin$cls = "main_closure190";
  if (!"name" in main_closure190)
    main_closure190.name = "main_closure190";
  $desc = $collectedClasses.main_closure190;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure190.prototype = $desc;
  function main_closure191() {
  }
  main_closure191.builtin$cls = "main_closure191";
  if (!"name" in main_closure191)
    main_closure191.name = "main_closure191";
  $desc = $collectedClasses.main_closure191;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure191.prototype = $desc;
  function main_closure192() {
  }
  main_closure192.builtin$cls = "main_closure192";
  if (!"name" in main_closure192)
    main_closure192.name = "main_closure192";
  $desc = $collectedClasses.main_closure192;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure192.prototype = $desc;
  function main_closure193() {
  }
  main_closure193.builtin$cls = "main_closure193";
  if (!"name" in main_closure193)
    main_closure193.name = "main_closure193";
  $desc = $collectedClasses.main_closure193;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure193.prototype = $desc;
  function main_closure194() {
  }
  main_closure194.builtin$cls = "main_closure194";
  if (!"name" in main_closure194)
    main_closure194.name = "main_closure194";
  $desc = $collectedClasses.main_closure194;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure194.prototype = $desc;
  function main_closure195() {
  }
  main_closure195.builtin$cls = "main_closure195";
  if (!"name" in main_closure195)
    main_closure195.name = "main_closure195";
  $desc = $collectedClasses.main_closure195;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure195.prototype = $desc;
  function main_closure196() {
  }
  main_closure196.builtin$cls = "main_closure196";
  if (!"name" in main_closure196)
    main_closure196.name = "main_closure196";
  $desc = $collectedClasses.main_closure196;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure196.prototype = $desc;
  function main_closure197() {
  }
  main_closure197.builtin$cls = "main_closure197";
  if (!"name" in main_closure197)
    main_closure197.name = "main_closure197";
  $desc = $collectedClasses.main_closure197;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure197.prototype = $desc;
  function main_closure198() {
  }
  main_closure198.builtin$cls = "main_closure198";
  if (!"name" in main_closure198)
    main_closure198.name = "main_closure198";
  $desc = $collectedClasses.main_closure198;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure198.prototype = $desc;
  function main_closure199() {
  }
  main_closure199.builtin$cls = "main_closure199";
  if (!"name" in main_closure199)
    main_closure199.name = "main_closure199";
  $desc = $collectedClasses.main_closure199;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure199.prototype = $desc;
  function main_closure200() {
  }
  main_closure200.builtin$cls = "main_closure200";
  if (!"name" in main_closure200)
    main_closure200.name = "main_closure200";
  $desc = $collectedClasses.main_closure200;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure200.prototype = $desc;
  function main_closure201() {
  }
  main_closure201.builtin$cls = "main_closure201";
  if (!"name" in main_closure201)
    main_closure201.name = "main_closure201";
  $desc = $collectedClasses.main_closure201;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure201.prototype = $desc;
  function main_closure202() {
  }
  main_closure202.builtin$cls = "main_closure202";
  if (!"name" in main_closure202)
    main_closure202.name = "main_closure202";
  $desc = $collectedClasses.main_closure202;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure202.prototype = $desc;
  function main_closure203() {
  }
  main_closure203.builtin$cls = "main_closure203";
  if (!"name" in main_closure203)
    main_closure203.name = "main_closure203";
  $desc = $collectedClasses.main_closure203;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure203.prototype = $desc;
  function main_closure204() {
  }
  main_closure204.builtin$cls = "main_closure204";
  if (!"name" in main_closure204)
    main_closure204.name = "main_closure204";
  $desc = $collectedClasses.main_closure204;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure204.prototype = $desc;
  function main_closure205() {
  }
  main_closure205.builtin$cls = "main_closure205";
  if (!"name" in main_closure205)
    main_closure205.name = "main_closure205";
  $desc = $collectedClasses.main_closure205;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure205.prototype = $desc;
  function main_closure206() {
  }
  main_closure206.builtin$cls = "main_closure206";
  if (!"name" in main_closure206)
    main_closure206.name = "main_closure206";
  $desc = $collectedClasses.main_closure206;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure206.prototype = $desc;
  function main_closure207() {
  }
  main_closure207.builtin$cls = "main_closure207";
  if (!"name" in main_closure207)
    main_closure207.name = "main_closure207";
  $desc = $collectedClasses.main_closure207;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure207.prototype = $desc;
  function main_closure208() {
  }
  main_closure208.builtin$cls = "main_closure208";
  if (!"name" in main_closure208)
    main_closure208.name = "main_closure208";
  $desc = $collectedClasses.main_closure208;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure208.prototype = $desc;
  function main_closure209() {
  }
  main_closure209.builtin$cls = "main_closure209";
  if (!"name" in main_closure209)
    main_closure209.name = "main_closure209";
  $desc = $collectedClasses.main_closure209;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure209.prototype = $desc;
  function main_closure210() {
  }
  main_closure210.builtin$cls = "main_closure210";
  if (!"name" in main_closure210)
    main_closure210.name = "main_closure210";
  $desc = $collectedClasses.main_closure210;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure210.prototype = $desc;
  function main_closure211() {
  }
  main_closure211.builtin$cls = "main_closure211";
  if (!"name" in main_closure211)
    main_closure211.name = "main_closure211";
  $desc = $collectedClasses.main_closure211;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure211.prototype = $desc;
  function main_closure212() {
  }
  main_closure212.builtin$cls = "main_closure212";
  if (!"name" in main_closure212)
    main_closure212.name = "main_closure212";
  $desc = $collectedClasses.main_closure212;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure212.prototype = $desc;
  function main_closure213() {
  }
  main_closure213.builtin$cls = "main_closure213";
  if (!"name" in main_closure213)
    main_closure213.name = "main_closure213";
  $desc = $collectedClasses.main_closure213;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure213.prototype = $desc;
  function main_closure214() {
  }
  main_closure214.builtin$cls = "main_closure214";
  if (!"name" in main_closure214)
    main_closure214.name = "main_closure214";
  $desc = $collectedClasses.main_closure214;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure214.prototype = $desc;
  function main_closure215() {
  }
  main_closure215.builtin$cls = "main_closure215";
  if (!"name" in main_closure215)
    main_closure215.name = "main_closure215";
  $desc = $collectedClasses.main_closure215;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure215.prototype = $desc;
  function main_closure216() {
  }
  main_closure216.builtin$cls = "main_closure216";
  if (!"name" in main_closure216)
    main_closure216.name = "main_closure216";
  $desc = $collectedClasses.main_closure216;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure216.prototype = $desc;
  function main_closure217() {
  }
  main_closure217.builtin$cls = "main_closure217";
  if (!"name" in main_closure217)
    main_closure217.name = "main_closure217";
  $desc = $collectedClasses.main_closure217;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure217.prototype = $desc;
  function main_closure218() {
  }
  main_closure218.builtin$cls = "main_closure218";
  if (!"name" in main_closure218)
    main_closure218.name = "main_closure218";
  $desc = $collectedClasses.main_closure218;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure218.prototype = $desc;
  function main_closure219() {
  }
  main_closure219.builtin$cls = "main_closure219";
  if (!"name" in main_closure219)
    main_closure219.name = "main_closure219";
  $desc = $collectedClasses.main_closure219;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure219.prototype = $desc;
  function main_closure220() {
  }
  main_closure220.builtin$cls = "main_closure220";
  if (!"name" in main_closure220)
    main_closure220.name = "main_closure220";
  $desc = $collectedClasses.main_closure220;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure220.prototype = $desc;
  function main_closure221() {
  }
  main_closure221.builtin$cls = "main_closure221";
  if (!"name" in main_closure221)
    main_closure221.name = "main_closure221";
  $desc = $collectedClasses.main_closure221;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure221.prototype = $desc;
  function main_closure222() {
  }
  main_closure222.builtin$cls = "main_closure222";
  if (!"name" in main_closure222)
    main_closure222.name = "main_closure222";
  $desc = $collectedClasses.main_closure222;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure222.prototype = $desc;
  function main_closure223() {
  }
  main_closure223.builtin$cls = "main_closure223";
  if (!"name" in main_closure223)
    main_closure223.name = "main_closure223";
  $desc = $collectedClasses.main_closure223;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure223.prototype = $desc;
  function main_closure224() {
  }
  main_closure224.builtin$cls = "main_closure224";
  if (!"name" in main_closure224)
    main_closure224.name = "main_closure224";
  $desc = $collectedClasses.main_closure224;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure224.prototype = $desc;
  function main_closure225() {
  }
  main_closure225.builtin$cls = "main_closure225";
  if (!"name" in main_closure225)
    main_closure225.name = "main_closure225";
  $desc = $collectedClasses.main_closure225;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure225.prototype = $desc;
  function main_closure226() {
  }
  main_closure226.builtin$cls = "main_closure226";
  if (!"name" in main_closure226)
    main_closure226.name = "main_closure226";
  $desc = $collectedClasses.main_closure226;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure226.prototype = $desc;
  function main_closure227() {
  }
  main_closure227.builtin$cls = "main_closure227";
  if (!"name" in main_closure227)
    main_closure227.name = "main_closure227";
  $desc = $collectedClasses.main_closure227;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure227.prototype = $desc;
  function main_closure228() {
  }
  main_closure228.builtin$cls = "main_closure228";
  if (!"name" in main_closure228)
    main_closure228.name = "main_closure228";
  $desc = $collectedClasses.main_closure228;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure228.prototype = $desc;
  function main_closure229() {
  }
  main_closure229.builtin$cls = "main_closure229";
  if (!"name" in main_closure229)
    main_closure229.name = "main_closure229";
  $desc = $collectedClasses.main_closure229;
  if ($desc instanceof Array)
    $desc = $desc[1];
  main_closure229.prototype = $desc;
  function Container(name) {
    this.name = name;
  }
  Container.builtin$cls = "Container";
  if (!"name" in Container)
    Container.name = "Container";
  $desc = $collectedClasses.Container;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Container.prototype = $desc;
  Container.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Category(content, memberNames, inheritedCounter, memberCounter, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.content = content;
    this.memberNames = memberNames;
    this.inheritedCounter = inheritedCounter;
    this.memberCounter = memberCounter;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Category.builtin$cls = "Category";
  if (!"name" in Category)
    Category.name = "Category";
  $desc = $collectedClasses.Category;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category.prototype = $desc;
  Category.prototype.get$content = function(receiver) {
    return this.content;
  };
  function Category_memberNamed_closure(name_0) {
    this.name_0 = name_0;
  }
  Category_memberNamed_closure.builtin$cls = "Category_memberNamed_closure";
  if (!"name" in Category_memberNamed_closure)
    Category_memberNamed_closure.name = "Category_memberNamed_closure";
  $desc = $collectedClasses.Category_memberNamed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category_memberNamed_closure.prototype = $desc;
  function Category$forClasses_closure(this_0) {
    this.this_0 = this_0;
  }
  Category$forClasses_closure.builtin$cls = "Category$forClasses_closure";
  if (!"name" in Category$forClasses_closure)
    Category$forClasses_closure.name = "Category$forClasses_closure";
  $desc = $collectedClasses.Category$forClasses_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forClasses_closure.prototype = $desc;
  function Category$forVariables_closure(this_0, variables_1) {
    this.this_0 = this_0;
    this.variables_1 = variables_1;
  }
  Category$forVariables_closure.builtin$cls = "Category$forVariables_closure";
  if (!"name" in Category$forVariables_closure)
    Category$forVariables_closure.name = "Category$forVariables_closure";
  $desc = $collectedClasses.Category$forVariables_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forVariables_closure.prototype = $desc;
  function Category$forVariables_closure0(this_2, getters_3) {
    this.this_2 = this_2;
    this.getters_3 = getters_3;
  }
  Category$forVariables_closure0.builtin$cls = "Category$forVariables_closure0";
  if (!"name" in Category$forVariables_closure0)
    Category$forVariables_closure0.name = "Category$forVariables_closure0";
  $desc = $collectedClasses.Category$forVariables_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forVariables_closure0.prototype = $desc;
  function Category$forVariables_closure1(this_4, setters_5) {
    this.this_4 = this_4;
    this.setters_5 = setters_5;
  }
  Category$forVariables_closure1.builtin$cls = "Category$forVariables_closure1";
  if (!"name" in Category$forVariables_closure1)
    Category$forVariables_closure1.name = "Category$forVariables_closure1";
  $desc = $collectedClasses.Category$forVariables_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forVariables_closure1.prototype = $desc;
  function Category$forFunctions_closure(this_0, json_1, isConstructor_2, className_3, isOperator_4, owner_5) {
    this.this_0 = this_0;
    this.json_1 = json_1;
    this.isConstructor_2 = isConstructor_2;
    this.className_3 = className_3;
    this.isOperator_4 = isOperator_4;
    this.owner_5 = owner_5;
  }
  Category$forFunctions_closure.builtin$cls = "Category$forFunctions_closure";
  if (!"name" in Category$forFunctions_closure)
    Category$forFunctions_closure.name = "Category$forFunctions_closure";
  $desc = $collectedClasses.Category$forFunctions_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forFunctions_closure.prototype = $desc;
  function Category$forTypedefs_closure(this_0, json_1) {
    this.this_0 = this_0;
    this.json_1 = json_1;
  }
  Category$forTypedefs_closure.builtin$cls = "Category$forTypedefs_closure";
  if (!"name" in Category$forTypedefs_closure)
    Category$forTypedefs_closure.name = "Category$forTypedefs_closure";
  $desc = $collectedClasses.Category$forTypedefs_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category$forTypedefs_closure.prototype = $desc;
  function Category_addInheritedItem_closure(item_0) {
    this.item_0 = item_0;
  }
  Category_addInheritedItem_closure.builtin$cls = "Category_addInheritedItem_closure";
  if (!"name" in Category_addInheritedItem_closure)
    Category_addInheritedItem_closure.name = "Category_addInheritedItem_closure";
  $desc = $collectedClasses.Category_addInheritedItem_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category_addInheritedItem_closure.prototype = $desc;
  function Category_filteredContent_closure(filter_0) {
    this.filter_0 = filter_0;
  }
  Category_filteredContent_closure.builtin$cls = "Category_filteredContent_closure";
  if (!"name" in Category_filteredContent_closure)
    Category_filteredContent_closure.name = "Category_filteredContent_closure";
  $desc = $collectedClasses.Category_filteredContent_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Category_filteredContent_closure.prototype = $desc;
  function Filter(showInherited, showObjectMembers) {
    this.showInherited = showInherited;
    this.showObjectMembers = showObjectMembers;
  }
  Filter.builtin$cls = "Filter";
  if (!"name" in Filter)
    Filter.name = "Filter";
  $desc = $collectedClasses.Filter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Filter.prototype = $desc;
  function Item(path, qualifiedName) {
    this.path = path;
    this.qualifiedName = qualifiedName;
  }
  Item.builtin$cls = "Item";
  if (!"name" in Item)
    Item.name = "Item";
  $desc = $collectedClasses.Item;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Item.prototype = $desc;
  Item.prototype.get$path = function(receiver) {
    return this.path;
  };
  Item.prototype.get$qualifiedName = function() {
    return this.qualifiedName;
  };
  function Container_ChangeNotifier() {
  }
  Container_ChangeNotifier.builtin$cls = "Container_ChangeNotifier";
  if (!"name" in Container_ChangeNotifier)
    Container_ChangeNotifier.name = "Container_ChangeNotifier";
  $desc = $collectedClasses.Container_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Container_ChangeNotifier.prototype = $desc;
  function _sort_closure() {
  }
  _sort_closure.builtin$cls = "_sort_closure";
  if (!"name" in _sort_closure)
    _sort_closure.name = "_sort_closure";
  $desc = $collectedClasses._sort_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _sort_closure.prototype = $desc;
  function _sort__closure() {
  }
  _sort__closure.builtin$cls = "_sort__closure";
  if (!"name" in _sort__closure)
    _sort__closure.name = "_sort__closure";
  $desc = $collectedClasses._sort__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _sort__closure.prototype = $desc;
  function Home(owner, libraries, path, qualifiedName, _owner, _category_item$__$version, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.owner = owner;
    this.libraries = libraries;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this._owner = _owner;
    this._category_item$__$version = _category_item$__$version;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Home.builtin$cls = "Home";
  if (!"name" in Home)
    Home.name = "Home";
  $desc = $collectedClasses.Home;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home.prototype = $desc;
  Home.prototype.get$owner = function() {
    return this.owner;
  };
  Home.prototype.get$libraries = function() {
    return this.libraries;
  };
  function Home_closure(packages_0) {
    this.packages_0 = packages_0;
  }
  Home_closure.builtin$cls = "Home_closure";
  if (!"name" in Home_closure)
    Home_closure.name = "Home_closure";
  $desc = $collectedClasses.Home_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_closure.prototype = $desc;
  function Home__closure1() {
  }
  Home__closure1.builtin$cls = "Home__closure1";
  if (!"name" in Home__closure1)
    Home__closure1.name = "Home__closure1";
  $desc = $collectedClasses.Home__closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home__closure1.prototype = $desc;
  function Home_closure0(this_1) {
    this.this_1 = this_1;
  }
  Home_closure0.builtin$cls = "Home_closure0";
  if (!"name" in Home_closure0)
    Home_closure0.name = "Home_closure0";
  $desc = $collectedClasses.Home_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_closure0.prototype = $desc;
  function Home__closure(packageName_2) {
    this.packageName_2 = packageName_2;
  }
  Home__closure.builtin$cls = "Home__closure";
  if (!"name" in Home__closure)
    Home__closure.name = "Home__closure";
  $desc = $collectedClasses.Home__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home__closure.prototype = $desc;
  function Home__closure0(libraries_3) {
    this.libraries_3 = libraries_3;
  }
  Home__closure0.builtin$cls = "Home__closure0";
  if (!"name" in Home__closure0)
    Home__closure0.name = "Home__closure0";
  $desc = $collectedClasses.Home__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home__closure0.prototype = $desc;
  function Home_makeMainLibrarySpecial_closure(this_0) {
    this.this_0 = this_0;
  }
  Home_makeMainLibrarySpecial_closure.builtin$cls = "Home_makeMainLibrarySpecial_closure";
  if (!"name" in Home_makeMainLibrarySpecial_closure)
    Home_makeMainLibrarySpecial_closure.name = "Home_makeMainLibrarySpecial_closure";
  $desc = $collectedClasses.Home_makeMainLibrarySpecial_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_makeMainLibrarySpecial_closure.prototype = $desc;
  function Home_makeMainLibrarySpecial_closure0(this_1) {
    this.this_1 = this_1;
  }
  Home_makeMainLibrarySpecial_closure0.builtin$cls = "Home_makeMainLibrarySpecial_closure0";
  if (!"name" in Home_makeMainLibrarySpecial_closure0)
    Home_makeMainLibrarySpecial_closure0.name = "Home_makeMainLibrarySpecial_closure0";
  $desc = $collectedClasses.Home_makeMainLibrarySpecial_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_makeMainLibrarySpecial_closure0.prototype = $desc;
  function Home_makeMainLibrarySpecial_closure1(mainLib_2) {
    this.mainLib_2 = mainLib_2;
  }
  Home_makeMainLibrarySpecial_closure1.builtin$cls = "Home_makeMainLibrarySpecial_closure1";
  if (!"name" in Home_makeMainLibrarySpecial_closure1)
    Home_makeMainLibrarySpecial_closure1.name = "Home_makeMainLibrarySpecial_closure1";
  $desc = $collectedClasses.Home_makeMainLibrarySpecial_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_makeMainLibrarySpecial_closure1.prototype = $desc;
  function Home_memberNamed_closure(name_0) {
    this.name_0 = name_0;
  }
  Home_memberNamed_closure.builtin$cls = "Home_memberNamed_closure";
  if (!"name" in Home_memberNamed_closure)
    Home_memberNamed_closure.name = "Home_memberNamed_closure";
  $desc = $collectedClasses.Home_memberNamed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Home_memberNamed_closure.prototype = $desc;
  function LazyItem(previewComment) {
    this.previewComment = previewComment;
  }
  LazyItem.builtin$cls = "LazyItem";
  if (!"name" in LazyItem)
    LazyItem.name = "LazyItem";
  $desc = $collectedClasses.LazyItem;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LazyItem.prototype = $desc;
  LazyItem.prototype.get$previewComment = function() {
    return this.previewComment;
  };
  function LazyItem_load_closure(this_0) {
    this.this_0 = this_0;
  }
  LazyItem_load_closure.builtin$cls = "LazyItem_load_closure";
  if (!"name" in LazyItem_load_closure)
    LazyItem_load_closure.name = "LazyItem_load_closure";
  $desc = $collectedClasses.LazyItem_load_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LazyItem_load_closure.prototype = $desc;
  function Library(classes, errors, typedefs, variables, functions, operators, home, isLoaded, previewComment, path, qualifiedName, _owner, _category_item$__$version, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.classes = classes;
    this.errors = errors;
    this.typedefs = typedefs;
    this.variables = variables;
    this.functions = functions;
    this.operators = operators;
    this.home = home;
    this.isLoaded = isLoaded;
    this.previewComment = previewComment;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this._owner = _owner;
    this._category_item$__$version = _category_item$__$version;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Library.builtin$cls = "Library";
  if (!"name" in Library)
    Library.name = "Library";
  $desc = $collectedClasses.Library;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Library.prototype = $desc;
  Library.prototype.get$classes = function(receiver) {
    return this.classes;
  };
  Library.prototype.set$classes = function(receiver, v) {
    return this.classes = v;
  };
  Library.prototype.get$errors = function() {
    return this.errors;
  };
  Library.prototype.set$errors = function(v) {
    return this.errors = v;
  };
  Library.prototype.get$typedefs = function(receiver) {
    return this.typedefs;
  };
  Library.prototype.set$typedefs = function(receiver, v) {
    return this.typedefs = v;
  };
  Library.prototype.get$variables = function(receiver) {
    return this.variables;
  };
  Library.prototype.set$variables = function(receiver, v) {
    return this.variables = v;
  };
  Library.prototype.get$functions = function() {
    return this.functions;
  };
  Library.prototype.set$functions = function(v) {
    return this.functions = v;
  };
  Library.prototype.get$operators = function() {
    return this.operators;
  };
  Library.prototype.set$operators = function(v) {
    return this.operators = v;
  };
  Library.prototype.get$home = function() {
    return this.home;
  };
  function Class(functions, variables, constructs, operators, superClass, isAbstract, annotations, interfaces, subclasses, generics, _instanceVariables, _staticVariables, _instanceFunctions, _staticFunctions, isLoaded, previewComment, path, qualifiedName, _owner, _category_item$__$version, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.functions = functions;
    this.variables = variables;
    this.constructs = constructs;
    this.operators = operators;
    this.superClass = superClass;
    this.isAbstract = isAbstract;
    this.annotations = annotations;
    this.interfaces = interfaces;
    this.subclasses = subclasses;
    this.generics = generics;
    this._instanceVariables = _instanceVariables;
    this._staticVariables = _staticVariables;
    this._instanceFunctions = _instanceFunctions;
    this._staticFunctions = _staticFunctions;
    this.isLoaded = isLoaded;
    this.previewComment = previewComment;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this._owner = _owner;
    this._category_item$__$version = _category_item$__$version;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Class.builtin$cls = "Class";
  if (!"name" in Class)
    Class.name = "Class";
  $desc = $collectedClasses.Class;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class.prototype = $desc;
  Class.prototype.get$functions = function() {
    return this.functions;
  };
  Class.prototype.set$functions = function(v) {
    return this.functions = v;
  };
  Class.prototype.get$variables = function(receiver) {
    return this.variables;
  };
  Class.prototype.set$variables = function(receiver, v) {
    return this.variables = v;
  };
  Class.prototype.get$operators = function() {
    return this.operators;
  };
  Class.prototype.set$operators = function(v) {
    return this.operators = v;
  };
  Class.prototype.get$superClass = function() {
    return this.superClass;
  };
  Class.prototype.get$isAbstract = function() {
    return this.isAbstract;
  };
  Class.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Class.prototype.set$annotations = function(receiver, v) {
    return this.annotations = v;
  };
  Class.prototype.get$interfaces = function() {
    return this.interfaces;
  };
  Class.prototype.get$subclasses = function() {
    return this.subclasses;
  };
  function Class_addToHierarchy_closure() {
  }
  Class_addToHierarchy_closure.builtin$cls = "Class_addToHierarchy_closure";
  if (!"name" in Class_addToHierarchy_closure)
    Class_addToHierarchy_closure.name = "Class_addToHierarchy_closure";
  $desc = $collectedClasses.Class_addToHierarchy_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_addToHierarchy_closure.prototype = $desc;
  function Class_addToHierarchy__closure() {
  }
  Class_addToHierarchy__closure.builtin$cls = "Class_addToHierarchy__closure";
  if (!"name" in Class_addToHierarchy__closure)
    Class_addToHierarchy__closure.name = "Class_addToHierarchy__closure";
  $desc = $collectedClasses.Class_addToHierarchy__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_addToHierarchy__closure.prototype = $desc;
  function Class_loadValues_closure() {
  }
  Class_loadValues_closure.builtin$cls = "Class_loadValues_closure";
  if (!"name" in Class_loadValues_closure)
    Class_loadValues_closure.name = "Class_loadValues_closure";
  $desc = $collectedClasses.Class_loadValues_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_loadValues_closure.prototype = $desc;
  function Class_loadValues_closure0() {
  }
  Class_loadValues_closure0.builtin$cls = "Class_loadValues_closure0";
  if (!"name" in Class_loadValues_closure0)
    Class_loadValues_closure0.name = "Class_loadValues_closure0";
  $desc = $collectedClasses.Class_loadValues_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_loadValues_closure0.prototype = $desc;
  function Class_loadValues_closure1(this_0) {
    this.this_0 = this_0;
  }
  Class_loadValues_closure1.builtin$cls = "Class_loadValues_closure1";
  if (!"name" in Class_loadValues_closure1)
    Class_loadValues_closure1.name = "Class_loadValues_closure1";
  $desc = $collectedClasses.Class_loadValues_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class_loadValues_closure1.prototype = $desc;
  function Class__addVariable_closure(this_0, isSetter_1, isGetter_2) {
    this.this_0 = this_0;
    this.isSetter_1 = isSetter_1;
    this.isGetter_2 = isGetter_2;
  }
  Class__addVariable_closure.builtin$cls = "Class__addVariable_closure";
  if (!"name" in Class__addVariable_closure)
    Class__addVariable_closure.name = "Class__addVariable_closure";
  $desc = $collectedClasses.Class__addVariable_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class__addVariable_closure.prototype = $desc;
  function Class__addMethod_closure(this_0, isOperator_1) {
    this.this_0 = this_0;
    this.isOperator_1 = isOperator_1;
  }
  Class__addMethod_closure.builtin$cls = "Class__addMethod_closure";
  if (!"name" in Class__addMethod_closure)
    Class__addMethod_closure.name = "Class__addMethod_closure";
  $desc = $collectedClasses.Class__addMethod_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Class__addMethod_closure.prototype = $desc;
  function AnnotationGroup(supportedBrowsers, annotations, domName) {
    this.supportedBrowsers = supportedBrowsers;
    this.annotations = annotations;
    this.domName = domName;
  }
  AnnotationGroup.builtin$cls = "AnnotationGroup";
  if (!"name" in AnnotationGroup)
    AnnotationGroup.name = "AnnotationGroup";
  $desc = $collectedClasses.AnnotationGroup;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationGroup.prototype = $desc;
  AnnotationGroup.prototype.get$supportedBrowsers = function() {
    return this.supportedBrowsers;
  };
  AnnotationGroup.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  AnnotationGroup.prototype.set$annotations = function(receiver, v) {
    return this.annotations = v;
  };
  function AnnotationGroup_closure(this_0, set_1) {
    this.this_0 = this_0;
    this.set_1 = set_1;
  }
  AnnotationGroup_closure.builtin$cls = "AnnotationGroup_closure";
  if (!"name" in AnnotationGroup_closure)
    AnnotationGroup_closure.name = "AnnotationGroup_closure";
  $desc = $collectedClasses.AnnotationGroup_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationGroup_closure.prototype = $desc;
  function AnnotationGroup__closure(this_2) {
    this.this_2 = this_2;
  }
  AnnotationGroup__closure.builtin$cls = "AnnotationGroup__closure";
  if (!"name" in AnnotationGroup__closure)
    AnnotationGroup__closure.name = "AnnotationGroup__closure";
  $desc = $collectedClasses.AnnotationGroup__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationGroup__closure.prototype = $desc;
  function AnnotationGroup__closure0(this_3) {
    this.this_3 = this_3;
  }
  AnnotationGroup__closure0.builtin$cls = "AnnotationGroup__closure0";
  if (!"name" in AnnotationGroup__closure0)
    AnnotationGroup__closure0.name = "AnnotationGroup__closure0";
  $desc = $collectedClasses.AnnotationGroup__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationGroup__closure0.prototype = $desc;
  function AnnotationGroup_closure0() {
  }
  AnnotationGroup_closure0.builtin$cls = "AnnotationGroup_closure0";
  if (!"name" in AnnotationGroup_closure0)
    AnnotationGroup_closure0.name = "AnnotationGroup_closure0";
  $desc = $collectedClasses.AnnotationGroup_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationGroup_closure0.prototype = $desc;
  function Annotation(qualifiedName, link, parameters) {
    this.qualifiedName = qualifiedName;
    this.link = link;
    this.parameters = parameters;
  }
  Annotation.builtin$cls = "Annotation";
  if (!"name" in Annotation)
    Annotation.name = "Annotation";
  $desc = $collectedClasses.Annotation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Annotation.prototype = $desc;
  Annotation.prototype.get$qualifiedName = function() {
    return this.qualifiedName;
  };
  Annotation.prototype.get$link = function() {
    return this.link;
  };
  Annotation.prototype.get$parameters = function(receiver) {
    return this.parameters;
  };
  function Annotation_hashCode_closure() {
  }
  Annotation_hashCode_closure.builtin$cls = "Annotation_hashCode_closure";
  if (!"name" in Annotation_hashCode_closure)
    Annotation_hashCode_closure.name = "Annotation_hashCode_closure";
  $desc = $collectedClasses.Annotation_hashCode_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Annotation_hashCode_closure.prototype = $desc;
  function Parameterized(parameters) {
    this.parameters = parameters;
  }
  Parameterized.builtin$cls = "Parameterized";
  if (!"name" in Parameterized)
    Parameterized.name = "Parameterized";
  $desc = $collectedClasses.Parameterized;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parameterized.prototype = $desc;
  Parameterized.prototype.get$parameters = function(receiver) {
    return this.parameters;
  };
  Parameterized.prototype.set$parameters = function(receiver, v) {
    return this.parameters = v;
  };
  function Parameterized_getParameters_closure(this_0, values_1) {
    this.this_0 = this_0;
    this.values_1 = values_1;
  }
  Parameterized_getParameters_closure.builtin$cls = "Parameterized_getParameters_closure";
  if (!"name" in Parameterized_getParameters_closure)
    Parameterized_getParameters_closure.name = "Parameterized_getParameters_closure";
  $desc = $collectedClasses.Parameterized_getParameters_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parameterized_getParameters_closure.prototype = $desc;
  function Parameterized_parameterNamed_closure(name_0) {
    this.name_0 = name_0;
  }
  Parameterized_parameterNamed_closure.builtin$cls = "Parameterized_parameterNamed_closure";
  if (!"name" in Parameterized_parameterNamed_closure)
    Parameterized_parameterNamed_closure.name = "Parameterized_parameterNamed_closure";
  $desc = $collectedClasses.Parameterized_parameterNamed_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parameterized_parameterNamed_closure.prototype = $desc;
  function Parameterized_parameterNamed_closure0() {
  }
  Parameterized_parameterNamed_closure0.builtin$cls = "Parameterized_parameterNamed_closure0";
  if (!"name" in Parameterized_parameterNamed_closure0)
    Parameterized_parameterNamed_closure0.name = "Parameterized_parameterNamed_closure0";
  $desc = $collectedClasses.Parameterized_parameterNamed_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parameterized_parameterNamed_closure0.prototype = $desc;
  function Typedef(type, annotations, previewComment, parameters, path, qualifiedName, _owner, _category_item$__$version, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.type = type;
    this.annotations = annotations;
    this.previewComment = previewComment;
    this.parameters = parameters;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this._owner = _owner;
    this._category_item$__$version = _category_item$__$version;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Typedef.builtin$cls = "Typedef";
  if (!"name" in Typedef)
    Typedef.name = "Typedef";
  $desc = $collectedClasses.Typedef;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Typedef.prototype = $desc;
  Typedef.prototype.get$type = function(receiver) {
    return this.type;
  };
  Typedef.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Typedef.prototype.get$previewComment = function() {
    return this.previewComment;
  };
  function Method(isStatic, isAbstract, isConstant, isConstructor, inheritedFrom, className, isOperator, annotations, type, commentFrom, parameters, path, qualifiedName, _owner, _category_item$__$version, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.isStatic = isStatic;
    this.isAbstract = isAbstract;
    this.isConstant = isConstant;
    this.isConstructor = isConstructor;
    this.inheritedFrom = inheritedFrom;
    this.className = className;
    this.isOperator = isOperator;
    this.annotations = annotations;
    this.type = type;
    this.commentFrom = commentFrom;
    this.parameters = parameters;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this._owner = _owner;
    this._category_item$__$version = _category_item$__$version;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Method.builtin$cls = "Method";
  if (!"name" in Method)
    Method.name = "Method";
  $desc = $collectedClasses.Method;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Method.prototype = $desc;
  Method.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  Method.prototype.get$isAbstract = function() {
    return this.isAbstract;
  };
  Method.prototype.get$isConstant = function() {
    return this.isConstant;
  };
  Method.prototype.get$isConstructor = function() {
    return this.isConstructor;
  };
  Method.prototype.get$inheritedFrom = function(receiver) {
    return this.inheritedFrom;
  };
  Method.prototype.get$className = function(receiver) {
    return this.className;
  };
  Method.prototype.get$isOperator = function() {
    return this.isOperator;
  };
  Method.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Method.prototype.get$type = function(receiver) {
    return this.type;
  };
  Method.prototype.get$commentFrom = function(receiver) {
    return this.commentFrom;
  };
  Method.prototype.set$commentFrom = function(receiver, v) {
    return this.commentFrom = v;
  };
  function Closure(category_item$Closure$parameters, returnType, category_item$Closure$name, parameters, path, qualifiedName, _owner, _category_item$__$version, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.category_item$Closure$parameters = category_item$Closure$parameters;
    this.returnType = returnType;
    this.category_item$Closure$name = category_item$Closure$name;
    this.parameters = parameters;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this._owner = _owner;
    this._category_item$__$version = _category_item$__$version;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Closure.builtin$cls = "Closure";
  if (!"name" in Closure)
    Closure.name = "Closure";
  $desc = $collectedClasses.Closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Closure.prototype = $desc;
  Closure.prototype.get$parameters = function(receiver) {
    return this.category_item$Closure$parameters;
  };
  Closure.prototype.set$parameters = function(receiver, v) {
    return this.category_item$Closure$parameters = v;
  };
  Closure.prototype.get$returnType = function() {
    return this.returnType;
  };
  Closure.prototype.get$name = function(receiver) {
    return this.category_item$Closure$name;
  };
  function Parameter(isOptional, isNamed, hasDefault, type, defaultValue, annotations, functionDeclaration, path, qualifiedName, _owner, _category_item$__$version, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.isOptional = isOptional;
    this.isNamed = isNamed;
    this.hasDefault = hasDefault;
    this.type = type;
    this.defaultValue = defaultValue;
    this.annotations = annotations;
    this.functionDeclaration = functionDeclaration;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this._owner = _owner;
    this._category_item$__$version = _category_item$__$version;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Parameter.builtin$cls = "Parameter";
  if (!"name" in Parameter)
    Parameter.name = "Parameter";
  $desc = $collectedClasses.Parameter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parameter.prototype = $desc;
  Parameter.prototype.get$isOptional = function() {
    return this.isOptional;
  };
  Parameter.prototype.get$isNamed = function() {
    return this.isNamed;
  };
  Parameter.prototype.get$type = function(receiver) {
    return this.type;
  };
  Parameter.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Parameter.prototype.get$functionDeclaration = function() {
    return this.functionDeclaration;
  };
  function Variable(isFinal, isStatic, isAbstract, isConstant, isGetter, isSetter, inheritedFrom, annotations, commentFrom, setterParameter, type, parameters, path, qualifiedName, _owner, _category_item$__$version, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, name, _category_item$__$comment, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.isFinal = isFinal;
    this.isStatic = isStatic;
    this.isAbstract = isAbstract;
    this.isConstant = isConstant;
    this.isGetter = isGetter;
    this.isSetter = isSetter;
    this.inheritedFrom = inheritedFrom;
    this.annotations = annotations;
    this.commentFrom = commentFrom;
    this.setterParameter = setterParameter;
    this.type = type;
    this.parameters = parameters;
    this.path = path;
    this.qualifiedName = qualifiedName;
    this._owner = _owner;
    this._category_item$__$version = _category_item$__$version;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.name = name;
    this._category_item$__$comment = _category_item$__$comment;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Variable.builtin$cls = "Variable";
  if (!"name" in Variable)
    Variable.name = "Variable";
  $desc = $collectedClasses.Variable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Variable.prototype = $desc;
  Variable.prototype.get$isFinal = function(receiver) {
    return this.isFinal;
  };
  Variable.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  Variable.prototype.get$isAbstract = function() {
    return this.isAbstract;
  };
  Variable.prototype.get$isConstant = function() {
    return this.isConstant;
  };
  Variable.prototype.get$isGetter = function() {
    return this.isGetter;
  };
  Variable.prototype.get$isSetter = function() {
    return this.isSetter;
  };
  Variable.prototype.get$inheritedFrom = function(receiver) {
    return this.inheritedFrom;
  };
  Variable.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  Variable.prototype.get$commentFrom = function(receiver) {
    return this.commentFrom;
  };
  Variable.prototype.set$commentFrom = function(receiver, v) {
    return this.commentFrom = v;
  };
  Variable.prototype.get$type = function(receiver) {
    return this.type;
  };
  Variable.prototype.set$type = function(receiver, v) {
    return this.type = v;
  };
  function NestedType(outer, inner) {
    this.outer = outer;
    this.inner = inner;
  }
  NestedType.builtin$cls = "NestedType";
  if (!"name" in NestedType)
    NestedType.name = "NestedType";
  $desc = $collectedClasses.NestedType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NestedType.prototype = $desc;
  NestedType.prototype.get$outer = function() {
    return this.outer;
  };
  NestedType.prototype.get$inner = function() {
    return this.inner;
  };
  function NestedType_NestedType_closure(inner_0) {
    this.inner_0 = inner_0;
  }
  NestedType_NestedType_closure.builtin$cls = "NestedType_NestedType_closure";
  if (!"name" in NestedType_NestedType_closure)
    NestedType_NestedType_closure.name = "NestedType_NestedType_closure";
  $desc = $collectedClasses.NestedType_NestedType_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NestedType_NestedType_closure.prototype = $desc;
  function LinkableType(loc) {
    this.loc = loc;
  }
  LinkableType.builtin$cls = "LinkableType";
  if (!"name" in LinkableType)
    LinkableType.name = "LinkableType";
  $desc = $collectedClasses.LinkableType;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkableType.prototype = $desc;
  LinkableType.prototype.get$loc = function() {
    return this.loc;
  };
  function ListIterable() {
  }
  ListIterable.builtin$cls = "ListIterable";
  if (!"name" in ListIterable)
    ListIterable.name = "ListIterable";
  $desc = $collectedClasses.ListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterable.prototype = $desc;
  function SubListIterable(_iterable, _start, _endOrLength) {
    this._iterable = _iterable;
    this._start = _start;
    this._endOrLength = _endOrLength;
  }
  SubListIterable.builtin$cls = "SubListIterable";
  if (!"name" in SubListIterable)
    SubListIterable.name = "SubListIterable";
  $desc = $collectedClasses.SubListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SubListIterable.prototype = $desc;
  function ListIterator(_iterable, _length, _index, _current) {
    this._iterable = _iterable;
    this._length = _length;
    this._index = _index;
    this._current = _current;
  }
  ListIterator.builtin$cls = "ListIterator";
  if (!"name" in ListIterator)
    ListIterator.name = "ListIterator";
  $desc = $collectedClasses.ListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListIterator.prototype = $desc;
  function MappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  MappedIterable.builtin$cls = "MappedIterable";
  if (!"name" in MappedIterable)
    MappedIterable.name = "MappedIterable";
  $desc = $collectedClasses.MappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterable.prototype = $desc;
  function EfficientLengthMappedIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  EfficientLengthMappedIterable.builtin$cls = "EfficientLengthMappedIterable";
  if (!"name" in EfficientLengthMappedIterable)
    EfficientLengthMappedIterable.name = "EfficientLengthMappedIterable";
  $desc = $collectedClasses.EfficientLengthMappedIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EfficientLengthMappedIterable.prototype = $desc;
  function MappedIterator(_current, _iterator, _f) {
    this._current = _current;
    this._iterator = _iterator;
    this._f = _f;
  }
  MappedIterator.builtin$cls = "MappedIterator";
  if (!"name" in MappedIterator)
    MappedIterator.name = "MappedIterator";
  $desc = $collectedClasses.MappedIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedIterator.prototype = $desc;
  function MappedListIterable(_source, _f) {
    this._source = _source;
    this._f = _f;
  }
  MappedListIterable.builtin$cls = "MappedListIterable";
  if (!"name" in MappedListIterable)
    MappedListIterable.name = "MappedListIterable";
  $desc = $collectedClasses.MappedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MappedListIterable.prototype = $desc;
  function WhereIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  WhereIterable.builtin$cls = "WhereIterable";
  if (!"name" in WhereIterable)
    WhereIterable.name = "WhereIterable";
  $desc = $collectedClasses.WhereIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterable.prototype = $desc;
  function WhereIterator(_iterator, _f) {
    this._iterator = _iterator;
    this._f = _f;
  }
  WhereIterator.builtin$cls = "WhereIterator";
  if (!"name" in WhereIterator)
    WhereIterator.name = "WhereIterator";
  $desc = $collectedClasses.WhereIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  WhereIterator.prototype = $desc;
  function ExpandIterable(_iterable, _f) {
    this._iterable = _iterable;
    this._f = _f;
  }
  ExpandIterable.builtin$cls = "ExpandIterable";
  if (!"name" in ExpandIterable)
    ExpandIterable.name = "ExpandIterable";
  $desc = $collectedClasses.ExpandIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterable.prototype = $desc;
  function ExpandIterator(_iterator, _f, _currentExpansion, _current) {
    this._iterator = _iterator;
    this._f = _f;
    this._currentExpansion = _currentExpansion;
    this._current = _current;
  }
  ExpandIterator.builtin$cls = "ExpandIterator";
  if (!"name" in ExpandIterator)
    ExpandIterator.name = "ExpandIterator";
  $desc = $collectedClasses.ExpandIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpandIterator.prototype = $desc;
  function EmptyIterator() {
  }
  EmptyIterator.builtin$cls = "EmptyIterator";
  if (!"name" in EmptyIterator)
    EmptyIterator.name = "EmptyIterator";
  $desc = $collectedClasses.EmptyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyIterator.prototype = $desc;
  function FixedLengthListMixin() {
  }
  FixedLengthListMixin.builtin$cls = "FixedLengthListMixin";
  if (!"name" in FixedLengthListMixin)
    FixedLengthListMixin.name = "FixedLengthListMixin";
  $desc = $collectedClasses.FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedLengthListMixin.prototype = $desc;
  function UnmodifiableListMixin() {
  }
  UnmodifiableListMixin.builtin$cls = "UnmodifiableListMixin";
  if (!"name" in UnmodifiableListMixin)
    UnmodifiableListMixin.name = "UnmodifiableListMixin";
  $desc = $collectedClasses.UnmodifiableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListMixin.prototype = $desc;
  function UnmodifiableListBase() {
  }
  UnmodifiableListBase.builtin$cls = "UnmodifiableListBase";
  if (!"name" in UnmodifiableListBase)
    UnmodifiableListBase.name = "UnmodifiableListBase";
  $desc = $collectedClasses.UnmodifiableListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListBase.prototype = $desc;
  function ReversedListIterable(_source) {
    this._source = _source;
  }
  ReversedListIterable.builtin$cls = "ReversedListIterable";
  if (!"name" in ReversedListIterable)
    ReversedListIterable.name = "ReversedListIterable";
  $desc = $collectedClasses.ReversedListIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ReversedListIterable.prototype = $desc;
  function Symbol(_name) {
    this._name = _name;
  }
  Symbol.builtin$cls = "Symbol";
  if (!"name" in Symbol)
    Symbol.name = "Symbol";
  $desc = $collectedClasses.Symbol;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol.prototype = $desc;
  Symbol.prototype.get$_name = function() {
    return this._name;
  };
  function _AsyncRun__scheduleImmediateJsOverride_internalCallback(callback_0) {
    this.callback_0 = callback_0;
  }
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.builtin$cls = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
  if (!"name" in _AsyncRun__scheduleImmediateJsOverride_internalCallback)
    _AsyncRun__scheduleImmediateJsOverride_internalCallback.name = "_AsyncRun__scheduleImmediateJsOverride_internalCallback";
  $desc = $collectedClasses._AsyncRun__scheduleImmediateJsOverride_internalCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = $desc;
  function _AsyncError(error, stackTrace) {
    this.error = error;
    this.stackTrace = stackTrace;
  }
  _AsyncError.builtin$cls = "_AsyncError";
  if (!"name" in _AsyncError)
    _AsyncError.name = "_AsyncError";
  $desc = $collectedClasses._AsyncError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncError.prototype = $desc;
  _AsyncError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _AsyncError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _BroadcastStream(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _BroadcastStream.builtin$cls = "_BroadcastStream";
  if (!"name" in _BroadcastStream)
    _BroadcastStream.name = "_BroadcastStream";
  $desc = $collectedClasses._BroadcastStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStream.prototype = $desc;
  function _BroadcastSubscription(_eventState, _async$_next, _async$_previous, _async$_controller, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._eventState = _eventState;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._async$_controller = _async$_controller;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BroadcastSubscription.builtin$cls = "_BroadcastSubscription";
  if (!"name" in _BroadcastSubscription)
    _BroadcastSubscription.name = "_BroadcastSubscription";
  $desc = $collectedClasses._BroadcastSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastSubscription.prototype = $desc;
  _BroadcastSubscription.prototype.get$_eventState = function() {
    return this._eventState;
  };
  _BroadcastSubscription.prototype.set$_eventState = function(v) {
    return this._eventState = v;
  };
  _BroadcastSubscription.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastSubscription.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastSubscription.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastSubscription.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function _BroadcastStreamController(_async$_next, _async$_previous) {
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
  }
  _BroadcastStreamController.builtin$cls = "_BroadcastStreamController";
  if (!"name" in _BroadcastStreamController)
    _BroadcastStreamController.name = "_BroadcastStreamController";
  $desc = $collectedClasses._BroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BroadcastStreamController.prototype = $desc;
  _BroadcastStreamController.prototype.get$_async$_next = function() {
    return this._async$_next;
  };
  _BroadcastStreamController.prototype.set$_async$_next = function(v) {
    return this._async$_next = v;
  };
  _BroadcastStreamController.prototype.get$_async$_previous = function() {
    return this._async$_previous;
  };
  _BroadcastStreamController.prototype.set$_async$_previous = function(v) {
    return this._async$_previous = v;
  };
  function _SyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _SyncBroadcastStreamController.builtin$cls = "_SyncBroadcastStreamController";
  if (!"name" in _SyncBroadcastStreamController)
    _SyncBroadcastStreamController.name = "_SyncBroadcastStreamController";
  $desc = $collectedClasses._SyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController.prototype = $desc;
  function _SyncBroadcastStreamController__sendData_closure(this_0, data_1) {
    this.this_0 = this_0;
    this.data_1 = data_1;
  }
  _SyncBroadcastStreamController__sendData_closure.builtin$cls = "_SyncBroadcastStreamController__sendData_closure";
  if (!"name" in _SyncBroadcastStreamController__sendData_closure)
    _SyncBroadcastStreamController__sendData_closure.name = "_SyncBroadcastStreamController__sendData_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendData_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendData_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _SyncBroadcastStreamController__sendError_closure.builtin$cls = "_SyncBroadcastStreamController__sendError_closure";
  if (!"name" in _SyncBroadcastStreamController__sendError_closure)
    _SyncBroadcastStreamController__sendError_closure.name = "_SyncBroadcastStreamController__sendError_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendError_closure.prototype = $desc;
  function _SyncBroadcastStreamController__sendDone_closure(this_0) {
    this.this_0 = this_0;
  }
  _SyncBroadcastStreamController__sendDone_closure.builtin$cls = "_SyncBroadcastStreamController__sendDone_closure";
  if (!"name" in _SyncBroadcastStreamController__sendDone_closure)
    _SyncBroadcastStreamController__sendDone_closure.name = "_SyncBroadcastStreamController__sendDone_closure";
  $desc = $collectedClasses._SyncBroadcastStreamController__sendDone_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncBroadcastStreamController__sendDone_closure.prototype = $desc;
  function _AsyncBroadcastStreamController(_onListen, _onCancel, _state, _async$_next, _async$_previous, _addStreamState, _doneFuture) {
    this._onListen = _onListen;
    this._onCancel = _onCancel;
    this._state = _state;
    this._async$_next = _async$_next;
    this._async$_previous = _async$_previous;
    this._addStreamState = _addStreamState;
    this._doneFuture = _doneFuture;
  }
  _AsyncBroadcastStreamController.builtin$cls = "_AsyncBroadcastStreamController";
  if (!"name" in _AsyncBroadcastStreamController)
    _AsyncBroadcastStreamController.name = "_AsyncBroadcastStreamController";
  $desc = $collectedClasses._AsyncBroadcastStreamController;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncBroadcastStreamController.prototype = $desc;
  function Future() {
  }
  Future.builtin$cls = "Future";
  if (!"name" in Future)
    Future.name = "Future";
  $desc = $collectedClasses.Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future.prototype = $desc;
  function Future_wait_handleError(box_0, eagerError_1) {
    this.box_0 = box_0;
    this.eagerError_1 = eagerError_1;
  }
  Future_wait_handleError.builtin$cls = "Future_wait_handleError";
  if (!"name" in Future_wait_handleError)
    Future_wait_handleError.name = "Future_wait_handleError";
  $desc = $collectedClasses.Future_wait_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_handleError.prototype = $desc;
  function Future_wait_closure(box_0, eagerError_2, pos_3) {
    this.box_0 = box_0;
    this.eagerError_2 = eagerError_2;
    this.pos_3 = pos_3;
  }
  Future_wait_closure.builtin$cls = "Future_wait_closure";
  if (!"name" in Future_wait_closure)
    Future_wait_closure.name = "Future_wait_closure";
  $desc = $collectedClasses.Future_wait_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Future_wait_closure.prototype = $desc;
  function _Completer() {
  }
  _Completer.builtin$cls = "_Completer";
  if (!"name" in _Completer)
    _Completer.name = "_Completer";
  $desc = $collectedClasses._Completer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Completer.prototype = $desc;
  function _AsyncCompleter(future) {
    this.future = future;
  }
  _AsyncCompleter.builtin$cls = "_AsyncCompleter";
  if (!"name" in _AsyncCompleter)
    _AsyncCompleter.name = "_AsyncCompleter";
  $desc = $collectedClasses._AsyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCompleter.prototype = $desc;
  function _SyncCompleter(future) {
    this.future = future;
  }
  _SyncCompleter.builtin$cls = "_SyncCompleter";
  if (!"name" in _SyncCompleter)
    _SyncCompleter.name = "_SyncCompleter";
  $desc = $collectedClasses._SyncCompleter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SyncCompleter.prototype = $desc;
  function _Future(_state, _zone, _resultOrListeners, _nextListener, _onValueCallback, _errorTestCallback, _onErrorCallback, _whenCompleteActionCallback) {
    this._state = _state;
    this._zone = _zone;
    this._resultOrListeners = _resultOrListeners;
    this._nextListener = _nextListener;
    this._onValueCallback = _onValueCallback;
    this._errorTestCallback = _errorTestCallback;
    this._onErrorCallback = _onErrorCallback;
    this._whenCompleteActionCallback = _whenCompleteActionCallback;
  }
  _Future.builtin$cls = "_Future";
  if (!"name" in _Future)
    _Future.name = "_Future";
  $desc = $collectedClasses._Future;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future.prototype = $desc;
  _Future.prototype.get$_zone = function() {
    return this._zone;
  };
  _Future.prototype.get$_nextListener = function() {
    return this._nextListener;
  };
  _Future.prototype.set$_nextListener = function(v) {
    return this._nextListener = v;
  };
  function _Future__addListener_closure(this_0, listener_1) {
    this.this_0 = this_0;
    this.listener_1 = listener_1;
  }
  _Future__addListener_closure.builtin$cls = "_Future__addListener_closure";
  if (!"name" in _Future__addListener_closure)
    _Future__addListener_closure.name = "_Future__addListener_closure";
  $desc = $collectedClasses._Future__addListener_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__addListener_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure(target_0) {
    this.target_0 = target_0;
  }
  _Future__chainForeignFuture_closure.builtin$cls = "_Future__chainForeignFuture_closure";
  if (!"name" in _Future__chainForeignFuture_closure)
    _Future__chainForeignFuture_closure.name = "_Future__chainForeignFuture_closure";
  $desc = $collectedClasses._Future__chainForeignFuture_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure.prototype = $desc;
  function _Future__chainForeignFuture_closure0(target_1) {
    this.target_1 = target_1;
  }
  _Future__chainForeignFuture_closure0.builtin$cls = "_Future__chainForeignFuture_closure0";
  if (!"name" in _Future__chainForeignFuture_closure0)
    _Future__chainForeignFuture_closure0.name = "_Future__chainForeignFuture_closure0";
  $desc = $collectedClasses._Future__chainForeignFuture_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__chainForeignFuture_closure0.prototype = $desc;
  function _Future__asyncComplete_closure(this_0, coreFuture_1) {
    this.this_0 = this_0;
    this.coreFuture_1 = coreFuture_1;
  }
  _Future__asyncComplete_closure.builtin$cls = "_Future__asyncComplete_closure";
  if (!"name" in _Future__asyncComplete_closure)
    _Future__asyncComplete_closure.name = "_Future__asyncComplete_closure";
  $desc = $collectedClasses._Future__asyncComplete_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure.prototype = $desc;
  function _Future__asyncComplete_closure0(this_2, value_3) {
    this.this_2 = this_2;
    this.value_3 = value_3;
  }
  _Future__asyncComplete_closure0.builtin$cls = "_Future__asyncComplete_closure0";
  if (!"name" in _Future__asyncComplete_closure0)
    _Future__asyncComplete_closure0.name = "_Future__asyncComplete_closure0";
  $desc = $collectedClasses._Future__asyncComplete_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncComplete_closure0.prototype = $desc;
  function _Future__asyncCompleteError_closure(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _Future__asyncCompleteError_closure.builtin$cls = "_Future__asyncCompleteError_closure";
  if (!"name" in _Future__asyncCompleteError_closure)
    _Future__asyncCompleteError_closure.name = "_Future__asyncCompleteError_closure";
  $desc = $collectedClasses._Future__asyncCompleteError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__asyncCompleteError_closure.prototype = $desc;
  function _Future__propagateToListeners_handleValueCallback(box_1, listener_3, sourceValue_4, zone_5) {
    this.box_1 = box_1;
    this.listener_3 = listener_3;
    this.sourceValue_4 = sourceValue_4;
    this.zone_5 = zone_5;
  }
  _Future__propagateToListeners_handleValueCallback.builtin$cls = "_Future__propagateToListeners_handleValueCallback";
  if (!"name" in _Future__propagateToListeners_handleValueCallback)
    _Future__propagateToListeners_handleValueCallback.name = "_Future__propagateToListeners_handleValueCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleValueCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleValueCallback.prototype = $desc;
  function _Future__propagateToListeners_handleError(box_2, box_1, listener_6, zone_7) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.listener_6 = listener_6;
    this.zone_7 = zone_7;
  }
  _Future__propagateToListeners_handleError.builtin$cls = "_Future__propagateToListeners_handleError";
  if (!"name" in _Future__propagateToListeners_handleError)
    _Future__propagateToListeners_handleError.name = "_Future__propagateToListeners_handleError";
  $desc = $collectedClasses._Future__propagateToListeners_handleError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleError.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback(box_2, box_1, hasError_8, listener_9, zone_10) {
    this.box_2 = box_2;
    this.box_1 = box_1;
    this.hasError_8 = hasError_8;
    this.listener_9 = listener_9;
    this.zone_10 = zone_10;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback)
    _Future__propagateToListeners_handleWhenCompleteCallback.name = "_Future__propagateToListeners_handleWhenCompleteCallback";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure(box_2, listener_11) {
    this.box_2 = box_2;
    this.listener_11 = listener_11;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = $desc;
  function _Future__propagateToListeners_handleWhenCompleteCallback_closure0(box_0, listener_12) {
    this.box_0 = box_0;
    this.listener_12 = listener_12;
  }
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.builtin$cls = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  if (!"name" in _Future__propagateToListeners_handleWhenCompleteCallback_closure0)
    _Future__propagateToListeners_handleWhenCompleteCallback_closure0.name = "_Future__propagateToListeners_handleWhenCompleteCallback_closure0";
  $desc = $collectedClasses._Future__propagateToListeners_handleWhenCompleteCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Future__propagateToListeners_handleWhenCompleteCallback_closure0.prototype = $desc;
  function _AsyncCallbackEntry(callback, next) {
    this.callback = callback;
    this.next = next;
  }
  _AsyncCallbackEntry.builtin$cls = "_AsyncCallbackEntry";
  if (!"name" in _AsyncCallbackEntry)
    _AsyncCallbackEntry.name = "_AsyncCallbackEntry";
  $desc = $collectedClasses._AsyncCallbackEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AsyncCallbackEntry.prototype = $desc;
  _AsyncCallbackEntry.prototype.get$next = function() {
    return this.next;
  };
  _AsyncCallbackEntry.prototype.set$next = function(v) {
    return this.next = v;
  };
  function Stream() {
  }
  Stream.builtin$cls = "Stream";
  if (!"name" in Stream)
    Stream.name = "Stream";
  $desc = $collectedClasses.Stream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream.prototype = $desc;
  function Stream_fold_closure(box_0, this_1, combine_2, result_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.combine_2 = combine_2;
    this.result_3 = result_3;
  }
  Stream_fold_closure.builtin$cls = "Stream_fold_closure";
  if (!"name" in Stream_fold_closure)
    Stream_fold_closure.name = "Stream_fold_closure";
  $desc = $collectedClasses.Stream_fold_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold_closure.prototype = $desc;
  function Stream_fold__closure(box_0, combine_4, element_5) {
    this.box_0 = box_0;
    this.combine_4 = combine_4;
    this.element_5 = element_5;
  }
  Stream_fold__closure.builtin$cls = "Stream_fold__closure";
  if (!"name" in Stream_fold__closure)
    Stream_fold__closure.name = "Stream_fold__closure";
  $desc = $collectedClasses.Stream_fold__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold__closure.prototype = $desc;
  function Stream_fold__closure0(box_0) {
    this.box_0 = box_0;
  }
  Stream_fold__closure0.builtin$cls = "Stream_fold__closure0";
  if (!"name" in Stream_fold__closure0)
    Stream_fold__closure0.name = "Stream_fold__closure0";
  $desc = $collectedClasses.Stream_fold__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold__closure0.prototype = $desc;
  function Stream_fold_closure1(result_6) {
    this.result_6 = result_6;
  }
  Stream_fold_closure1.builtin$cls = "Stream_fold_closure1";
  if (!"name" in Stream_fold_closure1)
    Stream_fold_closure1.name = "Stream_fold_closure1";
  $desc = $collectedClasses.Stream_fold_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold_closure1.prototype = $desc;
  function Stream_fold_closure0(box_0, result_7) {
    this.box_0 = box_0;
    this.result_7 = result_7;
  }
  Stream_fold_closure0.builtin$cls = "Stream_fold_closure0";
  if (!"name" in Stream_fold_closure0)
    Stream_fold_closure0.name = "Stream_fold_closure0";
  $desc = $collectedClasses.Stream_fold_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_fold_closure0.prototype = $desc;
  function Stream_join_closure(box_0, this_1, separator_2, result_3, buffer_4) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.separator_2 = separator_2;
    this.result_3 = result_3;
    this.buffer_4 = buffer_4;
  }
  Stream_join_closure.builtin$cls = "Stream_join_closure";
  if (!"name" in Stream_join_closure)
    Stream_join_closure.name = "Stream_join_closure";
  $desc = $collectedClasses.Stream_join_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure.prototype = $desc;
  function Stream_join_closure1(result_5) {
    this.result_5 = result_5;
  }
  Stream_join_closure1.builtin$cls = "Stream_join_closure1";
  if (!"name" in Stream_join_closure1)
    Stream_join_closure1.name = "Stream_join_closure1";
  $desc = $collectedClasses.Stream_join_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure1.prototype = $desc;
  function Stream_join_closure0(result_6, buffer_7) {
    this.result_6 = result_6;
    this.buffer_7 = buffer_7;
  }
  Stream_join_closure0.builtin$cls = "Stream_join_closure0";
  if (!"name" in Stream_join_closure0)
    Stream_join_closure0.name = "Stream_join_closure0";
  $desc = $collectedClasses.Stream_join_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_join_closure0.prototype = $desc;
  function Stream_contains_closure(box_0, this_1, needle_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.needle_2 = needle_2;
    this.future_3 = future_3;
  }
  Stream_contains_closure.builtin$cls = "Stream_contains_closure";
  if (!"name" in Stream_contains_closure)
    Stream_contains_closure.name = "Stream_contains_closure";
  $desc = $collectedClasses.Stream_contains_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure.prototype = $desc;
  function Stream_contains__closure(needle_4, element_5) {
    this.needle_4 = needle_4;
    this.element_5 = element_5;
  }
  Stream_contains__closure.builtin$cls = "Stream_contains__closure";
  if (!"name" in Stream_contains__closure)
    Stream_contains__closure.name = "Stream_contains__closure";
  $desc = $collectedClasses.Stream_contains__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure.prototype = $desc;
  function Stream_contains__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_contains__closure0.builtin$cls = "Stream_contains__closure0";
  if (!"name" in Stream_contains__closure0)
    Stream_contains__closure0.name = "Stream_contains__closure0";
  $desc = $collectedClasses.Stream_contains__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains__closure0.prototype = $desc;
  function Stream_contains_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_contains_closure0.builtin$cls = "Stream_contains_closure0";
  if (!"name" in Stream_contains_closure0)
    Stream_contains_closure0.name = "Stream_contains_closure0";
  $desc = $collectedClasses.Stream_contains_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_contains_closure0.prototype = $desc;
  function Stream_forEach_closure(box_0, this_1, action_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.action_2 = action_2;
    this.future_3 = future_3;
  }
  Stream_forEach_closure.builtin$cls = "Stream_forEach_closure";
  if (!"name" in Stream_forEach_closure)
    Stream_forEach_closure.name = "Stream_forEach_closure";
  $desc = $collectedClasses.Stream_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure.prototype = $desc;
  function Stream_forEach__closure(action_4, element_5) {
    this.action_4 = action_4;
    this.element_5 = element_5;
  }
  Stream_forEach__closure.builtin$cls = "Stream_forEach__closure";
  if (!"name" in Stream_forEach__closure)
    Stream_forEach__closure.name = "Stream_forEach__closure";
  $desc = $collectedClasses.Stream_forEach__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure.prototype = $desc;
  function Stream_forEach__closure0() {
  }
  Stream_forEach__closure0.builtin$cls = "Stream_forEach__closure0";
  if (!"name" in Stream_forEach__closure0)
    Stream_forEach__closure0.name = "Stream_forEach__closure0";
  $desc = $collectedClasses.Stream_forEach__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach__closure0.prototype = $desc;
  function Stream_forEach_closure0(future_6) {
    this.future_6 = future_6;
  }
  Stream_forEach_closure0.builtin$cls = "Stream_forEach_closure0";
  if (!"name" in Stream_forEach_closure0)
    Stream_forEach_closure0.name = "Stream_forEach_closure0";
  $desc = $collectedClasses.Stream_forEach_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_forEach_closure0.prototype = $desc;
  function Stream_any_closure(box_0, this_1, test_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.test_2 = test_2;
    this.future_3 = future_3;
  }
  Stream_any_closure.builtin$cls = "Stream_any_closure";
  if (!"name" in Stream_any_closure)
    Stream_any_closure.name = "Stream_any_closure";
  $desc = $collectedClasses.Stream_any_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any_closure.prototype = $desc;
  function Stream_any__closure(test_4, element_5) {
    this.test_4 = test_4;
    this.element_5 = element_5;
  }
  Stream_any__closure.builtin$cls = "Stream_any__closure";
  if (!"name" in Stream_any__closure)
    Stream_any__closure.name = "Stream_any__closure";
  $desc = $collectedClasses.Stream_any__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any__closure.prototype = $desc;
  function Stream_any__closure0(box_0, future_6) {
    this.box_0 = box_0;
    this.future_6 = future_6;
  }
  Stream_any__closure0.builtin$cls = "Stream_any__closure0";
  if (!"name" in Stream_any__closure0)
    Stream_any__closure0.name = "Stream_any__closure0";
  $desc = $collectedClasses.Stream_any__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any__closure0.prototype = $desc;
  function Stream_any_closure0(future_7) {
    this.future_7 = future_7;
  }
  Stream_any_closure0.builtin$cls = "Stream_any_closure0";
  if (!"name" in Stream_any_closure0)
    Stream_any_closure0.name = "Stream_any_closure0";
  $desc = $collectedClasses.Stream_any_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_any_closure0.prototype = $desc;
  function Stream_length_closure(box_0) {
    this.box_0 = box_0;
  }
  Stream_length_closure.builtin$cls = "Stream_length_closure";
  if (!"name" in Stream_length_closure)
    Stream_length_closure.name = "Stream_length_closure";
  $desc = $collectedClasses.Stream_length_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure.prototype = $desc;
  function Stream_length_closure0(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_length_closure0.builtin$cls = "Stream_length_closure0";
  if (!"name" in Stream_length_closure0)
    Stream_length_closure0.name = "Stream_length_closure0";
  $desc = $collectedClasses.Stream_length_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_length_closure0.prototype = $desc;
  function Stream_isEmpty_closure(box_0, future_1) {
    this.box_0 = box_0;
    this.future_1 = future_1;
  }
  Stream_isEmpty_closure.builtin$cls = "Stream_isEmpty_closure";
  if (!"name" in Stream_isEmpty_closure)
    Stream_isEmpty_closure.name = "Stream_isEmpty_closure";
  $desc = $collectedClasses.Stream_isEmpty_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure.prototype = $desc;
  function Stream_isEmpty_closure0(future_2) {
    this.future_2 = future_2;
  }
  Stream_isEmpty_closure0.builtin$cls = "Stream_isEmpty_closure0";
  if (!"name" in Stream_isEmpty_closure0)
    Stream_isEmpty_closure0.name = "Stream_isEmpty_closure0";
  $desc = $collectedClasses.Stream_isEmpty_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_isEmpty_closure0.prototype = $desc;
  function Stream_toList_closure(this_0, result_1) {
    this.this_0 = this_0;
    this.result_1 = result_1;
  }
  Stream_toList_closure.builtin$cls = "Stream_toList_closure";
  if (!"name" in Stream_toList_closure)
    Stream_toList_closure.name = "Stream_toList_closure";
  $desc = $collectedClasses.Stream_toList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure.prototype = $desc;
  function Stream_toList_closure0(result_2, future_3) {
    this.result_2 = result_2;
    this.future_3 = future_3;
  }
  Stream_toList_closure0.builtin$cls = "Stream_toList_closure0";
  if (!"name" in Stream_toList_closure0)
    Stream_toList_closure0.name = "Stream_toList_closure0";
  $desc = $collectedClasses.Stream_toList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_toList_closure0.prototype = $desc;
  function Stream_first_closure(box_0, this_1, future_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.future_2 = future_2;
  }
  Stream_first_closure.builtin$cls = "Stream_first_closure";
  if (!"name" in Stream_first_closure)
    Stream_first_closure.name = "Stream_first_closure";
  $desc = $collectedClasses.Stream_first_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure.prototype = $desc;
  function Stream_first_closure0(future_3) {
    this.future_3 = future_3;
  }
  Stream_first_closure0.builtin$cls = "Stream_first_closure0";
  if (!"name" in Stream_first_closure0)
    Stream_first_closure0.name = "Stream_first_closure0";
  $desc = $collectedClasses.Stream_first_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_first_closure0.prototype = $desc;
  function Stream_last_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Stream_last_closure.builtin$cls = "Stream_last_closure";
  if (!"name" in Stream_last_closure)
    Stream_last_closure.name = "Stream_last_closure";
  $desc = $collectedClasses.Stream_last_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure.prototype = $desc;
  function Stream_last_closure0(box_0, future_2) {
    this.box_0 = box_0;
    this.future_2 = future_2;
  }
  Stream_last_closure0.builtin$cls = "Stream_last_closure0";
  if (!"name" in Stream_last_closure0)
    Stream_last_closure0.name = "Stream_last_closure0";
  $desc = $collectedClasses.Stream_last_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_last_closure0.prototype = $desc;
  function Stream_firstWhere_closure(box_0, this_1, test_2, future_3) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.test_2 = test_2;
    this.future_3 = future_3;
  }
  Stream_firstWhere_closure.builtin$cls = "Stream_firstWhere_closure";
  if (!"name" in Stream_firstWhere_closure)
    Stream_firstWhere_closure.name = "Stream_firstWhere_closure";
  $desc = $collectedClasses.Stream_firstWhere_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere_closure.prototype = $desc;
  function Stream_firstWhere__closure(test_4, value_5) {
    this.test_4 = test_4;
    this.value_5 = value_5;
  }
  Stream_firstWhere__closure.builtin$cls = "Stream_firstWhere__closure";
  if (!"name" in Stream_firstWhere__closure)
    Stream_firstWhere__closure.name = "Stream_firstWhere__closure";
  $desc = $collectedClasses.Stream_firstWhere__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere__closure.prototype = $desc;
  function Stream_firstWhere__closure0(box_0, future_6, value_7) {
    this.box_0 = box_0;
    this.future_6 = future_6;
    this.value_7 = value_7;
  }
  Stream_firstWhere__closure0.builtin$cls = "Stream_firstWhere__closure0";
  if (!"name" in Stream_firstWhere__closure0)
    Stream_firstWhere__closure0.name = "Stream_firstWhere__closure0";
  $desc = $collectedClasses.Stream_firstWhere__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere__closure0.prototype = $desc;
  function Stream_firstWhere_closure0(defaultValue_8, future_9) {
    this.defaultValue_8 = defaultValue_8;
    this.future_9 = future_9;
  }
  Stream_firstWhere_closure0.builtin$cls = "Stream_firstWhere_closure0";
  if (!"name" in Stream_firstWhere_closure0)
    Stream_firstWhere_closure0.name = "Stream_firstWhere_closure0";
  $desc = $collectedClasses.Stream_firstWhere_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stream_firstWhere_closure0.prototype = $desc;
  function StreamSubscription() {
  }
  StreamSubscription.builtin$cls = "StreamSubscription";
  if (!"name" in StreamSubscription)
    StreamSubscription.name = "StreamSubscription";
  $desc = $collectedClasses.StreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamSubscription.prototype = $desc;
  function _ControllerStream() {
  }
  _ControllerStream.builtin$cls = "_ControllerStream";
  if (!"name" in _ControllerStream)
    _ControllerStream.name = "_ControllerStream";
  $desc = $collectedClasses._ControllerStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerStream.prototype = $desc;
  function _ControllerSubscription(_async$_controller) {
    this._async$_controller = _async$_controller;
  }
  _ControllerSubscription.builtin$cls = "_ControllerSubscription";
  if (!"name" in _ControllerSubscription)
    _ControllerSubscription.name = "_ControllerSubscription";
  $desc = $collectedClasses._ControllerSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ControllerSubscription.prototype = $desc;
  _ControllerSubscription.prototype.get$_async$_controller = function() {
    return this._async$_controller;
  };
  function _EventSink() {
  }
  _EventSink.builtin$cls = "_EventSink";
  if (!"name" in _EventSink)
    _EventSink.name = "_EventSink";
  $desc = $collectedClasses._EventSink;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventSink.prototype = $desc;
  function _BufferingStreamSubscription(_async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _BufferingStreamSubscription.builtin$cls = "_BufferingStreamSubscription";
  if (!"name" in _BufferingStreamSubscription)
    _BufferingStreamSubscription.name = "_BufferingStreamSubscription";
  $desc = $collectedClasses._BufferingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription.prototype = $desc;
  _BufferingStreamSubscription.prototype.get$_onError = function() {
    return this._onError;
  };
  _BufferingStreamSubscription.prototype.get$_zone = function() {
    return this._zone;
  };
  function _BufferingStreamSubscription__sendError_sendError(this_0, error_1, stackTrace_2) {
    this.this_0 = this_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _BufferingStreamSubscription__sendError_sendError.builtin$cls = "_BufferingStreamSubscription__sendError_sendError";
  if (!"name" in _BufferingStreamSubscription__sendError_sendError)
    _BufferingStreamSubscription__sendError_sendError.name = "_BufferingStreamSubscription__sendError_sendError";
  $desc = $collectedClasses._BufferingStreamSubscription__sendError_sendError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendError_sendError.prototype = $desc;
  function _BufferingStreamSubscription__sendDone_sendDone(this_0) {
    this.this_0 = this_0;
  }
  _BufferingStreamSubscription__sendDone_sendDone.builtin$cls = "_BufferingStreamSubscription__sendDone_sendDone";
  if (!"name" in _BufferingStreamSubscription__sendDone_sendDone)
    _BufferingStreamSubscription__sendDone_sendDone.name = "_BufferingStreamSubscription__sendDone_sendDone";
  $desc = $collectedClasses._BufferingStreamSubscription__sendDone_sendDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BufferingStreamSubscription__sendDone_sendDone.prototype = $desc;
  function _StreamImpl() {
  }
  _StreamImpl.builtin$cls = "_StreamImpl";
  if (!"name" in _StreamImpl)
    _StreamImpl.name = "_StreamImpl";
  $desc = $collectedClasses._StreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImpl.prototype = $desc;
  function _DelayedEvent(next) {
    this.next = next;
  }
  _DelayedEvent.builtin$cls = "_DelayedEvent";
  if (!"name" in _DelayedEvent)
    _DelayedEvent.name = "_DelayedEvent";
  $desc = $collectedClasses._DelayedEvent;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedEvent.prototype = $desc;
  _DelayedEvent.prototype.get$next = function() {
    return this.next;
  };
  _DelayedEvent.prototype.set$next = function(v) {
    return this.next = v;
  };
  function _DelayedData(value, next) {
    this.value = value;
    this.next = next;
  }
  _DelayedData.builtin$cls = "_DelayedData";
  if (!"name" in _DelayedData)
    _DelayedData.name = "_DelayedData";
  $desc = $collectedClasses._DelayedData;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedData.prototype = $desc;
  _DelayedData.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _DelayedError(error, stackTrace, next) {
    this.error = error;
    this.stackTrace = stackTrace;
    this.next = next;
  }
  _DelayedError.builtin$cls = "_DelayedError";
  if (!"name" in _DelayedError)
    _DelayedError.name = "_DelayedError";
  $desc = $collectedClasses._DelayedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedError.prototype = $desc;
  _DelayedError.prototype.get$error = function(receiver) {
    return this.error;
  };
  _DelayedError.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function _DelayedDone() {
  }
  _DelayedDone.builtin$cls = "_DelayedDone";
  if (!"name" in _DelayedDone)
    _DelayedDone.name = "_DelayedDone";
  $desc = $collectedClasses._DelayedDone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DelayedDone.prototype = $desc;
  function _PendingEvents() {
  }
  _PendingEvents.builtin$cls = "_PendingEvents";
  if (!"name" in _PendingEvents)
    _PendingEvents.name = "_PendingEvents";
  $desc = $collectedClasses._PendingEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents.prototype = $desc;
  function _PendingEvents_schedule_closure(this_0, dispatch_1) {
    this.this_0 = this_0;
    this.dispatch_1 = dispatch_1;
  }
  _PendingEvents_schedule_closure.builtin$cls = "_PendingEvents_schedule_closure";
  if (!"name" in _PendingEvents_schedule_closure)
    _PendingEvents_schedule_closure.name = "_PendingEvents_schedule_closure";
  $desc = $collectedClasses._PendingEvents_schedule_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PendingEvents_schedule_closure.prototype = $desc;
  function _StreamImplEvents(firstPendingEvent, lastPendingEvent, _state) {
    this.firstPendingEvent = firstPendingEvent;
    this.lastPendingEvent = lastPendingEvent;
    this._state = _state;
  }
  _StreamImplEvents.builtin$cls = "_StreamImplEvents";
  if (!"name" in _StreamImplEvents)
    _StreamImplEvents.name = "_StreamImplEvents";
  $desc = $collectedClasses._StreamImplEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamImplEvents.prototype = $desc;
  function _cancelAndError_closure(future_0, error_1, stackTrace_2) {
    this.future_0 = future_0;
    this.error_1 = error_1;
    this.stackTrace_2 = stackTrace_2;
  }
  _cancelAndError_closure.builtin$cls = "_cancelAndError_closure";
  if (!"name" in _cancelAndError_closure)
    _cancelAndError_closure.name = "_cancelAndError_closure";
  $desc = $collectedClasses._cancelAndError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndError_closure.prototype = $desc;
  function _cancelAndErrorClosure_closure(subscription_0, future_1) {
    this.subscription_0 = subscription_0;
    this.future_1 = future_1;
  }
  _cancelAndErrorClosure_closure.builtin$cls = "_cancelAndErrorClosure_closure";
  if (!"name" in _cancelAndErrorClosure_closure)
    _cancelAndErrorClosure_closure.name = "_cancelAndErrorClosure_closure";
  $desc = $collectedClasses._cancelAndErrorClosure_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndErrorClosure_closure.prototype = $desc;
  function _cancelAndValue_closure(future_0, value_1) {
    this.future_0 = future_0;
    this.value_1 = value_1;
  }
  _cancelAndValue_closure.builtin$cls = "_cancelAndValue_closure";
  if (!"name" in _cancelAndValue_closure)
    _cancelAndValue_closure.name = "_cancelAndValue_closure";
  $desc = $collectedClasses._cancelAndValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _cancelAndValue_closure.prototype = $desc;
  function _ForwardingStream() {
  }
  _ForwardingStream.builtin$cls = "_ForwardingStream";
  if (!"name" in _ForwardingStream)
    _ForwardingStream.name = "_ForwardingStream";
  $desc = $collectedClasses._ForwardingStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStream.prototype = $desc;
  function _ForwardingStreamSubscription(_stream, _subscription, _async$_onData, _onError, _onDone, _zone, _state, _cancelFuture, _pending) {
    this._stream = _stream;
    this._subscription = _subscription;
    this._async$_onData = _async$_onData;
    this._onError = _onError;
    this._onDone = _onDone;
    this._zone = _zone;
    this._state = _state;
    this._cancelFuture = _cancelFuture;
    this._pending = _pending;
  }
  _ForwardingStreamSubscription.builtin$cls = "_ForwardingStreamSubscription";
  if (!"name" in _ForwardingStreamSubscription)
    _ForwardingStreamSubscription.name = "_ForwardingStreamSubscription";
  $desc = $collectedClasses._ForwardingStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ForwardingStreamSubscription.prototype = $desc;
  function _WhereStream(_test, _async$_source) {
    this._test = _test;
    this._async$_source = _async$_source;
  }
  _WhereStream.builtin$cls = "_WhereStream";
  if (!"name" in _WhereStream)
    _WhereStream.name = "_WhereStream";
  $desc = $collectedClasses._WhereStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _WhereStream.prototype = $desc;
  function _MapStream(_transform, _async$_source) {
    this._transform = _transform;
    this._async$_source = _async$_source;
  }
  _MapStream.builtin$cls = "_MapStream";
  if (!"name" in _MapStream)
    _MapStream.name = "_MapStream";
  $desc = $collectedClasses._MapStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MapStream.prototype = $desc;
  function _BaseZone() {
  }
  _BaseZone.builtin$cls = "_BaseZone";
  if (!"name" in _BaseZone)
    _BaseZone.name = "_BaseZone";
  $desc = $collectedClasses._BaseZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone.prototype = $desc;
  function _BaseZone_bindCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindCallback_closure.builtin$cls = "_BaseZone_bindCallback_closure";
  if (!"name" in _BaseZone_bindCallback_closure)
    _BaseZone_bindCallback_closure.name = "_BaseZone_bindCallback_closure";
  $desc = $collectedClasses._BaseZone_bindCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure.prototype = $desc;
  function _BaseZone_bindCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindCallback_closure0.builtin$cls = "_BaseZone_bindCallback_closure0";
  if (!"name" in _BaseZone_bindCallback_closure0)
    _BaseZone_bindCallback_closure0.name = "_BaseZone_bindCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindCallback_closure0.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindUnaryCallback_closure.builtin$cls = "_BaseZone_bindUnaryCallback_closure";
  if (!"name" in _BaseZone_bindUnaryCallback_closure)
    _BaseZone_bindUnaryCallback_closure.name = "_BaseZone_bindUnaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure.prototype = $desc;
  function _BaseZone_bindUnaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindUnaryCallback_closure0.builtin$cls = "_BaseZone_bindUnaryCallback_closure0";
  if (!"name" in _BaseZone_bindUnaryCallback_closure0)
    _BaseZone_bindUnaryCallback_closure0.name = "_BaseZone_bindUnaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindUnaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindUnaryCallback_closure0.prototype = $desc;
  function _BaseZone_bindBinaryCallback_closure(this_0, registered_1) {
    this.this_0 = this_0;
    this.registered_1 = registered_1;
  }
  _BaseZone_bindBinaryCallback_closure.builtin$cls = "_BaseZone_bindBinaryCallback_closure";
  if (!"name" in _BaseZone_bindBinaryCallback_closure)
    _BaseZone_bindBinaryCallback_closure.name = "_BaseZone_bindBinaryCallback_closure";
  $desc = $collectedClasses._BaseZone_bindBinaryCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindBinaryCallback_closure.prototype = $desc;
  function _BaseZone_bindBinaryCallback_closure0(this_2, registered_3) {
    this.this_2 = this_2;
    this.registered_3 = registered_3;
  }
  _BaseZone_bindBinaryCallback_closure0.builtin$cls = "_BaseZone_bindBinaryCallback_closure0";
  if (!"name" in _BaseZone_bindBinaryCallback_closure0)
    _BaseZone_bindBinaryCallback_closure0.name = "_BaseZone_bindBinaryCallback_closure0";
  $desc = $collectedClasses._BaseZone_bindBinaryCallback_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BaseZone_bindBinaryCallback_closure0.prototype = $desc;
  function _rootHandleUncaughtError_closure(error_0, stackTrace_1) {
    this.error_0 = error_0;
    this.stackTrace_1 = stackTrace_1;
  }
  _rootHandleUncaughtError_closure.builtin$cls = "_rootHandleUncaughtError_closure";
  if (!"name" in _rootHandleUncaughtError_closure)
    _rootHandleUncaughtError_closure.name = "_rootHandleUncaughtError_closure";
  $desc = $collectedClasses._rootHandleUncaughtError_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError_closure.prototype = $desc;
  function _rootHandleUncaughtError__closure(error_2, stackTrace_3) {
    this.error_2 = error_2;
    this.stackTrace_3 = stackTrace_3;
  }
  _rootHandleUncaughtError__closure.builtin$cls = "_rootHandleUncaughtError__closure";
  if (!"name" in _rootHandleUncaughtError__closure)
    _rootHandleUncaughtError__closure.name = "_rootHandleUncaughtError__closure";
  $desc = $collectedClasses._rootHandleUncaughtError__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _rootHandleUncaughtError__closure.prototype = $desc;
  function _RootZone() {
  }
  _RootZone.builtin$cls = "_RootZone";
  if (!"name" in _RootZone)
    _RootZone.name = "_RootZone";
  $desc = $collectedClasses._RootZone;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RootZone.prototype = $desc;
  function _HashMap(_collection$_length, _strings, _nums, _rest, _collection$_keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._collection$_keys = _collection$_keys;
  }
  _HashMap.builtin$cls = "_HashMap";
  if (!"name" in _HashMap)
    _HashMap.name = "_HashMap";
  $desc = $collectedClasses._HashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap.prototype = $desc;
  function _HashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_values_closure.builtin$cls = "_HashMap_values_closure";
  if (!"name" in _HashMap_values_closure)
    _HashMap_values_closure.name = "_HashMap_values_closure";
  $desc = $collectedClasses._HashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_values_closure.prototype = $desc;
  function _HashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _HashMap_addAll_closure.builtin$cls = "_HashMap_addAll_closure";
  if (!"name" in _HashMap_addAll_closure)
    _HashMap_addAll_closure.name = "_HashMap_addAll_closure";
  $desc = $collectedClasses._HashMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashMap_addAll_closure.prototype = $desc;
  function _IdentityHashMap(_collection$_length, _strings, _nums, _rest, _collection$_keys) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._collection$_keys = _collection$_keys;
  }
  _IdentityHashMap.builtin$cls = "_IdentityHashMap";
  if (!"name" in _IdentityHashMap)
    _IdentityHashMap.name = "_IdentityHashMap";
  $desc = $collectedClasses._IdentityHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashMap.prototype = $desc;
  function _CustomHashMap(_equals, _hashCode, _validKey, _collection$_length, _strings, _nums, _rest, _collection$_keys) {
    this._equals = _equals;
    this._hashCode = _hashCode;
    this._validKey = _validKey;
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._collection$_keys = _collection$_keys;
  }
  _CustomHashMap.builtin$cls = "_CustomHashMap";
  if (!"name" in _CustomHashMap)
    _CustomHashMap.name = "_CustomHashMap";
  $desc = $collectedClasses._CustomHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomHashMap.prototype = $desc;
  function _CustomHashMap_closure(K_0) {
    this.K_0 = K_0;
  }
  _CustomHashMap_closure.builtin$cls = "_CustomHashMap_closure";
  if (!"name" in _CustomHashMap_closure)
    _CustomHashMap_closure.name = "_CustomHashMap_closure";
  $desc = $collectedClasses._CustomHashMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _CustomHashMap_closure.prototype = $desc;
  function HashMapKeyIterable(_map) {
    this._map = _map;
  }
  HashMapKeyIterable.builtin$cls = "HashMapKeyIterable";
  if (!"name" in HashMapKeyIterable)
    HashMapKeyIterable.name = "HashMapKeyIterable";
  $desc = $collectedClasses.HashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterable.prototype = $desc;
  function HashMapKeyIterator(_map, _collection$_keys, _offset, _collection$_current) {
    this._map = _map;
    this._collection$_keys = _collection$_keys;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashMapKeyIterator.builtin$cls = "HashMapKeyIterator";
  if (!"name" in HashMapKeyIterator)
    HashMapKeyIterator.name = "HashMapKeyIterator";
  $desc = $collectedClasses.HashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashMapKeyIterator.prototype = $desc;
  function _LinkedHashMap(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashMap.builtin$cls = "_LinkedHashMap";
  if (!"name" in _LinkedHashMap)
    _LinkedHashMap.name = "_LinkedHashMap";
  $desc = $collectedClasses._LinkedHashMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap.prototype = $desc;
  function _LinkedHashMap_values_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_values_closure.builtin$cls = "_LinkedHashMap_values_closure";
  if (!"name" in _LinkedHashMap_values_closure)
    _LinkedHashMap_values_closure.name = "_LinkedHashMap_values_closure";
  $desc = $collectedClasses._LinkedHashMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_values_closure.prototype = $desc;
  function _LinkedHashMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _LinkedHashMap_addAll_closure.builtin$cls = "_LinkedHashMap_addAll_closure";
  if (!"name" in _LinkedHashMap_addAll_closure)
    _LinkedHashMap_addAll_closure.name = "_LinkedHashMap_addAll_closure";
  $desc = $collectedClasses._LinkedHashMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashMap_addAll_closure.prototype = $desc;
  function LinkedHashMapCell(_key, _value, _next, _previous) {
    this._key = _key;
    this._value = _value;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashMapCell.builtin$cls = "LinkedHashMapCell";
  if (!"name" in LinkedHashMapCell)
    LinkedHashMapCell.name = "LinkedHashMapCell";
  $desc = $collectedClasses.LinkedHashMapCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapCell.prototype = $desc;
  LinkedHashMapCell.prototype.get$_key = function() {
    return this._key;
  };
  LinkedHashMapCell.prototype.get$_value = function() {
    return this._value;
  };
  LinkedHashMapCell.prototype.set$_value = function(v) {
    return this._value = v;
  };
  LinkedHashMapCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashMapCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashMapCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashMapCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashMapKeyIterable(_map) {
    this._map = _map;
  }
  LinkedHashMapKeyIterable.builtin$cls = "LinkedHashMapKeyIterable";
  if (!"name" in LinkedHashMapKeyIterable)
    LinkedHashMapKeyIterable.name = "LinkedHashMapKeyIterable";
  $desc = $collectedClasses.LinkedHashMapKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterable.prototype = $desc;
  function LinkedHashMapKeyIterator(_map, _modifications, _cell, _collection$_current) {
    this._map = _map;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashMapKeyIterator.builtin$cls = "LinkedHashMapKeyIterator";
  if (!"name" in LinkedHashMapKeyIterator)
    LinkedHashMapKeyIterator.name = "LinkedHashMapKeyIterator";
  $desc = $collectedClasses.LinkedHashMapKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashMapKeyIterator.prototype = $desc;
  function _HashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _HashSet.builtin$cls = "_HashSet";
  if (!"name" in _HashSet)
    _HashSet.name = "_HashSet";
  $desc = $collectedClasses._HashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSet.prototype = $desc;
  function _IdentityHashSet(_collection$_length, _strings, _nums, _rest, _elements) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._elements = _elements;
  }
  _IdentityHashSet.builtin$cls = "_IdentityHashSet";
  if (!"name" in _IdentityHashSet)
    _IdentityHashSet.name = "_IdentityHashSet";
  $desc = $collectedClasses._IdentityHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _IdentityHashSet.prototype = $desc;
  function HashSetIterator(_set, _elements, _offset, _collection$_current) {
    this._set = _set;
    this._elements = _elements;
    this._offset = _offset;
    this._collection$_current = _collection$_current;
  }
  HashSetIterator.builtin$cls = "HashSetIterator";
  if (!"name" in HashSetIterator)
    HashSetIterator.name = "HashSetIterator";
  $desc = $collectedClasses.HashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HashSetIterator.prototype = $desc;
  function _LinkedHashSet(_collection$_length, _strings, _nums, _rest, _first, _last, _modifications) {
    this._collection$_length = _collection$_length;
    this._strings = _strings;
    this._nums = _nums;
    this._rest = _rest;
    this._first = _first;
    this._last = _last;
    this._modifications = _modifications;
  }
  _LinkedHashSet.builtin$cls = "_LinkedHashSet";
  if (!"name" in _LinkedHashSet)
    _LinkedHashSet.name = "_LinkedHashSet";
  $desc = $collectedClasses._LinkedHashSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LinkedHashSet.prototype = $desc;
  function LinkedHashSetCell(_element, _next, _previous) {
    this._element = _element;
    this._next = _next;
    this._previous = _previous;
  }
  LinkedHashSetCell.builtin$cls = "LinkedHashSetCell";
  if (!"name" in LinkedHashSetCell)
    LinkedHashSetCell.name = "LinkedHashSetCell";
  $desc = $collectedClasses.LinkedHashSetCell;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetCell.prototype = $desc;
  LinkedHashSetCell.prototype.get$_element = function() {
    return this._element;
  };
  LinkedHashSetCell.prototype.get$_next = function() {
    return this._next;
  };
  LinkedHashSetCell.prototype.set$_next = function(v) {
    return this._next = v;
  };
  LinkedHashSetCell.prototype.get$_previous = function() {
    return this._previous;
  };
  LinkedHashSetCell.prototype.set$_previous = function(v) {
    return this._previous = v;
  };
  function LinkedHashSetIterator(_set, _modifications, _cell, _collection$_current) {
    this._set = _set;
    this._modifications = _modifications;
    this._cell = _cell;
    this._collection$_current = _collection$_current;
  }
  LinkedHashSetIterator.builtin$cls = "LinkedHashSetIterator";
  if (!"name" in LinkedHashSetIterator)
    LinkedHashSetIterator.name = "LinkedHashSetIterator";
  $desc = $collectedClasses.LinkedHashSetIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkedHashSetIterator.prototype = $desc;
  function UnmodifiableListView(_collection$_source) {
    this._collection$_source = _collection$_source;
  }
  UnmodifiableListView.builtin$cls = "UnmodifiableListView";
  if (!"name" in UnmodifiableListView)
    UnmodifiableListView.name = "UnmodifiableListView";
  $desc = $collectedClasses.UnmodifiableListView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableListView.prototype = $desc;
  function _HashSetBase() {
  }
  _HashSetBase.builtin$cls = "_HashSetBase";
  if (!"name" in _HashSetBase)
    _HashSetBase.name = "_HashSetBase";
  $desc = $collectedClasses._HashSetBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _HashSetBase.prototype = $desc;
  function IterableBase() {
  }
  IterableBase.builtin$cls = "IterableBase";
  if (!"name" in IterableBase)
    IterableBase.name = "IterableBase";
  $desc = $collectedClasses.IterableBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IterableBase.prototype = $desc;
  function ListBase() {
  }
  ListBase.builtin$cls = "ListBase";
  if (!"name" in ListBase)
    ListBase.name = "ListBase";
  $desc = $collectedClasses.ListBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase.prototype = $desc;
  function ListMixin() {
  }
  ListMixin.builtin$cls = "ListMixin";
  if (!"name" in ListMixin)
    ListMixin.name = "ListMixin";
  $desc = $collectedClasses.ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListMixin.prototype = $desc;
  function Maps_mapToString_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Maps_mapToString_closure.builtin$cls = "Maps_mapToString_closure";
  if (!"name" in Maps_mapToString_closure)
    Maps_mapToString_closure.name = "Maps_mapToString_closure";
  $desc = $collectedClasses.Maps_mapToString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Maps_mapToString_closure.prototype = $desc;
  function ListQueue(_table, _head, _tail, _modificationCount) {
    this._table = _table;
    this._head = _head;
    this._tail = _tail;
    this._modificationCount = _modificationCount;
  }
  ListQueue.builtin$cls = "ListQueue";
  if (!"name" in ListQueue)
    ListQueue.name = "ListQueue";
  $desc = $collectedClasses.ListQueue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListQueue.prototype = $desc;
  function _ListQueueIterator(_queue, _end, _modificationCount, _collection$_position, _collection$_current) {
    this._queue = _queue;
    this._end = _end;
    this._modificationCount = _modificationCount;
    this._collection$_position = _collection$_position;
    this._collection$_current = _collection$_current;
  }
  _ListQueueIterator.builtin$cls = "_ListQueueIterator";
  if (!"name" in _ListQueueIterator)
    _ListQueueIterator.name = "_ListQueueIterator";
  $desc = $collectedClasses._ListQueueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ListQueueIterator.prototype = $desc;
  function _SplayTreeNode(key, left, right) {
    this.key = key;
    this.left = left;
    this.right = right;
  }
  _SplayTreeNode.builtin$cls = "_SplayTreeNode";
  if (!"name" in _SplayTreeNode)
    _SplayTreeNode.name = "_SplayTreeNode";
  $desc = $collectedClasses._SplayTreeNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTreeNode.prototype = $desc;
  _SplayTreeNode.prototype.get$key = function(receiver) {
    return this.key;
  };
  _SplayTreeNode.prototype.get$left = function(receiver) {
    return this.left;
  };
  _SplayTreeNode.prototype.get$right = function(receiver) {
    return this.right;
  };
  function _SplayTreeMapNode(value, key, left, right) {
    this.value = value;
    this.key = key;
    this.left = left;
    this.right = right;
  }
  _SplayTreeMapNode.builtin$cls = "_SplayTreeMapNode";
  if (!"name" in _SplayTreeMapNode)
    _SplayTreeMapNode.name = "_SplayTreeMapNode";
  $desc = $collectedClasses._SplayTreeMapNode;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTreeMapNode.prototype = $desc;
  _SplayTreeMapNode.prototype.get$value = function(receiver) {
    return this.value;
  };
  _SplayTreeMapNode.prototype.set$value = function(receiver, v) {
    return this.value = v;
  };
  function _SplayTree() {
  }
  _SplayTree.builtin$cls = "_SplayTree";
  if (!"name" in _SplayTree)
    _SplayTree.name = "_SplayTree";
  $desc = $collectedClasses._SplayTree;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTree.prototype = $desc;
  function SplayTreeMap(_comparator, _validKey, _root, _dummy, _count, _modificationCount, _splayCount) {
    this._comparator = _comparator;
    this._validKey = _validKey;
    this._root = _root;
    this._dummy = _dummy;
    this._count = _count;
    this._modificationCount = _modificationCount;
    this._splayCount = _splayCount;
  }
  SplayTreeMap.builtin$cls = "SplayTreeMap";
  if (!"name" in SplayTreeMap)
    SplayTreeMap.name = "SplayTreeMap";
  $desc = $collectedClasses.SplayTreeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SplayTreeMap.prototype = $desc;
  function SplayTreeMap_closure(K_0) {
    this.K_0 = K_0;
  }
  SplayTreeMap_closure.builtin$cls = "SplayTreeMap_closure";
  if (!"name" in SplayTreeMap_closure)
    SplayTreeMap_closure.name = "SplayTreeMap_closure";
  $desc = $collectedClasses.SplayTreeMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SplayTreeMap_closure.prototype = $desc;
  function SplayTreeMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  SplayTreeMap_addAll_closure.builtin$cls = "SplayTreeMap_addAll_closure";
  if (!"name" in SplayTreeMap_addAll_closure)
    SplayTreeMap_addAll_closure.name = "SplayTreeMap_addAll_closure";
  $desc = $collectedClasses.SplayTreeMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SplayTreeMap_addAll_closure.prototype = $desc;
  function _SplayTreeIterator() {
  }
  _SplayTreeIterator.builtin$cls = "_SplayTreeIterator";
  if (!"name" in _SplayTreeIterator)
    _SplayTreeIterator.name = "_SplayTreeIterator";
  $desc = $collectedClasses._SplayTreeIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTreeIterator.prototype = $desc;
  function _SplayTreeKeyIterable(_tree) {
    this._tree = _tree;
  }
  _SplayTreeKeyIterable.builtin$cls = "_SplayTreeKeyIterable";
  if (!"name" in _SplayTreeKeyIterable)
    _SplayTreeKeyIterable.name = "_SplayTreeKeyIterable";
  $desc = $collectedClasses._SplayTreeKeyIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTreeKeyIterable.prototype = $desc;
  function _SplayTreeValueIterable(_map) {
    this._map = _map;
  }
  _SplayTreeValueIterable.builtin$cls = "_SplayTreeValueIterable";
  if (!"name" in _SplayTreeValueIterable)
    _SplayTreeValueIterable.name = "_SplayTreeValueIterable";
  $desc = $collectedClasses._SplayTreeValueIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTreeValueIterable.prototype = $desc;
  function _SplayTreeKeyIterator(_tree, _workList, _modificationCount, _splayCount, _currentNode) {
    this._tree = _tree;
    this._workList = _workList;
    this._modificationCount = _modificationCount;
    this._splayCount = _splayCount;
    this._currentNode = _currentNode;
  }
  _SplayTreeKeyIterator.builtin$cls = "_SplayTreeKeyIterator";
  if (!"name" in _SplayTreeKeyIterator)
    _SplayTreeKeyIterator.name = "_SplayTreeKeyIterator";
  $desc = $collectedClasses._SplayTreeKeyIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTreeKeyIterator.prototype = $desc;
  function _SplayTreeValueIterator(_tree, _workList, _modificationCount, _splayCount, _currentNode) {
    this._tree = _tree;
    this._workList = _workList;
    this._modificationCount = _modificationCount;
    this._splayCount = _splayCount;
    this._currentNode = _currentNode;
  }
  _SplayTreeValueIterator.builtin$cls = "_SplayTreeValueIterator";
  if (!"name" in _SplayTreeValueIterator)
    _SplayTreeValueIterator.name = "_SplayTreeValueIterator";
  $desc = $collectedClasses._SplayTreeValueIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTreeValueIterator.prototype = $desc;
  function _SplayTreeNodeIterator(_tree, _workList, _modificationCount, _splayCount, _currentNode) {
    this._tree = _tree;
    this._workList = _workList;
    this._modificationCount = _modificationCount;
    this._splayCount = _splayCount;
    this._currentNode = _currentNode;
  }
  _SplayTreeNodeIterator.builtin$cls = "_SplayTreeNodeIterator";
  if (!"name" in _SplayTreeNodeIterator)
    _SplayTreeNodeIterator.name = "_SplayTreeNodeIterator";
  $desc = $collectedClasses._SplayTreeNodeIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SplayTreeNodeIterator.prototype = $desc;
  function _convertJsonToDart_closure() {
  }
  _convertJsonToDart_closure.builtin$cls = "_convertJsonToDart_closure";
  if (!"name" in _convertJsonToDart_closure)
    _convertJsonToDart_closure.name = "_convertJsonToDart_closure";
  $desc = $collectedClasses._convertJsonToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_closure.prototype = $desc;
  function _convertJsonToDart_walk(revive_0) {
    this.revive_0 = revive_0;
  }
  _convertJsonToDart_walk.builtin$cls = "_convertJsonToDart_walk";
  if (!"name" in _convertJsonToDart_walk)
    _convertJsonToDart_walk.name = "_convertJsonToDart_walk";
  $desc = $collectedClasses._convertJsonToDart_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertJsonToDart_walk.prototype = $desc;
  function Codec() {
  }
  Codec.builtin$cls = "Codec";
  if (!"name" in Codec)
    Codec.name = "Codec";
  $desc = $collectedClasses.Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Codec.prototype = $desc;
  function Converter() {
  }
  Converter.builtin$cls = "Converter";
  if (!"name" in Converter)
    Converter.name = "Converter";
  $desc = $collectedClasses.Converter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Converter.prototype = $desc;
  function Encoding() {
  }
  Encoding.builtin$cls = "Encoding";
  if (!"name" in Encoding)
    Encoding.name = "Encoding";
  $desc = $collectedClasses.Encoding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Encoding.prototype = $desc;
  function JsonCodec(_reviver, _toEncodable) {
    this._reviver = _reviver;
    this._toEncodable = _toEncodable;
  }
  JsonCodec.builtin$cls = "JsonCodec";
  if (!"name" in JsonCodec)
    JsonCodec.name = "JsonCodec";
  $desc = $collectedClasses.JsonCodec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonCodec.prototype = $desc;
  function JsonDecoder(_reviver) {
    this._reviver = _reviver;
  }
  JsonDecoder.builtin$cls = "JsonDecoder";
  if (!"name" in JsonDecoder)
    JsonDecoder.name = "JsonDecoder";
  $desc = $collectedClasses.JsonDecoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsonDecoder.prototype = $desc;
  function Utf8Codec(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Codec.builtin$cls = "Utf8Codec";
  if (!"name" in Utf8Codec)
    Utf8Codec.name = "Utf8Codec";
  $desc = $collectedClasses.Utf8Codec;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Codec.prototype = $desc;
  function Utf8Encoder() {
  }
  Utf8Encoder.builtin$cls = "Utf8Encoder";
  if (!"name" in Utf8Encoder)
    Utf8Encoder.name = "Utf8Encoder";
  $desc = $collectedClasses.Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Encoder.prototype = $desc;
  function _Utf8Encoder(_carry, _bufferIndex, _buffer) {
    this._carry = _carry;
    this._bufferIndex = _bufferIndex;
    this._buffer = _buffer;
  }
  _Utf8Encoder.builtin$cls = "_Utf8Encoder";
  if (!"name" in _Utf8Encoder)
    _Utf8Encoder.name = "_Utf8Encoder";
  $desc = $collectedClasses._Utf8Encoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Encoder.prototype = $desc;
  function Utf8Decoder(_allowMalformed) {
    this._allowMalformed = _allowMalformed;
  }
  Utf8Decoder.builtin$cls = "Utf8Decoder";
  if (!"name" in Utf8Decoder)
    Utf8Decoder.name = "Utf8Decoder";
  $desc = $collectedClasses.Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Utf8Decoder.prototype = $desc;
  function _Utf8Decoder(_allowMalformed, _stringSink, _isFirstCharacter, _convert$_value, _expectedUnits, _extraUnits) {
    this._allowMalformed = _allowMalformed;
    this._stringSink = _stringSink;
    this._isFirstCharacter = _isFirstCharacter;
    this._convert$_value = _convert$_value;
    this._expectedUnits = _expectedUnits;
    this._extraUnits = _extraUnits;
  }
  _Utf8Decoder.builtin$cls = "_Utf8Decoder";
  if (!"name" in _Utf8Decoder)
    _Utf8Decoder.name = "_Utf8Decoder";
  $desc = $collectedClasses._Utf8Decoder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder.prototype = $desc;
  function _Utf8Decoder_convert_addSingleBytes(box_0, this_1, codeUnits_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.codeUnits_2 = codeUnits_2;
  }
  _Utf8Decoder_convert_addSingleBytes.builtin$cls = "_Utf8Decoder_convert_addSingleBytes";
  if (!"name" in _Utf8Decoder_convert_addSingleBytes)
    _Utf8Decoder_convert_addSingleBytes.name = "_Utf8Decoder_convert_addSingleBytes";
  $desc = $collectedClasses._Utf8Decoder_convert_addSingleBytes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Utf8Decoder_convert_addSingleBytes.prototype = $desc;
  function Function__toMangledNames_closure(result_0) {
    this.result_0 = result_0;
  }
  Function__toMangledNames_closure.builtin$cls = "Function__toMangledNames_closure";
  if (!"name" in Function__toMangledNames_closure)
    Function__toMangledNames_closure.name = "Function__toMangledNames_closure";
  $desc = $collectedClasses.Function__toMangledNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function__toMangledNames_closure.prototype = $desc;
  function NoSuchMethodError_toString_closure(box_0) {
    this.box_0 = box_0;
  }
  NoSuchMethodError_toString_closure.builtin$cls = "NoSuchMethodError_toString_closure";
  if (!"name" in NoSuchMethodError_toString_closure)
    NoSuchMethodError_toString_closure.name = "NoSuchMethodError_toString_closure";
  $desc = $collectedClasses.NoSuchMethodError_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError_toString_closure.prototype = $desc;
  function bool() {
  }
  bool.builtin$cls = "bool";
  if (!"name" in bool)
    bool.name = "bool";
  $desc = $collectedClasses.bool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  bool.prototype = $desc;
  function Comparable() {
  }
  Comparable.builtin$cls = "Comparable";
  if (!"name" in Comparable)
    Comparable.name = "Comparable";
  $desc = $collectedClasses.Comparable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comparable.prototype = $desc;
  function DateTime(millisecondsSinceEpoch, isUtc) {
    this.millisecondsSinceEpoch = millisecondsSinceEpoch;
    this.isUtc = isUtc;
  }
  DateTime.builtin$cls = "DateTime";
  if (!"name" in DateTime)
    DateTime.name = "DateTime";
  $desc = $collectedClasses.DateTime;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime.prototype = $desc;
  DateTime.prototype.get$millisecondsSinceEpoch = function() {
    return this.millisecondsSinceEpoch;
  };
  function DateTime_parse_parseIntOrZero() {
  }
  DateTime_parse_parseIntOrZero.builtin$cls = "DateTime_parse_parseIntOrZero";
  if (!"name" in DateTime_parse_parseIntOrZero)
    DateTime_parse_parseIntOrZero.name = "DateTime_parse_parseIntOrZero";
  $desc = $collectedClasses.DateTime_parse_parseIntOrZero;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_parse_parseIntOrZero.prototype = $desc;
  function DateTime_parse_parseDoubleOrZero() {
  }
  DateTime_parse_parseDoubleOrZero.builtin$cls = "DateTime_parse_parseDoubleOrZero";
  if (!"name" in DateTime_parse_parseDoubleOrZero)
    DateTime_parse_parseDoubleOrZero.name = "DateTime_parse_parseDoubleOrZero";
  $desc = $collectedClasses.DateTime_parse_parseDoubleOrZero;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DateTime_parse_parseDoubleOrZero.prototype = $desc;
  function $double() {
  }
  $double.builtin$cls = "$double";
  if (!"name" in $double)
    $double.name = "$double";
  $desc = $collectedClasses.$double;
  if ($desc instanceof Array)
    $desc = $desc[1];
  $double.prototype = $desc;
  function Duration(_duration) {
    this._duration = _duration;
  }
  Duration.builtin$cls = "Duration";
  if (!"name" in Duration)
    Duration.name = "Duration";
  $desc = $collectedClasses.Duration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration.prototype = $desc;
  Duration.prototype.get$_duration = function() {
    return this._duration;
  };
  function Duration_toString_sixDigits() {
  }
  Duration_toString_sixDigits.builtin$cls = "Duration_toString_sixDigits";
  if (!"name" in Duration_toString_sixDigits)
    Duration_toString_sixDigits.name = "Duration_toString_sixDigits";
  $desc = $collectedClasses.Duration_toString_sixDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_sixDigits.prototype = $desc;
  function Duration_toString_twoDigits() {
  }
  Duration_toString_twoDigits.builtin$cls = "Duration_toString_twoDigits";
  if (!"name" in Duration_toString_twoDigits)
    Duration_toString_twoDigits.name = "Duration_toString_twoDigits";
  $desc = $collectedClasses.Duration_toString_twoDigits;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Duration_toString_twoDigits.prototype = $desc;
  function Error() {
  }
  Error.builtin$cls = "Error";
  if (!"name" in Error)
    Error.name = "Error";
  $desc = $collectedClasses.Error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Error.prototype = $desc;
  function NullThrownError() {
  }
  NullThrownError.builtin$cls = "NullThrownError";
  if (!"name" in NullThrownError)
    NullThrownError.name = "NullThrownError";
  $desc = $collectedClasses.NullThrownError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullThrownError.prototype = $desc;
  function ArgumentError(message) {
    this.message = message;
  }
  ArgumentError.builtin$cls = "ArgumentError";
  if (!"name" in ArgumentError)
    ArgumentError.name = "ArgumentError";
  $desc = $collectedClasses.ArgumentError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ArgumentError.prototype = $desc;
  function RangeError(message) {
    this.message = message;
  }
  RangeError.builtin$cls = "RangeError";
  if (!"name" in RangeError)
    RangeError.name = "RangeError";
  $desc = $collectedClasses.RangeError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RangeError.prototype = $desc;
  function NoSuchMethodError(_core$_receiver, _memberName, _core$_arguments, _namedArguments, _existingArgumentNames) {
    this._core$_receiver = _core$_receiver;
    this._memberName = _memberName;
    this._core$_arguments = _core$_arguments;
    this._namedArguments = _namedArguments;
    this._existingArgumentNames = _existingArgumentNames;
  }
  NoSuchMethodError.builtin$cls = "NoSuchMethodError";
  if (!"name" in NoSuchMethodError)
    NoSuchMethodError.name = "NoSuchMethodError";
  $desc = $collectedClasses.NoSuchMethodError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NoSuchMethodError.prototype = $desc;
  function UnsupportedError(message) {
    this.message = message;
  }
  UnsupportedError.builtin$cls = "UnsupportedError";
  if (!"name" in UnsupportedError)
    UnsupportedError.name = "UnsupportedError";
  $desc = $collectedClasses.UnsupportedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnsupportedError.prototype = $desc;
  function UnimplementedError(message) {
    this.message = message;
  }
  UnimplementedError.builtin$cls = "UnimplementedError";
  if (!"name" in UnimplementedError)
    UnimplementedError.name = "UnimplementedError";
  $desc = $collectedClasses.UnimplementedError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnimplementedError.prototype = $desc;
  function StateError(message) {
    this.message = message;
  }
  StateError.builtin$cls = "StateError";
  if (!"name" in StateError)
    StateError.name = "StateError";
  $desc = $collectedClasses.StateError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StateError.prototype = $desc;
  function ConcurrentModificationError(modifiedObject) {
    this.modifiedObject = modifiedObject;
  }
  ConcurrentModificationError.builtin$cls = "ConcurrentModificationError";
  if (!"name" in ConcurrentModificationError)
    ConcurrentModificationError.name = "ConcurrentModificationError";
  $desc = $collectedClasses.ConcurrentModificationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ConcurrentModificationError.prototype = $desc;
  function OutOfMemoryError() {
  }
  OutOfMemoryError.builtin$cls = "OutOfMemoryError";
  if (!"name" in OutOfMemoryError)
    OutOfMemoryError.name = "OutOfMemoryError";
  $desc = $collectedClasses.OutOfMemoryError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  OutOfMemoryError.prototype = $desc;
  function StackOverflowError() {
  }
  StackOverflowError.builtin$cls = "StackOverflowError";
  if (!"name" in StackOverflowError)
    StackOverflowError.name = "StackOverflowError";
  $desc = $collectedClasses.StackOverflowError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackOverflowError.prototype = $desc;
  function CyclicInitializationError(variableName) {
    this.variableName = variableName;
  }
  CyclicInitializationError.builtin$cls = "CyclicInitializationError";
  if (!"name" in CyclicInitializationError)
    CyclicInitializationError.name = "CyclicInitializationError";
  $desc = $collectedClasses.CyclicInitializationError;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CyclicInitializationError.prototype = $desc;
  function _ExceptionImplementation(message) {
    this.message = message;
  }
  _ExceptionImplementation.builtin$cls = "_ExceptionImplementation";
  if (!"name" in _ExceptionImplementation)
    _ExceptionImplementation.name = "_ExceptionImplementation";
  $desc = $collectedClasses._ExceptionImplementation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ExceptionImplementation.prototype = $desc;
  function FormatException(message) {
    this.message = message;
  }
  FormatException.builtin$cls = "FormatException";
  if (!"name" in FormatException)
    FormatException.name = "FormatException";
  $desc = $collectedClasses.FormatException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FormatException.prototype = $desc;
  function IntegerDivisionByZeroException() {
  }
  IntegerDivisionByZeroException.builtin$cls = "IntegerDivisionByZeroException";
  if (!"name" in IntegerDivisionByZeroException)
    IntegerDivisionByZeroException.name = "IntegerDivisionByZeroException";
  $desc = $collectedClasses.IntegerDivisionByZeroException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IntegerDivisionByZeroException.prototype = $desc;
  function Expando(name) {
    this.name = name;
  }
  Expando.builtin$cls = "Expando";
  if (!"name" in Expando)
    Expando.name = "Expando";
  $desc = $collectedClasses.Expando;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expando.prototype = $desc;
  Expando.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Function() {
  }
  Function.builtin$cls = "Function";
  if (!"name" in Function)
    Function.name = "Function";
  $desc = $collectedClasses.Function;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Function.prototype = $desc;
  function $int() {
  }
  $int.builtin$cls = "$int";
  if (!"name" in $int)
    $int.name = "$int";
  $desc = $collectedClasses.$int;
  if ($desc instanceof Array)
    $desc = $desc[1];
  $int.prototype = $desc;
  function Iterable() {
  }
  Iterable.builtin$cls = "Iterable";
  if (!"name" in Iterable)
    Iterable.name = "Iterable";
  $desc = $collectedClasses.Iterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterable.prototype = $desc;
  function Iterator() {
  }
  Iterator.builtin$cls = "Iterator";
  if (!"name" in Iterator)
    Iterator.name = "Iterator";
  $desc = $collectedClasses.Iterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Iterator.prototype = $desc;
  function List() {
  }
  List.builtin$cls = "List";
  if (!"name" in List)
    List.name = "List";
  $desc = $collectedClasses.List;
  if ($desc instanceof Array)
    $desc = $desc[1];
  List.prototype = $desc;
  function Map() {
  }
  Map.builtin$cls = "Map";
  if (!"name" in Map)
    Map.name = "Map";
  $desc = $collectedClasses.Map;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Map.prototype = $desc;
  function Null() {
  }
  Null.builtin$cls = "Null";
  if (!"name" in Null)
    Null.name = "Null";
  $desc = $collectedClasses.Null;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Null.prototype = $desc;
  function num() {
  }
  num.builtin$cls = "num";
  if (!"name" in num)
    num.name = "num";
  $desc = $collectedClasses.num;
  if ($desc instanceof Array)
    $desc = $desc[1];
  num.prototype = $desc;
  function Object() {
  }
  Object.builtin$cls = "Object";
  if (!"name" in Object)
    Object.name = "Object";
  $desc = $collectedClasses.Object;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Object.prototype = $desc;
  function Match() {
  }
  Match.builtin$cls = "Match";
  if (!"name" in Match)
    Match.name = "Match";
  $desc = $collectedClasses.Match;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Match.prototype = $desc;
  function StackTrace() {
  }
  StackTrace.builtin$cls = "StackTrace";
  if (!"name" in StackTrace)
    StackTrace.name = "StackTrace";
  $desc = $collectedClasses.StackTrace;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StackTrace.prototype = $desc;
  function Stopwatch(frequency, _core$_start, _stop) {
    this.frequency = frequency;
    this._core$_start = _core$_start;
    this._stop = _stop;
  }
  Stopwatch.builtin$cls = "Stopwatch";
  if (!"name" in Stopwatch)
    Stopwatch.name = "Stopwatch";
  $desc = $collectedClasses.Stopwatch;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Stopwatch.prototype = $desc;
  function String() {
  }
  String.builtin$cls = "String";
  if (!"name" in String)
    String.name = "String";
  $desc = $collectedClasses.String;
  if ($desc instanceof Array)
    $desc = $desc[1];
  String.prototype = $desc;
  function RuneIterator(string, _core$_position, _nextPosition, _currentCodePoint) {
    this.string = string;
    this._core$_position = _core$_position;
    this._nextPosition = _nextPosition;
    this._currentCodePoint = _currentCodePoint;
  }
  RuneIterator.builtin$cls = "RuneIterator";
  if (!"name" in RuneIterator)
    RuneIterator.name = "RuneIterator";
  $desc = $collectedClasses.RuneIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RuneIterator.prototype = $desc;
  function StringBuffer(_contents) {
    this._contents = _contents;
  }
  StringBuffer.builtin$cls = "StringBuffer";
  if (!"name" in StringBuffer)
    StringBuffer.name = "StringBuffer";
  $desc = $collectedClasses.StringBuffer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StringBuffer.prototype = $desc;
  StringBuffer.prototype.get$_contents = function() {
    return this._contents;
  };
  function Symbol0() {
  }
  Symbol0.builtin$cls = "Symbol0";
  if (!"name" in Symbol0)
    Symbol0.name = "Symbol0";
  $desc = $collectedClasses.Symbol0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Symbol0.prototype = $desc;
  function Type() {
  }
  Type.builtin$cls = "Type";
  if (!"name" in Type)
    Type.name = "Type";
  $desc = $collectedClasses.Type;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Type.prototype = $desc;
  function Uri(_host, _port, _path, scheme, userInfo, query, fragment, _pathSegments, _queryParameters) {
    this._host = _host;
    this._port = _port;
    this._path = _path;
    this.scheme = scheme;
    this.userInfo = userInfo;
    this.query = query;
    this.fragment = fragment;
    this._pathSegments = _pathSegments;
    this._queryParameters = _queryParameters;
  }
  Uri.builtin$cls = "Uri";
  if (!"name" in Uri)
    Uri.name = "Uri";
  $desc = $collectedClasses.Uri;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri.prototype = $desc;
  function Uri_parse_isRegName() {
  }
  Uri_parse_isRegName.builtin$cls = "Uri_parse_isRegName";
  if (!"name" in Uri_parse_isRegName)
    Uri_parse_isRegName.name = "Uri_parse_isRegName";
  $desc = $collectedClasses.Uri_parse_isRegName;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parse_isRegName.prototype = $desc;
  function Uri_parse_ipV6Address(uri_0) {
    this.uri_0 = uri_0;
  }
  Uri_parse_ipV6Address.builtin$cls = "Uri_parse_ipV6Address";
  if (!"name" in Uri_parse_ipV6Address)
    Uri_parse_ipV6Address.name = "Uri_parse_ipV6Address";
  $desc = $collectedClasses.Uri_parse_ipV6Address;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parse_ipV6Address.prototype = $desc;
  function Uri__makeScheme_isSchemeLowerCharacter() {
  }
  Uri__makeScheme_isSchemeLowerCharacter.builtin$cls = "Uri__makeScheme_isSchemeLowerCharacter";
  if (!"name" in Uri__makeScheme_isSchemeLowerCharacter)
    Uri__makeScheme_isSchemeLowerCharacter.name = "Uri__makeScheme_isSchemeLowerCharacter";
  $desc = $collectedClasses.Uri__makeScheme_isSchemeLowerCharacter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeScheme_isSchemeLowerCharacter.prototype = $desc;
  function Uri__makePath_closure() {
  }
  Uri__makePath_closure.builtin$cls = "Uri__makePath_closure";
  if (!"name" in Uri__makePath_closure)
    Uri__makePath_closure.name = "Uri__makePath_closure";
  $desc = $collectedClasses.Uri__makePath_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makePath_closure.prototype = $desc;
  function Uri__makeQuery_closure(box_0, result_1) {
    this.box_0 = box_0;
    this.result_1 = result_1;
  }
  Uri__makeQuery_closure.builtin$cls = "Uri__makeQuery_closure";
  if (!"name" in Uri__makeQuery_closure)
    Uri__makeQuery_closure.name = "Uri__makeQuery_closure";
  $desc = $collectedClasses.Uri__makeQuery_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__makeQuery_closure.prototype = $desc;
  function Uri__normalize_isNormalizedHexDigit() {
  }
  Uri__normalize_isNormalizedHexDigit.builtin$cls = "Uri__normalize_isNormalizedHexDigit";
  if (!"name" in Uri__normalize_isNormalizedHexDigit)
    Uri__normalize_isNormalizedHexDigit.name = "Uri__normalize_isNormalizedHexDigit";
  $desc = $collectedClasses.Uri__normalize_isNormalizedHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isNormalizedHexDigit.prototype = $desc;
  function Uri__normalize_isLowerCaseHexDigit() {
  }
  Uri__normalize_isLowerCaseHexDigit.builtin$cls = "Uri__normalize_isLowerCaseHexDigit";
  if (!"name" in Uri__normalize_isLowerCaseHexDigit)
    Uri__normalize_isLowerCaseHexDigit.name = "Uri__normalize_isLowerCaseHexDigit";
  $desc = $collectedClasses.Uri__normalize_isLowerCaseHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isLowerCaseHexDigit.prototype = $desc;
  function Uri__normalize_isUnreserved() {
  }
  Uri__normalize_isUnreserved.builtin$cls = "Uri__normalize_isUnreserved";
  if (!"name" in Uri__normalize_isUnreserved)
    Uri__normalize_isUnreserved.name = "Uri__normalize_isUnreserved";
  $desc = $collectedClasses.Uri__normalize_isUnreserved;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_isUnreserved.prototype = $desc;
  function Uri__normalize_normalizeHexDigit(component_1, isNormalizedHexDigit_2, isLowerCaseHexDigit_3) {
    this.component_1 = component_1;
    this.isNormalizedHexDigit_2 = isNormalizedHexDigit_2;
    this.isLowerCaseHexDigit_3 = isLowerCaseHexDigit_3;
  }
  Uri__normalize_normalizeHexDigit.builtin$cls = "Uri__normalize_normalizeHexDigit";
  if (!"name" in Uri__normalize_normalizeHexDigit)
    Uri__normalize_normalizeHexDigit.name = "Uri__normalize_normalizeHexDigit";
  $desc = $collectedClasses.Uri__normalize_normalizeHexDigit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_normalizeHexDigit.prototype = $desc;
  function Uri__normalize_decodeHexDigitPair(component_4) {
    this.component_4 = component_4;
  }
  Uri__normalize_decodeHexDigitPair.builtin$cls = "Uri__normalize_decodeHexDigitPair";
  if (!"name" in Uri__normalize_decodeHexDigitPair)
    Uri__normalize_decodeHexDigitPair.name = "Uri__normalize_decodeHexDigitPair";
  $desc = $collectedClasses.Uri__normalize_decodeHexDigitPair;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_decodeHexDigitPair.prototype = $desc;
  function Uri__normalize_fillResult(box_0, component_5) {
    this.box_0 = box_0;
    this.component_5 = component_5;
  }
  Uri__normalize_fillResult.builtin$cls = "Uri__normalize_fillResult";
  if (!"name" in Uri__normalize_fillResult)
    Uri__normalize_fillResult.name = "Uri__normalize_fillResult";
  $desc = $collectedClasses.Uri__normalize_fillResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__normalize_fillResult.prototype = $desc;
  function Uri_hashCode_combine() {
  }
  Uri_hashCode_combine.builtin$cls = "Uri_hashCode_combine";
  if (!"name" in Uri_hashCode_combine)
    Uri_hashCode_combine.name = "Uri_hashCode_combine";
  $desc = $collectedClasses.Uri_hashCode_combine;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_hashCode_combine.prototype = $desc;
  function Uri_parseIPv4Address_error() {
  }
  Uri_parseIPv4Address_error.builtin$cls = "Uri_parseIPv4Address_error";
  if (!"name" in Uri_parseIPv4Address_error)
    Uri_parseIPv4Address_error.name = "Uri_parseIPv4Address_error";
  $desc = $collectedClasses.Uri_parseIPv4Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_error.prototype = $desc;
  function Uri_parseIPv4Address_closure(error_0) {
    this.error_0 = error_0;
  }
  Uri_parseIPv4Address_closure.builtin$cls = "Uri_parseIPv4Address_closure";
  if (!"name" in Uri_parseIPv4Address_closure)
    Uri_parseIPv4Address_closure.name = "Uri_parseIPv4Address_closure";
  $desc = $collectedClasses.Uri_parseIPv4Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv4Address_closure.prototype = $desc;
  function Uri_parseIPv6Address_error() {
  }
  Uri_parseIPv6Address_error.builtin$cls = "Uri_parseIPv6Address_error";
  if (!"name" in Uri_parseIPv6Address_error)
    Uri_parseIPv6Address_error.name = "Uri_parseIPv6Address_error";
  $desc = $collectedClasses.Uri_parseIPv6Address_error;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_error.prototype = $desc;
  function Uri_parseIPv6Address_parseHex(host_0, error_1) {
    this.host_0 = host_0;
    this.error_1 = error_1;
  }
  Uri_parseIPv6Address_parseHex.builtin$cls = "Uri_parseIPv6Address_parseHex";
  if (!"name" in Uri_parseIPv6Address_parseHex)
    Uri_parseIPv6Address_parseHex.name = "Uri_parseIPv6Address_parseHex";
  $desc = $collectedClasses.Uri_parseIPv6Address_parseHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_parseHex.prototype = $desc;
  function Uri_parseIPv6Address_closure(parts_2) {
    this.parts_2 = parts_2;
  }
  Uri_parseIPv6Address_closure.builtin$cls = "Uri_parseIPv6Address_closure";
  if (!"name" in Uri_parseIPv6Address_closure)
    Uri_parseIPv6Address_closure.name = "Uri_parseIPv6Address_closure";
  $desc = $collectedClasses.Uri_parseIPv6Address_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri_parseIPv6Address_closure.prototype = $desc;
  function Uri__uriEncode_byteToHex() {
  }
  Uri__uriEncode_byteToHex.builtin$cls = "Uri__uriEncode_byteToHex";
  if (!"name" in Uri__uriEncode_byteToHex)
    Uri__uriEncode_byteToHex.name = "Uri__uriEncode_byteToHex";
  $desc = $collectedClasses.Uri__uriEncode_byteToHex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Uri__uriEncode_byteToHex.prototype = $desc;
  function Interceptor_CssStyleDeclarationBase() {
  }
  Interceptor_CssStyleDeclarationBase.builtin$cls = "Interceptor_CssStyleDeclarationBase";
  if (!"name" in Interceptor_CssStyleDeclarationBase)
    Interceptor_CssStyleDeclarationBase.name = "Interceptor_CssStyleDeclarationBase";
  $desc = $collectedClasses.Interceptor_CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_CssStyleDeclarationBase.prototype = $desc;
  function CssStyleDeclarationBase() {
  }
  CssStyleDeclarationBase.builtin$cls = "CssStyleDeclarationBase";
  if (!"name" in CssStyleDeclarationBase)
    CssStyleDeclarationBase.name = "CssStyleDeclarationBase";
  $desc = $collectedClasses.CssStyleDeclarationBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssStyleDeclarationBase.prototype = $desc;
  function _ChildrenElementList(_html$_element, _childElements) {
    this._html$_element = _html$_element;
    this._childElements = _childElements;
  }
  _ChildrenElementList.builtin$cls = "_ChildrenElementList";
  if (!"name" in _ChildrenElementList)
    _ChildrenElementList.name = "_ChildrenElementList";
  $desc = $collectedClasses._ChildrenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildrenElementList.prototype = $desc;
  function _FrozenElementList(_nodeList, _elementList) {
    this._nodeList = _nodeList;
    this._elementList = _elementList;
  }
  _FrozenElementList.builtin$cls = "_FrozenElementList";
  if (!"name" in _FrozenElementList)
    _FrozenElementList.name = "_FrozenElementList";
  $desc = $collectedClasses._FrozenElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList.prototype = $desc;
  function _FrozenElementList$_wrap_closure() {
  }
  _FrozenElementList$_wrap_closure.builtin$cls = "_FrozenElementList$_wrap_closure";
  if (!"name" in _FrozenElementList$_wrap_closure)
    _FrozenElementList$_wrap_closure.name = "_FrozenElementList$_wrap_closure";
  $desc = $collectedClasses._FrozenElementList$_wrap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList$_wrap_closure.prototype = $desc;
  function _FrozenElementList_classes_closure(value_0) {
    this.value_0 = value_0;
  }
  _FrozenElementList_classes_closure.builtin$cls = "_FrozenElementList_classes_closure";
  if (!"name" in _FrozenElementList_classes_closure)
    _FrozenElementList_classes_closure.name = "_FrozenElementList_classes_closure";
  $desc = $collectedClasses._FrozenElementList_classes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _FrozenElementList_classes_closure.prototype = $desc;
  function Element_Element$html_closure() {
  }
  Element_Element$html_closure.builtin$cls = "Element_Element$html_closure";
  if (!"name" in Element_Element$html_closure)
    Element_Element$html_closure.name = "Element_Element$html_closure";
  $desc = $collectedClasses.Element_Element$html_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Element_Element$html_closure.prototype = $desc;
  function Entry() {
  }
  Entry.builtin$cls = "Entry";
  if (!"name" in Entry)
    Entry.name = "Entry";
  $desc = $collectedClasses.Entry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Entry.prototype = $desc;
  function Events(_ptr) {
    this._ptr = _ptr;
  }
  Events.builtin$cls = "Events";
  if (!"name" in Events)
    Events.name = "Events";
  $desc = $collectedClasses.Events;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Events.prototype = $desc;
  Events.prototype.get$_ptr = function() {
    return this._ptr;
  };
  function ElementEvents(html$ElementEvents$_ptr, _ptr) {
    this.html$ElementEvents$_ptr = html$ElementEvents$_ptr;
    this._ptr = _ptr;
  }
  ElementEvents.builtin$cls = "ElementEvents";
  if (!"name" in ElementEvents)
    ElementEvents.name = "ElementEvents";
  $desc = $collectedClasses.ElementEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ElementEvents.prototype = $desc;
  ElementEvents.prototype.get$_ptr = function() {
    return this.html$ElementEvents$_ptr;
  };
  function Interceptor_ListMixin() {
  }
  Interceptor_ListMixin.builtin$cls = "Interceptor_ListMixin";
  if (!"name" in Interceptor_ListMixin)
    Interceptor_ListMixin.name = "Interceptor_ListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin() {
  }
  Interceptor_ListMixin_ImmutableListMixin.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin)
    Interceptor_ListMixin_ImmutableListMixin.name = "Interceptor_ListMixin_ImmutableListMixin";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin.prototype = $desc;
  function HttpRequest_getString_closure() {
  }
  HttpRequest_getString_closure.builtin$cls = "HttpRequest_getString_closure";
  if (!"name" in HttpRequest_getString_closure)
    HttpRequest_getString_closure.name = "HttpRequest_getString_closure";
  $desc = $collectedClasses.HttpRequest_getString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_getString_closure.prototype = $desc;
  function HttpRequest_request_closure0(xhr_0) {
    this.xhr_0 = xhr_0;
  }
  HttpRequest_request_closure0.builtin$cls = "HttpRequest_request_closure0";
  if (!"name" in HttpRequest_request_closure0)
    HttpRequest_request_closure0.name = "HttpRequest_request_closure0";
  $desc = $collectedClasses.HttpRequest_request_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure0.prototype = $desc;
  function HttpRequest_request_closure(completer_1, xhr_2) {
    this.completer_1 = completer_1;
    this.xhr_2 = xhr_2;
  }
  HttpRequest_request_closure.builtin$cls = "HttpRequest_request_closure";
  if (!"name" in HttpRequest_request_closure)
    HttpRequest_request_closure.name = "HttpRequest_request_closure";
  $desc = $collectedClasses.HttpRequest_request_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HttpRequest_request_closure.prototype = $desc;
  function MutationObserver_observe_override(parsedOptions_0) {
    this.parsedOptions_0 = parsedOptions_0;
  }
  MutationObserver_observe_override.builtin$cls = "MutationObserver_observe_override";
  if (!"name" in MutationObserver_observe_override)
    MutationObserver_observe_override.name = "MutationObserver_observe_override";
  $desc = $collectedClasses.MutationObserver_observe_override;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutationObserver_observe_override.prototype = $desc;
  function _ChildNodeListLazy(_this) {
    this._this = _this;
  }
  _ChildNodeListLazy.builtin$cls = "_ChildNodeListLazy";
  if (!"name" in _ChildNodeListLazy)
    _ChildNodeListLazy.name = "_ChildNodeListLazy";
  $desc = $collectedClasses._ChildNodeListLazy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ChildNodeListLazy.prototype = $desc;
  function Interceptor_ListMixin0() {
  }
  Interceptor_ListMixin0.builtin$cls = "Interceptor_ListMixin0";
  if (!"name" in Interceptor_ListMixin0)
    Interceptor_ListMixin0.name = "Interceptor_ListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin0.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin0() {
  }
  Interceptor_ListMixin_ImmutableListMixin0.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin0";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin0)
    Interceptor_ListMixin_ImmutableListMixin0.name = "Interceptor_ListMixin_ImmutableListMixin0";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin0.prototype = $desc;
  function Window_animationFrame_closure(completer_0) {
    this.completer_0 = completer_0;
  }
  Window_animationFrame_closure.builtin$cls = "Window_animationFrame_closure";
  if (!"name" in Window_animationFrame_closure)
    Window_animationFrame_closure.name = "Window_animationFrame_closure";
  $desc = $collectedClasses.Window_animationFrame_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Window_animationFrame_closure.prototype = $desc;
  function Interceptor_ListMixin1() {
  }
  Interceptor_ListMixin1.builtin$cls = "Interceptor_ListMixin1";
  if (!"name" in Interceptor_ListMixin1)
    Interceptor_ListMixin1.name = "Interceptor_ListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin1.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin1() {
  }
  Interceptor_ListMixin_ImmutableListMixin1.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin1";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin1)
    Interceptor_ListMixin_ImmutableListMixin1.name = "Interceptor_ListMixin_ImmutableListMixin1";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin1.prototype = $desc;
  function Interceptor_ListMixin2() {
  }
  Interceptor_ListMixin2.builtin$cls = "Interceptor_ListMixin2";
  if (!"name" in Interceptor_ListMixin2)
    Interceptor_ListMixin2.name = "Interceptor_ListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin2.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin2() {
  }
  Interceptor_ListMixin_ImmutableListMixin2.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin2";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin2)
    Interceptor_ListMixin_ImmutableListMixin2.name = "Interceptor_ListMixin_ImmutableListMixin2";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin2.prototype = $desc;
  function Interceptor_ListMixin3() {
  }
  Interceptor_ListMixin3.builtin$cls = "Interceptor_ListMixin3";
  if (!"name" in Interceptor_ListMixin3)
    Interceptor_ListMixin3.name = "Interceptor_ListMixin3";
  $desc = $collectedClasses.Interceptor_ListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin3.prototype = $desc;
  function Interceptor_ListMixin_ImmutableListMixin3() {
  }
  Interceptor_ListMixin_ImmutableListMixin3.builtin$cls = "Interceptor_ListMixin_ImmutableListMixin3";
  if (!"name" in Interceptor_ListMixin_ImmutableListMixin3)
    Interceptor_ListMixin_ImmutableListMixin3.name = "Interceptor_ListMixin_ImmutableListMixin3";
  $desc = $collectedClasses.Interceptor_ListMixin_ImmutableListMixin3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Interceptor_ListMixin_ImmutableListMixin3.prototype = $desc;
  function _AttributeMap() {
  }
  _AttributeMap.builtin$cls = "_AttributeMap";
  if (!"name" in _AttributeMap)
    _AttributeMap.name = "_AttributeMap";
  $desc = $collectedClasses._AttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap.prototype = $desc;
  function _AttributeMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _AttributeMap_addAll_closure.builtin$cls = "_AttributeMap_addAll_closure";
  if (!"name" in _AttributeMap_addAll_closure)
    _AttributeMap_addAll_closure.name = "_AttributeMap_addAll_closure";
  $desc = $collectedClasses._AttributeMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeMap_addAll_closure.prototype = $desc;
  function _ElementAttributeMap(_html$_element) {
    this._html$_element = _html$_element;
  }
  _ElementAttributeMap.builtin$cls = "_ElementAttributeMap";
  if (!"name" in _ElementAttributeMap)
    _ElementAttributeMap.name = "_ElementAttributeMap";
  $desc = $collectedClasses._ElementAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementAttributeMap.prototype = $desc;
  function _DataAttributeMap(_attributes) {
    this._attributes = _attributes;
  }
  _DataAttributeMap.builtin$cls = "_DataAttributeMap";
  if (!"name" in _DataAttributeMap)
    _DataAttributeMap.name = "_DataAttributeMap";
  $desc = $collectedClasses._DataAttributeMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap.prototype = $desc;
  function _DataAttributeMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  _DataAttributeMap_addAll_closure.builtin$cls = "_DataAttributeMap_addAll_closure";
  if (!"name" in _DataAttributeMap_addAll_closure)
    _DataAttributeMap_addAll_closure.name = "_DataAttributeMap_addAll_closure";
  $desc = $collectedClasses._DataAttributeMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_addAll_closure.prototype = $desc;
  function _DataAttributeMap_forEach_closure(this_0, f_1) {
    this.this_0 = this_0;
    this.f_1 = f_1;
  }
  _DataAttributeMap_forEach_closure.builtin$cls = "_DataAttributeMap_forEach_closure";
  if (!"name" in _DataAttributeMap_forEach_closure)
    _DataAttributeMap_forEach_closure.name = "_DataAttributeMap_forEach_closure";
  $desc = $collectedClasses._DataAttributeMap_forEach_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_forEach_closure.prototype = $desc;
  function _DataAttributeMap_keys_closure(this_0, keys_1) {
    this.this_0 = this_0;
    this.keys_1 = keys_1;
  }
  _DataAttributeMap_keys_closure.builtin$cls = "_DataAttributeMap_keys_closure";
  if (!"name" in _DataAttributeMap_keys_closure)
    _DataAttributeMap_keys_closure.name = "_DataAttributeMap_keys_closure";
  $desc = $collectedClasses._DataAttributeMap_keys_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_keys_closure.prototype = $desc;
  function _DataAttributeMap_values_closure(this_0, values_1) {
    this.this_0 = this_0;
    this.values_1 = values_1;
  }
  _DataAttributeMap_values_closure.builtin$cls = "_DataAttributeMap_values_closure";
  if (!"name" in _DataAttributeMap_values_closure)
    _DataAttributeMap_values_closure.name = "_DataAttributeMap_values_closure";
  $desc = $collectedClasses._DataAttributeMap_values_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DataAttributeMap_values_closure.prototype = $desc;
  function _MultiElementCssClassSet(_elementIterable, _elementCssClassSetIterable) {
    this._elementIterable = _elementIterable;
    this._elementCssClassSetIterable = _elementCssClassSetIterable;
  }
  _MultiElementCssClassSet.builtin$cls = "_MultiElementCssClassSet";
  if (!"name" in _MultiElementCssClassSet)
    _MultiElementCssClassSet.name = "_MultiElementCssClassSet";
  $desc = $collectedClasses._MultiElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet.prototype = $desc;
  function _MultiElementCssClassSet_closure() {
  }
  _MultiElementCssClassSet_closure.builtin$cls = "_MultiElementCssClassSet_closure";
  if (!"name" in _MultiElementCssClassSet_closure)
    _MultiElementCssClassSet_closure.name = "_MultiElementCssClassSet_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_closure.prototype = $desc;
  function _MultiElementCssClassSet_readClasses_closure(s_0) {
    this.s_0 = s_0;
  }
  _MultiElementCssClassSet_readClasses_closure.builtin$cls = "_MultiElementCssClassSet_readClasses_closure";
  if (!"name" in _MultiElementCssClassSet_readClasses_closure)
    _MultiElementCssClassSet_readClasses_closure.name = "_MultiElementCssClassSet_readClasses_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_readClasses_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_readClasses_closure.prototype = $desc;
  function _MultiElementCssClassSet_modify_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet_modify_closure.builtin$cls = "_MultiElementCssClassSet_modify_closure";
  if (!"name" in _MultiElementCssClassSet_modify_closure)
    _MultiElementCssClassSet_modify_closure.name = "_MultiElementCssClassSet_modify_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_modify_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_modify_closure.prototype = $desc;
  function _MultiElementCssClassSet_toggle_closure(value_0, shouldAdd_1) {
    this.value_0 = value_0;
    this.shouldAdd_1 = shouldAdd_1;
  }
  _MultiElementCssClassSet_toggle_closure.builtin$cls = "_MultiElementCssClassSet_toggle_closure";
  if (!"name" in _MultiElementCssClassSet_toggle_closure)
    _MultiElementCssClassSet_toggle_closure.name = "_MultiElementCssClassSet_toggle_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_toggle_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_toggle_closure.prototype = $desc;
  function _MultiElementCssClassSet_remove_closure(value_0) {
    this.value_0 = value_0;
  }
  _MultiElementCssClassSet_remove_closure.builtin$cls = "_MultiElementCssClassSet_remove_closure";
  if (!"name" in _MultiElementCssClassSet_remove_closure)
    _MultiElementCssClassSet_remove_closure.name = "_MultiElementCssClassSet_remove_closure";
  $desc = $collectedClasses._MultiElementCssClassSet_remove_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet_remove_closure.prototype = $desc;
  function _MultiElementCssClassSet__modifyWithReturnValue_closure(f_0) {
    this.f_0 = f_0;
  }
  _MultiElementCssClassSet__modifyWithReturnValue_closure.builtin$cls = "_MultiElementCssClassSet__modifyWithReturnValue_closure";
  if (!"name" in _MultiElementCssClassSet__modifyWithReturnValue_closure)
    _MultiElementCssClassSet__modifyWithReturnValue_closure.name = "_MultiElementCssClassSet__modifyWithReturnValue_closure";
  $desc = $collectedClasses._MultiElementCssClassSet__modifyWithReturnValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MultiElementCssClassSet__modifyWithReturnValue_closure.prototype = $desc;
  function _ElementCssClassSet(_html$_element) {
    this._html$_element = _html$_element;
  }
  _ElementCssClassSet.builtin$cls = "_ElementCssClassSet";
  if (!"name" in _ElementCssClassSet)
    _ElementCssClassSet.name = "_ElementCssClassSet";
  $desc = $collectedClasses._ElementCssClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementCssClassSet.prototype = $desc;
  function _ContentCssRect(_html$_element, left, top, _width, _height) {
    this._html$_element = _html$_element;
    this.left = left;
    this.top = top;
    this._width = _width;
    this._height = _height;
  }
  _ContentCssRect.builtin$cls = "_ContentCssRect";
  if (!"name" in _ContentCssRect)
    _ContentCssRect.name = "_ContentCssRect";
  $desc = $collectedClasses._ContentCssRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ContentCssRect.prototype = $desc;
  function _MarginCssRect(_html$_element, left, top, _width, _height) {
    this._html$_element = _html$_element;
    this.left = left;
    this.top = top;
    this._width = _width;
    this._height = _height;
  }
  _MarginCssRect.builtin$cls = "_MarginCssRect";
  if (!"name" in _MarginCssRect)
    _MarginCssRect.name = "_MarginCssRect";
  $desc = $collectedClasses._MarginCssRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _MarginCssRect.prototype = $desc;
  function CssRect() {
  }
  CssRect.builtin$cls = "CssRect";
  if (!"name" in CssRect)
    CssRect.name = "CssRect";
  $desc = $collectedClasses.CssRect;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssRect.prototype = $desc;
  function Dimension(_html$_value, _unit) {
    this._html$_value = _html$_value;
    this._unit = _unit;
  }
  Dimension.builtin$cls = "Dimension";
  if (!"name" in Dimension)
    Dimension.name = "Dimension";
  $desc = $collectedClasses.Dimension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Dimension.prototype = $desc;
  function EventStreamProvider(_eventType) {
    this._eventType = _eventType;
  }
  EventStreamProvider.builtin$cls = "EventStreamProvider";
  if (!"name" in EventStreamProvider)
    EventStreamProvider.name = "EventStreamProvider";
  $desc = $collectedClasses.EventStreamProvider;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EventStreamProvider.prototype = $desc;
  function _EventStream(_html$_target, _eventType, _useCapture) {
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _EventStream.builtin$cls = "_EventStream";
  if (!"name" in _EventStream)
    _EventStream.name = "_EventStream";
  $desc = $collectedClasses._EventStream;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStream.prototype = $desc;
  function _ElementEventStreamImpl(_html$_target, _eventType, _useCapture) {
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._useCapture = _useCapture;
  }
  _ElementEventStreamImpl.builtin$cls = "_ElementEventStreamImpl";
  if (!"name" in _ElementEventStreamImpl)
    _ElementEventStreamImpl.name = "_ElementEventStreamImpl";
  $desc = $collectedClasses._ElementEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl.prototype = $desc;
  function _ElementEventStreamImpl_matches_closure(selector_0) {
    this.selector_0 = selector_0;
  }
  _ElementEventStreamImpl_matches_closure.builtin$cls = "_ElementEventStreamImpl_matches_closure";
  if (!"name" in _ElementEventStreamImpl_matches_closure)
    _ElementEventStreamImpl_matches_closure.name = "_ElementEventStreamImpl_matches_closure";
  $desc = $collectedClasses._ElementEventStreamImpl_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl_matches_closure.prototype = $desc;
  function _ElementEventStreamImpl_matches_closure0(selector_1) {
    this.selector_1 = selector_1;
  }
  _ElementEventStreamImpl_matches_closure0.builtin$cls = "_ElementEventStreamImpl_matches_closure0";
  if (!"name" in _ElementEventStreamImpl_matches_closure0)
    _ElementEventStreamImpl_matches_closure0.name = "_ElementEventStreamImpl_matches_closure0";
  $desc = $collectedClasses._ElementEventStreamImpl_matches_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementEventStreamImpl_matches_closure0.prototype = $desc;
  function _ElementListEventStreamImpl(_targetList, _useCapture, _eventType) {
    this._targetList = _targetList;
    this._useCapture = _useCapture;
    this._eventType = _eventType;
  }
  _ElementListEventStreamImpl.builtin$cls = "_ElementListEventStreamImpl";
  if (!"name" in _ElementListEventStreamImpl)
    _ElementListEventStreamImpl.name = "_ElementListEventStreamImpl";
  $desc = $collectedClasses._ElementListEventStreamImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl.prototype = $desc;
  function _ElementListEventStreamImpl_matches_closure(selector_0) {
    this.selector_0 = selector_0;
  }
  _ElementListEventStreamImpl_matches_closure.builtin$cls = "_ElementListEventStreamImpl_matches_closure";
  if (!"name" in _ElementListEventStreamImpl_matches_closure)
    _ElementListEventStreamImpl_matches_closure.name = "_ElementListEventStreamImpl_matches_closure";
  $desc = $collectedClasses._ElementListEventStreamImpl_matches_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl_matches_closure.prototype = $desc;
  function _ElementListEventStreamImpl_matches_closure0(selector_1) {
    this.selector_1 = selector_1;
  }
  _ElementListEventStreamImpl_matches_closure0.builtin$cls = "_ElementListEventStreamImpl_matches_closure0";
  if (!"name" in _ElementListEventStreamImpl_matches_closure0)
    _ElementListEventStreamImpl_matches_closure0.name = "_ElementListEventStreamImpl_matches_closure0";
  $desc = $collectedClasses._ElementListEventStreamImpl_matches_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementListEventStreamImpl_matches_closure0.prototype = $desc;
  function _EventStreamSubscription(_pauseCount, _html$_target, _eventType, _onData, _useCapture) {
    this._pauseCount = _pauseCount;
    this._html$_target = _html$_target;
    this._eventType = _eventType;
    this._onData = _onData;
    this._useCapture = _useCapture;
  }
  _EventStreamSubscription.builtin$cls = "_EventStreamSubscription";
  if (!"name" in _EventStreamSubscription)
    _EventStreamSubscription.name = "_EventStreamSubscription";
  $desc = $collectedClasses._EventStreamSubscription;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventStreamSubscription.prototype = $desc;
  function _StreamPool(_controller, _subscriptions) {
    this._controller = _controller;
    this._subscriptions = _subscriptions;
  }
  _StreamPool.builtin$cls = "_StreamPool";
  if (!"name" in _StreamPool)
    _StreamPool.name = "_StreamPool";
  $desc = $collectedClasses._StreamPool;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool.prototype = $desc;
  function _StreamPool_add_closure(this_0, stream_1) {
    this.this_0 = this_0;
    this.stream_1 = stream_1;
  }
  _StreamPool_add_closure.builtin$cls = "_StreamPool_add_closure";
  if (!"name" in _StreamPool_add_closure)
    _StreamPool_add_closure.name = "_StreamPool_add_closure";
  $desc = $collectedClasses._StreamPool_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _StreamPool_add_closure.prototype = $desc;
  function _Html5NodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _Html5NodeValidator.builtin$cls = "_Html5NodeValidator";
  if (!"name" in _Html5NodeValidator)
    _Html5NodeValidator.name = "_Html5NodeValidator";
  $desc = $collectedClasses._Html5NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Html5NodeValidator.prototype = $desc;
  _Html5NodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function ImmutableListMixin() {
  }
  ImmutableListMixin.builtin$cls = "ImmutableListMixin";
  if (!"name" in ImmutableListMixin)
    ImmutableListMixin.name = "ImmutableListMixin";
  $desc = $collectedClasses.ImmutableListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ImmutableListMixin.prototype = $desc;
  function NodeValidatorBuilder(_validators) {
    this._validators = _validators;
  }
  NodeValidatorBuilder.builtin$cls = "NodeValidatorBuilder";
  if (!"name" in NodeValidatorBuilder)
    NodeValidatorBuilder.name = "NodeValidatorBuilder";
  $desc = $collectedClasses.NodeValidatorBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder.prototype = $desc;
  function NodeValidatorBuilder_allowsElement_closure(element_0) {
    this.element_0 = element_0;
  }
  NodeValidatorBuilder_allowsElement_closure.builtin$cls = "NodeValidatorBuilder_allowsElement_closure";
  if (!"name" in NodeValidatorBuilder_allowsElement_closure)
    NodeValidatorBuilder_allowsElement_closure.name = "NodeValidatorBuilder_allowsElement_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsElement_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsElement_closure.prototype = $desc;
  function NodeValidatorBuilder_allowsAttribute_closure(element_0, attributeName_1, value_2) {
    this.element_0 = element_0;
    this.attributeName_1 = attributeName_1;
    this.value_2 = value_2;
  }
  NodeValidatorBuilder_allowsAttribute_closure.builtin$cls = "NodeValidatorBuilder_allowsAttribute_closure";
  if (!"name" in NodeValidatorBuilder_allowsAttribute_closure)
    NodeValidatorBuilder_allowsAttribute_closure.name = "NodeValidatorBuilder_allowsAttribute_closure";
  $desc = $collectedClasses.NodeValidatorBuilder_allowsAttribute_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidatorBuilder_allowsAttribute_closure.prototype = $desc;
  function _SimpleNodeValidator(uriPolicy) {
    this.uriPolicy = uriPolicy;
  }
  _SimpleNodeValidator.builtin$cls = "_SimpleNodeValidator";
  if (!"name" in _SimpleNodeValidator)
    _SimpleNodeValidator.name = "_SimpleNodeValidator";
  $desc = $collectedClasses._SimpleNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SimpleNodeValidator.prototype = $desc;
  _SimpleNodeValidator.prototype.get$uriPolicy = function() {
    return this.uriPolicy;
  };
  function _TemplatingNodeValidator(_templateAttrs, allowedElements, allowedAttributes, allowedUriAttributes, uriPolicy) {
    this._templateAttrs = _templateAttrs;
    this.allowedElements = allowedElements;
    this.allowedAttributes = allowedAttributes;
    this.allowedUriAttributes = allowedUriAttributes;
    this.uriPolicy = uriPolicy;
  }
  _TemplatingNodeValidator.builtin$cls = "_TemplatingNodeValidator";
  if (!"name" in _TemplatingNodeValidator)
    _TemplatingNodeValidator.name = "_TemplatingNodeValidator";
  $desc = $collectedClasses._TemplatingNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator.prototype = $desc;
  function _TemplatingNodeValidator_closure() {
  }
  _TemplatingNodeValidator_closure.builtin$cls = "_TemplatingNodeValidator_closure";
  if (!"name" in _TemplatingNodeValidator_closure)
    _TemplatingNodeValidator_closure.name = "_TemplatingNodeValidator_closure";
  $desc = $collectedClasses._TemplatingNodeValidator_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplatingNodeValidator_closure.prototype = $desc;
  function _SvgNodeValidator() {
  }
  _SvgNodeValidator.builtin$cls = "_SvgNodeValidator";
  if (!"name" in _SvgNodeValidator)
    _SvgNodeValidator.name = "_SvgNodeValidator";
  $desc = $collectedClasses._SvgNodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SvgNodeValidator.prototype = $desc;
  function FixedSizeListIterator(_array, _html$_length, _position, _html$_current) {
    this._array = _array;
    this._html$_length = _html$_length;
    this._position = _position;
    this._html$_current = _html$_current;
  }
  FixedSizeListIterator.builtin$cls = "FixedSizeListIterator";
  if (!"name" in FixedSizeListIterator)
    FixedSizeListIterator.name = "FixedSizeListIterator";
  $desc = $collectedClasses.FixedSizeListIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FixedSizeListIterator.prototype = $desc;
  function _callConstructor_closure(constructor_0, interceptor_1) {
    this.constructor_0 = constructor_0;
    this.interceptor_1 = interceptor_1;
  }
  _callConstructor_closure.builtin$cls = "_callConstructor_closure";
  if (!"name" in _callConstructor_closure)
    _callConstructor_closure.name = "_callConstructor_closure";
  $desc = $collectedClasses._callConstructor_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _callConstructor_closure.prototype = $desc;
  function _DOMWindowCrossFrame(_window) {
    this._window = _window;
  }
  _DOMWindowCrossFrame.builtin$cls = "_DOMWindowCrossFrame";
  if (!"name" in _DOMWindowCrossFrame)
    _DOMWindowCrossFrame.name = "_DOMWindowCrossFrame";
  $desc = $collectedClasses._DOMWindowCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DOMWindowCrossFrame.prototype = $desc;
  function _LocationCrossFrame(_location) {
    this._location = _location;
  }
  _LocationCrossFrame.builtin$cls = "_LocationCrossFrame";
  if (!"name" in _LocationCrossFrame)
    _LocationCrossFrame.name = "_LocationCrossFrame";
  $desc = $collectedClasses._LocationCrossFrame;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocationCrossFrame.prototype = $desc;
  function NodeValidator() {
  }
  NodeValidator.builtin$cls = "NodeValidator";
  if (!"name" in NodeValidator)
    NodeValidator.name = "NodeValidator";
  $desc = $collectedClasses.NodeValidator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeValidator.prototype = $desc;
  function _SameOriginUriPolicy(_hiddenAnchor, _loc) {
    this._hiddenAnchor = _hiddenAnchor;
    this._loc = _loc;
  }
  _SameOriginUriPolicy.builtin$cls = "_SameOriginUriPolicy";
  if (!"name" in _SameOriginUriPolicy)
    _SameOriginUriPolicy.name = "_SameOriginUriPolicy";
  $desc = $collectedClasses._SameOriginUriPolicy;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SameOriginUriPolicy.prototype = $desc;
  function _ValidatingTreeSanitizer(validator) {
    this.validator = validator;
  }
  _ValidatingTreeSanitizer.builtin$cls = "_ValidatingTreeSanitizer";
  if (!"name" in _ValidatingTreeSanitizer)
    _ValidatingTreeSanitizer.name = "_ValidatingTreeSanitizer";
  $desc = $collectedClasses._ValidatingTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer.prototype = $desc;
  function _ValidatingTreeSanitizer_sanitizeTree_walk(this_0) {
    this.this_0 = this_0;
  }
  _ValidatingTreeSanitizer_sanitizeTree_walk.builtin$cls = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  if (!"name" in _ValidatingTreeSanitizer_sanitizeTree_walk)
    _ValidatingTreeSanitizer_sanitizeTree_walk.name = "_ValidatingTreeSanitizer_sanitizeTree_walk";
  $desc = $collectedClasses._ValidatingTreeSanitizer_sanitizeTree_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ValidatingTreeSanitizer_sanitizeTree_walk.prototype = $desc;
  function _AttributeClassSet(_svg$_element) {
    this._svg$_element = _svg$_element;
  }
  _AttributeClassSet.builtin$cls = "_AttributeClassSet";
  if (!"name" in _AttributeClassSet)
    _AttributeClassSet.name = "_AttributeClassSet";
  $desc = $collectedClasses._AttributeClassSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _AttributeClassSet.prototype = $desc;
  function Capability() {
  }
  Capability.builtin$cls = "Capability";
  if (!"name" in Capability)
    Capability.name = "Capability";
  $desc = $collectedClasses.Capability;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Capability.prototype = $desc;
  function JsObject(_js$_jsObject) {
    this._js$_jsObject = _js$_jsObject;
  }
  JsObject.builtin$cls = "JsObject";
  if (!"name" in JsObject)
    JsObject.name = "JsObject";
  $desc = $collectedClasses.JsObject;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject.prototype = $desc;
  function JsObject__convertDataTree__convert(_convertedObjects_0) {
    this._convertedObjects_0 = _convertedObjects_0;
  }
  JsObject__convertDataTree__convert.builtin$cls = "JsObject__convertDataTree__convert";
  if (!"name" in JsObject__convertDataTree__convert)
    JsObject__convertDataTree__convert.name = "JsObject__convertDataTree__convert";
  $desc = $collectedClasses.JsObject__convertDataTree__convert;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject__convertDataTree__convert.prototype = $desc;
  function JsFunction(_js$_jsObject) {
    this._js$_jsObject = _js$_jsObject;
  }
  JsFunction.builtin$cls = "JsFunction";
  if (!"name" in JsFunction)
    JsFunction.name = "JsFunction";
  $desc = $collectedClasses.JsFunction;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsFunction.prototype = $desc;
  function JsArray(_js$_jsObject) {
    this._js$_jsObject = _js$_jsObject;
  }
  JsArray.builtin$cls = "JsArray";
  if (!"name" in JsArray)
    JsArray.name = "JsArray";
  $desc = $collectedClasses.JsArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsArray.prototype = $desc;
  function JsObject_ListMixin() {
  }
  JsObject_ListMixin.builtin$cls = "JsObject_ListMixin";
  if (!"name" in JsObject_ListMixin)
    JsObject_ListMixin.name = "JsObject_ListMixin";
  $desc = $collectedClasses.JsObject_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  JsObject_ListMixin.prototype = $desc;
  function _convertToJS_closure() {
  }
  _convertToJS_closure.builtin$cls = "_convertToJS_closure";
  if (!"name" in _convertToJS_closure)
    _convertToJS_closure.name = "_convertToJS_closure";
  $desc = $collectedClasses._convertToJS_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertToJS_closure.prototype = $desc;
  function _convertToJS_closure0(ctor_0) {
    this.ctor_0 = ctor_0;
  }
  _convertToJS_closure0.builtin$cls = "_convertToJS_closure0";
  if (!"name" in _convertToJS_closure0)
    _convertToJS_closure0.name = "_convertToJS_closure0";
  $desc = $collectedClasses._convertToJS_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertToJS_closure0.prototype = $desc;
  function _wrapToDart_closure() {
  }
  _wrapToDart_closure.builtin$cls = "_wrapToDart_closure";
  if (!"name" in _wrapToDart_closure)
    _wrapToDart_closure.name = "_wrapToDart_closure";
  $desc = $collectedClasses._wrapToDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure.prototype = $desc;
  function _wrapToDart_closure0() {
  }
  _wrapToDart_closure0.builtin$cls = "_wrapToDart_closure0";
  if (!"name" in _wrapToDart_closure0)
    _wrapToDart_closure0.name = "_wrapToDart_closure0";
  $desc = $collectedClasses._wrapToDart_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure0.prototype = $desc;
  function _wrapToDart_closure1() {
  }
  _wrapToDart_closure1.builtin$cls = "_wrapToDart_closure1";
  if (!"name" in _wrapToDart_closure1)
    _wrapToDart_closure1.name = "_wrapToDart_closure1";
  $desc = $collectedClasses._wrapToDart_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _wrapToDart_closure1.prototype = $desc;
  function _RectangleBase() {
  }
  _RectangleBase.builtin$cls = "_RectangleBase";
  if (!"name" in _RectangleBase)
    _RectangleBase.name = "_RectangleBase";
  $desc = $collectedClasses._RectangleBase;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _RectangleBase.prototype = $desc;
  function MutableRectangle(left, top) {
    this.left = left;
    this.top = top;
  }
  MutableRectangle.builtin$cls = "MutableRectangle";
  if (!"name" in MutableRectangle)
    MutableRectangle.name = "MutableRectangle";
  $desc = $collectedClasses.MutableRectangle;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MutableRectangle.prototype = $desc;
  MutableRectangle.prototype.get$left = function(receiver) {
    return this.left;
  };
  MutableRectangle.prototype.get$top = function(receiver) {
    return this.top;
  };
  function DefaultEquality() {
  }
  DefaultEquality.builtin$cls = "DefaultEquality";
  if (!"name" in DefaultEquality)
    DefaultEquality.name = "DefaultEquality";
  $desc = $collectedClasses.DefaultEquality;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DefaultEquality.prototype = $desc;
  function ListEquality(_elementEquality) {
    this._elementEquality = _elementEquality;
  }
  ListEquality.builtin$cls = "ListEquality";
  if (!"name" in ListEquality)
    ListEquality.name = "ListEquality";
  $desc = $collectedClasses.ListEquality;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListEquality.prototype = $desc;
  function UnmodifiableMapView(_base) {
    this._base = _base;
  }
  UnmodifiableMapView.builtin$cls = "UnmodifiableMapView";
  if (!"name" in UnmodifiableMapView)
    UnmodifiableMapView.name = "UnmodifiableMapView";
  $desc = $collectedClasses.UnmodifiableMapView;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableMapView.prototype = $desc;
  function DelegatingMap_UnmodifiableMapMixin() {
  }
  DelegatingMap_UnmodifiableMapMixin.builtin$cls = "DelegatingMap_UnmodifiableMapMixin";
  if (!"name" in DelegatingMap_UnmodifiableMapMixin)
    DelegatingMap_UnmodifiableMapMixin.name = "DelegatingMap_UnmodifiableMapMixin";
  $desc = $collectedClasses.DelegatingMap_UnmodifiableMapMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DelegatingMap_UnmodifiableMapMixin.prototype = $desc;
  function UnmodifiableMapMixin() {
  }
  UnmodifiableMapMixin.builtin$cls = "UnmodifiableMapMixin";
  if (!"name" in UnmodifiableMapMixin)
    UnmodifiableMapMixin.name = "UnmodifiableMapMixin";
  $desc = $collectedClasses.UnmodifiableMapMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnmodifiableMapMixin.prototype = $desc;
  function DelegatingMap() {
  }
  DelegatingMap.builtin$cls = "DelegatingMap";
  if (!"name" in DelegatingMap)
    DelegatingMap.name = "DelegatingMap";
  $desc = $collectedClasses.DelegatingMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DelegatingMap.prototype = $desc;
  function NativeTypedArray() {
  }
  NativeTypedArray.builtin$cls = "NativeTypedArray";
  if (!"name" in NativeTypedArray)
    NativeTypedArray.name = "NativeTypedArray";
  $desc = $collectedClasses.NativeTypedArray;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray.prototype = $desc;
  function NativeTypedArrayOfDouble() {
  }
  NativeTypedArrayOfDouble.builtin$cls = "NativeTypedArrayOfDouble";
  if (!"name" in NativeTypedArrayOfDouble)
    NativeTypedArrayOfDouble.name = "NativeTypedArrayOfDouble";
  $desc = $collectedClasses.NativeTypedArrayOfDouble;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfDouble.prototype = $desc;
  function NativeTypedArray_ListMixin() {
  }
  NativeTypedArray_ListMixin.builtin$cls = "NativeTypedArray_ListMixin";
  if (!"name" in NativeTypedArray_ListMixin)
    NativeTypedArray_ListMixin.name = "NativeTypedArray_ListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin)
    NativeTypedArray_ListMixin_FixedLengthListMixin.name = "NativeTypedArray_ListMixin_FixedLengthListMixin";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = $desc;
  function NativeTypedArrayOfInt() {
  }
  NativeTypedArrayOfInt.builtin$cls = "NativeTypedArrayOfInt";
  if (!"name" in NativeTypedArrayOfInt)
    NativeTypedArrayOfInt.name = "NativeTypedArrayOfInt";
  $desc = $collectedClasses.NativeTypedArrayOfInt;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArrayOfInt.prototype = $desc;
  function NativeTypedArray_ListMixin0() {
  }
  NativeTypedArray_ListMixin0.builtin$cls = "NativeTypedArray_ListMixin0";
  if (!"name" in NativeTypedArray_ListMixin0)
    NativeTypedArray_ListMixin0.name = "NativeTypedArray_ListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin0.prototype = $desc;
  function NativeTypedArray_ListMixin_FixedLengthListMixin0() {
  }
  NativeTypedArray_ListMixin_FixedLengthListMixin0.builtin$cls = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  if (!"name" in NativeTypedArray_ListMixin_FixedLengthListMixin0)
    NativeTypedArray_ListMixin_FixedLengthListMixin0.name = "NativeTypedArray_ListMixin_FixedLengthListMixin0";
  $desc = $collectedClasses.NativeTypedArray_ListMixin_FixedLengthListMixin0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NativeTypedArray_ListMixin_FixedLengthListMixin0.prototype = $desc;
  function Tracker(_lastLoc) {
    this._lastLoc = _lastLoc;
  }
  Tracker.builtin$cls = "Tracker";
  if (!"name" in Tracker)
    Tracker.name = "Tracker";
  $desc = $collectedClasses.Tracker;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tracker.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_findSlot(values_1, copies_2) {
    this.values_1 = values_1;
    this.copies_2 = copies_2;
  }
  _convertDartToNative_PrepareForStructuredClone_findSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_findSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_findSlot)
    _convertDartToNative_PrepareForStructuredClone_findSlot.name = "_convertDartToNative_PrepareForStructuredClone_findSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_findSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_readSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  _convertDartToNative_PrepareForStructuredClone_readSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_readSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_readSlot)
    _convertDartToNative_PrepareForStructuredClone_readSlot.name = "_convertDartToNative_PrepareForStructuredClone_readSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_readSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_writeSlot(copies_4) {
    this.copies_4 = copies_4;
  }
  _convertDartToNative_PrepareForStructuredClone_writeSlot.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_writeSlot";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_writeSlot)
    _convertDartToNative_PrepareForStructuredClone_writeSlot.name = "_convertDartToNative_PrepareForStructuredClone_writeSlot";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_writeSlot.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_cleanupSlots() {
  }
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_cleanupSlots";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_cleanupSlots)
    _convertDartToNative_PrepareForStructuredClone_cleanupSlots.name = "_convertDartToNative_PrepareForStructuredClone_cleanupSlots";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_cleanupSlots;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_cleanupSlots.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_walk(findSlot_5, readSlot_6, writeSlot_7) {
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  _convertDartToNative_PrepareForStructuredClone_walk.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_walk";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_walk)
    _convertDartToNative_PrepareForStructuredClone_walk.name = "_convertDartToNative_PrepareForStructuredClone_walk";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_walk.prototype = $desc;
  function _convertDartToNative_PrepareForStructuredClone_walk_closure(box_0, walk_8) {
    this.box_0 = box_0;
    this.walk_8 = walk_8;
  }
  _convertDartToNative_PrepareForStructuredClone_walk_closure.builtin$cls = "_convertDartToNative_PrepareForStructuredClone_walk_closure";
  if (!"name" in _convertDartToNative_PrepareForStructuredClone_walk_closure)
    _convertDartToNative_PrepareForStructuredClone_walk_closure.name = "_convertDartToNative_PrepareForStructuredClone_walk_closure";
  $desc = $collectedClasses._convertDartToNative_PrepareForStructuredClone_walk_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _convertDartToNative_PrepareForStructuredClone_walk_closure.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_findSlot(values_0, copies_1) {
    this.values_0 = values_0;
    this.copies_1 = copies_1;
  }
  convertNativeToDart_AcceptStructuredClone_findSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_findSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_findSlot)
    convertNativeToDart_AcceptStructuredClone_findSlot.name = "convertNativeToDart_AcceptStructuredClone_findSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_findSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_findSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_readSlot(copies_2) {
    this.copies_2 = copies_2;
  }
  convertNativeToDart_AcceptStructuredClone_readSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_readSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_readSlot)
    convertNativeToDart_AcceptStructuredClone_readSlot.name = "convertNativeToDart_AcceptStructuredClone_readSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_readSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_readSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_writeSlot(copies_3) {
    this.copies_3 = copies_3;
  }
  convertNativeToDart_AcceptStructuredClone_writeSlot.builtin$cls = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_writeSlot)
    convertNativeToDart_AcceptStructuredClone_writeSlot.name = "convertNativeToDart_AcceptStructuredClone_writeSlot";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_writeSlot;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_writeSlot.prototype = $desc;
  function convertNativeToDart_AcceptStructuredClone_walk(mustCopy_4, findSlot_5, readSlot_6, writeSlot_7) {
    this.mustCopy_4 = mustCopy_4;
    this.findSlot_5 = findSlot_5;
    this.readSlot_6 = readSlot_6;
    this.writeSlot_7 = writeSlot_7;
  }
  convertNativeToDart_AcceptStructuredClone_walk.builtin$cls = "convertNativeToDart_AcceptStructuredClone_walk";
  if (!"name" in convertNativeToDart_AcceptStructuredClone_walk)
    convertNativeToDart_AcceptStructuredClone_walk.name = "convertNativeToDart_AcceptStructuredClone_walk";
  $desc = $collectedClasses.convertNativeToDart_AcceptStructuredClone_walk;
  if ($desc instanceof Array)
    $desc = $desc[1];
  convertNativeToDart_AcceptStructuredClone_walk.prototype = $desc;
  function CssClassSetImpl() {
  }
  CssClassSetImpl.builtin$cls = "CssClassSetImpl";
  if (!"name" in CssClassSetImpl)
    CssClassSetImpl.name = "CssClassSetImpl";
  $desc = $collectedClasses.CssClassSetImpl;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl.prototype = $desc;
  function CssClassSetImpl_add_closure(value_0) {
    this.value_0 = value_0;
  }
  CssClassSetImpl_add_closure.builtin$cls = "CssClassSetImpl_add_closure";
  if (!"name" in CssClassSetImpl_add_closure)
    CssClassSetImpl_add_closure.name = "CssClassSetImpl_add_closure";
  $desc = $collectedClasses.CssClassSetImpl_add_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_add_closure.prototype = $desc;
  function CssClassSetImpl_addAll_closure(iterable_0) {
    this.iterable_0 = iterable_0;
  }
  CssClassSetImpl_addAll_closure.builtin$cls = "CssClassSetImpl_addAll_closure";
  if (!"name" in CssClassSetImpl_addAll_closure)
    CssClassSetImpl_addAll_closure.name = "CssClassSetImpl_addAll_closure";
  $desc = $collectedClasses.CssClassSetImpl_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_addAll_closure.prototype = $desc;
  function CssClassSetImpl_clear_closure() {
  }
  CssClassSetImpl_clear_closure.builtin$cls = "CssClassSetImpl_clear_closure";
  if (!"name" in CssClassSetImpl_clear_closure)
    CssClassSetImpl_clear_closure.name = "CssClassSetImpl_clear_closure";
  $desc = $collectedClasses.CssClassSetImpl_clear_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CssClassSetImpl_clear_closure.prototype = $desc;
  function FilteredElementList(_node, _childNodes) {
    this._node = _node;
    this._childNodes = _childNodes;
  }
  FilteredElementList.builtin$cls = "FilteredElementList";
  if (!"name" in FilteredElementList)
    FilteredElementList.name = "FilteredElementList";
  $desc = $collectedClasses.FilteredElementList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList.prototype = $desc;
  function FilteredElementList__filtered_closure() {
  }
  FilteredElementList__filtered_closure.builtin$cls = "FilteredElementList__filtered_closure";
  if (!"name" in FilteredElementList__filtered_closure)
    FilteredElementList__filtered_closure.name = "FilteredElementList__filtered_closure";
  $desc = $collectedClasses.FilteredElementList__filtered_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList__filtered_closure.prototype = $desc;
  function FilteredElementList_removeRange_closure() {
  }
  FilteredElementList_removeRange_closure.builtin$cls = "FilteredElementList_removeRange_closure";
  if (!"name" in FilteredElementList_removeRange_closure)
    FilteredElementList_removeRange_closure.name = "FilteredElementList_removeRange_closure";
  $desc = $collectedClasses.FilteredElementList_removeRange_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  FilteredElementList_removeRange_closure.prototype = $desc;
  function DocsLocation(packageName, libraryName, memberName, subMemberName, anchor) {
    this.packageName = packageName;
    this.libraryName = libraryName;
    this.memberName = memberName;
    this.subMemberName = subMemberName;
    this.anchor = anchor;
  }
  DocsLocation.builtin$cls = "DocsLocation";
  if (!"name" in DocsLocation)
    DocsLocation.name = "DocsLocation";
  $desc = $collectedClasses.DocsLocation;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation.prototype = $desc;
  DocsLocation.prototype.get$memberName = function() {
    return this.memberName;
  };
  function DocsLocation__extractPieces__check(box_0) {
    this.box_0 = box_0;
  }
  DocsLocation__extractPieces__check.builtin$cls = "DocsLocation__extractPieces__check";
  if (!"name" in DocsLocation__extractPieces__check)
    DocsLocation__extractPieces__check.name = "DocsLocation__extractPieces__check";
  $desc = $collectedClasses.DocsLocation__extractPieces__check;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation__extractPieces__check.prototype = $desc;
  function DocsLocation_componentNames_closure() {
  }
  DocsLocation_componentNames_closure.builtin$cls = "DocsLocation_componentNames_closure";
  if (!"name" in DocsLocation_componentNames_closure)
    DocsLocation_componentNames_closure.name = "DocsLocation_componentNames_closure";
  $desc = $collectedClasses.DocsLocation_componentNames_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation_componentNames_closure.prototype = $desc;
  function DocsLocation_itemFromList_closure() {
  }
  DocsLocation_itemFromList_closure.builtin$cls = "DocsLocation_itemFromList_closure";
  if (!"name" in DocsLocation_itemFromList_closure)
    DocsLocation_itemFromList_closure.name = "DocsLocation_itemFromList_closure";
  $desc = $collectedClasses.DocsLocation_itemFromList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation_itemFromList_closure.prototype = $desc;
  function DocsLocation_itemFromList_closure0() {
  }
  DocsLocation_itemFromList_closure0.builtin$cls = "DocsLocation_itemFromList_closure0";
  if (!"name" in DocsLocation_itemFromList_closure0)
    DocsLocation_itemFromList_closure0.name = "DocsLocation_itemFromList_closure0";
  $desc = $collectedClasses.DocsLocation_itemFromList_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DocsLocation_itemFromList_closure0.prototype = $desc;
  function Logger(name, parent, _level, _children, children, _logging$_controller) {
    this.name = name;
    this.parent = parent;
    this._level = _level;
    this._children = _children;
    this.children = children;
    this._logging$_controller = _logging$_controller;
  }
  Logger.builtin$cls = "Logger";
  if (!"name" in Logger)
    Logger.name = "Logger";
  $desc = $collectedClasses.Logger;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Logger.prototype = $desc;
  Logger.prototype.get$name = function(receiver) {
    return this.name;
  };
  Logger.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  Logger.prototype.get$_children = function(receiver) {
    return this._children;
  };
  Logger.prototype.get$children = function(receiver) {
    return this.children;
  };
  function Logger_Logger_closure(name_0) {
    this.name_0 = name_0;
  }
  Logger_Logger_closure.builtin$cls = "Logger_Logger_closure";
  if (!"name" in Logger_Logger_closure)
    Logger_Logger_closure.name = "Logger_Logger_closure";
  $desc = $collectedClasses.Logger_Logger_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Logger_Logger_closure.prototype = $desc;
  function Level(name, value) {
    this.name = name;
    this.value = value;
  }
  Level.builtin$cls = "Level";
  if (!"name" in Level)
    Level.name = "Level";
  $desc = $collectedClasses.Level;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Level.prototype = $desc;
  Level.prototype.get$name = function(receiver) {
    return this.name;
  };
  Level.prototype.get$value = function(receiver) {
    return this.value;
  };
  function LogRecord(level, message, loggerName, time, sequenceNumber, error, stackTrace) {
    this.level = level;
    this.message = message;
    this.loggerName = loggerName;
    this.time = time;
    this.sequenceNumber = sequenceNumber;
    this.error = error;
    this.stackTrace = stackTrace;
  }
  LogRecord.builtin$cls = "LogRecord";
  if (!"name" in LogRecord)
    LogRecord.name = "LogRecord";
  $desc = $collectedClasses.LogRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LogRecord.prototype = $desc;
  LogRecord.prototype.get$level = function() {
    return this.level;
  };
  LogRecord.prototype.get$error = function(receiver) {
    return this.error;
  };
  LogRecord.prototype.get$stackTrace = function() {
    return this.stackTrace;
  };
  function Bindable() {
  }
  Bindable.builtin$cls = "Bindable";
  if (!"name" in Bindable)
    Bindable.name = "Bindable";
  $desc = $collectedClasses.Bindable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Bindable.prototype = $desc;
  function ChangeNotifier() {
  }
  ChangeNotifier.builtin$cls = "ChangeNotifier";
  if (!"name" in ChangeNotifier)
    ChangeNotifier.name = "ChangeNotifier";
  $desc = $collectedClasses.ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChangeNotifier.prototype = $desc;
  function ChangeRecord() {
  }
  ChangeRecord.builtin$cls = "ChangeRecord";
  if (!"name" in ChangeRecord)
    ChangeRecord.name = "ChangeRecord";
  $desc = $collectedClasses.ChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ChangeRecord.prototype = $desc;
  function PropertyChangeRecord(object, name, oldValue, newValue) {
    this.object = object;
    this.name = name;
    this.oldValue = oldValue;
    this.newValue = newValue;
  }
  PropertyChangeRecord.builtin$cls = "PropertyChangeRecord";
  if (!"name" in PropertyChangeRecord)
    PropertyChangeRecord.name = "PropertyChangeRecord";
  $desc = $collectedClasses.PropertyChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyChangeRecord.prototype = $desc;
  PropertyChangeRecord.prototype.get$object = function() {
    return this.object;
  };
  PropertyChangeRecord.prototype.get$name = function(receiver) {
    return this.name;
  };
  function ListChangeRecord(object, _unmodifiableRemoved, _removed, _list_diff$_index, _addedCount) {
    this.object = object;
    this._unmodifiableRemoved = _unmodifiableRemoved;
    this._removed = _removed;
    this._list_diff$_index = _list_diff$_index;
    this._addedCount = _addedCount;
  }
  ListChangeRecord.builtin$cls = "ListChangeRecord";
  if (!"name" in ListChangeRecord)
    ListChangeRecord.name = "ListChangeRecord";
  $desc = $collectedClasses.ListChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListChangeRecord.prototype = $desc;
  ListChangeRecord.prototype.get$object = function() {
    return this.object;
  };
  ListChangeRecord.prototype.get$_removed = function() {
    return this._removed;
  };
  function ObservableProperty() {
  }
  ObservableProperty.builtin$cls = "ObservableProperty";
  if (!"name" in ObservableProperty)
    ObservableProperty.name = "ObservableProperty";
  $desc = $collectedClasses.ObservableProperty;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableProperty.prototype = $desc;
  function Reflectable() {
  }
  Reflectable.builtin$cls = "Reflectable";
  if (!"name" in Reflectable)
    Reflectable.name = "Reflectable";
  $desc = $collectedClasses.Reflectable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Reflectable.prototype = $desc;
  function Observable() {
  }
  Observable.builtin$cls = "Observable";
  if (!"name" in Observable)
    Observable.name = "Observable";
  $desc = $collectedClasses.Observable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Observable.prototype = $desc;
  function Observable_deliverChanges_closure(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Observable_deliverChanges_closure.builtin$cls = "Observable_deliverChanges_closure";
  if (!"name" in Observable_deliverChanges_closure)
    Observable_deliverChanges_closure.name = "Observable_deliverChanges_closure";
  $desc = $collectedClasses.Observable_deliverChanges_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Observable_deliverChanges_closure.prototype = $desc;
  function ObservableBox() {
  }
  ObservableBox.builtin$cls = "ObservableBox";
  if (!"name" in ObservableBox)
    ObservableBox.name = "ObservableBox";
  $desc = $collectedClasses.ObservableBox;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableBox.prototype = $desc;
  function ObservableList(_listRecords, _listChanges, _list, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this._listRecords = _listRecords;
    this._listChanges = _listChanges;
    this._list = _list;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  ObservableList.builtin$cls = "ObservableList";
  if (!"name" in ObservableList)
    ObservableList.name = "ObservableList";
  $desc = $collectedClasses.ObservableList;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableList.prototype = $desc;
  ObservableList.prototype.get$_listRecords = function() {
    return this._listRecords;
  };
  ObservableList.prototype.set$_listRecords = function(v) {
    return this._listRecords = v;
  };
  function ListBase_ChangeNotifier() {
  }
  ListBase_ChangeNotifier.builtin$cls = "ListBase_ChangeNotifier";
  if (!"name" in ListBase_ChangeNotifier)
    ListBase_ChangeNotifier.name = "ListBase_ChangeNotifier";
  $desc = $collectedClasses.ListBase_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListBase_ChangeNotifier.prototype = $desc;
  function ObservableList_listChanges_closure(this_0) {
    this.this_0 = this_0;
  }
  ObservableList_listChanges_closure.builtin$cls = "ObservableList_listChanges_closure";
  if (!"name" in ObservableList_listChanges_closure)
    ObservableList_listChanges_closure.name = "ObservableList_listChanges_closure";
  $desc = $collectedClasses.ObservableList_listChanges_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableList_listChanges_closure.prototype = $desc;
  function MapChangeRecord(key, oldValue, newValue, isInsert, isRemove) {
    this.key = key;
    this.oldValue = oldValue;
    this.newValue = newValue;
    this.isInsert = isInsert;
    this.isRemove = isRemove;
  }
  MapChangeRecord.builtin$cls = "MapChangeRecord";
  if (!"name" in MapChangeRecord)
    MapChangeRecord.name = "MapChangeRecord";
  $desc = $collectedClasses.MapChangeRecord;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapChangeRecord.prototype = $desc;
  MapChangeRecord.prototype.get$key = function(receiver) {
    return this.key;
  };
  function ObservableMap(_observable_map$_map, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this._observable_map$_map = _observable_map$_map;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  ObservableMap.builtin$cls = "ObservableMap";
  if (!"name" in ObservableMap)
    ObservableMap.name = "ObservableMap";
  $desc = $collectedClasses.ObservableMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap.prototype = $desc;
  function ObservableMap_addAll_closure(this_0) {
    this.this_0 = this_0;
  }
  ObservableMap_addAll_closure.builtin$cls = "ObservableMap_addAll_closure";
  if (!"name" in ObservableMap_addAll_closure)
    ObservableMap_addAll_closure.name = "ObservableMap_addAll_closure";
  $desc = $collectedClasses.ObservableMap_addAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap_addAll_closure.prototype = $desc;
  function ObservableMap_clear_closure(this_0) {
    this.this_0 = this_0;
  }
  ObservableMap_clear_closure.builtin$cls = "ObservableMap_clear_closure";
  if (!"name" in ObservableMap_clear_closure)
    ObservableMap_clear_closure.name = "ObservableMap_clear_closure";
  $desc = $collectedClasses.ObservableMap_clear_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObservableMap_clear_closure.prototype = $desc;
  function ObserverTransform(_bindable, _getTransformer, _setTransformer, _observer_transform$_notifyCallback, _observer_transform$_value) {
    this._bindable = _bindable;
    this._getTransformer = _getTransformer;
    this._setTransformer = _setTransformer;
    this._observer_transform$_notifyCallback = _observer_transform$_notifyCallback;
    this._observer_transform$_value = _observer_transform$_value;
  }
  ObserverTransform.builtin$cls = "ObserverTransform";
  if (!"name" in ObserverTransform)
    ObserverTransform.name = "ObserverTransform";
  $desc = $collectedClasses.ObserverTransform;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverTransform.prototype = $desc;
  function PathObserver(_path_observer$_path, _object, _directObserver, _birthId, _notifyCallback, _notifyArgumentCount, _path_observer$_value) {
    this._path_observer$_path = _path_observer$_path;
    this._object = _object;
    this._directObserver = _directObserver;
    this._birthId = _birthId;
    this._notifyCallback = _notifyCallback;
    this._notifyArgumentCount = _notifyArgumentCount;
    this._path_observer$_value = _path_observer$_value;
  }
  PathObserver.builtin$cls = "PathObserver";
  if (!"name" in PathObserver)
    PathObserver.name = "PathObserver";
  $desc = $collectedClasses.PathObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PathObserver.prototype = $desc;
  function PropertyPath(_segments) {
    this._segments = _segments;
  }
  PropertyPath.builtin$cls = "PropertyPath";
  if (!"name" in PropertyPath)
    PropertyPath.name = "PropertyPath";
  $desc = $collectedClasses.PropertyPath;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyPath.prototype = $desc;
  function PropertyPath_PropertyPath_closure() {
  }
  PropertyPath_PropertyPath_closure.builtin$cls = "PropertyPath_PropertyPath_closure";
  if (!"name" in PropertyPath_PropertyPath_closure)
    PropertyPath_PropertyPath_closure.name = "PropertyPath_PropertyPath_closure";
  $desc = $collectedClasses.PropertyPath_PropertyPath_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyPath_PropertyPath_closure.prototype = $desc;
  function PropertyPath_toString_closure() {
  }
  PropertyPath_toString_closure.builtin$cls = "PropertyPath_toString_closure";
  if (!"name" in PropertyPath_toString_closure)
    PropertyPath_toString_closure.name = "PropertyPath_toString_closure";
  $desc = $collectedClasses.PropertyPath_toString_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PropertyPath_toString_closure.prototype = $desc;
  function _InvalidPropertyPath(_segments) {
    this._segments = _segments;
  }
  _InvalidPropertyPath.builtin$cls = "_InvalidPropertyPath";
  if (!"name" in _InvalidPropertyPath)
    _InvalidPropertyPath.name = "_InvalidPropertyPath";
  $desc = $collectedClasses._InvalidPropertyPath;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InvalidPropertyPath.prototype = $desc;
  function closure7() {
  }
  closure7.builtin$cls = "closure7";
  if (!"name" in closure7)
    closure7.name = "closure7";
  $desc = $collectedClasses.closure7;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure7.prototype = $desc;
  function CompoundObserver(_directObserver, _observed, _birthId, _notifyCallback, _notifyArgumentCount, _path_observer$_value) {
    this._directObserver = _directObserver;
    this._observed = _observed;
    this._birthId = _birthId;
    this._notifyCallback = _notifyCallback;
    this._notifyArgumentCount = _notifyArgumentCount;
    this._path_observer$_value = _path_observer$_value;
  }
  CompoundObserver.builtin$cls = "CompoundObserver";
  if (!"name" in CompoundObserver)
    CompoundObserver.name = "CompoundObserver";
  $desc = $collectedClasses.CompoundObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CompoundObserver.prototype = $desc;
  function _ObserverSentinel() {
  }
  _ObserverSentinel.builtin$cls = "_ObserverSentinel";
  if (!"name" in _ObserverSentinel)
    _ObserverSentinel.name = "_ObserverSentinel";
  $desc = $collectedClasses._ObserverSentinel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ObserverSentinel.prototype = $desc;
  function _Observer(_birthId) {
    this._birthId = _birthId;
  }
  _Observer.builtin$cls = "_Observer";
  if (!"name" in _Observer)
    _Observer.name = "_Observer";
  $desc = $collectedClasses._Observer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Observer.prototype = $desc;
  _Observer.prototype.get$_birthId = function() {
    return this._birthId;
  };
  function _ObservedSet(_rootObject, _path_observer$_observers, _objects, _toRemove, _resetNeeded) {
    this._rootObject = _rootObject;
    this._path_observer$_observers = _path_observer$_observers;
    this._objects = _objects;
    this._toRemove = _toRemove;
    this._resetNeeded = _resetNeeded;
  }
  _ObservedSet.builtin$cls = "_ObservedSet";
  if (!"name" in _ObservedSet)
    _ObservedSet.name = "_ObservedSet";
  $desc = $collectedClasses._ObservedSet;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ObservedSet.prototype = $desc;
  function _toObservableDeep_closure(result_0) {
    this.result_0 = result_0;
  }
  _toObservableDeep_closure.builtin$cls = "_toObservableDeep_closure";
  if (!"name" in _toObservableDeep_closure)
    _toObservableDeep_closure.name = "_toObservableDeep_closure";
  $desc = $collectedClasses._toObservableDeep_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _toObservableDeep_closure.prototype = $desc;
  function PolymerDeclaration(element, type, superDeclaration, name, _publish, _publishLC, _observe, _instanceAttributes, _sheets, _styles, _eventDelegates, _templateDelegates) {
    this.element = element;
    this.type = type;
    this.superDeclaration = superDeclaration;
    this.name = name;
    this._publish = _publish;
    this._publishLC = _publishLC;
    this._observe = _observe;
    this._instanceAttributes = _instanceAttributes;
    this._sheets = _sheets;
    this._styles = _styles;
    this._eventDelegates = _eventDelegates;
    this._templateDelegates = _templateDelegates;
  }
  PolymerDeclaration.builtin$cls = "PolymerDeclaration";
  if (!"name" in PolymerDeclaration)
    PolymerDeclaration.name = "PolymerDeclaration";
  $desc = $collectedClasses.PolymerDeclaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration.prototype = $desc;
  PolymerDeclaration.prototype.get$element = function() {
    return this.element;
  };
  PolymerDeclaration.prototype.get$type = function(receiver) {
    return this.type;
  };
  PolymerDeclaration.prototype.get$superDeclaration = function() {
    return this.superDeclaration;
  };
  PolymerDeclaration.prototype.get$name = function(receiver) {
    return this.name;
  };
  PolymerDeclaration.prototype.get$_publish = function() {
    return this._publish;
  };
  PolymerDeclaration.prototype.get$_publishLC = function() {
    return this._publishLC;
  };
  PolymerDeclaration.prototype.get$_observe = function(receiver) {
    return this._observe;
  };
  PolymerDeclaration.prototype.get$_instanceAttributes = function() {
    return this._instanceAttributes;
  };
  PolymerDeclaration.prototype.get$_eventDelegates = function() {
    return this._eventDelegates;
  };
  function PolymerDeclaration_accumulateInstanceAttributes_closure(this_0) {
    this.this_0 = this_0;
  }
  PolymerDeclaration_accumulateInstanceAttributes_closure.builtin$cls = "PolymerDeclaration_accumulateInstanceAttributes_closure";
  if (!"name" in PolymerDeclaration_accumulateInstanceAttributes_closure)
    PolymerDeclaration_accumulateInstanceAttributes_closure.name = "PolymerDeclaration_accumulateInstanceAttributes_closure";
  $desc = $collectedClasses.PolymerDeclaration_accumulateInstanceAttributes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_accumulateInstanceAttributes_closure.prototype = $desc;
  function PolymerDeclaration_addAttributeDelegates_closure(delegates_0) {
    this.delegates_0 = delegates_0;
  }
  PolymerDeclaration_addAttributeDelegates_closure.builtin$cls = "PolymerDeclaration_addAttributeDelegates_closure";
  if (!"name" in PolymerDeclaration_addAttributeDelegates_closure)
    PolymerDeclaration_addAttributeDelegates_closure.name = "PolymerDeclaration_addAttributeDelegates_closure";
  $desc = $collectedClasses.PolymerDeclaration_addAttributeDelegates_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_addAttributeDelegates_closure.prototype = $desc;
  function PolymerDeclaration_installLocalSheets_closure() {
  }
  PolymerDeclaration_installLocalSheets_closure.builtin$cls = "PolymerDeclaration_installLocalSheets_closure";
  if (!"name" in PolymerDeclaration_installLocalSheets_closure)
    PolymerDeclaration_installLocalSheets_closure.name = "PolymerDeclaration_installLocalSheets_closure";
  $desc = $collectedClasses.PolymerDeclaration_installLocalSheets_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_installLocalSheets_closure.prototype = $desc;
  function PolymerDeclaration_cssTextForScope_matcher(selector_0) {
    this.selector_0 = selector_0;
  }
  PolymerDeclaration_cssTextForScope_matcher.builtin$cls = "PolymerDeclaration_cssTextForScope_matcher";
  if (!"name" in PolymerDeclaration_cssTextForScope_matcher)
    PolymerDeclaration_cssTextForScope_matcher.name = "PolymerDeclaration_cssTextForScope_matcher";
  $desc = $collectedClasses.PolymerDeclaration_cssTextForScope_matcher;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_cssTextForScope_matcher.prototype = $desc;
  function PolymerDeclaration_explodeObservers_closure() {
  }
  PolymerDeclaration_explodeObservers_closure.builtin$cls = "PolymerDeclaration_explodeObservers_closure";
  if (!"name" in PolymerDeclaration_explodeObservers_closure)
    PolymerDeclaration_explodeObservers_closure.name = "PolymerDeclaration_explodeObservers_closure";
  $desc = $collectedClasses.PolymerDeclaration_explodeObservers_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration_explodeObservers_closure.prototype = $desc;
  function PolymerDeclaration__lowerCaseMap_closure(map_0) {
    this.map_0 = map_0;
  }
  PolymerDeclaration__lowerCaseMap_closure.builtin$cls = "PolymerDeclaration__lowerCaseMap_closure";
  if (!"name" in PolymerDeclaration__lowerCaseMap_closure)
    PolymerDeclaration__lowerCaseMap_closure.name = "PolymerDeclaration__lowerCaseMap_closure";
  $desc = $collectedClasses.PolymerDeclaration__lowerCaseMap_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerDeclaration__lowerCaseMap_closure.prototype = $desc;
  function closure9() {
  }
  closure9.builtin$cls = "closure9";
  if (!"name" in closure9)
    closure9.name = "closure9";
  $desc = $collectedClasses.closure9;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure9.prototype = $desc;
  function _closure3(map_0) {
    this.map_0 = map_0;
  }
  _closure3.builtin$cls = "_closure3";
  if (!"name" in _closure3)
    _closure3.name = "_closure3";
  $desc = $collectedClasses._closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure3.prototype = $desc;
  function PublishedProperty() {
  }
  PublishedProperty.builtin$cls = "PublishedProperty";
  if (!"name" in PublishedProperty)
    PublishedProperty.name = "PublishedProperty";
  $desc = $collectedClasses.PublishedProperty;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PublishedProperty.prototype = $desc;
  function Polymer(polymer$Polymer$syntax) {
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
  }
  Polymer.builtin$cls = "Polymer";
  if (!"name" in Polymer)
    Polymer.name = "Polymer";
  $desc = $collectedClasses.Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer.prototype = $desc;
  Polymer.prototype.get$syntax = function(receiver) {
    return receiver.polymer$Polymer$syntax;
  };
  function Polymer_onMutation_closure(completer_0) {
    this.completer_0 = completer_0;
  }
  Polymer_onMutation_closure.builtin$cls = "Polymer_onMutation_closure";
  if (!"name" in Polymer_onMutation_closure)
    Polymer_onMutation_closure.name = "Polymer_onMutation_closure";
  $desc = $collectedClasses.Polymer_onMutation_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_onMutation_closure.prototype = $desc;
  function Polymer_copyInstanceAttributes_closure(this_0) {
    this.this_0 = this_0;
  }
  Polymer_copyInstanceAttributes_closure.builtin$cls = "Polymer_copyInstanceAttributes_closure";
  if (!"name" in Polymer_copyInstanceAttributes_closure)
    Polymer_copyInstanceAttributes_closure.name = "Polymer_copyInstanceAttributes_closure";
  $desc = $collectedClasses.Polymer_copyInstanceAttributes_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_copyInstanceAttributes_closure.prototype = $desc;
  function Polymer_copyInstanceAttributes__closure(value_1) {
    this.value_1 = value_1;
  }
  Polymer_copyInstanceAttributes__closure.builtin$cls = "Polymer_copyInstanceAttributes__closure";
  if (!"name" in Polymer_copyInstanceAttributes__closure)
    Polymer_copyInstanceAttributes__closure.name = "Polymer_copyInstanceAttributes__closure";
  $desc = $collectedClasses.Polymer_copyInstanceAttributes__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_copyInstanceAttributes__closure.prototype = $desc;
  function Polymer_cancelUnbindAll_closure() {
  }
  Polymer_cancelUnbindAll_closure.builtin$cls = "Polymer_cancelUnbindAll_closure";
  if (!"name" in Polymer_cancelUnbindAll_closure)
    Polymer_cancelUnbindAll_closure.name = "Polymer_cancelUnbindAll_closure";
  $desc = $collectedClasses.Polymer_cancelUnbindAll_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_cancelUnbindAll_closure.prototype = $desc;
  function Polymer__unbindNodeTree_closure() {
  }
  Polymer__unbindNodeTree_closure.builtin$cls = "Polymer__unbindNodeTree_closure";
  if (!"name" in Polymer__unbindNodeTree_closure)
    Polymer__unbindNodeTree_closure.name = "Polymer__unbindNodeTree_closure";
  $desc = $collectedClasses.Polymer__unbindNodeTree_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer__unbindNodeTree_closure.prototype = $desc;
  function Polymer_notifyPropertyChanges_closure(this_0, newValues_1, oldValues_2, paths_3, observe_4, publish_5, called_6) {
    this.this_0 = this_0;
    this.newValues_1 = newValues_1;
    this.oldValues_2 = oldValues_2;
    this.paths_3 = paths_3;
    this.observe_4 = observe_4;
    this.publish_5 = publish_5;
    this.called_6 = called_6;
  }
  Polymer_notifyPropertyChanges_closure.builtin$cls = "Polymer_notifyPropertyChanges_closure";
  if (!"name" in Polymer_notifyPropertyChanges_closure)
    Polymer_notifyPropertyChanges_closure.name = "Polymer_notifyPropertyChanges_closure";
  $desc = $collectedClasses.Polymer_notifyPropertyChanges_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_notifyPropertyChanges_closure.prototype = $desc;
  function Polymer_observeArrayValue_closure(this_0, old_1, callbacks_2) {
    this.this_0 = this_0;
    this.old_1 = old_1;
    this.callbacks_2 = callbacks_2;
  }
  Polymer_observeArrayValue_closure.builtin$cls = "Polymer_observeArrayValue_closure";
  if (!"name" in Polymer_observeArrayValue_closure)
    Polymer_observeArrayValue_closure.name = "Polymer_observeArrayValue_closure";
  $desc = $collectedClasses.Polymer_observeArrayValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_observeArrayValue_closure.prototype = $desc;
  function Polymer_prepareBinding_closure(path_0, name_1) {
    this.path_0 = path_0;
    this.name_1 = name_1;
  }
  Polymer_prepareBinding_closure.builtin$cls = "Polymer_prepareBinding_closure";
  if (!"name" in Polymer_prepareBinding_closure)
    Polymer_prepareBinding_closure.name = "Polymer_prepareBinding_closure";
  $desc = $collectedClasses.Polymer_prepareBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Polymer_prepareBinding_closure.prototype = $desc;
  function _PolymerBinding(_polymer$_target, _property, _polymer$_bindable, _sub, _lastValue) {
    this._polymer$_target = _polymer$_target;
    this._property = _property;
    this._polymer$_bindable = _polymer$_bindable;
    this._sub = _sub;
    this._lastValue = _lastValue;
  }
  _PolymerBinding.builtin$cls = "_PolymerBinding";
  if (!"name" in _PolymerBinding)
    _PolymerBinding.name = "_PolymerBinding";
  $desc = $collectedClasses._PolymerBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _PolymerBinding.prototype = $desc;
  function PolymerElement(change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  PolymerElement.builtin$cls = "PolymerElement";
  if (!"name" in PolymerElement)
    PolymerElement.name = "PolymerElement";
  $desc = $collectedClasses.PolymerElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement.prototype = $desc;
  function HtmlElement_Polymer(polymer$Polymer$syntax) {
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
  }
  HtmlElement_Polymer.builtin$cls = "HtmlElement_Polymer";
  if (!"name" in HtmlElement_Polymer)
    HtmlElement_Polymer.name = "HtmlElement_Polymer";
  $desc = $collectedClasses.HtmlElement_Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_Polymer.prototype = $desc;
  Polymer.prototype.get$syntax = function(receiver) {
    return receiver.polymer$Polymer$syntax;
  };
  function HtmlElement_Polymer_ChangeNotifier() {
  }
  HtmlElement_Polymer_ChangeNotifier.builtin$cls = "HtmlElement_Polymer_ChangeNotifier";
  if (!"name" in HtmlElement_Polymer_ChangeNotifier)
    HtmlElement_Polymer_ChangeNotifier.name = "HtmlElement_Polymer_ChangeNotifier";
  $desc = $collectedClasses.HtmlElement_Polymer_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HtmlElement_Polymer_ChangeNotifier.prototype = $desc;
  function PolymerExpressionsWithEvents(globals) {
    this.globals = globals;
  }
  PolymerExpressionsWithEvents.builtin$cls = "PolymerExpressionsWithEvents";
  if (!"name" in PolymerExpressionsWithEvents)
    PolymerExpressionsWithEvents.name = "PolymerExpressionsWithEvents";
  $desc = $collectedClasses.PolymerExpressionsWithEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressionsWithEvents.prototype = $desc;
  function _EventBindable(_polymer$_node, _eventName, _polymer$_model, _polymer$_path, _sub) {
    this._polymer$_node = _polymer$_node;
    this._eventName = _eventName;
    this._polymer$_model = _polymer$_model;
    this._polymer$_path = _polymer$_path;
    this._sub = _sub;
  }
  _EventBindable.builtin$cls = "_EventBindable";
  if (!"name" in _EventBindable)
    _EventBindable.name = "_EventBindable";
  $desc = $collectedClasses._EventBindable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _EventBindable.prototype = $desc;
  function _Job(_callback, _timer) {
    this._callback = _callback;
    this._timer = _timer;
  }
  _Job.builtin$cls = "_Job";
  if (!"name" in _Job)
    _Job.name = "_Job";
  $desc = $collectedClasses._Job;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Job.prototype = $desc;
  function _hookJsPolymer_closure() {
  }
  _hookJsPolymer_closure.builtin$cls = "_hookJsPolymer_closure";
  if (!"name" in _hookJsPolymer_closure)
    _hookJsPolymer_closure.name = "_hookJsPolymer_closure";
  $desc = $collectedClasses._hookJsPolymer_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hookJsPolymer_closure.prototype = $desc;
  function _hookJsPolymer_registerDart(zone_0, originalRegister_1) {
    this.zone_0 = zone_0;
    this.originalRegister_1 = originalRegister_1;
  }
  _hookJsPolymer_registerDart.builtin$cls = "_hookJsPolymer_registerDart";
  if (!"name" in _hookJsPolymer_registerDart)
    _hookJsPolymer_registerDart.name = "_hookJsPolymer_registerDart";
  $desc = $collectedClasses._hookJsPolymer_registerDart;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hookJsPolymer_registerDart.prototype = $desc;
  function _hookJsPolymer_registerDart_closure(jsElem_2, name_3, type_4, extendsDecl_5) {
    this.jsElem_2 = jsElem_2;
    this.name_3 = name_3;
    this.type_4 = type_4;
    this.extendsDecl_5 = extendsDecl_5;
  }
  _hookJsPolymer_registerDart_closure.builtin$cls = "_hookJsPolymer_registerDart_closure";
  if (!"name" in _hookJsPolymer_registerDart_closure)
    _hookJsPolymer_registerDart_closure.name = "_hookJsPolymer_registerDart_closure";
  $desc = $collectedClasses._hookJsPolymer_registerDart_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hookJsPolymer_registerDart_closure.prototype = $desc;
  function closure0() {
  }
  closure0.builtin$cls = "closure0";
  if (!"name" in closure0)
    closure0.name = "closure0";
  $desc = $collectedClasses.closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure0.prototype = $desc;
  function closure1() {
  }
  closure1.builtin$cls = "closure1";
  if (!"name" in closure1)
    closure1.name = "closure1";
  $desc = $collectedClasses.closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure1.prototype = $desc;
  function closure2() {
  }
  closure2.builtin$cls = "closure2";
  if (!"name" in closure2)
    closure2.name = "closure2";
  $desc = $collectedClasses.closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure2.prototype = $desc;
  function closure3() {
  }
  closure3.builtin$cls = "closure3";
  if (!"name" in closure3)
    closure3.name = "closure3";
  $desc = $collectedClasses.closure3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure3.prototype = $desc;
  function closure4() {
  }
  closure4.builtin$cls = "closure4";
  if (!"name" in closure4)
    closure4.name = "closure4";
  $desc = $collectedClasses.closure4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure4.prototype = $desc;
  function _closure0(def_0) {
    this.def_0 = def_0;
  }
  _closure0.builtin$cls = "_closure0";
  if (!"name" in _closure0)
    _closure0.name = "_closure0";
  $desc = $collectedClasses._closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure0.prototype = $desc;
  function closure5() {
  }
  closure5.builtin$cls = "closure5";
  if (!"name" in closure5)
    closure5.name = "closure5";
  $desc = $collectedClasses.closure5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure5.prototype = $desc;
  function _closure(def_1) {
    this.def_1 = def_1;
  }
  _closure.builtin$cls = "_closure";
  if (!"name" in _closure)
    _closure.name = "_closure";
  $desc = $collectedClasses._closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure.prototype = $desc;
  function _classAttributeConverter_closure(v_0) {
    this.v_0 = v_0;
  }
  _classAttributeConverter_closure.builtin$cls = "_classAttributeConverter_closure";
  if (!"name" in _classAttributeConverter_closure)
    _classAttributeConverter_closure.name = "_classAttributeConverter_closure";
  $desc = $collectedClasses._classAttributeConverter_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _classAttributeConverter_closure.prototype = $desc;
  function _styleAttributeConverter_closure(v_0) {
    this.v_0 = v_0;
  }
  _styleAttributeConverter_closure.builtin$cls = "_styleAttributeConverter_closure";
  if (!"name" in _styleAttributeConverter_closure)
    _styleAttributeConverter_closure.name = "_styleAttributeConverter_closure";
  $desc = $collectedClasses._styleAttributeConverter_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _styleAttributeConverter_closure.prototype = $desc;
  function PolymerExpressions() {
  }
  PolymerExpressions.builtin$cls = "PolymerExpressions";
  if (!"name" in PolymerExpressions)
    PolymerExpressions.name = "PolymerExpressions";
  $desc = $collectedClasses.PolymerExpressions;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions.prototype = $desc;
  function PolymerExpressions_prepareBinding_closure(this_0, name_1, expr_2) {
    this.this_0 = this_0;
    this.name_1 = name_1;
    this.expr_2 = expr_2;
  }
  PolymerExpressions_prepareBinding_closure.builtin$cls = "PolymerExpressions_prepareBinding_closure";
  if (!"name" in PolymerExpressions_prepareBinding_closure)
    PolymerExpressions_prepareBinding_closure.name = "PolymerExpressions_prepareBinding_closure";
  $desc = $collectedClasses.PolymerExpressions_prepareBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareBinding_closure.prototype = $desc;
  function PolymerExpressions_prepareInstanceModel_closure(this_0) {
    this.this_0 = this_0;
  }
  PolymerExpressions_prepareInstanceModel_closure.builtin$cls = "PolymerExpressions_prepareInstanceModel_closure";
  if (!"name" in PolymerExpressions_prepareInstanceModel_closure)
    PolymerExpressions_prepareInstanceModel_closure.name = "PolymerExpressions_prepareInstanceModel_closure";
  $desc = $collectedClasses.PolymerExpressions_prepareInstanceModel_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerExpressions_prepareInstanceModel_closure.prototype = $desc;
  function _Binding(_scope, _converter, _polymer_expressions$_expr, _polymer_expressions$_callback, _polymer_expressions$_sub, _polymer_expressions$_value) {
    this._scope = _scope;
    this._converter = _converter;
    this._polymer_expressions$_expr = _polymer_expressions$_expr;
    this._polymer_expressions$_callback = _polymer_expressions$_callback;
    this._polymer_expressions$_sub = _polymer_expressions$_sub;
    this._polymer_expressions$_value = _polymer_expressions$_value;
  }
  _Binding.builtin$cls = "_Binding";
  if (!"name" in _Binding)
    _Binding.name = "_Binding";
  $desc = $collectedClasses._Binding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Binding.prototype = $desc;
  function _Binding__convertValue_closure(v_0, scope_1) {
    this.v_0 = v_0;
    this.scope_1 = scope_1;
  }
  _Binding__convertValue_closure.builtin$cls = "_Binding__convertValue_closure";
  if (!"name" in _Binding__convertValue_closure)
    _Binding__convertValue_closure.name = "_Binding__convertValue_closure";
  $desc = $collectedClasses._Binding__convertValue_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Binding__convertValue_closure.prototype = $desc;
  function _Binding_open_closure(expr_0) {
    this.expr_0 = expr_0;
  }
  _Binding_open_closure.builtin$cls = "_Binding_open_closure";
  if (!"name" in _Binding_open_closure)
    _Binding_open_closure.name = "_Binding_open_closure";
  $desc = $collectedClasses._Binding_open_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _Binding_open_closure.prototype = $desc;
  function StreamBinding(stream, _observable_box$_value, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this.stream = stream;
    this._observable_box$_value = _observable_box$_value;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  StreamBinding.builtin$cls = "StreamBinding";
  if (!"name" in StreamBinding)
    StreamBinding.name = "StreamBinding";
  $desc = $collectedClasses.StreamBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamBinding.prototype = $desc;
  function StreamBinding_closure(T_0, this_1) {
    this.T_0 = T_0;
    this.this_1 = this_1;
  }
  StreamBinding_closure.builtin$cls = "StreamBinding_closure";
  if (!"name" in StreamBinding_closure)
    StreamBinding_closure.name = "StreamBinding_closure";
  $desc = $collectedClasses.StreamBinding_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StreamBinding_closure.prototype = $desc;
  function closure10() {
  }
  closure10.builtin$cls = "closure10";
  if (!"name" in closure10)
    closure10.name = "closure10";
  $desc = $collectedClasses.closure10;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure10.prototype = $desc;
  function closure11() {
  }
  closure11.builtin$cls = "closure11";
  if (!"name" in closure11)
    closure11.name = "closure11";
  $desc = $collectedClasses.closure11;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure11.prototype = $desc;
  function closure12() {
  }
  closure12.builtin$cls = "closure12";
  if (!"name" in closure12)
    closure12.name = "closure12";
  $desc = $collectedClasses.closure12;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure12.prototype = $desc;
  function closure13() {
  }
  closure13.builtin$cls = "closure13";
  if (!"name" in closure13)
    closure13.name = "closure13";
  $desc = $collectedClasses.closure13;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure13.prototype = $desc;
  function closure14() {
  }
  closure14.builtin$cls = "closure14";
  if (!"name" in closure14)
    closure14.name = "closure14";
  $desc = $collectedClasses.closure14;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure14.prototype = $desc;
  function closure15() {
  }
  closure15.builtin$cls = "closure15";
  if (!"name" in closure15)
    closure15.name = "closure15";
  $desc = $collectedClasses.closure15;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure15.prototype = $desc;
  function closure16() {
  }
  closure16.builtin$cls = "closure16";
  if (!"name" in closure16)
    closure16.name = "closure16";
  $desc = $collectedClasses.closure16;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure16.prototype = $desc;
  function closure17() {
  }
  closure17.builtin$cls = "closure17";
  if (!"name" in closure17)
    closure17.name = "closure17";
  $desc = $collectedClasses.closure17;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure17.prototype = $desc;
  function closure18() {
  }
  closure18.builtin$cls = "closure18";
  if (!"name" in closure18)
    closure18.name = "closure18";
  $desc = $collectedClasses.closure18;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure18.prototype = $desc;
  function closure19() {
  }
  closure19.builtin$cls = "closure19";
  if (!"name" in closure19)
    closure19.name = "closure19";
  $desc = $collectedClasses.closure19;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure19.prototype = $desc;
  function closure20() {
  }
  closure20.builtin$cls = "closure20";
  if (!"name" in closure20)
    closure20.name = "closure20";
  $desc = $collectedClasses.closure20;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure20.prototype = $desc;
  function closure21() {
  }
  closure21.builtin$cls = "closure21";
  if (!"name" in closure21)
    closure21.name = "closure21";
  $desc = $collectedClasses.closure21;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure21.prototype = $desc;
  function closure22() {
  }
  closure22.builtin$cls = "closure22";
  if (!"name" in closure22)
    closure22.name = "closure22";
  $desc = $collectedClasses.closure22;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure22.prototype = $desc;
  function closure23() {
  }
  closure23.builtin$cls = "closure23";
  if (!"name" in closure23)
    closure23.name = "closure23";
  $desc = $collectedClasses.closure23;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure23.prototype = $desc;
  function closure24() {
  }
  closure24.builtin$cls = "closure24";
  if (!"name" in closure24)
    closure24.name = "closure24";
  $desc = $collectedClasses.closure24;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure24.prototype = $desc;
  function closure25() {
  }
  closure25.builtin$cls = "closure25";
  if (!"name" in closure25)
    closure25.name = "closure25";
  $desc = $collectedClasses.closure25;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure25.prototype = $desc;
  function assign_notAssignable(box_0) {
    this.box_0 = box_0;
  }
  assign_notAssignable.builtin$cls = "assign_notAssignable";
  if (!"name" in assign_notAssignable)
    assign_notAssignable.name = "assign_notAssignable";
  $desc = $collectedClasses.assign_notAssignable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  assign_notAssignable.prototype = $desc;
  function Scope() {
  }
  Scope.builtin$cls = "Scope";
  if (!"name" in Scope)
    Scope.name = "Scope";
  $desc = $collectedClasses.Scope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Scope.prototype = $desc;
  function _ModelScope(model) {
    this.model = model;
  }
  _ModelScope.builtin$cls = "_ModelScope";
  if (!"name" in _ModelScope)
    _ModelScope.name = "_ModelScope";
  $desc = $collectedClasses._ModelScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ModelScope.prototype = $desc;
  _ModelScope.prototype.get$model = function() {
    return this.model;
  };
  function _LocalVariableScope(parent, varName, value) {
    this.parent = parent;
    this.varName = varName;
    this.value = value;
  }
  _LocalVariableScope.builtin$cls = "_LocalVariableScope";
  if (!"name" in _LocalVariableScope)
    _LocalVariableScope.name = "_LocalVariableScope";
  $desc = $collectedClasses._LocalVariableScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LocalVariableScope.prototype = $desc;
  _LocalVariableScope.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  _LocalVariableScope.prototype.get$value = function(receiver) {
    return this.value;
  };
  function _GlobalsScope(parent, variables) {
    this.parent = parent;
    this.variables = variables;
  }
  _GlobalsScope.builtin$cls = "_GlobalsScope";
  if (!"name" in _GlobalsScope)
    _GlobalsScope.name = "_GlobalsScope";
  $desc = $collectedClasses._GlobalsScope;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _GlobalsScope.prototype = $desc;
  _GlobalsScope.prototype.get$parent = function(receiver) {
    return this.parent;
  };
  _GlobalsScope.prototype.get$variables = function(receiver) {
    return this.variables;
  };
  function ExpressionObserver(_parent, _eval$_value) {
    this._parent = _parent;
    this._eval$_value = _eval$_value;
  }
  ExpressionObserver.builtin$cls = "ExpressionObserver";
  if (!"name" in ExpressionObserver)
    ExpressionObserver.name = "ExpressionObserver";
  $desc = $collectedClasses.ExpressionObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ExpressionObserver.prototype = $desc;
  ExpressionObserver.prototype.set$_parent = function(v) {
    return this._parent = v;
  };
  ExpressionObserver.prototype.get$_eval$_value = function() {
    return this._eval$_value;
  };
  function Updater(scope) {
    this.scope = scope;
  }
  Updater.builtin$cls = "Updater";
  if (!"name" in Updater)
    Updater.name = "Updater";
  $desc = $collectedClasses.Updater;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Updater.prototype = $desc;
  function ObserverBuilder(scope, parents) {
    this.scope = scope;
    this.parents = parents;
  }
  ObserverBuilder.builtin$cls = "ObserverBuilder";
  if (!"name" in ObserverBuilder)
    ObserverBuilder.name = "ObserverBuilder";
  $desc = $collectedClasses.ObserverBuilder;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder.prototype = $desc;
  function ObserverBuilder_visitInvoke_closure(invoke_0) {
    this.invoke_0 = invoke_0;
  }
  ObserverBuilder_visitInvoke_closure.builtin$cls = "ObserverBuilder_visitInvoke_closure";
  if (!"name" in ObserverBuilder_visitInvoke_closure)
    ObserverBuilder_visitInvoke_closure.name = "ObserverBuilder_visitInvoke_closure";
  $desc = $collectedClasses.ObserverBuilder_visitInvoke_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder_visitInvoke_closure.prototype = $desc;
  function ObserverBuilder_visitListLiteral_closure(list_0) {
    this.list_0 = list_0;
  }
  ObserverBuilder_visitListLiteral_closure.builtin$cls = "ObserverBuilder_visitListLiteral_closure";
  if (!"name" in ObserverBuilder_visitListLiteral_closure)
    ObserverBuilder_visitListLiteral_closure.name = "ObserverBuilder_visitListLiteral_closure";
  $desc = $collectedClasses.ObserverBuilder_visitListLiteral_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder_visitListLiteral_closure.prototype = $desc;
  function ObserverBuilder_visitMapLiteral_closure(map_0) {
    this.map_0 = map_0;
  }
  ObserverBuilder_visitMapLiteral_closure.builtin$cls = "ObserverBuilder_visitMapLiteral_closure";
  if (!"name" in ObserverBuilder_visitMapLiteral_closure)
    ObserverBuilder_visitMapLiteral_closure.name = "ObserverBuilder_visitMapLiteral_closure";
  $desc = $collectedClasses.ObserverBuilder_visitMapLiteral_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ObserverBuilder_visitMapLiteral_closure.prototype = $desc;
  function EmptyObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  EmptyObserver.builtin$cls = "EmptyObserver";
  if (!"name" in EmptyObserver)
    EmptyObserver.name = "EmptyObserver";
  $desc = $collectedClasses.EmptyObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyObserver.prototype = $desc;
  function LiteralObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  LiteralObserver.builtin$cls = "LiteralObserver";
  if (!"name" in LiteralObserver)
    LiteralObserver.name = "LiteralObserver";
  $desc = $collectedClasses.LiteralObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LiteralObserver.prototype = $desc;
  function ListLiteralObserver(items, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.items = items;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  ListLiteralObserver.builtin$cls = "ListLiteralObserver";
  if (!"name" in ListLiteralObserver)
    ListLiteralObserver.name = "ListLiteralObserver";
  $desc = $collectedClasses.ListLiteralObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListLiteralObserver.prototype = $desc;
  ListLiteralObserver.prototype.get$items = function(receiver) {
    return this.items;
  };
  function ListLiteralObserver__updateSelf_closure() {
  }
  ListLiteralObserver__updateSelf_closure.builtin$cls = "ListLiteralObserver__updateSelf_closure";
  if (!"name" in ListLiteralObserver__updateSelf_closure)
    ListLiteralObserver__updateSelf_closure.name = "ListLiteralObserver__updateSelf_closure";
  $desc = $collectedClasses.ListLiteralObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListLiteralObserver__updateSelf_closure.prototype = $desc;
  function MapLiteralObserver(entries, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.entries = entries;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  MapLiteralObserver.builtin$cls = "MapLiteralObserver";
  if (!"name" in MapLiteralObserver)
    MapLiteralObserver.name = "MapLiteralObserver";
  $desc = $collectedClasses.MapLiteralObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralObserver.prototype = $desc;
  MapLiteralObserver.prototype.get$entries = function(receiver) {
    return this.entries;
  };
  function MapLiteralObserver__updateSelf_closure() {
  }
  MapLiteralObserver__updateSelf_closure.builtin$cls = "MapLiteralObserver__updateSelf_closure";
  if (!"name" in MapLiteralObserver__updateSelf_closure)
    MapLiteralObserver__updateSelf_closure.name = "MapLiteralObserver__updateSelf_closure";
  $desc = $collectedClasses.MapLiteralObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralObserver__updateSelf_closure.prototype = $desc;
  function MapLiteralEntryObserver(key, entryValue, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.key = key;
    this.entryValue = entryValue;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  MapLiteralEntryObserver.builtin$cls = "MapLiteralEntryObserver";
  if (!"name" in MapLiteralEntryObserver)
    MapLiteralEntryObserver.name = "MapLiteralEntryObserver";
  $desc = $collectedClasses.MapLiteralEntryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralEntryObserver.prototype = $desc;
  MapLiteralEntryObserver.prototype.get$key = function(receiver) {
    return this.key;
  };
  MapLiteralEntryObserver.prototype.get$entryValue = function() {
    return this.entryValue;
  };
  function IdentifierObserver(_eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  IdentifierObserver.builtin$cls = "IdentifierObserver";
  if (!"name" in IdentifierObserver)
    IdentifierObserver.name = "IdentifierObserver";
  $desc = $collectedClasses.IdentifierObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver.prototype = $desc;
  function IdentifierObserver__updateSelf_closure(this_0, scope_1, symbol_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.symbol_2 = symbol_2;
  }
  IdentifierObserver__updateSelf_closure.builtin$cls = "IdentifierObserver__updateSelf_closure";
  if (!"name" in IdentifierObserver__updateSelf_closure)
    IdentifierObserver__updateSelf_closure.name = "IdentifierObserver__updateSelf_closure";
  $desc = $collectedClasses.IdentifierObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver__updateSelf_closure.prototype = $desc;
  function IdentifierObserver__updateSelf__closure(symbol_3) {
    this.symbol_3 = symbol_3;
  }
  IdentifierObserver__updateSelf__closure.builtin$cls = "IdentifierObserver__updateSelf__closure";
  if (!"name" in IdentifierObserver__updateSelf__closure)
    IdentifierObserver__updateSelf__closure.name = "IdentifierObserver__updateSelf__closure";
  $desc = $collectedClasses.IdentifierObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IdentifierObserver__updateSelf__closure.prototype = $desc;
  function UnaryObserver(child, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.child = child;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  UnaryObserver.builtin$cls = "UnaryObserver";
  if (!"name" in UnaryObserver)
    UnaryObserver.name = "UnaryObserver";
  $desc = $collectedClasses.UnaryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnaryObserver.prototype = $desc;
  UnaryObserver.prototype.get$child = function() {
    return this.child;
  };
  function BinaryObserver(left, right, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.left = left;
    this.right = right;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  BinaryObserver.builtin$cls = "BinaryObserver";
  if (!"name" in BinaryObserver)
    BinaryObserver.name = "BinaryObserver";
  $desc = $collectedClasses.BinaryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BinaryObserver.prototype = $desc;
  BinaryObserver.prototype.get$left = function(receiver) {
    return this.left;
  };
  BinaryObserver.prototype.get$right = function(receiver) {
    return this.right;
  };
  function BinaryObserver__updateSelf_closure(this_0, scope_1) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
  }
  BinaryObserver__updateSelf_closure.builtin$cls = "BinaryObserver__updateSelf_closure";
  if (!"name" in BinaryObserver__updateSelf_closure)
    BinaryObserver__updateSelf_closure.name = "BinaryObserver__updateSelf_closure";
  $desc = $collectedClasses.BinaryObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BinaryObserver__updateSelf_closure.prototype = $desc;
  function TernaryObserver(condition, trueExpr, falseExpr, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  TernaryObserver.builtin$cls = "TernaryObserver";
  if (!"name" in TernaryObserver)
    TernaryObserver.name = "TernaryObserver";
  $desc = $collectedClasses.TernaryObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TernaryObserver.prototype = $desc;
  TernaryObserver.prototype.get$condition = function() {
    return this.condition;
  };
  TernaryObserver.prototype.get$trueExpr = function() {
    return this.trueExpr;
  };
  TernaryObserver.prototype.get$falseExpr = function() {
    return this.falseExpr;
  };
  function GetterObserver(receiver, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.receiver = receiver;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  GetterObserver.builtin$cls = "GetterObserver";
  if (!"name" in GetterObserver)
    GetterObserver.name = "GetterObserver";
  $desc = $collectedClasses.GetterObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GetterObserver.prototype = $desc;
  GetterObserver.prototype.get$receiver = function() {
    return this.receiver;
  };
  function GetterObserver__updateSelf_closure(this_0, scope_1, symbol_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.symbol_2 = symbol_2;
  }
  GetterObserver__updateSelf_closure.builtin$cls = "GetterObserver__updateSelf_closure";
  if (!"name" in GetterObserver__updateSelf_closure)
    GetterObserver__updateSelf_closure.name = "GetterObserver__updateSelf_closure";
  $desc = $collectedClasses.GetterObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GetterObserver__updateSelf_closure.prototype = $desc;
  function GetterObserver__updateSelf__closure(symbol_3) {
    this.symbol_3 = symbol_3;
  }
  GetterObserver__updateSelf__closure.builtin$cls = "GetterObserver__updateSelf__closure";
  if (!"name" in GetterObserver__updateSelf__closure)
    GetterObserver__updateSelf__closure.name = "GetterObserver__updateSelf__closure";
  $desc = $collectedClasses.GetterObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GetterObserver__updateSelf__closure.prototype = $desc;
  function IndexObserver(receiver, argument, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.receiver = receiver;
    this.argument = argument;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  IndexObserver.builtin$cls = "IndexObserver";
  if (!"name" in IndexObserver)
    IndexObserver.name = "IndexObserver";
  $desc = $collectedClasses.IndexObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexObserver.prototype = $desc;
  IndexObserver.prototype.get$receiver = function() {
    return this.receiver;
  };
  IndexObserver.prototype.get$argument = function() {
    return this.argument;
  };
  function IndexObserver__updateSelf_closure(this_0, scope_1, key_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.key_2 = key_2;
  }
  IndexObserver__updateSelf_closure.builtin$cls = "IndexObserver__updateSelf_closure";
  if (!"name" in IndexObserver__updateSelf_closure)
    IndexObserver__updateSelf_closure.name = "IndexObserver__updateSelf_closure";
  $desc = $collectedClasses.IndexObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexObserver__updateSelf_closure.prototype = $desc;
  function IndexObserver__updateSelf__closure(key_3) {
    this.key_3 = key_3;
  }
  IndexObserver__updateSelf__closure.builtin$cls = "IndexObserver__updateSelf__closure";
  if (!"name" in IndexObserver__updateSelf__closure)
    IndexObserver__updateSelf__closure.name = "IndexObserver__updateSelf__closure";
  $desc = $collectedClasses.IndexObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexObserver__updateSelf__closure.prototype = $desc;
  function InvokeObserver(receiver, arguments, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.receiver = receiver;
    this.arguments = arguments;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  InvokeObserver.builtin$cls = "InvokeObserver";
  if (!"name" in InvokeObserver)
    InvokeObserver.name = "InvokeObserver";
  $desc = $collectedClasses.InvokeObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver.prototype = $desc;
  InvokeObserver.prototype.get$receiver = function() {
    return this.receiver;
  };
  InvokeObserver.prototype.get$arguments = function() {
    return this.arguments;
  };
  function InvokeObserver__updateSelf_closure() {
  }
  InvokeObserver__updateSelf_closure.builtin$cls = "InvokeObserver__updateSelf_closure";
  if (!"name" in InvokeObserver__updateSelf_closure)
    InvokeObserver__updateSelf_closure.name = "InvokeObserver__updateSelf_closure";
  $desc = $collectedClasses.InvokeObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf_closure.prototype = $desc;
  function InvokeObserver__updateSelf_closure0(this_0, scope_1, symbol_2) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
    this.symbol_2 = symbol_2;
  }
  InvokeObserver__updateSelf_closure0.builtin$cls = "InvokeObserver__updateSelf_closure0";
  if (!"name" in InvokeObserver__updateSelf_closure0)
    InvokeObserver__updateSelf_closure0.name = "InvokeObserver__updateSelf_closure0";
  $desc = $collectedClasses.InvokeObserver__updateSelf_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf_closure0.prototype = $desc;
  function InvokeObserver__updateSelf__closure(symbol_3) {
    this.symbol_3 = symbol_3;
  }
  InvokeObserver__updateSelf__closure.builtin$cls = "InvokeObserver__updateSelf__closure";
  if (!"name" in InvokeObserver__updateSelf__closure)
    InvokeObserver__updateSelf__closure.name = "InvokeObserver__updateSelf__closure";
  $desc = $collectedClasses.InvokeObserver__updateSelf__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InvokeObserver__updateSelf__closure.prototype = $desc;
  function InObserver(left, right, _eval$_expr, _parent, _eval$_subscription, _eval$_value, _eval$_controller) {
    this.left = left;
    this.right = right;
    this._eval$_expr = _eval$_expr;
    this._parent = _parent;
    this._eval$_subscription = _eval$_subscription;
    this._eval$_value = _eval$_value;
    this._eval$_controller = _eval$_controller;
  }
  InObserver.builtin$cls = "InObserver";
  if (!"name" in InObserver)
    InObserver.name = "InObserver";
  $desc = $collectedClasses.InObserver;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InObserver.prototype = $desc;
  InObserver.prototype.get$left = function(receiver) {
    return this.left;
  };
  InObserver.prototype.get$right = function(receiver) {
    return this.right;
  };
  function InObserver__updateSelf_closure(this_0, scope_1) {
    this.this_0 = this_0;
    this.scope_1 = scope_1;
  }
  InObserver__updateSelf_closure.builtin$cls = "InObserver__updateSelf_closure";
  if (!"name" in InObserver__updateSelf_closure)
    InObserver__updateSelf_closure.name = "InObserver__updateSelf_closure";
  $desc = $collectedClasses.InObserver__updateSelf_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InObserver__updateSelf_closure.prototype = $desc;
  function Comprehension(identifier, iterable) {
    this.identifier = identifier;
    this.iterable = iterable;
  }
  Comprehension.builtin$cls = "Comprehension";
  if (!"name" in Comprehension)
    Comprehension.name = "Comprehension";
  $desc = $collectedClasses.Comprehension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Comprehension.prototype = $desc;
  function EvalException(message) {
    this.message = message;
  }
  EvalException.builtin$cls = "EvalException";
  if (!"name" in EvalException)
    EvalException.name = "EvalException";
  $desc = $collectedClasses.EvalException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EvalException.prototype = $desc;
  function AstFactory() {
  }
  AstFactory.builtin$cls = "AstFactory";
  if (!"name" in AstFactory)
    AstFactory.name = "AstFactory";
  $desc = $collectedClasses.AstFactory;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AstFactory.prototype = $desc;
  function Expression() {
  }
  Expression.builtin$cls = "Expression";
  if (!"name" in Expression)
    Expression.name = "Expression";
  $desc = $collectedClasses.Expression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Expression.prototype = $desc;
  function EmptyExpression() {
  }
  EmptyExpression.builtin$cls = "EmptyExpression";
  if (!"name" in EmptyExpression)
    EmptyExpression.name = "EmptyExpression";
  $desc = $collectedClasses.EmptyExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EmptyExpression.prototype = $desc;
  function Literal(value) {
    this.value = value;
  }
  Literal.builtin$cls = "Literal";
  if (!"name" in Literal)
    Literal.name = "Literal";
  $desc = $collectedClasses.Literal;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Literal.prototype = $desc;
  Literal.prototype.get$value = function(receiver) {
    return this.value;
  };
  function ListLiteral(items) {
    this.items = items;
  }
  ListLiteral.builtin$cls = "ListLiteral";
  if (!"name" in ListLiteral)
    ListLiteral.name = "ListLiteral";
  $desc = $collectedClasses.ListLiteral;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ListLiteral.prototype = $desc;
  ListLiteral.prototype.get$items = function(receiver) {
    return this.items;
  };
  function MapLiteral(entries) {
    this.entries = entries;
  }
  MapLiteral.builtin$cls = "MapLiteral";
  if (!"name" in MapLiteral)
    MapLiteral.name = "MapLiteral";
  $desc = $collectedClasses.MapLiteral;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteral.prototype = $desc;
  MapLiteral.prototype.get$entries = function(receiver) {
    return this.entries;
  };
  function MapLiteralEntry(key, entryValue) {
    this.key = key;
    this.entryValue = entryValue;
  }
  MapLiteralEntry.builtin$cls = "MapLiteralEntry";
  if (!"name" in MapLiteralEntry)
    MapLiteralEntry.name = "MapLiteralEntry";
  $desc = $collectedClasses.MapLiteralEntry;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MapLiteralEntry.prototype = $desc;
  MapLiteralEntry.prototype.get$key = function(receiver) {
    return this.key;
  };
  MapLiteralEntry.prototype.get$entryValue = function() {
    return this.entryValue;
  };
  function ParenthesizedExpression(child) {
    this.child = child;
  }
  ParenthesizedExpression.builtin$cls = "ParenthesizedExpression";
  if (!"name" in ParenthesizedExpression)
    ParenthesizedExpression.name = "ParenthesizedExpression";
  $desc = $collectedClasses.ParenthesizedExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParenthesizedExpression.prototype = $desc;
  function Identifier(value) {
    this.value = value;
  }
  Identifier.builtin$cls = "Identifier";
  if (!"name" in Identifier)
    Identifier.name = "Identifier";
  $desc = $collectedClasses.Identifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Identifier.prototype = $desc;
  Identifier.prototype.get$value = function(receiver) {
    return this.value;
  };
  function UnaryOperator(operator, child) {
    this.operator = operator;
    this.child = child;
  }
  UnaryOperator.builtin$cls = "UnaryOperator";
  if (!"name" in UnaryOperator)
    UnaryOperator.name = "UnaryOperator";
  $desc = $collectedClasses.UnaryOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  UnaryOperator.prototype = $desc;
  UnaryOperator.prototype.get$operator = function(receiver) {
    return this.operator;
  };
  UnaryOperator.prototype.get$child = function() {
    return this.child;
  };
  function BinaryOperator(operator, left, right) {
    this.operator = operator;
    this.left = left;
    this.right = right;
  }
  BinaryOperator.builtin$cls = "BinaryOperator";
  if (!"name" in BinaryOperator)
    BinaryOperator.name = "BinaryOperator";
  $desc = $collectedClasses.BinaryOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BinaryOperator.prototype = $desc;
  BinaryOperator.prototype.get$operator = function(receiver) {
    return this.operator;
  };
  BinaryOperator.prototype.get$left = function(receiver) {
    return this.left;
  };
  BinaryOperator.prototype.get$right = function(receiver) {
    return this.right;
  };
  function TernaryOperator(condition, trueExpr, falseExpr) {
    this.condition = condition;
    this.trueExpr = trueExpr;
    this.falseExpr = falseExpr;
  }
  TernaryOperator.builtin$cls = "TernaryOperator";
  if (!"name" in TernaryOperator)
    TernaryOperator.name = "TernaryOperator";
  $desc = $collectedClasses.TernaryOperator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TernaryOperator.prototype = $desc;
  TernaryOperator.prototype.get$condition = function() {
    return this.condition;
  };
  TernaryOperator.prototype.get$trueExpr = function() {
    return this.trueExpr;
  };
  TernaryOperator.prototype.get$falseExpr = function() {
    return this.falseExpr;
  };
  function InExpression(left, right) {
    this.left = left;
    this.right = right;
  }
  InExpression.builtin$cls = "InExpression";
  if (!"name" in InExpression)
    InExpression.name = "InExpression";
  $desc = $collectedClasses.InExpression;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InExpression.prototype = $desc;
  InExpression.prototype.get$left = function(receiver) {
    return this.left;
  };
  InExpression.prototype.get$right = function(receiver) {
    return this.right;
  };
  function Index(receiver, argument) {
    this.receiver = receiver;
    this.argument = argument;
  }
  Index.builtin$cls = "Index";
  if (!"name" in Index)
    Index.name = "Index";
  $desc = $collectedClasses.Index;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Index.prototype = $desc;
  Index.prototype.get$receiver = function() {
    return this.receiver;
  };
  Index.prototype.get$argument = function() {
    return this.argument;
  };
  function Getter(receiver, name) {
    this.receiver = receiver;
    this.name = name;
  }
  Getter.builtin$cls = "Getter";
  if (!"name" in Getter)
    Getter.name = "Getter";
  $desc = $collectedClasses.Getter;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Getter.prototype = $desc;
  Getter.prototype.get$receiver = function() {
    return this.receiver;
  };
  Getter.prototype.get$name = function(receiver) {
    return this.name;
  };
  function Invoke(receiver, method, arguments) {
    this.receiver = receiver;
    this.method = method;
    this.arguments = arguments;
  }
  Invoke.builtin$cls = "Invoke";
  if (!"name" in Invoke)
    Invoke.name = "Invoke";
  $desc = $collectedClasses.Invoke;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Invoke.prototype = $desc;
  Invoke.prototype.get$receiver = function() {
    return this.receiver;
  };
  Invoke.prototype.get$method = function(receiver) {
    return this.method;
  };
  Invoke.prototype.get$arguments = function() {
    return this.arguments;
  };
  function _hashList_closure() {
  }
  _hashList_closure.builtin$cls = "_hashList_closure";
  if (!"name" in _hashList_closure)
    _hashList_closure.name = "_hashList_closure";
  $desc = $collectedClasses._hashList_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _hashList_closure.prototype = $desc;
  function Parser(_astFactory, _tokenizer, _parser$_tokens, _parser$_iterator) {
    this._astFactory = _astFactory;
    this._tokenizer = _tokenizer;
    this._parser$_tokens = _parser$_tokens;
    this._parser$_iterator = _parser$_iterator;
  }
  Parser.builtin$cls = "Parser";
  if (!"name" in Parser)
    Parser.name = "Parser";
  $desc = $collectedClasses.Parser;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Parser.prototype = $desc;
  function IndexedValue(index, value) {
    this.index = index;
    this.value = value;
  }
  IndexedValue.builtin$cls = "IndexedValue";
  if (!"name" in IndexedValue)
    IndexedValue.name = "IndexedValue";
  $desc = $collectedClasses.IndexedValue;
  if ($desc instanceof Array)
    $desc = $desc[1];
  IndexedValue.prototype = $desc;
  IndexedValue.prototype.get$index = function(receiver) {
    return this.index;
  };
  IndexedValue.prototype.get$value = function(receiver) {
    return this.value;
  };
  function EnumerateIterable(_globals$_iterable) {
    this._globals$_iterable = _globals$_iterable;
  }
  EnumerateIterable.builtin$cls = "EnumerateIterable";
  if (!"name" in EnumerateIterable)
    EnumerateIterable.name = "EnumerateIterable";
  $desc = $collectedClasses.EnumerateIterable;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EnumerateIterable.prototype = $desc;
  function EnumerateIterator(_globals$_iterator, _globals$_index, _globals$_current) {
    this._globals$_iterator = _globals$_iterator;
    this._globals$_index = _globals$_index;
    this._globals$_current = _globals$_current;
  }
  EnumerateIterator.builtin$cls = "EnumerateIterator";
  if (!"name" in EnumerateIterator)
    EnumerateIterator.name = "EnumerateIterator";
  $desc = $collectedClasses.EnumerateIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  EnumerateIterator.prototype = $desc;
  function Token(kind, value, precedence) {
    this.kind = kind;
    this.value = value;
    this.precedence = precedence;
  }
  Token.builtin$cls = "Token";
  if (!"name" in Token)
    Token.name = "Token";
  $desc = $collectedClasses.Token;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Token.prototype = $desc;
  Token.prototype.get$kind = function(receiver) {
    return this.kind;
  };
  Token.prototype.get$value = function(receiver) {
    return this.value;
  };
  Token.prototype.get$precedence = function() {
    return this.precedence;
  };
  function Tokenizer(_tokenizer$_tokens, _sb, _tokenizer$_iterator, _tokenizer$_next) {
    this._tokenizer$_tokens = _tokenizer$_tokens;
    this._sb = _sb;
    this._tokenizer$_iterator = _tokenizer$_iterator;
    this._tokenizer$_next = _tokenizer$_next;
  }
  Tokenizer.builtin$cls = "Tokenizer";
  if (!"name" in Tokenizer)
    Tokenizer.name = "Tokenizer";
  $desc = $collectedClasses.Tokenizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Tokenizer.prototype = $desc;
  function ParseException(message) {
    this.message = message;
  }
  ParseException.builtin$cls = "ParseException";
  if (!"name" in ParseException)
    ParseException.name = "ParseException";
  $desc = $collectedClasses.ParseException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParseException.prototype = $desc;
  function Visitor() {
  }
  Visitor.builtin$cls = "Visitor";
  if (!"name" in Visitor)
    Visitor.name = "Visitor";
  $desc = $collectedClasses.Visitor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Visitor.prototype = $desc;
  function RecursiveVisitor() {
  }
  RecursiveVisitor.builtin$cls = "RecursiveVisitor";
  if (!"name" in RecursiveVisitor)
    RecursiveVisitor.name = "RecursiveVisitor";
  $desc = $collectedClasses.RecursiveVisitor;
  if ($desc instanceof Array)
    $desc = $desc[1];
  RecursiveVisitor.prototype = $desc;
  function SearchResult(element, type, score, position) {
    this.element = element;
    this.type = type;
    this.score = score;
    this.position = position;
  }
  SearchResult.builtin$cls = "SearchResult";
  if (!"name" in SearchResult)
    SearchResult.name = "SearchResult";
  $desc = $collectedClasses.SearchResult;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SearchResult.prototype = $desc;
  SearchResult.prototype.get$element = function() {
    return this.element;
  };
  SearchResult.prototype.get$type = function(receiver) {
    return this.type;
  };
  SearchResult.prototype.get$score = function() {
    return this.score;
  };
  SearchResult.prototype.get$position = function(receiver) {
    return this.position;
  };
  SearchResult.prototype.set$position = function(receiver, v) {
    return this.position = v;
  };
  function Hit(name, lower, type) {
    this.name = name;
    this.lower = lower;
    this.type = type;
  }
  Hit.builtin$cls = "Hit";
  if (!"name" in Hit)
    Hit.name = "Hit";
  $desc = $collectedClasses.Hit;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Hit.prototype = $desc;
  Hit.prototype.get$name = function(receiver) {
    return this.name;
  };
  Hit.prototype.get$lower = function(receiver) {
    return this.lower;
  };
  Hit.prototype.get$type = function(receiver) {
    return this.type;
  };
  function _splitQueryTerms_closure() {
  }
  _splitQueryTerms_closure.builtin$cls = "_splitQueryTerms_closure";
  if (!"name" in _splitQueryTerms_closure)
    _splitQueryTerms_closure.name = "_splitQueryTerms_closure";
  $desc = $collectedClasses._splitQueryTerms_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _splitQueryTerms_closure.prototype = $desc;
  function _splitQueryTerms_closure0() {
  }
  _splitQueryTerms_closure0.builtin$cls = "_splitQueryTerms_closure0";
  if (!"name" in _splitQueryTerms_closure0)
    _splitQueryTerms_closure0.name = "_splitQueryTerms_closure0";
  $desc = $collectedClasses._splitQueryTerms_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _splitQueryTerms_closure0.prototype = $desc;
  function _splitQueryTerms_closure1() {
  }
  _splitQueryTerms_closure1.builtin$cls = "_splitQueryTerms_closure1";
  if (!"name" in _splitQueryTerms_closure1)
    _splitQueryTerms_closure1.name = "_splitQueryTerms_closure1";
  $desc = $collectedClasses._splitQueryTerms_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _splitQueryTerms_closure1.prototype = $desc;
  function lookupSearchResults_closure(lower_1) {
    this.lower_1 = lower_1;
  }
  lookupSearchResults_closure.builtin$cls = "lookupSearchResults_closure";
  if (!"name" in lookupSearchResults_closure)
    lookupSearchResults_closure.name = "lookupSearchResults_closure";
  $desc = $collectedClasses.lookupSearchResults_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  lookupSearchResults_closure.prototype = $desc;
  function lookupSearchResults_closure0(box_0, r_2) {
    this.box_0 = box_0;
    this.r_2 = r_2;
  }
  lookupSearchResults_closure0.builtin$cls = "lookupSearchResults_closure0";
  if (!"name" in lookupSearchResults_closure0)
    lookupSearchResults_closure0.name = "lookupSearchResults_closure0";
  $desc = $collectedClasses.lookupSearchResults_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  lookupSearchResults_closure0.prototype = $desc;
  function lookupSearchResults_closure1(box_0, r_3, location_4, qualifiedNameParts_5) {
    this.box_0 = box_0;
    this.r_3 = r_3;
    this.location_4 = location_4;
    this.qualifiedNameParts_5 = qualifiedNameParts_5;
  }
  lookupSearchResults_closure1.builtin$cls = "lookupSearchResults_closure1";
  if (!"name" in lookupSearchResults_closure1)
    lookupSearchResults_closure1.name = "lookupSearchResults_closure1";
  $desc = $collectedClasses.lookupSearchResults_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  lookupSearchResults_closure1.prototype = $desc;
  function SearchIndex(_search0$_map, _onLoad) {
    this._search0$_map = _search0$_map;
    this._onLoad = _onLoad;
  }
  SearchIndex.builtin$cls = "SearchIndex";
  if (!"name" in SearchIndex)
    SearchIndex.name = "SearchIndex";
  $desc = $collectedClasses.SearchIndex;
  if ($desc instanceof Array)
    $desc = $desc[1];
  SearchIndex.prototype = $desc;
  function _DefaultSyntaxWithEvents() {
  }
  _DefaultSyntaxWithEvents.builtin$cls = "_DefaultSyntaxWithEvents";
  if (!"name" in _DefaultSyntaxWithEvents)
    _DefaultSyntaxWithEvents.name = "_DefaultSyntaxWithEvents";
  $desc = $collectedClasses._DefaultSyntaxWithEvents;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _DefaultSyntaxWithEvents.prototype = $desc;
  function QueryOptions(includeFields, includeProperties, includeInherited, includeUpTo, excludeFinal, includeMethods, withAnnotations, matches) {
    this.includeFields = includeFields;
    this.includeProperties = includeProperties;
    this.includeInherited = includeInherited;
    this.includeUpTo = includeUpTo;
    this.excludeFinal = excludeFinal;
    this.includeMethods = includeMethods;
    this.withAnnotations = withAnnotations;
    this.matches = matches;
  }
  QueryOptions.builtin$cls = "QueryOptions";
  if (!"name" in QueryOptions)
    QueryOptions.name = "QueryOptions";
  $desc = $collectedClasses.QueryOptions;
  if ($desc instanceof Array)
    $desc = $desc[1];
  QueryOptions.prototype = $desc;
  function Declaration(name, kind, isFinal, type, isStatic, annotations) {
    this.name = name;
    this.kind = kind;
    this.isFinal = isFinal;
    this.type = type;
    this.isStatic = isStatic;
    this.annotations = annotations;
  }
  Declaration.builtin$cls = "Declaration";
  if (!"name" in Declaration)
    Declaration.name = "Declaration";
  $desc = $collectedClasses.Declaration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Declaration.prototype = $desc;
  Declaration.prototype.get$name = function(receiver) {
    return this.name;
  };
  Declaration.prototype.get$kind = function(receiver) {
    return this.kind;
  };
  Declaration.prototype.get$isFinal = function(receiver) {
    return this.isFinal;
  };
  Declaration.prototype.get$type = function(receiver) {
    return this.type;
  };
  Declaration.prototype.get$isStatic = function() {
    return this.isStatic;
  };
  Declaration.prototype.get$annotations = function(receiver) {
    return this.annotations;
  };
  function DeclarationKind(kind) {
    this.kind = kind;
  }
  DeclarationKind.builtin$cls = "DeclarationKind";
  if (!"name" in DeclarationKind)
    DeclarationKind.name = "DeclarationKind";
  $desc = $collectedClasses.DeclarationKind;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DeclarationKind.prototype = $desc;
  DeclarationKind.prototype.get$kind = function(receiver) {
    return this.kind;
  };
  function StaticConfiguration(getters, setters, parents, declarations, staticMethods, names, checkedMode) {
    this.getters = getters;
    this.setters = setters;
    this.parents = parents;
    this.declarations = declarations;
    this.staticMethods = staticMethods;
    this.names = names;
    this.checkedMode = checkedMode;
  }
  StaticConfiguration.builtin$cls = "StaticConfiguration";
  if (!"name" in StaticConfiguration)
    StaticConfiguration.name = "StaticConfiguration";
  $desc = $collectedClasses.StaticConfiguration;
  if ($desc instanceof Array)
    $desc = $desc[1];
  StaticConfiguration.prototype = $desc;
  function GeneratedObjectAccessorService(_getters, _setters, _staticMethods) {
    this._getters = _getters;
    this._setters = _setters;
    this._staticMethods = _staticMethods;
  }
  GeneratedObjectAccessorService.builtin$cls = "GeneratedObjectAccessorService";
  if (!"name" in GeneratedObjectAccessorService)
    GeneratedObjectAccessorService.name = "GeneratedObjectAccessorService";
  $desc = $collectedClasses.GeneratedObjectAccessorService;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeneratedObjectAccessorService.prototype = $desc;
  function GeneratedTypeInspectorService(_parents, _declarations, _checkedMode) {
    this._parents = _parents;
    this._declarations = _declarations;
    this._checkedMode = _checkedMode;
  }
  GeneratedTypeInspectorService.builtin$cls = "GeneratedTypeInspectorService";
  if (!"name" in GeneratedTypeInspectorService)
    GeneratedTypeInspectorService.name = "GeneratedTypeInspectorService";
  $desc = $collectedClasses.GeneratedTypeInspectorService;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeneratedTypeInspectorService.prototype = $desc;
  function GeneratedSymbolConverterService(_names, _symbols) {
    this._names = _names;
    this._symbols = _symbols;
  }
  GeneratedSymbolConverterService.builtin$cls = "GeneratedSymbolConverterService";
  if (!"name" in GeneratedSymbolConverterService)
    GeneratedSymbolConverterService.name = "GeneratedSymbolConverterService";
  $desc = $collectedClasses.GeneratedSymbolConverterService;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeneratedSymbolConverterService.prototype = $desc;
  function GeneratedSymbolConverterService_closure(this_0) {
    this.this_0 = this_0;
  }
  GeneratedSymbolConverterService_closure.builtin$cls = "GeneratedSymbolConverterService_closure";
  if (!"name" in GeneratedSymbolConverterService_closure)
    GeneratedSymbolConverterService_closure.name = "GeneratedSymbolConverterService_closure";
  $desc = $collectedClasses.GeneratedSymbolConverterService_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  GeneratedSymbolConverterService_closure.prototype = $desc;
  function MissingCodeException(description) {
    this.description = description;
  }
  MissingCodeException.builtin$cls = "MissingCodeException";
  if (!"name" in MissingCodeException)
    MissingCodeException.name = "MissingCodeException";
  $desc = $collectedClasses.MissingCodeException;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MissingCodeException.prototype = $desc;
  function _ElementExtension(_template_binding$_node, _bindings, _templateInstance) {
    this._template_binding$_node = _template_binding$_node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _ElementExtension.builtin$cls = "_ElementExtension";
  if (!"name" in _ElementExtension)
    _ElementExtension.name = "_ElementExtension";
  $desc = $collectedClasses._ElementExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementExtension.prototype = $desc;
  function _ElementExtension_bind_closure(box_0, this_1, conditional_2) {
    this.box_0 = box_0;
    this.this_1 = this_1;
    this.conditional_2 = conditional_2;
  }
  _ElementExtension_bind_closure.builtin$cls = "_ElementExtension_bind_closure";
  if (!"name" in _ElementExtension_bind_closure)
    _ElementExtension_bind_closure.name = "_ElementExtension_bind_closure";
  $desc = $collectedClasses._ElementExtension_bind_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _ElementExtension_bind_closure.prototype = $desc;
  function _InputBinding(_template_binding$_node, _eventSub, _template_binding$_bindable, _propertyName) {
    this._template_binding$_node = _template_binding$_node;
    this._eventSub = _eventSub;
    this._template_binding$_bindable = _template_binding$_bindable;
    this._propertyName = _propertyName;
  }
  _InputBinding.builtin$cls = "_InputBinding";
  if (!"name" in _InputBinding)
    _InputBinding.name = "_InputBinding";
  $desc = $collectedClasses._InputBinding;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InputBinding.prototype = $desc;
  _InputBinding.prototype.get$_template_binding$_node = function() {
    return this._template_binding$_node;
  };
  _InputBinding.prototype.get$_template_binding$_bindable = function() {
    return this._template_binding$_bindable;
  };
  function closure8() {
  }
  closure8.builtin$cls = "closure8";
  if (!"name" in closure8)
    closure8.name = "closure8";
  $desc = $collectedClasses.closure8;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure8.prototype = $desc;
  function _closure1(fired_0) {
    this.fired_0 = fired_0;
  }
  _closure1.builtin$cls = "_closure1";
  if (!"name" in _closure1)
    _closure1.name = "_closure1";
  $desc = $collectedClasses._closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure1.prototype = $desc;
  function _closure2(fired_1) {
    this.fired_1 = fired_1;
  }
  _closure2.builtin$cls = "_closure2";
  if (!"name" in _closure2)
    _closure2.name = "_closure2";
  $desc = $collectedClasses._closure2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _closure2.prototype = $desc;
  function _InputBinding__getAssociatedRadioButtons_closure(element_0) {
    this.element_0 = element_0;
  }
  _InputBinding__getAssociatedRadioButtons_closure.builtin$cls = "_InputBinding__getAssociatedRadioButtons_closure";
  if (!"name" in _InputBinding__getAssociatedRadioButtons_closure)
    _InputBinding__getAssociatedRadioButtons_closure.name = "_InputBinding__getAssociatedRadioButtons_closure";
  $desc = $collectedClasses._InputBinding__getAssociatedRadioButtons_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InputBinding__getAssociatedRadioButtons_closure.prototype = $desc;
  function _InputBinding__getAssociatedRadioButtons_closure0(element_1) {
    this.element_1 = element_1;
  }
  _InputBinding__getAssociatedRadioButtons_closure0.builtin$cls = "_InputBinding__getAssociatedRadioButtons_closure0";
  if (!"name" in _InputBinding__getAssociatedRadioButtons_closure0)
    _InputBinding__getAssociatedRadioButtons_closure0.name = "_InputBinding__getAssociatedRadioButtons_closure0";
  $desc = $collectedClasses._InputBinding__getAssociatedRadioButtons_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InputBinding__getAssociatedRadioButtons_closure0.prototype = $desc;
  function _InputBinding__toInt_closure() {
  }
  _InputBinding__toInt_closure.builtin$cls = "_InputBinding__toInt_closure";
  if (!"name" in _InputBinding__toInt_closure)
    _InputBinding__toInt_closure.name = "_InputBinding__toInt_closure";
  $desc = $collectedClasses._InputBinding__toInt_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InputBinding__toInt_closure.prototype = $desc;
  function _InputElementExtension(_template_binding$_node, _bindings, _templateInstance) {
    this._template_binding$_node = _template_binding$_node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _InputElementExtension.builtin$cls = "_InputElementExtension";
  if (!"name" in _InputElementExtension)
    _InputElementExtension.name = "_InputElementExtension";
  $desc = $collectedClasses._InputElementExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InputElementExtension.prototype = $desc;
  function _InstanceBindingMap(bindings, children, content) {
    this.bindings = bindings;
    this.children = children;
    this.content = content;
  }
  _InstanceBindingMap.builtin$cls = "_InstanceBindingMap";
  if (!"name" in _InstanceBindingMap)
    _InstanceBindingMap.name = "_InstanceBindingMap";
  $desc = $collectedClasses._InstanceBindingMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _InstanceBindingMap.prototype = $desc;
  _InstanceBindingMap.prototype.get$bindings = function(receiver) {
    return this.bindings;
  };
  _InstanceBindingMap.prototype.get$children = function(receiver) {
    return this.children;
  };
  _InstanceBindingMap.prototype.get$content = function(receiver) {
    return this.content;
  };
  function _TemplateBindingMap(_if, _bind, _repeat, bindings, children, content) {
    this._if = _if;
    this._bind = _bind;
    this._repeat = _repeat;
    this.bindings = bindings;
    this.children = children;
    this.content = content;
  }
  _TemplateBindingMap.builtin$cls = "_TemplateBindingMap";
  if (!"name" in _TemplateBindingMap)
    _TemplateBindingMap.name = "_TemplateBindingMap";
  $desc = $collectedClasses._TemplateBindingMap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateBindingMap.prototype = $desc;
  function NodeBindExtension(_template_binding$_node, _bindings, _templateInstance) {
    this._template_binding$_node = _template_binding$_node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  NodeBindExtension.builtin$cls = "NodeBindExtension";
  if (!"name" in NodeBindExtension)
    NodeBindExtension.name = "NodeBindExtension";
  $desc = $collectedClasses.NodeBindExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NodeBindExtension.prototype = $desc;
  NodeBindExtension.prototype.get$_template_binding$_node = function() {
    return this._template_binding$_node;
  };
  NodeBindExtension.prototype.set$_templateInstance = function(v) {
    return this._templateInstance = v;
  };
  function TemplateInstance(model, _firstNode, _lastNode) {
    this.model = model;
    this._firstNode = _firstNode;
    this._lastNode = _lastNode;
  }
  TemplateInstance.builtin$cls = "TemplateInstance";
  if (!"name" in TemplateInstance)
    TemplateInstance.name = "TemplateInstance";
  $desc = $collectedClasses.TemplateInstance;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateInstance.prototype = $desc;
  function _SelectElementExtension(_template_binding$_node, _bindings, _templateInstance) {
    this._template_binding$_node = _template_binding$_node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _SelectElementExtension.builtin$cls = "_SelectElementExtension";
  if (!"name" in _SelectElementExtension)
    _SelectElementExtension.name = "_SelectElementExtension";
  $desc = $collectedClasses._SelectElementExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _SelectElementExtension.prototype = $desc;
  function TemplateBindExtension(_model, _bindingDelegate, _template_binding$_iterator, _setModelScheduled, _templateInstanceRef, _content, _templateIsDecorated, _stagingDocument, _bindingMap, _template_binding$_node, _bindings, _templateInstance) {
    this._model = _model;
    this._bindingDelegate = _bindingDelegate;
    this._template_binding$_iterator = _template_binding$_iterator;
    this._setModelScheduled = _setModelScheduled;
    this._templateInstanceRef = _templateInstanceRef;
    this._content = _content;
    this._templateIsDecorated = _templateIsDecorated;
    this._stagingDocument = _stagingDocument;
    this._bindingMap = _bindingMap;
    this._template_binding$_node = _template_binding$_node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  TemplateBindExtension.builtin$cls = "TemplateBindExtension";
  if (!"name" in TemplateBindExtension)
    TemplateBindExtension.name = "TemplateBindExtension";
  $desc = $collectedClasses.TemplateBindExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateBindExtension.prototype = $desc;
  TemplateBindExtension.prototype.set$_model = function(v) {
    return this._model = v;
  };
  TemplateBindExtension.prototype.get$_template_binding$_iterator = function() {
    return this._template_binding$_iterator;
  };
  TemplateBindExtension.prototype.set$_templateInstanceRef = function(v) {
    return this._templateInstanceRef = v;
  };
  TemplateBindExtension.prototype.set$_content = function(v) {
    return this._content = v;
  };
  TemplateBindExtension.prototype.set$_templateIsDecorated = function(v) {
    return this._templateIsDecorated = v;
  };
  function TemplateBindExtension_bootstrap__bootstrap() {
  }
  TemplateBindExtension_bootstrap__bootstrap.builtin$cls = "TemplateBindExtension_bootstrap__bootstrap";
  if (!"name" in TemplateBindExtension_bootstrap__bootstrap)
    TemplateBindExtension_bootstrap__bootstrap.name = "TemplateBindExtension_bootstrap__bootstrap";
  $desc = $collectedClasses.TemplateBindExtension_bootstrap__bootstrap;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TemplateBindExtension_bootstrap__bootstrap.prototype = $desc;
  function closure6() {
  }
  closure6.builtin$cls = "closure6";
  if (!"name" in closure6)
    closure6.name = "closure6";
  $desc = $collectedClasses.closure6;
  if ($desc instanceof Array)
    $desc = $desc[1];
  closure6.prototype = $desc;
  function _getDelegateFactory_closure(name_0, node_1, delegate_2) {
    this.name_0 = name_0;
    this.node_1 = node_1;
    this.delegate_2 = delegate_2;
  }
  _getDelegateFactory_closure.builtin$cls = "_getDelegateFactory_closure";
  if (!"name" in _getDelegateFactory_closure)
    _getDelegateFactory_closure.name = "_getDelegateFactory_closure";
  $desc = $collectedClasses._getDelegateFactory_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _getDelegateFactory_closure.prototype = $desc;
  function _parseAttributeBindings_closure(box_0, element_1, delegate_2, isTemplateNode_3) {
    this.box_0 = box_0;
    this.element_1 = element_1;
    this.delegate_2 = delegate_2;
    this.isTemplateNode_3 = isTemplateNode_3;
  }
  _parseAttributeBindings_closure.builtin$cls = "_parseAttributeBindings_closure";
  if (!"name" in _parseAttributeBindings_closure)
    _parseAttributeBindings_closure.name = "_parseAttributeBindings_closure";
  $desc = $collectedClasses._parseAttributeBindings_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _parseAttributeBindings_closure.prototype = $desc;
  function _TemplateIterator(_templateExt, _terminators, _iteratedValue, _presentValue, _closed, _ifValue, _template_binding$_value, _hasIf, _hasRepeat, _ifOneTime, _oneTime, _listSub, _initPrepareFunctions, _instanceModelFn, _instancePositionChangedFn) {
    this._templateExt = _templateExt;
    this._terminators = _terminators;
    this._iteratedValue = _iteratedValue;
    this._presentValue = _presentValue;
    this._closed = _closed;
    this._ifValue = _ifValue;
    this._template_binding$_value = _template_binding$_value;
    this._hasIf = _hasIf;
    this._hasRepeat = _hasRepeat;
    this._ifOneTime = _ifOneTime;
    this._oneTime = _oneTime;
    this._listSub = _listSub;
    this._initPrepareFunctions = _initPrepareFunctions;
    this._instanceModelFn = _instanceModelFn;
    this._instancePositionChangedFn = _instancePositionChangedFn;
  }
  _TemplateIterator.builtin$cls = "_TemplateIterator";
  if (!"name" in _TemplateIterator)
    _TemplateIterator.name = "_TemplateIterator";
  $desc = $collectedClasses._TemplateIterator;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TemplateIterator.prototype = $desc;
  function _BoundNodes(nodes, instanceBindings) {
    this.nodes = nodes;
    this.instanceBindings = instanceBindings;
  }
  _BoundNodes.builtin$cls = "_BoundNodes";
  if (!"name" in _BoundNodes)
    _BoundNodes.name = "_BoundNodes";
  $desc = $collectedClasses._BoundNodes;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _BoundNodes.prototype = $desc;
  _BoundNodes.prototype.get$nodes = function(receiver) {
    return this.nodes;
  };
  _BoundNodes.prototype.get$instanceBindings = function() {
    return this.instanceBindings;
  };
  function _TextExtension(_template_binding$_node, _bindings, _templateInstance) {
    this._template_binding$_node = _template_binding$_node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _TextExtension.builtin$cls = "_TextExtension";
  if (!"name" in _TextExtension)
    _TextExtension.name = "_TextExtension";
  $desc = $collectedClasses._TextExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TextExtension.prototype = $desc;
  function _TextAreaElementExtension(_template_binding$_node, _bindings, _templateInstance) {
    this._template_binding$_node = _template_binding$_node;
    this._bindings = _bindings;
    this._templateInstance = _templateInstance;
  }
  _TextAreaElementExtension.builtin$cls = "_TextAreaElementExtension";
  if (!"name" in _TextAreaElementExtension)
    _TextAreaElementExtension.name = "_TextAreaElementExtension";
  $desc = $collectedClasses._TextAreaElementExtension;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _TextAreaElementExtension.prototype = $desc;
  function BindingDelegate() {
  }
  BindingDelegate.builtin$cls = "BindingDelegate";
  if (!"name" in BindingDelegate)
    BindingDelegate.name = "BindingDelegate";
  $desc = $collectedClasses.BindingDelegate;
  if ($desc instanceof Array)
    $desc = $desc[1];
  BindingDelegate.prototype = $desc;
  function MustacheTokens(_tokens, onlyOneTime, _combinator) {
    this._tokens = _tokens;
    this.onlyOneTime = onlyOneTime;
    this._combinator = _combinator;
  }
  MustacheTokens.builtin$cls = "MustacheTokens";
  if (!"name" in MustacheTokens)
    MustacheTokens.name = "MustacheTokens";
  $desc = $collectedClasses.MustacheTokens;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MustacheTokens.prototype = $desc;
  MustacheTokens.prototype.get$onlyOneTime = function() {
    return this.onlyOneTime;
  };
  function Viewer(_tracker, _viewer0$__$isDesktop, _finishedCompleter, _viewer0$__$homePage, _viewer0$__$startPage, _showPkgLibraries, _viewer0$__$libraries, _currentPage, _viewer0$__$isPanel, _isPanel, _viewer0$__$isMinimap, _isMinimap, _viewer0$__$isInherited, _viewer0$__$showObjectMembers, _hash, redirectToDartlang, _loadIndicator, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records) {
    this._tracker = _tracker;
    this._viewer0$__$isDesktop = _viewer0$__$isDesktop;
    this._finishedCompleter = _finishedCompleter;
    this._viewer0$__$homePage = _viewer0$__$homePage;
    this._viewer0$__$startPage = _viewer0$__$startPage;
    this._showPkgLibraries = _showPkgLibraries;
    this._viewer0$__$libraries = _viewer0$__$libraries;
    this._currentPage = _currentPage;
    this._viewer0$__$isPanel = _viewer0$__$isPanel;
    this._isPanel = _isPanel;
    this._viewer0$__$isMinimap = _viewer0$__$isMinimap;
    this._isMinimap = _isMinimap;
    this._viewer0$__$isInherited = _viewer0$__$isInherited;
    this._viewer0$__$showObjectMembers = _viewer0$__$showObjectMembers;
    this._hash = _hash;
    this.redirectToDartlang = redirectToDartlang;
    this._loadIndicator = _loadIndicator;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
  }
  Viewer.builtin$cls = "Viewer";
  if (!"name" in Viewer)
    Viewer.name = "Viewer";
  $desc = $collectedClasses.Viewer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer.prototype = $desc;
  function Viewer__updateLibraries_closure() {
  }
  Viewer__updateLibraries_closure.builtin$cls = "Viewer__updateLibraries_closure";
  if (!"name" in Viewer__updateLibraries_closure)
    Viewer__updateLibraries_closure.name = "Viewer__updateLibraries_closure";
  $desc = $collectedClasses.Viewer__updateLibraries_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__updateLibraries_closure.prototype = $desc;
  function Viewer_currentPage_closure() {
  }
  Viewer_currentPage_closure.builtin$cls = "Viewer_currentPage_closure";
  if (!"name" in Viewer_currentPage_closure)
    Viewer_currentPage_closure.name = "Viewer_currentPage_closure";
  $desc = $collectedClasses.Viewer_currentPage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_currentPage_closure.prototype = $desc;
  function Viewer_currentPage_closure0() {
  }
  Viewer_currentPage_closure0.builtin$cls = "Viewer_currentPage_closure0";
  if (!"name" in Viewer_currentPage_closure0)
    Viewer_currentPage_closure0.name = "Viewer_currentPage_closure0";
  $desc = $collectedClasses.Viewer_currentPage_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_currentPage_closure0.prototype = $desc;
  function Viewer_closure(this_0) {
    this.this_0 = this_0;
  }
  Viewer_closure.builtin$cls = "Viewer_closure";
  if (!"name" in Viewer_closure)
    Viewer_closure.name = "Viewer_closure";
  $desc = $collectedClasses.Viewer_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_closure.prototype = $desc;
  function Viewer__closure(this_1) {
    this.this_1 = this_1;
  }
  Viewer__closure.builtin$cls = "Viewer__closure";
  if (!"name" in Viewer__closure)
    Viewer__closure.name = "Viewer__closure";
  $desc = $collectedClasses.Viewer__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__closure.prototype = $desc;
  function Viewer_closure0() {
  }
  Viewer_closure0.builtin$cls = "Viewer_closure0";
  if (!"name" in Viewer_closure0)
    Viewer_closure0.name = "Viewer_closure0";
  $desc = $collectedClasses.Viewer_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_closure0.prototype = $desc;
  function Viewer_closure1(this_2) {
    this.this_2 = this_2;
  }
  Viewer_closure1.builtin$cls = "Viewer_closure1";
  if (!"name" in Viewer_closure1)
    Viewer_closure1.name = "Viewer_closure1";
  $desc = $collectedClasses.Viewer_closure1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_closure1.prototype = $desc;
  function Viewer__scrollScreen_closure() {
  }
  Viewer__scrollScreen_closure.builtin$cls = "Viewer__scrollScreen_closure";
  if (!"name" in Viewer__scrollScreen_closure)
    Viewer__scrollScreen_closure.name = "Viewer__scrollScreen_closure";
  $desc = $collectedClasses.Viewer__scrollScreen_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__scrollScreen_closure.prototype = $desc;
  function Viewer__scrollScreen_closure0(box_0, this_1) {
    this.box_0 = box_0;
    this.this_1 = this_1;
  }
  Viewer__scrollScreen_closure0.builtin$cls = "Viewer__scrollScreen_closure0";
  if (!"name" in Viewer__scrollScreen_closure0)
    Viewer__scrollScreen_closure0.name = "Viewer__scrollScreen_closure0";
  $desc = $collectedClasses.Viewer__scrollScreen_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__scrollScreen_closure0.prototype = $desc;
  function Viewer_queryEverywhere_closure() {
  }
  Viewer_queryEverywhere_closure.builtin$cls = "Viewer_queryEverywhere_closure";
  if (!"name" in Viewer_queryEverywhere_closure)
    Viewer_queryEverywhere_closure.name = "Viewer_queryEverywhere_closure";
  $desc = $collectedClasses.Viewer_queryEverywhere_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_queryEverywhere_closure.prototype = $desc;
  function Viewer__loadAndUpdatePage_closure(this_0, location_1, shouldPush_2) {
    this.this_0 = this_0;
    this.location_1 = location_1;
    this.shouldPush_2 = shouldPush_2;
  }
  Viewer__loadAndUpdatePage_closure.builtin$cls = "Viewer__loadAndUpdatePage_closure";
  if (!"name" in Viewer__loadAndUpdatePage_closure)
    Viewer__loadAndUpdatePage_closure.name = "Viewer__loadAndUpdatePage_closure";
  $desc = $collectedClasses.Viewer__loadAndUpdatePage_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__loadAndUpdatePage_closure.prototype = $desc;
  function Viewer__loadAndUpdatePage_closure0(this_3, location_4, shouldPush_5, destination_6) {
    this.this_3 = this_3;
    this.location_4 = location_4;
    this.shouldPush_5 = shouldPush_5;
    this.destination_6 = destination_6;
  }
  Viewer__loadAndUpdatePage_closure0.builtin$cls = "Viewer__loadAndUpdatePage_closure0";
  if (!"name" in Viewer__loadAndUpdatePage_closure0)
    Viewer__loadAndUpdatePage_closure0.name = "Viewer__loadAndUpdatePage_closure0";
  $desc = $collectedClasses.Viewer__loadAndUpdatePage_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer__loadAndUpdatePage_closure0.prototype = $desc;
  function Viewer_getItem_closure(this_0, location_1) {
    this.this_0 = this_0;
    this.location_1 = location_1;
  }
  Viewer_getItem_closure.builtin$cls = "Viewer_getItem_closure";
  if (!"name" in Viewer_getItem_closure)
    Viewer_getItem_closure.name = "Viewer_getItem_closure";
  $desc = $collectedClasses.Viewer_getItem_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getItem_closure.prototype = $desc;
  function Viewer_getItem_closure0(this_2, location_3) {
    this.this_2 = this_2;
    this.location_3 = location_3;
  }
  Viewer_getItem_closure0.builtin$cls = "Viewer_getItem_closure0";
  if (!"name" in Viewer_getItem_closure0)
    Viewer_getItem_closure0.name = "Viewer_getItem_closure0";
  $desc = $collectedClasses.Viewer_getItem_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getItem_closure0.prototype = $desc;
  function Viewer_getMember_closure(this_0, lib_1, member_2) {
    this.this_0 = this_0;
    this.lib_1 = lib_1;
    this.member_2 = member_2;
  }
  Viewer_getMember_closure.builtin$cls = "Viewer_getMember_closure";
  if (!"name" in Viewer_getMember_closure)
    Viewer_getMember_closure.name = "Viewer_getMember_closure";
  $desc = $collectedClasses.Viewer_getMember_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getMember_closure.prototype = $desc;
  function Viewer_getMember__closure(this_3, lib_4, member_5, mem_6) {
    this.this_3 = this_3;
    this.lib_4 = lib_4;
    this.member_5 = member_5;
    this.mem_6 = mem_6;
  }
  Viewer_getMember__closure.builtin$cls = "Viewer_getMember__closure";
  if (!"name" in Viewer_getMember__closure)
    Viewer_getMember__closure.name = "Viewer_getMember__closure";
  $desc = $collectedClasses.Viewer_getMember__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getMember__closure.prototype = $desc;
  function Viewer_getMember___closure(lib_7, member_8) {
    this.lib_7 = lib_7;
    this.member_8 = member_8;
  }
  Viewer_getMember___closure.builtin$cls = "Viewer_getMember___closure";
  if (!"name" in Viewer_getMember___closure)
    Viewer_getMember___closure.name = "Viewer_getMember___closure";
  $desc = $collectedClasses.Viewer_getMember___closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getMember___closure.prototype = $desc;
  function Viewer_getMember_closure0(lib_9, member_10) {
    this.lib_9 = lib_9;
    this.member_10 = member_10;
  }
  Viewer_getMember_closure0.builtin$cls = "Viewer_getMember_closure0";
  if (!"name" in Viewer_getMember_closure0)
    Viewer_getMember_closure0.name = "Viewer_getMember_closure0";
  $desc = $collectedClasses.Viewer_getMember_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Viewer_getMember_closure0.prototype = $desc;
  function _concat_closure() {
  }
  _concat_closure.builtin$cls = "_concat_closure";
  if (!"name" in _concat_closure)
    _concat_closure.name = "_concat_closure";
  $desc = $collectedClasses._concat_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _concat_closure.prototype = $desc;
  function AnnotationElement(_annotations$__$annotations, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._annotations$__$annotations = _annotations$__$annotations;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  AnnotationElement.builtin$cls = "AnnotationElement";
  if (!"name" in AnnotationElement)
    AnnotationElement.name = "AnnotationElement";
  $desc = $collectedClasses.AnnotationElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnnotationElement.prototype = $desc;
  function PolymerElement_ChangeNotifier() {
  }
  PolymerElement_ChangeNotifier.builtin$cls = "PolymerElement_ChangeNotifier";
  if (!"name" in PolymerElement_ChangeNotifier)
    PolymerElement_ChangeNotifier.name = "PolymerElement_ChangeNotifier";
  $desc = $collectedClasses.PolymerElement_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_ChangeNotifier.prototype = $desc;
  function initApp_closure() {
  }
  initApp_closure.builtin$cls = "initApp_closure";
  if (!"name" in initApp_closure)
    initApp_closure.name = "initApp_closure";
  $desc = $collectedClasses.initApp_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initApp_closure.prototype = $desc;
  function initApp__closure() {
  }
  initApp__closure.builtin$cls = "initApp__closure";
  if (!"name" in initApp__closure)
    initApp__closure.name = "initApp__closure";
  $desc = $collectedClasses.initApp__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initApp__closure.prototype = $desc;
  function initApp__closure0() {
  }
  initApp__closure0.builtin$cls = "initApp__closure0";
  if (!"name" in initApp__closure0)
    initApp__closure0.name = "initApp__closure0";
  $desc = $collectedClasses.initApp__closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  initApp__closure0.prototype = $desc;
  function Breadcrumbs(_breadcrumbs$__$breadcrumbs, _breadcrumbs$__$lastCrumb, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._breadcrumbs$__$breadcrumbs = _breadcrumbs$__$breadcrumbs;
    this._breadcrumbs$__$lastCrumb = _breadcrumbs$__$lastCrumb;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  Breadcrumbs.builtin$cls = "Breadcrumbs";
  if (!"name" in Breadcrumbs)
    Breadcrumbs.name = "Breadcrumbs";
  $desc = $collectedClasses.Breadcrumbs;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Breadcrumbs.prototype = $desc;
  function PolymerElement_ChangeNotifier0() {
  }
  PolymerElement_ChangeNotifier0.builtin$cls = "PolymerElement_ChangeNotifier0";
  if (!"name" in PolymerElement_ChangeNotifier0)
    PolymerElement_ChangeNotifier0.name = "PolymerElement_ChangeNotifier0";
  $desc = $collectedClasses.PolymerElement_ChangeNotifier0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_ChangeNotifier0.prototype = $desc;
  function Breadcrumbs_enteredView_closure(this_0) {
    this.this_0 = this_0;
  }
  Breadcrumbs_enteredView_closure.builtin$cls = "Breadcrumbs_enteredView_closure";
  if (!"name" in Breadcrumbs_enteredView_closure)
    Breadcrumbs_enteredView_closure.name = "Breadcrumbs_enteredView_closure";
  $desc = $collectedClasses.Breadcrumbs_enteredView_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Breadcrumbs_enteredView_closure.prototype = $desc;
  function CategoryElement(_category$__$category, _category$__$items, _category$__$typedefs, _category$__$variables, _category$__$methods, _category$__$hasItems, _category$__$title, _category$__$stylizedName, _category$__$accordionStyle, _category$__$divClass, _category$__$caretStyle, _category$__$lineHeight, __isExpanded, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._category$__$category = _category$__$category;
    this._category$__$items = _category$__$items;
    this._category$__$typedefs = _category$__$typedefs;
    this._category$__$variables = _category$__$variables;
    this._category$__$methods = _category$__$methods;
    this._category$__$hasItems = _category$__$hasItems;
    this._category$__$title = _category$__$title;
    this._category$__$stylizedName = _category$__$stylizedName;
    this._category$__$accordionStyle = _category$__$accordionStyle;
    this._category$__$divClass = _category$__$divClass;
    this._category$__$caretStyle = _category$__$caretStyle;
    this._category$__$lineHeight = _category$__$lineHeight;
    this.__isExpanded = __isExpanded;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  CategoryElement.builtin$cls = "CategoryElement";
  if (!"name" in CategoryElement)
    CategoryElement.name = "CategoryElement";
  $desc = $collectedClasses.CategoryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement.prototype = $desc;
  function DartdocElement_ChangeNotifier() {
  }
  DartdocElement_ChangeNotifier.builtin$cls = "DartdocElement_ChangeNotifier";
  if (!"name" in DartdocElement_ChangeNotifier)
    DartdocElement_ChangeNotifier.name = "DartdocElement_ChangeNotifier";
  $desc = $collectedClasses.DartdocElement_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_ChangeNotifier.prototype = $desc;
  function CategoryElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  CategoryElement$created_closure.builtin$cls = "CategoryElement$created_closure";
  if (!"name" in CategoryElement$created_closure)
    CategoryElement$created_closure.name = "CategoryElement$created_closure";
  $desc = $collectedClasses.CategoryElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement$created_closure.prototype = $desc;
  function CategoryElement$created__closure() {
  }
  CategoryElement$created__closure.builtin$cls = "CategoryElement$created__closure";
  if (!"name" in CategoryElement$created__closure)
    CategoryElement$created__closure.name = "CategoryElement$created__closure";
  $desc = $collectedClasses.CategoryElement$created__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CategoryElement$created__closure.prototype = $desc;
  function ClassElement(lazyConstructors, lazyOperators, lazyInstanceFunctions, lazyStaticFunctions, lazyInstanceVariables, lazyStaticVariables, _loader, _item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this.lazyConstructors = lazyConstructors;
    this.lazyOperators = lazyOperators;
    this.lazyInstanceFunctions = lazyInstanceFunctions;
    this.lazyStaticFunctions = lazyStaticFunctions;
    this.lazyInstanceVariables = lazyInstanceVariables;
    this.lazyStaticVariables = lazyStaticVariables;
    this._loader = _loader;
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  ClassElement.builtin$cls = "ClassElement";
  if (!"name" in ClassElement)
    ClassElement.name = "ClassElement";
  $desc = $collectedClasses.ClassElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement.prototype = $desc;
  ClassElement.prototype.get$lazyConstructors = function(receiver) {
    return receiver.lazyConstructors;
  };
  ClassElement.prototype.get$lazyOperators = function(receiver) {
    return receiver.lazyOperators;
  };
  ClassElement.prototype.get$lazyInstanceFunctions = function(receiver) {
    return receiver.lazyInstanceFunctions;
  };
  ClassElement.prototype.get$lazyStaticFunctions = function(receiver) {
    return receiver.lazyStaticFunctions;
  };
  ClassElement.prototype.get$lazyInstanceVariables = function(receiver) {
    return receiver.lazyInstanceVariables;
  };
  ClassElement.prototype.get$lazyStaticVariables = function(receiver) {
    return receiver.lazyStaticVariables;
  };
  function ClassElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  ClassElement$created_closure.builtin$cls = "ClassElement$created_closure";
  if (!"name" in ClassElement$created_closure)
    ClassElement$created_closure.name = "ClassElement$created_closure";
  $desc = $collectedClasses.ClassElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement$created_closure.prototype = $desc;
  function ClassElement$created__closure() {
  }
  ClassElement$created__closure.builtin$cls = "ClassElement$created__closure";
  if (!"name" in ClassElement$created__closure)
    ClassElement$created__closure.name = "ClassElement$created__closure";
  $desc = $collectedClasses.ClassElement$created__closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement$created__closure.prototype = $desc;
  function ClassElement__loadCategories_closure() {
  }
  ClassElement__loadCategories_closure.builtin$cls = "ClassElement__loadCategories_closure";
  if (!"name" in ClassElement__loadCategories_closure)
    ClassElement__loadCategories_closure.name = "ClassElement__loadCategories_closure";
  $desc = $collectedClasses.ClassElement__loadCategories_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement__loadCategories_closure.prototype = $desc;
  function ClassElement_addSubclasses_closure(this_0) {
    this.this_0 = this_0;
  }
  ClassElement_addSubclasses_closure.builtin$cls = "ClassElement_addSubclasses_closure";
  if (!"name" in ClassElement_addSubclasses_closure)
    ClassElement_addSubclasses_closure.name = "ClassElement_addSubclasses_closure";
  $desc = $collectedClasses.ClassElement_addSubclasses_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement_addSubclasses_closure.prototype = $desc;
  function ClassElement_makeLinks_closure(this_1, hidden_2) {
    this.this_1 = this_1;
    this.hidden_2 = hidden_2;
  }
  ClassElement_makeLinks_closure.builtin$cls = "ClassElement_makeLinks_closure";
  if (!"name" in ClassElement_makeLinks_closure)
    ClassElement_makeLinks_closure.name = "ClassElement_makeLinks_closure";
  $desc = $collectedClasses.ClassElement_makeLinks_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement_makeLinks_closure.prototype = $desc;
  function ClassElement_makeLinks_closure0(box_0, hidden_3) {
    this.box_0 = box_0;
    this.hidden_3 = hidden_3;
  }
  ClassElement_makeLinks_closure0.builtin$cls = "ClassElement_makeLinks_closure0";
  if (!"name" in ClassElement_makeLinks_closure0)
    ClassElement_makeLinks_closure0.name = "ClassElement_makeLinks_closure0";
  $desc = $collectedClasses.ClassElement_makeLinks_closure0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement_makeLinks_closure0.prototype = $desc;
  function ClassElement_makeLink_closure(this_0) {
    this.this_0 = this_0;
  }
  ClassElement_makeLink_closure.builtin$cls = "ClassElement_makeLink_closure";
  if (!"name" in ClassElement_makeLink_closure)
    ClassElement_makeLink_closure.name = "ClassElement_makeLink_closure";
  $desc = $collectedClasses.ClassElement_makeLink_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClassElement_makeLink_closure.prototype = $desc;
  function ClosureElement(_closure$__$closure, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._closure$__$closure = _closure$__$closure;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  ClosureElement.builtin$cls = "ClosureElement";
  if (!"name" in ClosureElement)
    ClosureElement.name = "ClosureElement";
  $desc = $collectedClasses.ClosureElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ClosureElement.prototype = $desc;
  function PolymerElement_ChangeNotifier1() {
  }
  PolymerElement_ChangeNotifier1.builtin$cls = "PolymerElement_ChangeNotifier1";
  if (!"name" in PolymerElement_ChangeNotifier1)
    PolymerElement_ChangeNotifier1.name = "PolymerElement_ChangeNotifier1";
  $desc = $collectedClasses.PolymerElement_ChangeNotifier1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_ChangeNotifier1.prototype = $desc;
  function CommentElement(_comment$__$item, _comment$__$preview, _commentElement, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._comment$__$item = _comment$__$item;
    this._comment$__$preview = _comment$__$preview;
    this._commentElement = _commentElement;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  CommentElement.builtin$cls = "CommentElement";
  if (!"name" in CommentElement)
    CommentElement.name = "CommentElement";
  $desc = $collectedClasses.CommentElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CommentElement.prototype = $desc;
  function DivElement_Polymer(polymer$Polymer$syntax) {
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
  }
  DivElement_Polymer.builtin$cls = "DivElement_Polymer";
  if (!"name" in DivElement_Polymer)
    DivElement_Polymer.name = "DivElement_Polymer";
  $desc = $collectedClasses.DivElement_Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement_Polymer.prototype = $desc;
  Polymer.prototype.get$syntax = function(receiver) {
    return receiver.polymer$Polymer$syntax;
  };
  function DivElement_Polymer_ChangeNotifier() {
  }
  DivElement_Polymer_ChangeNotifier.builtin$cls = "DivElement_Polymer_ChangeNotifier";
  if (!"name" in DivElement_Polymer_ChangeNotifier)
    DivElement_Polymer_ChangeNotifier.name = "DivElement_Polymer_ChangeNotifier";
  $desc = $collectedClasses.DivElement_Polymer_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DivElement_Polymer_ChangeNotifier.prototype = $desc;
  function CommentElement__resolveLink_closure(this_0) {
    this.this_0 = this_0;
  }
  CommentElement__resolveLink_closure.builtin$cls = "CommentElement__resolveLink_closure";
  if (!"name" in CommentElement__resolveLink_closure)
    CommentElement__resolveLink_closure.name = "CommentElement__resolveLink_closure";
  $desc = $collectedClasses.CommentElement__resolveLink_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  CommentElement__resolveLink_closure.prototype = $desc;
  function HomeElement(_item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  HomeElement.builtin$cls = "HomeElement";
  if (!"name" in HomeElement)
    HomeElement.name = "HomeElement";
  $desc = $collectedClasses.HomeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  HomeElement.prototype = $desc;
  function ItemElement(_item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  ItemElement.builtin$cls = "ItemElement";
  if (!"name" in ItemElement)
    ItemElement.name = "ItemElement";
  $desc = $collectedClasses.ItemElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ItemElement.prototype = $desc;
  function LazyListLoader(_copier, _itemsPerFrame, _canceled) {
    this._copier = _copier;
    this._itemsPerFrame = _itemsPerFrame;
    this._canceled = _canceled;
  }
  LazyListLoader.builtin$cls = "LazyListLoader";
  if (!"name" in LazyListLoader)
    LazyListLoader.name = "LazyListLoader";
  $desc = $collectedClasses.LazyListLoader;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LazyListLoader.prototype = $desc;
  function _LazyListCopier(list, offset, src, dest) {
    this.list = list;
    this.offset = offset;
    this.src = src;
    this.dest = dest;
  }
  _LazyListCopier.builtin$cls = "_LazyListCopier";
  if (!"name" in _LazyListCopier)
    _LazyListCopier.name = "_LazyListCopier";
  $desc = $collectedClasses._LazyListCopier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  _LazyListCopier.prototype = $desc;
  function LibraryElement(lazyOperators, lazyVariables, lazyFunctions, lazyClasses, lazyTypedefs, lazyErrors, _library$_loader, _item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this.lazyOperators = lazyOperators;
    this.lazyVariables = lazyVariables;
    this.lazyFunctions = lazyFunctions;
    this.lazyClasses = lazyClasses;
    this.lazyTypedefs = lazyTypedefs;
    this.lazyErrors = lazyErrors;
    this._library$_loader = _library$_loader;
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  LibraryElement.builtin$cls = "LibraryElement";
  if (!"name" in LibraryElement)
    LibraryElement.name = "LibraryElement";
  $desc = $collectedClasses.LibraryElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryElement.prototype = $desc;
  LibraryElement.prototype.get$lazyOperators = function(receiver) {
    return receiver.lazyOperators;
  };
  LibraryElement.prototype.get$lazyVariables = function(receiver) {
    return receiver.lazyVariables;
  };
  LibraryElement.prototype.get$lazyFunctions = function(receiver) {
    return receiver.lazyFunctions;
  };
  LibraryElement.prototype.get$lazyClasses = function(receiver) {
    return receiver.lazyClasses;
  };
  LibraryElement.prototype.get$lazyTypedefs = function(receiver) {
    return receiver.lazyTypedefs;
  };
  LibraryElement.prototype.get$lazyErrors = function(receiver) {
    return receiver.lazyErrors;
  };
  function LibraryPanel(change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  LibraryPanel.builtin$cls = "LibraryPanel";
  if (!"name" in LibraryPanel)
    LibraryPanel.name = "LibraryPanel";
  $desc = $collectedClasses.LibraryPanel;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryPanel.prototype = $desc;
  function LibraryPanel_shadowRootReady_closure(this_0) {
    this.this_0 = this_0;
  }
  LibraryPanel_shadowRootReady_closure.builtin$cls = "LibraryPanel_shadowRootReady_closure";
  if (!"name" in LibraryPanel_shadowRootReady_closure)
    LibraryPanel_shadowRootReady_closure.name = "LibraryPanel_shadowRootReady_closure";
  $desc = $collectedClasses.LibraryPanel_shadowRootReady_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LibraryPanel_shadowRootReady_closure.prototype = $desc;
  function LinkElement(_link$__$type, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._link$__$type = _link$__$type;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  LinkElement.builtin$cls = "LinkElement";
  if (!"name" in LinkElement)
    LinkElement.name = "LinkElement";
  $desc = $collectedClasses.LinkElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement.prototype = $desc;
  function PolymerElement_ChangeNotifier2() {
  }
  PolymerElement_ChangeNotifier2.builtin$cls = "PolymerElement_ChangeNotifier2";
  if (!"name" in PolymerElement_ChangeNotifier2)
    PolymerElement_ChangeNotifier2.name = "PolymerElement_ChangeNotifier2";
  $desc = $collectedClasses.PolymerElement_ChangeNotifier2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_ChangeNotifier2.prototype = $desc;
  function LinkElement_typeChanged_closure(this_0) {
    this.this_0 = this_0;
  }
  LinkElement_typeChanged_closure.builtin$cls = "LinkElement_typeChanged_closure";
  if (!"name" in LinkElement_typeChanged_closure)
    LinkElement_typeChanged_closure.name = "LinkElement_typeChanged_closure";
  $desc = $collectedClasses.LinkElement_typeChanged_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  LinkElement_typeChanged_closure.prototype = $desc;
  function MainElement(_main0$__$sdkVersionString, _main0$__$pageContentClass, _main0$__$shouldShowLibraryPanel, _main0$__$shouldShowLibraryMinimap, _main0$__$shouldShowClassMinimap, _main0$__$showOrHideLibraries, _main0$__$showOrHideMinimap, _main0$__$showOrHideInherited, _main0$__$showOrHideObjectMembers, _main0$__$showOrHidePackages, hostDocsVersion, _openedAt, homePage, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._main0$__$sdkVersionString = _main0$__$sdkVersionString;
    this._main0$__$pageContentClass = _main0$__$pageContentClass;
    this._main0$__$shouldShowLibraryPanel = _main0$__$shouldShowLibraryPanel;
    this._main0$__$shouldShowLibraryMinimap = _main0$__$shouldShowLibraryMinimap;
    this._main0$__$shouldShowClassMinimap = _main0$__$shouldShowClassMinimap;
    this._main0$__$showOrHideLibraries = _main0$__$showOrHideLibraries;
    this._main0$__$showOrHideMinimap = _main0$__$showOrHideMinimap;
    this._main0$__$showOrHideInherited = _main0$__$showOrHideInherited;
    this._main0$__$showOrHideObjectMembers = _main0$__$showOrHideObjectMembers;
    this._main0$__$showOrHidePackages = _main0$__$showOrHidePackages;
    this.hostDocsVersion = hostDocsVersion;
    this._openedAt = _openedAt;
    this.homePage = homePage;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  MainElement.builtin$cls = "MainElement";
  if (!"name" in MainElement)
    MainElement.name = "MainElement";
  $desc = $collectedClasses.MainElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MainElement.prototype = $desc;
  MainElement.prototype.get$hostDocsVersion = function(receiver) {
    return receiver.hostDocsVersion;
  };
  MainElement.prototype.set$hostDocsVersion = function(receiver, v) {
    return receiver.hostDocsVersion = v;
  };
  MainElement.prototype.get$homePage = function(receiver) {
    return receiver.homePage;
  };
  function DartdocElement_ChangeNotifier1() {
  }
  DartdocElement_ChangeNotifier1.builtin$cls = "DartdocElement_ChangeNotifier1";
  if (!"name" in DartdocElement_ChangeNotifier1)
    DartdocElement_ChangeNotifier1.name = "DartdocElement_ChangeNotifier1";
  $desc = $collectedClasses.DartdocElement_ChangeNotifier1;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_ChangeNotifier1.prototype = $desc;
  function MainElement_collapseSearchAndOptionsIfNeeded_closure() {
  }
  MainElement_collapseSearchAndOptionsIfNeeded_closure.builtin$cls = "MainElement_collapseSearchAndOptionsIfNeeded_closure";
  if (!"name" in MainElement_collapseSearchAndOptionsIfNeeded_closure)
    MainElement_collapseSearchAndOptionsIfNeeded_closure.name = "MainElement_collapseSearchAndOptionsIfNeeded_closure";
  $desc = $collectedClasses.MainElement_collapseSearchAndOptionsIfNeeded_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MainElement_collapseSearchAndOptionsIfNeeded_closure.prototype = $desc;
  function NullTreeSanitizer() {
  }
  NullTreeSanitizer.builtin$cls = "NullTreeSanitizer";
  if (!"name" in NullTreeSanitizer)
    NullTreeSanitizer.name = "NullTreeSanitizer";
  $desc = $collectedClasses.NullTreeSanitizer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  NullTreeSanitizer.prototype = $desc;
  function DartdocElement() {
  }
  DartdocElement.builtin$cls = "DartdocElement";
  if (!"name" in DartdocElement)
    DartdocElement.name = "DartdocElement";
  $desc = $collectedClasses.DartdocElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement.prototype = $desc;
  function MemberElement() {
  }
  MemberElement.builtin$cls = "MemberElement";
  if (!"name" in MemberElement)
    MemberElement.name = "MemberElement";
  $desc = $collectedClasses.MemberElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MemberElement.prototype = $desc;
  function DartdocElement_ChangeNotifier0() {
  }
  DartdocElement_ChangeNotifier0.builtin$cls = "DartdocElement_ChangeNotifier0";
  if (!"name" in DartdocElement_ChangeNotifier0)
    DartdocElement_ChangeNotifier0.name = "DartdocElement_ChangeNotifier0";
  $desc = $collectedClasses.DartdocElement_ChangeNotifier0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_ChangeNotifier0.prototype = $desc;
  function InheritedElement() {
  }
  InheritedElement.builtin$cls = "InheritedElement";
  if (!"name" in InheritedElement)
    InheritedElement.name = "InheritedElement";
  $desc = $collectedClasses.InheritedElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InheritedElement.prototype = $desc;
  function MemberElement_ChangeNotifier() {
  }
  MemberElement_ChangeNotifier.builtin$cls = "MemberElement_ChangeNotifier";
  if (!"name" in MemberElement_ChangeNotifier)
    MemberElement_ChangeNotifier.name = "MemberElement_ChangeNotifier";
  $desc = $collectedClasses.MemberElement_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MemberElement_ChangeNotifier.prototype = $desc;
  function InheritedElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  InheritedElement$created_closure.builtin$cls = "InheritedElement$created_closure";
  if (!"name" in InheritedElement$created_closure)
    InheritedElement$created_closure.name = "InheritedElement$created_closure";
  $desc = $collectedClasses.InheritedElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InheritedElement$created_closure.prototype = $desc;
  function MethodElement(_method$__$isNotConstructor, _method$__$modifiers, _method$__$constantModifier, _method$__$staticModifier, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, _member$__$inheritedFrom, _member$__$commentFrom, _member$__$isInherited, _member$__$hasInheritedComment, _member$__$shouldShowComment, _member$__$shouldShowCommentFrom, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, _item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._method$__$isNotConstructor = _method$__$isNotConstructor;
    this._method$__$modifiers = _method$__$modifiers;
    this._method$__$constantModifier = _method$__$constantModifier;
    this._method$__$staticModifier = _method$__$staticModifier;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this._member$__$inheritedFrom = _member$__$inheritedFrom;
    this._member$__$commentFrom = _member$__$commentFrom;
    this._member$__$isInherited = _member$__$isInherited;
    this._member$__$hasInheritedComment = _member$__$hasInheritedComment;
    this._member$__$shouldShowComment = _member$__$shouldShowComment;
    this._member$__$shouldShowCommentFrom = _member$__$shouldShowCommentFrom;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  MethodElement.builtin$cls = "MethodElement";
  if (!"name" in MethodElement)
    MethodElement.name = "MethodElement";
  $desc = $collectedClasses.MethodElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MethodElement.prototype = $desc;
  function InheritedElement_ChangeNotifier() {
  }
  InheritedElement_ChangeNotifier.builtin$cls = "InheritedElement_ChangeNotifier";
  if (!"name" in InheritedElement_ChangeNotifier)
    InheritedElement_ChangeNotifier.name = "InheritedElement_ChangeNotifier";
  $desc = $collectedClasses.InheritedElement_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InheritedElement_ChangeNotifier.prototype = $desc;
  function MinimapElementClass(_item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  MinimapElementClass.builtin$cls = "MinimapElementClass";
  if (!"name" in MinimapElementClass)
    MinimapElementClass.name = "MinimapElementClass";
  $desc = $collectedClasses.MinimapElementClass;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementClass.prototype = $desc;
  function MinimapElement(_minimap_element$__$category, _minimap_element$__$item, _minimap_element$__$camelCaseName, _minimap_element$__$categoryLink, _minimap_element$__$itemsToShow, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._minimap_element$__$category = _minimap_element$__$category;
    this._minimap_element$__$item = _minimap_element$__$item;
    this._minimap_element$__$camelCaseName = _minimap_element$__$camelCaseName;
    this._minimap_element$__$categoryLink = _minimap_element$__$categoryLink;
    this._minimap_element$__$itemsToShow = _minimap_element$__$itemsToShow;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  MinimapElement.builtin$cls = "MinimapElement";
  if (!"name" in MinimapElement)
    MinimapElement.name = "MinimapElement";
  $desc = $collectedClasses.MinimapElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElement.prototype = $desc;
  function PolymerElement_ChangeNotifier3() {
  }
  PolymerElement_ChangeNotifier3.builtin$cls = "PolymerElement_ChangeNotifier3";
  if (!"name" in PolymerElement_ChangeNotifier3)
    PolymerElement_ChangeNotifier3.name = "PolymerElement_ChangeNotifier3";
  $desc = $collectedClasses.PolymerElement_ChangeNotifier3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_ChangeNotifier3.prototype = $desc;
  function MinimapElement$created_closure(this_0) {
    this.this_0 = this_0;
  }
  MinimapElement$created_closure.builtin$cls = "MinimapElement$created_closure";
  if (!"name" in MinimapElement$created_closure)
    MinimapElement$created_closure.name = "MinimapElement$created_closure";
  $desc = $collectedClasses.MinimapElement$created_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElement$created_closure.prototype = $desc;
  function MinimapElementLibrary(_item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  MinimapElementLibrary.builtin$cls = "MinimapElementLibrary";
  if (!"name" in MinimapElementLibrary)
    MinimapElementLibrary.name = "MinimapElementLibrary";
  $desc = $collectedClasses.MinimapElementLibrary;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MinimapElementLibrary.prototype = $desc;
  function PageElement(_page$__$item, _page$__$isLibrary, _page$__$isMethod, _page$__$isClass, _page$__$isTypedef, _page$__$isHome, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._page$__$item = _page$__$item;
    this._page$__$isLibrary = _page$__$isLibrary;
    this._page$__$isMethod = _page$__$isMethod;
    this._page$__$isClass = _page$__$isClass;
    this._page$__$isTypedef = _page$__$isTypedef;
    this._page$__$isHome = _page$__$isHome;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  PageElement.builtin$cls = "PageElement";
  if (!"name" in PageElement)
    PageElement.name = "PageElement";
  $desc = $collectedClasses.PageElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PageElement.prototype = $desc;
  function DartdocElement_ChangeNotifier2() {
  }
  DartdocElement_ChangeNotifier2.builtin$cls = "DartdocElement_ChangeNotifier2";
  if (!"name" in DartdocElement_ChangeNotifier2)
    DartdocElement_ChangeNotifier2.name = "DartdocElement_ChangeNotifier2";
  $desc = $collectedClasses.DartdocElement_ChangeNotifier2;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_ChangeNotifier2.prototype = $desc;
  function ParameterElement(_parameters$__$parameters, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._parameters$__$parameters = _parameters$__$parameters;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  ParameterElement.builtin$cls = "ParameterElement";
  if (!"name" in ParameterElement)
    ParameterElement.name = "ParameterElement";
  $desc = $collectedClasses.ParameterElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  ParameterElement.prototype = $desc;
  function DartdocElement_ChangeNotifier3() {
  }
  DartdocElement_ChangeNotifier3.builtin$cls = "DartdocElement_ChangeNotifier3";
  if (!"name" in DartdocElement_ChangeNotifier3)
    DartdocElement_ChangeNotifier3.name = "DartdocElement_ChangeNotifier3";
  $desc = $collectedClasses.DartdocElement_ChangeNotifier3;
  if ($desc instanceof Array)
    $desc = $desc[1];
  DartdocElement_ChangeNotifier3.prototype = $desc;
  function Result(_results$__$item, _results$__$descriptiveName, _results$__$descriptiveType, _results$__$outerLibrary, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._results$__$item = _results$__$item;
    this._results$__$descriptiveName = _results$__$descriptiveName;
    this._results$__$descriptiveType = _results$__$descriptiveType;
    this._results$__$outerLibrary = _results$__$outerLibrary;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  Result.builtin$cls = "Result";
  if (!"name" in Result)
    Result.name = "Result";
  $desc = $collectedClasses.Result;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Result.prototype = $desc;
  function AnchorElement_Polymer(polymer$Polymer$syntax) {
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
  }
  AnchorElement_Polymer.builtin$cls = "AnchorElement_Polymer";
  if (!"name" in AnchorElement_Polymer)
    AnchorElement_Polymer.name = "AnchorElement_Polymer";
  $desc = $collectedClasses.AnchorElement_Polymer;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement_Polymer.prototype = $desc;
  Polymer.prototype.get$syntax = function(receiver) {
    return receiver.polymer$Polymer$syntax;
  };
  function AnchorElement_Polymer_ChangeNotifier() {
  }
  AnchorElement_Polymer_ChangeNotifier.builtin$cls = "AnchorElement_Polymer_ChangeNotifier";
  if (!"name" in AnchorElement_Polymer_ChangeNotifier)
    AnchorElement_Polymer_ChangeNotifier.name = "AnchorElement_Polymer_ChangeNotifier";
  $desc = $collectedClasses.AnchorElement_Polymer_ChangeNotifier;
  if ($desc instanceof Array)
    $desc = $desc[1];
  AnchorElement_Polymer_ChangeNotifier.prototype = $desc;
  function Search(_search$__$searchQuery, _search$__$isFocused, _search$__$results, _search$__$dropdownOpen, currentIndex, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._search$__$searchQuery = _search$__$searchQuery;
    this._search$__$isFocused = _search$__$isFocused;
    this._search$__$results = _search$__$results;
    this._search$__$dropdownOpen = _search$__$dropdownOpen;
    this.currentIndex = currentIndex;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  Search.builtin$cls = "Search";
  if (!"name" in Search)
    Search.name = "Search";
  $desc = $collectedClasses.Search;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Search.prototype = $desc;
  function PolymerElement_ChangeNotifier4() {
  }
  PolymerElement_ChangeNotifier4.builtin$cls = "PolymerElement_ChangeNotifier4";
  if (!"name" in PolymerElement_ChangeNotifier4)
    PolymerElement_ChangeNotifier4.name = "PolymerElement_ChangeNotifier4";
  $desc = $collectedClasses.PolymerElement_ChangeNotifier4;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_ChangeNotifier4.prototype = $desc;
  function Search_onBlurCallback_closure(this_0) {
    this.this_0 = this_0;
  }
  Search_onBlurCallback_closure.builtin$cls = "Search_onBlurCallback_closure";
  if (!"name" in Search_onBlurCallback_closure)
    Search_onBlurCallback_closure.name = "Search_onBlurCallback_closure";
  $desc = $collectedClasses.Search_onBlurCallback_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  Search_onBlurCallback_closure.prototype = $desc;
  function TypeElement(_type$__$type, _child, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._type$__$type = _type$__$type;
    this._child = _child;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  TypeElement.builtin$cls = "TypeElement";
  if (!"name" in TypeElement)
    TypeElement.name = "TypeElement";
  $desc = $collectedClasses.TypeElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeElement.prototype = $desc;
  function PolymerElement_ChangeNotifier5() {
  }
  PolymerElement_ChangeNotifier5.builtin$cls = "PolymerElement_ChangeNotifier5";
  if (!"name" in PolymerElement_ChangeNotifier5)
    PolymerElement_ChangeNotifier5.name = "PolymerElement_ChangeNotifier5";
  $desc = $collectedClasses.PolymerElement_ChangeNotifier5;
  if ($desc instanceof Array)
    $desc = $desc[1];
  PolymerElement_ChangeNotifier5.prototype = $desc;
  function TypeElement_createInner_closure() {
  }
  TypeElement_createInner_closure.builtin$cls = "TypeElement_createInner_closure";
  if (!"name" in TypeElement_createInner_closure)
    TypeElement_createInner_closure.name = "TypeElement_createInner_closure";
  $desc = $collectedClasses.TypeElement_createInner_closure;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypeElement_createInner_closure.prototype = $desc;
  function TypedefElement(_item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  TypedefElement.builtin$cls = "TypedefElement";
  if (!"name" in TypedefElement)
    TypedefElement.name = "TypedefElement";
  $desc = $collectedClasses.TypedefElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  TypedefElement.prototype = $desc;
  function VariableElement(_variable$__$annotations, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, _member$__$inheritedFrom, _member$__$commentFrom, _member$__$isInherited, _member$__$hasInheritedComment, _member$__$shouldShowComment, _member$__$shouldShowCommentFrom, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, _item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._variable$__$annotations = _variable$__$annotations;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this._member$__$inheritedFrom = _member$__$inheritedFrom;
    this._member$__$commentFrom = _member$__$commentFrom;
    this._member$__$isInherited = _member$__$isInherited;
    this._member$__$hasInheritedComment = _member$__$hasInheritedComment;
    this._member$__$shouldShowComment = _member$__$shouldShowComment;
    this._member$__$shouldShowCommentFrom = _member$__$shouldShowCommentFrom;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  VariableElement.builtin$cls = "VariableElement";
  if (!"name" in VariableElement)
    VariableElement.name = "VariableElement";
  $desc = $collectedClasses.VariableElement;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VariableElement.prototype = $desc;
  function InheritedElement_ChangeNotifier0() {
  }
  InheritedElement_ChangeNotifier0.builtin$cls = "InheritedElement_ChangeNotifier0";
  if (!"name" in InheritedElement_ChangeNotifier0)
    InheritedElement_ChangeNotifier0.name = "InheritedElement_ChangeNotifier0";
  $desc = $collectedClasses.InheritedElement_ChangeNotifier0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  InheritedElement_ChangeNotifier0.prototype = $desc;
  function VariableHeading(_variable_heading$__$getter, _variable_heading$__$name, _variable_heading$__$isNotSetter, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, _item, _member$__$idName, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, change_notifier$ChangeNotifier$_changes, change_notifier$ChangeNotifier$_records, polymer$Polymer$_declaration, polymer$Polymer$_observers, polymer$Polymer$_unbound, polymer$Polymer$_unbindAllJob, polymer$Polymer$_propertyObserver, polymer$Polymer$syntax, polymer$Polymer$_shadowRoots, polymer$Polymer$$) {
    this._variable_heading$__$getter = _variable_heading$__$getter;
    this._variable_heading$__$name = _variable_heading$__$name;
    this._variable_heading$__$isNotSetter = _variable_heading$__$isNotSetter;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this._item = _item;
    this._member$__$idName = _member$__$idName;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.change_notifier$ChangeNotifier$_changes = change_notifier$ChangeNotifier$_changes;
    this.change_notifier$ChangeNotifier$_records = change_notifier$ChangeNotifier$_records;
    this.polymer$Polymer$_declaration = polymer$Polymer$_declaration;
    this.polymer$Polymer$_observers = polymer$Polymer$_observers;
    this.polymer$Polymer$_unbound = polymer$Polymer$_unbound;
    this.polymer$Polymer$_unbindAllJob = polymer$Polymer$_unbindAllJob;
    this.polymer$Polymer$_propertyObserver = polymer$Polymer$_propertyObserver;
    this.polymer$Polymer$syntax = polymer$Polymer$syntax;
    this.polymer$Polymer$_shadowRoots = polymer$Polymer$_shadowRoots;
    this.polymer$Polymer$$ = polymer$Polymer$$;
  }
  VariableHeading.builtin$cls = "VariableHeading";
  if (!"name" in VariableHeading)
    VariableHeading.name = "VariableHeading";
  $desc = $collectedClasses.VariableHeading;
  if ($desc instanceof Array)
    $desc = $desc[1];
  VariableHeading.prototype = $desc;
  function MemberElement_ChangeNotifier0() {
  }
  MemberElement_ChangeNotifier0.builtin$cls = "MemberElement_ChangeNotifier0";
  if (!"name" in MemberElement_ChangeNotifier0)
    MemberElement_ChangeNotifier0.name = "MemberElement_ChangeNotifier0";
  $desc = $collectedClasses.MemberElement_ChangeNotifier0;
  if ($desc instanceof Array)
    $desc = $desc[1];
  MemberElement_ChangeNotifier0.prototype = $desc;
  return [HtmlElement, _EntryArray, AnchorElement, AnimationEvent, AreaElement, AudioElement, AutocompleteErrorEvent, BRElement, BaseElement, BeforeLoadEvent, BeforeUnloadEvent, Blob, BodyElement, ButtonElement, CDataSection, CanvasElement, CharacterData, CloseEvent, Comment, CompositionEvent, ContentElement, CssFontFaceLoadEvent, CssStyleDeclaration, CustomEvent, DListElement, DataListElement, DetailsElement, DeviceMotionEvent, DeviceOrientationEvent, DialogElement, DivElement, Document, DocumentFragment, DomError, DomException, DomImplementation, Element, EmbedElement, ErrorEvent, Event, EventTarget, FieldSetElement, File, FileError, FocusEvent, FormElement, HRElement, HashChangeEvent, HeadElement, HeadingElement, History, HtmlCollection, HtmlDocument, HtmlFormControlsCollection, HtmlHtmlElement, HtmlOptionsCollection, HttpRequest, HttpRequestEventTarget, IFrameElement, ImageData, ImageElement, InputElement, InstallEvent, InstallPhaseEvent, KeyboardEvent, KeygenElement, LIElement, LabelElement, LegendElement, LinkElement0, Location, MapElement, MediaElement, MediaError, MediaKeyError, MediaKeyEvent, MediaKeyMessageEvent, MediaKeyNeededEvent, MediaStream, MediaStreamEvent, MediaStreamTrack, MediaStreamTrackEvent, MenuElement, MessageEvent, MetaElement, MeterElement, MidiConnectionEvent, MidiInput, MidiMessageEvent, MidiOutput, MidiPort, ModElement, MouseEvent, MutationObserver, MutationRecord, Navigator, NavigatorUserMediaError, Node, NodeList, OListElement, ObjectElement, OptGroupElement, OptionElement, OutputElement, OverflowEvent, PageTransitionEvent, ParagraphElement, ParamElement, PopStateEvent, PositionError, PreElement, ProcessingInstruction, ProgressElement, ProgressEvent, QuoteElement, Range, ResourceProgressEvent, RtcDataChannelEvent, RtcDtmfToneChangeEvent, RtcIceCandidateEvent, ScriptElement0, SecurityPolicyViolationEvent, SelectElement, ShadowElement, ShadowRoot, SourceElement, SpanElement, SpeechInputEvent, SpeechInputResult, SpeechRecognitionAlternative, SpeechRecognitionError, SpeechRecognitionEvent, SpeechRecognitionResult, SpeechSynthesisEvent, StorageEvent, StyleElement, TableCaptionElement, TableCellElement, TableColElement, TableElement, TableRowElement, TableSectionElement, TemplateElement, Text, TextAreaElement, TextEvent, TextTrack, TitleElement, TouchEvent, TrackElement, TrackEvent, TransitionEvent, UIEvent, UListElement, UnknownElement, VideoElement, WheelEvent, Window, XmlDocument, _Attr, _ClientRect, _DocumentType, _HTMLAppletElement, _HTMLDirectoryElement, _HTMLFontElement, _HTMLFrameElement, _HTMLFrameSetElement, _HTMLMarqueeElement, _MutationEvent, _NamedNodeMap, _Notation, _SpeechInputResultList, _SpeechRecognitionResultList, _XMLHttpRequestProgressEvent, KeyRange, VersionChangeEvent, AElement, AltGlyphElement, AnimateElement, AnimateMotionElement, AnimateTransformElement, AnimatedEnumeration, AnimatedLength, AnimatedLengthList, AnimatedNumber, AnimatedNumberList, AnimatedString, AnimationElement, CircleElement, ClipPathElement, DefsElement, DescElement, DiscardElement, EllipseElement, FEBlendElement, FEColorMatrixElement, FEComponentTransferElement, FECompositeElement, FEConvolveMatrixElement, FEDiffuseLightingElement, FEDisplacementMapElement, FEDistantLightElement, FEFloodElement, FEFuncAElement, FEFuncBElement, FEFuncGElement, FEFuncRElement, FEGaussianBlurElement, FEImageElement, FEMergeElement, FEMergeNodeElement, FEMorphologyElement, FEOffsetElement, FEPointLightElement, FESpecularLightingElement, FESpotLightElement, FETileElement, FETurbulenceElement, FilterElement, ForeignObjectElement, GElement, GeometryElement, GraphicsElement, ImageElement0, LineElement, LinearGradientElement, MarkerElement, MaskElement, MetadataElement, PathElement, PatternElement, PolygonElement, PolylineElement, RadialGradientElement, RectElement, ScriptElement, SetElement, StopElement, StyleElement0, SvgElement, SvgSvgElement, SwitchElement, SymbolElement, TSpanElement, TextContentElement, TextElement, TextPathElement, TextPositioningElement, TitleElement0, UseElement, ViewElement, ZoomEvent, _GradientElement, _SVGAltGlyphDefElement, _SVGAltGlyphItemElement, _SVGComponentTransferFunctionElement, _SVGCursorElement, _SVGFEDropShadowElement, _SVGFontElement, _SVGFontFaceElement, _SVGFontFaceFormatElement, _SVGFontFaceNameElement, _SVGFontFaceSrcElement, _SVGFontFaceUriElement, _SVGGlyphElement, _SVGGlyphRefElement, _SVGHKernElement, _SVGMPathElement, _SVGMissingGlyphElement, _SVGVKernElement, AudioProcessingEvent, OfflineAudioCompletionEvent, ContextEvent, SqlError, NativeByteBuffer, NativeTypedData, NativeByteData, NativeFloat32List, NativeFloat64List, NativeInt16List, NativeInt32List, NativeInt8List, NativeUint16List, NativeUint32List, NativeUint8ClampedList, NativeUint8List, JS_CONST, Interceptor, JSBool, JSNull, JavaScriptObject, PlainJavaScriptObject, UnknownJavaScriptObject, JSArray, JSNumber, JSInt, JSDouble, JSString, _CodeUnits, startRootIsolate_closure, startRootIsolate_closure0, _Manager, _IsolateContext, _IsolateContext_handlePing_respond, _EventLoop, _EventLoop__runHelper_next, _IsolateEvent, _MainManagerStub, IsolateNatives__processWorkerMessage_closure, IsolateNatives__startIsolate_runStartFunction, _BaseSendPort, _NativeJsSendPort, _NativeJsSendPort_send_closure, _WorkerSendPort, RawReceivePortImpl, _JsSerializer, _JsCopier, _JsDeserializer, _JsVisitedMap, _MessageTraverserVisitedMap, _MessageTraverser, _Copier, _Copier_visitMap_closure, _Serializer, _Deserializer, TimerImpl, TimerImpl_internalCallback, TimerImpl_internalCallback0, CapabilityImpl, ConstantMap, ConstantStringMap, ConstantStringMap_values_closure, _ConstantMapKeyIterable, JSInvocationMirror, ReflectionInfo, ReflectionInfo_sortedIndex_closure, Primitives_functionNoSuchMethod_closure, Primitives_applyFunction_closure, TypeErrorDecoder, NullError, JsNoSuchMethodError, UnknownJsTypeError, unwrapException_saveStackTrace, _StackTrace, invokeClosure_closure, invokeClosure_closure0, invokeClosure_closure1, invokeClosure_closure2, invokeClosure_closure3, Closure0, TearOffClosure, BoundClosure, CastErrorImplementation, RuntimeError, RuntimeType, RuntimeFunctionType, DynamicRuntimeType, RuntimeTypePlain, RuntimeTypeGeneric, TypeImpl, initHooks_closure, initHooks_closure0, initHooks_closure1, JSSyntaxRegExp, _MatchImplementation, _AllMatchesIterable, _AllMatchesIterator, StringMatch, main_closure, main_closure0, main_closure1, main_closure2, main_closure3, main_closure4, main_closure5, main_closure6, main_closure7, main_closure8, main_closure9, main_closure10, main_closure11, main_closure12, main_closure13, main_closure14, main_closure15, main_closure16, main_closure17, main_closure18, main_closure19, main_closure20, main_closure21, main_closure22, main_closure23, main_closure24, main_closure25, main_closure26, main_closure27, main_closure28, main_closure29, main_closure30, main_closure31, main_closure32, main_closure33, main_closure34, main_closure35, main_closure36, main_closure37, main_closure38, main_closure39, main_closure40, main_closure41, main_closure42, main_closure43, main_closure44, main_closure45, main_closure46, main_closure47, main_closure48, main_closure49, main_closure50, main_closure51, main_closure52, main_closure53, main_closure54, main_closure55, main_closure56, main_closure57, main_closure58, main_closure59, main_closure60, main_closure61, main_closure62, main_closure63, main_closure64, main_closure65, main_closure66, main_closure67, main_closure68, main_closure69, main_closure70, main_closure71, main_closure72, main_closure73, main_closure74, main_closure75, main_closure76, main_closure77, main_closure78, main_closure79, main_closure80, main_closure81, main_closure82, main_closure83, main_closure84, main_closure85, main_closure86, main_closure87, main_closure88, main_closure89, main_closure90, main_closure91, main_closure92, main_closure93, main_closure94, main_closure95, main_closure96, main_closure97, main_closure98, main_closure99, main_closure100, main_closure101, main_closure102, main_closure103, main_closure104, main_closure105, main_closure106, main_closure107, main_closure108, main_closure109, main_closure110, main_closure111, main_closure112, main_closure113, main_closure114, main_closure115, main_closure116, main_closure117, main_closure118, main_closure119, main_closure120, main_closure121, main_closure122, main_closure123, main_closure124, main_closure125, main_closure126, main_closure127, main_closure128, main_closure129, main_closure130, main_closure131, main_closure132, main_closure133, main_closure134, main_closure135, main_closure136, main_closure137, main_closure138, main_closure139, main_closure140, main_closure141, main_closure142, main_closure143, main_closure144, main_closure145, main_closure146, main_closure147, main_closure148, main_closure149, main_closure150, main_closure151, main_closure152, main_closure153, main_closure154, main_closure155, main_closure156, main_closure157, main_closure158, main_closure159, main_closure160, main_closure161, main_closure162, main_closure163, main_closure164, main_closure165, main_closure166, main_closure167, main_closure168, main_closure169, main_closure170, main_closure171, main_closure172, main_closure173, main_closure174, main_closure175, main_closure176, main_closure177, main_closure178, main_closure179, main_closure180, main_closure181, main_closure182, main_closure183, main_closure184, main_closure185, main_closure186, main_closure187, main_closure188, main_closure189, main_closure190, main_closure191, main_closure192, main_closure193, main_closure194, main_closure195, main_closure196, main_closure197, main_closure198, main_closure199, main_closure200, main_closure201, main_closure202, main_closure203, main_closure204, main_closure205, main_closure206, main_closure207, main_closure208, main_closure209, main_closure210, main_closure211, main_closure212, main_closure213, main_closure214, main_closure215, main_closure216, main_closure217, main_closure218, main_closure219, main_closure220, main_closure221, main_closure222, main_closure223, main_closure224, main_closure225, main_closure226, main_closure227, main_closure228, main_closure229, Container, Category, Category_memberNamed_closure, Category$forClasses_closure, Category$forVariables_closure, Category$forVariables_closure0, Category$forVariables_closure1, Category$forFunctions_closure, Category$forTypedefs_closure, Category_addInheritedItem_closure, Category_filteredContent_closure, Filter, Item, Container_ChangeNotifier, _sort_closure, _sort__closure, Home, Home_closure, Home__closure1, Home_closure0, Home__closure, Home__closure0, Home_makeMainLibrarySpecial_closure, Home_makeMainLibrarySpecial_closure0, Home_makeMainLibrarySpecial_closure1, Home_memberNamed_closure, LazyItem, LazyItem_load_closure, Library, Class, Class_addToHierarchy_closure, Class_addToHierarchy__closure, Class_loadValues_closure, Class_loadValues_closure0, Class_loadValues_closure1, Class__addVariable_closure, Class__addMethod_closure, AnnotationGroup, AnnotationGroup_closure, AnnotationGroup__closure, AnnotationGroup__closure0, AnnotationGroup_closure0, Annotation, Annotation_hashCode_closure, Parameterized, Parameterized_getParameters_closure, Parameterized_parameterNamed_closure, Parameterized_parameterNamed_closure0, Typedef, Method, Closure, Parameter, Variable, NestedType, NestedType_NestedType_closure, LinkableType, ListIterable, SubListIterable, ListIterator, MappedIterable, EfficientLengthMappedIterable, MappedIterator, MappedListIterable, WhereIterable, WhereIterator, ExpandIterable, ExpandIterator, EmptyIterator, FixedLengthListMixin, UnmodifiableListMixin, UnmodifiableListBase, ReversedListIterable, Symbol, _AsyncRun__scheduleImmediateJsOverride_internalCallback, _AsyncError, _BroadcastStream, _BroadcastSubscription, _BroadcastStreamController, _SyncBroadcastStreamController, _SyncBroadcastStreamController__sendData_closure, _SyncBroadcastStreamController__sendError_closure, _SyncBroadcastStreamController__sendDone_closure, _AsyncBroadcastStreamController, Future, Future_wait_handleError, Future_wait_closure, _Completer, _AsyncCompleter, _SyncCompleter, _Future, _Future__addListener_closure, _Future__chainForeignFuture_closure, _Future__chainForeignFuture_closure0, _Future__asyncComplete_closure, _Future__asyncComplete_closure0, _Future__asyncCompleteError_closure, _Future__propagateToListeners_handleValueCallback, _Future__propagateToListeners_handleError, _Future__propagateToListeners_handleWhenCompleteCallback, _Future__propagateToListeners_handleWhenCompleteCallback_closure, _Future__propagateToListeners_handleWhenCompleteCallback_closure0, _AsyncCallbackEntry, Stream, Stream_fold_closure, Stream_fold__closure, Stream_fold__closure0, Stream_fold_closure1, Stream_fold_closure0, Stream_join_closure, Stream_join_closure1, Stream_join_closure0, Stream_contains_closure, Stream_contains__closure, Stream_contains__closure0, Stream_contains_closure0, Stream_forEach_closure, Stream_forEach__closure, Stream_forEach__closure0, Stream_forEach_closure0, Stream_any_closure, Stream_any__closure, Stream_any__closure0, Stream_any_closure0, Stream_length_closure, Stream_length_closure0, Stream_isEmpty_closure, Stream_isEmpty_closure0, Stream_toList_closure, Stream_toList_closure0, Stream_first_closure, Stream_first_closure0, Stream_last_closure, Stream_last_closure0, Stream_firstWhere_closure, Stream_firstWhere__closure, Stream_firstWhere__closure0, Stream_firstWhere_closure0, StreamSubscription, _ControllerStream, _ControllerSubscription, _EventSink, _BufferingStreamSubscription, _BufferingStreamSubscription__sendError_sendError, _BufferingStreamSubscription__sendDone_sendDone, _StreamImpl, _DelayedEvent, _DelayedData, _DelayedError, _DelayedDone, _PendingEvents, _PendingEvents_schedule_closure, _StreamImplEvents, _cancelAndError_closure, _cancelAndErrorClosure_closure, _cancelAndValue_closure, _ForwardingStream, _ForwardingStreamSubscription, _WhereStream, _MapStream, _BaseZone, _BaseZone_bindCallback_closure, _BaseZone_bindCallback_closure0, _BaseZone_bindUnaryCallback_closure, _BaseZone_bindUnaryCallback_closure0, _BaseZone_bindBinaryCallback_closure, _BaseZone_bindBinaryCallback_closure0, _rootHandleUncaughtError_closure, _rootHandleUncaughtError__closure, _RootZone, _HashMap, _HashMap_values_closure, _HashMap_addAll_closure, _IdentityHashMap, _CustomHashMap, _CustomHashMap_closure, HashMapKeyIterable, HashMapKeyIterator, _LinkedHashMap, _LinkedHashMap_values_closure, _LinkedHashMap_addAll_closure, LinkedHashMapCell, LinkedHashMapKeyIterable, LinkedHashMapKeyIterator, _HashSet, _IdentityHashSet, HashSetIterator, _LinkedHashSet, LinkedHashSetCell, LinkedHashSetIterator, UnmodifiableListView, _HashSetBase, IterableBase, ListBase, ListMixin, Maps_mapToString_closure, ListQueue, _ListQueueIterator, _SplayTreeNode, _SplayTreeMapNode, _SplayTree, SplayTreeMap, SplayTreeMap_closure, SplayTreeMap_addAll_closure, _SplayTreeIterator, _SplayTreeKeyIterable, _SplayTreeValueIterable, _SplayTreeKeyIterator, _SplayTreeValueIterator, _SplayTreeNodeIterator, _convertJsonToDart_closure, _convertJsonToDart_walk, Codec, Converter, Encoding, JsonCodec, JsonDecoder, Utf8Codec, Utf8Encoder, _Utf8Encoder, Utf8Decoder, _Utf8Decoder, _Utf8Decoder_convert_addSingleBytes, Function__toMangledNames_closure, NoSuchMethodError_toString_closure, bool, Comparable, DateTime, DateTime_parse_parseIntOrZero, DateTime_parse_parseDoubleOrZero, $double, Duration, Duration_toString_sixDigits, Duration_toString_twoDigits, Error, NullThrownError, ArgumentError, RangeError, NoSuchMethodError, UnsupportedError, UnimplementedError, StateError, ConcurrentModificationError, OutOfMemoryError, StackOverflowError, CyclicInitializationError, _ExceptionImplementation, FormatException, IntegerDivisionByZeroException, Expando, Function, $int, Iterable, Iterator, List, Map, Null, num, Object, Match, StackTrace, Stopwatch, String, RuneIterator, StringBuffer, Symbol0, Type, Uri, Uri_parse_isRegName, Uri_parse_ipV6Address, Uri__makeScheme_isSchemeLowerCharacter, Uri__makePath_closure, Uri__makeQuery_closure, Uri__normalize_isNormalizedHexDigit, Uri__normalize_isLowerCaseHexDigit, Uri__normalize_isUnreserved, Uri__normalize_normalizeHexDigit, Uri__normalize_decodeHexDigitPair, Uri__normalize_fillResult, Uri_hashCode_combine, Uri_parseIPv4Address_error, Uri_parseIPv4Address_closure, Uri_parseIPv6Address_error, Uri_parseIPv6Address_parseHex, Uri_parseIPv6Address_closure, Uri__uriEncode_byteToHex, Interceptor_CssStyleDeclarationBase, CssStyleDeclarationBase, _ChildrenElementList, _FrozenElementList, _FrozenElementList$_wrap_closure, _FrozenElementList_classes_closure, Element_Element$html_closure, Entry, Events, ElementEvents, Interceptor_ListMixin, Interceptor_ListMixin_ImmutableListMixin, HttpRequest_getString_closure, HttpRequest_request_closure0, HttpRequest_request_closure, MutationObserver_observe_override, _ChildNodeListLazy, Interceptor_ListMixin0, Interceptor_ListMixin_ImmutableListMixin0, Window_animationFrame_closure, Interceptor_ListMixin1, Interceptor_ListMixin_ImmutableListMixin1, Interceptor_ListMixin2, Interceptor_ListMixin_ImmutableListMixin2, Interceptor_ListMixin3, Interceptor_ListMixin_ImmutableListMixin3, _AttributeMap, _AttributeMap_addAll_closure, _ElementAttributeMap, _DataAttributeMap, _DataAttributeMap_addAll_closure, _DataAttributeMap_forEach_closure, _DataAttributeMap_keys_closure, _DataAttributeMap_values_closure, _MultiElementCssClassSet, _MultiElementCssClassSet_closure, _MultiElementCssClassSet_readClasses_closure, _MultiElementCssClassSet_modify_closure, _MultiElementCssClassSet_toggle_closure, _MultiElementCssClassSet_remove_closure, _MultiElementCssClassSet__modifyWithReturnValue_closure, _ElementCssClassSet, _ContentCssRect, _MarginCssRect, CssRect, Dimension, EventStreamProvider, _EventStream, _ElementEventStreamImpl, _ElementEventStreamImpl_matches_closure, _ElementEventStreamImpl_matches_closure0, _ElementListEventStreamImpl, _ElementListEventStreamImpl_matches_closure, _ElementListEventStreamImpl_matches_closure0, _EventStreamSubscription, _StreamPool, _StreamPool_add_closure, _Html5NodeValidator, ImmutableListMixin, NodeValidatorBuilder, NodeValidatorBuilder_allowsElement_closure, NodeValidatorBuilder_allowsAttribute_closure, _SimpleNodeValidator, _TemplatingNodeValidator, _TemplatingNodeValidator_closure, _SvgNodeValidator, FixedSizeListIterator, _callConstructor_closure, _DOMWindowCrossFrame, _LocationCrossFrame, NodeValidator, _SameOriginUriPolicy, _ValidatingTreeSanitizer, _ValidatingTreeSanitizer_sanitizeTree_walk, _AttributeClassSet, Capability, JsObject, JsObject__convertDataTree__convert, JsFunction, JsArray, JsObject_ListMixin, _convertToJS_closure, _convertToJS_closure0, _wrapToDart_closure, _wrapToDart_closure0, _wrapToDart_closure1, _RectangleBase, MutableRectangle, DefaultEquality, ListEquality, UnmodifiableMapView, DelegatingMap_UnmodifiableMapMixin, UnmodifiableMapMixin, DelegatingMap, NativeTypedArray, NativeTypedArrayOfDouble, NativeTypedArray_ListMixin, NativeTypedArray_ListMixin_FixedLengthListMixin, NativeTypedArrayOfInt, NativeTypedArray_ListMixin0, NativeTypedArray_ListMixin_FixedLengthListMixin0, Tracker, _convertDartToNative_PrepareForStructuredClone_findSlot, _convertDartToNative_PrepareForStructuredClone_readSlot, _convertDartToNative_PrepareForStructuredClone_writeSlot, _convertDartToNative_PrepareForStructuredClone_cleanupSlots, _convertDartToNative_PrepareForStructuredClone_walk, _convertDartToNative_PrepareForStructuredClone_walk_closure, convertNativeToDart_AcceptStructuredClone_findSlot, convertNativeToDart_AcceptStructuredClone_readSlot, convertNativeToDart_AcceptStructuredClone_writeSlot, convertNativeToDart_AcceptStructuredClone_walk, CssClassSetImpl, CssClassSetImpl_add_closure, CssClassSetImpl_addAll_closure, CssClassSetImpl_clear_closure, FilteredElementList, FilteredElementList__filtered_closure, FilteredElementList_removeRange_closure, DocsLocation, DocsLocation__extractPieces__check, DocsLocation_componentNames_closure, DocsLocation_itemFromList_closure, DocsLocation_itemFromList_closure0, Logger, Logger_Logger_closure, Level, LogRecord, Bindable, ChangeNotifier, ChangeRecord, PropertyChangeRecord, ListChangeRecord, ObservableProperty, Reflectable, Observable, Observable_deliverChanges_closure, ObservableBox, ObservableList, ListBase_ChangeNotifier, ObservableList_listChanges_closure, MapChangeRecord, ObservableMap, ObservableMap_addAll_closure, ObservableMap_clear_closure, ObserverTransform, PathObserver, PropertyPath, PropertyPath_PropertyPath_closure, PropertyPath_toString_closure, _InvalidPropertyPath, closure7, CompoundObserver, _ObserverSentinel, _Observer, _ObservedSet, _toObservableDeep_closure, PolymerDeclaration, PolymerDeclaration_accumulateInstanceAttributes_closure, PolymerDeclaration_addAttributeDelegates_closure, PolymerDeclaration_installLocalSheets_closure, PolymerDeclaration_cssTextForScope_matcher, PolymerDeclaration_explodeObservers_closure, PolymerDeclaration__lowerCaseMap_closure, closure9, _closure3, PublishedProperty, Polymer, Polymer_onMutation_closure, Polymer_copyInstanceAttributes_closure, Polymer_copyInstanceAttributes__closure, Polymer_cancelUnbindAll_closure, Polymer__unbindNodeTree_closure, Polymer_notifyPropertyChanges_closure, Polymer_observeArrayValue_closure, Polymer_prepareBinding_closure, _PolymerBinding, PolymerElement, HtmlElement_Polymer, HtmlElement_Polymer_ChangeNotifier, PolymerExpressionsWithEvents, _EventBindable, _Job, _hookJsPolymer_closure, _hookJsPolymer_registerDart, _hookJsPolymer_registerDart_closure, closure0, closure1, closure2, closure3, closure4, _closure0, closure5, _closure, _classAttributeConverter_closure, _styleAttributeConverter_closure, PolymerExpressions, PolymerExpressions_prepareBinding_closure, PolymerExpressions_prepareInstanceModel_closure, _Binding, _Binding__convertValue_closure, _Binding_open_closure, StreamBinding, StreamBinding_closure, closure10, closure11, closure12, closure13, closure14, closure15, closure16, closure17, closure18, closure19, closure20, closure21, closure22, closure23, closure24, closure25, assign_notAssignable, Scope, _ModelScope, _LocalVariableScope, _GlobalsScope, ExpressionObserver, Updater, ObserverBuilder, ObserverBuilder_visitInvoke_closure, ObserverBuilder_visitListLiteral_closure, ObserverBuilder_visitMapLiteral_closure, EmptyObserver, LiteralObserver, ListLiteralObserver, ListLiteralObserver__updateSelf_closure, MapLiteralObserver, MapLiteralObserver__updateSelf_closure, MapLiteralEntryObserver, IdentifierObserver, IdentifierObserver__updateSelf_closure, IdentifierObserver__updateSelf__closure, UnaryObserver, BinaryObserver, BinaryObserver__updateSelf_closure, TernaryObserver, GetterObserver, GetterObserver__updateSelf_closure, GetterObserver__updateSelf__closure, IndexObserver, IndexObserver__updateSelf_closure, IndexObserver__updateSelf__closure, InvokeObserver, InvokeObserver__updateSelf_closure, InvokeObserver__updateSelf_closure0, InvokeObserver__updateSelf__closure, InObserver, InObserver__updateSelf_closure, Comprehension, EvalException, AstFactory, Expression, EmptyExpression, Literal, ListLiteral, MapLiteral, MapLiteralEntry, ParenthesizedExpression, Identifier, UnaryOperator, BinaryOperator, TernaryOperator, InExpression, Index, Getter, Invoke, _hashList_closure, Parser, IndexedValue, EnumerateIterable, EnumerateIterator, Token, Tokenizer, ParseException, Visitor, RecursiveVisitor, SearchResult, Hit, _splitQueryTerms_closure, _splitQueryTerms_closure0, _splitQueryTerms_closure1, lookupSearchResults_closure, lookupSearchResults_closure0, lookupSearchResults_closure1, SearchIndex, _DefaultSyntaxWithEvents, QueryOptions, Declaration, DeclarationKind, StaticConfiguration, GeneratedObjectAccessorService, GeneratedTypeInspectorService, GeneratedSymbolConverterService, GeneratedSymbolConverterService_closure, MissingCodeException, _ElementExtension, _ElementExtension_bind_closure, _InputBinding, closure8, _closure1, _closure2, _InputBinding__getAssociatedRadioButtons_closure, _InputBinding__getAssociatedRadioButtons_closure0, _InputBinding__toInt_closure, _InputElementExtension, _InstanceBindingMap, _TemplateBindingMap, NodeBindExtension, TemplateInstance, _SelectElementExtension, TemplateBindExtension, TemplateBindExtension_bootstrap__bootstrap, closure6, _getDelegateFactory_closure, _parseAttributeBindings_closure, _TemplateIterator, _BoundNodes, _TextExtension, _TextAreaElementExtension, BindingDelegate, MustacheTokens, Viewer, Viewer__updateLibraries_closure, Viewer_currentPage_closure, Viewer_currentPage_closure0, Viewer_closure, Viewer__closure, Viewer_closure0, Viewer_closure1, Viewer__scrollScreen_closure, Viewer__scrollScreen_closure0, Viewer_queryEverywhere_closure, Viewer__loadAndUpdatePage_closure, Viewer__loadAndUpdatePage_closure0, Viewer_getItem_closure, Viewer_getItem_closure0, Viewer_getMember_closure, Viewer_getMember__closure, Viewer_getMember___closure, Viewer_getMember_closure0, _concat_closure, AnnotationElement, PolymerElement_ChangeNotifier, initApp_closure, initApp__closure, initApp__closure0, Breadcrumbs, PolymerElement_ChangeNotifier0, Breadcrumbs_enteredView_closure, CategoryElement, DartdocElement_ChangeNotifier, CategoryElement$created_closure, CategoryElement$created__closure, ClassElement, ClassElement$created_closure, ClassElement$created__closure, ClassElement__loadCategories_closure, ClassElement_addSubclasses_closure, ClassElement_makeLinks_closure, ClassElement_makeLinks_closure0, ClassElement_makeLink_closure, ClosureElement, PolymerElement_ChangeNotifier1, CommentElement, DivElement_Polymer, DivElement_Polymer_ChangeNotifier, CommentElement__resolveLink_closure, HomeElement, ItemElement, LazyListLoader, _LazyListCopier, LibraryElement, LibraryPanel, LibraryPanel_shadowRootReady_closure, LinkElement, PolymerElement_ChangeNotifier2, LinkElement_typeChanged_closure, MainElement, DartdocElement_ChangeNotifier1, MainElement_collapseSearchAndOptionsIfNeeded_closure, NullTreeSanitizer, DartdocElement, MemberElement, DartdocElement_ChangeNotifier0, InheritedElement, MemberElement_ChangeNotifier, InheritedElement$created_closure, MethodElement, InheritedElement_ChangeNotifier, MinimapElementClass, MinimapElement, PolymerElement_ChangeNotifier3, MinimapElement$created_closure, MinimapElementLibrary, PageElement, DartdocElement_ChangeNotifier2, ParameterElement, DartdocElement_ChangeNotifier3, Result, AnchorElement_Polymer, AnchorElement_Polymer_ChangeNotifier, Search, PolymerElement_ChangeNotifier4, Search_onBlurCallback_closure, TypeElement, PolymerElement_ChangeNotifier5, TypeElement_createInner_closure, TypedefElement, VariableElement, InheritedElement_ChangeNotifier0, VariableHeading, MemberElement_ChangeNotifier0];
}
