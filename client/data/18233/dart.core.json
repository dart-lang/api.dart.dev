{"name":"dart:core","children":[{"returnType":{"name":"void","refId":"void"},"name":"print","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"object","kind":"param","id":"object"}],"uri":"sdk/lib/core/print.dart","kind":"method","id":"print1()","line":"7"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"identical","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"a","kind":"param","id":"a"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"b","kind":"param","id":"b"}],"uri":"sdk/lib/core/identical.dart","kind":"method","comment":"\nCheck whether two references are to the same object.\n","id":"identical2()","line":"10"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"_identical","children":[{"name":"a","kind":"param","id":"a"},{"name":"b","kind":"param","id":"b"}],"isPrivate":true,"uri":"sdk/lib/core/expect.dart","kind":"method","id":"_identical2()","line":"291"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Type","uri":"sdk/lib/core/type.dart","kind":"class","comment":"\nRuntime representation of a type.\n","id":"Type","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Strings","children":[{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"join","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"strings","kind":"param","id":"strings","line":"15"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"separator","kind":"param","id":"separator","line":"15"}],"kind":"method","comment":"\nJoins all the given strings to create a new string.\n\n*Deprecated* Use `strings.join(separator)` instead.\n","id":"join2()","line":"14"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"concatAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"strings","kind":"param","id":"strings","line":"23"}],"kind":"method","comment":"\nConcatenates all the given strings to create a new string.\n\n*Deprecated* Use `strings.join()` instead.\n","id":"concatAll1()","line":"22"}],"uri":"sdk/lib/core/strings.dart","kind":"class","id":"Strings","line":"7"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"StringBuffer","children":[{"returnType":{"name":"void","refId":"void"},"name":"add","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"obj","kind":"param","id":"obj"}],"kind":"method","comment":"Converts [obj] to a string and adds it to the buffer.","id":"add1()","line":"24"},{"returnType":{"name":"void","refId":"void"},"name":"addCharCode","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"charCode","kind":"param","id":"charCode"}],"kind":"method","comment":"Adds the string representation of [charCode] to the buffer.","id":"addCharCode1()","line":"27"},{"returnType":{"name":"void","refId":"void"},"name":"addAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"objects","kind":"param","id":"objects"}],"kind":"method","comment":"Adds all items in [objects] to the buffer.","id":"addAll1()","line":"30"},{"returnType":{"name":"void","refId":"void"},"name":"clear","kind":"method","comment":"Clears the string buffer.","id":"clear0()","line":"33"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"Returns the contents of buffer as a concatenated string.","id":"toString0()","line":"36"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"property","comment":"Returns the length of the buffer.","id":"length","line":"18"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isEmpty","kind":"property","id":"isEmpty","line":"21"},{"name":"StringBuffer","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"defaultValue":"\"\"","isOptional":true,"name":"content","kind":"param","id":"content"}],"kind":"constructor","comment":"Creates the string buffer with an initial content.","id":"StringBuffer1()","line":"15"}],"uri":"sdk/lib/core/string_buffer.dart","kind":"class","comment":"\nThe StringBuffer class is useful for concatenating strings\nefficiently. Only on a call to [toString] are the strings\nconcatenated to a single String.\n","id":"StringBuffer","line":"12"},{"interfaces":[{"name":"Pattern","refId":"dart.core/Pattern"},{"name":"Comparable","refId":"dart.core/Comparable"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"String","children":[{"isOperator":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"}],"kind":"method","comment":"\nGets the character (as [String]) at the given [index].\n\nThe returned string represents exactly one UTF-16 code unit which may be\nhalf of a surrogate pair. For example the Unicode character for a\nmusical G-clef (\"ùÑû\") with rune value 0x1D11E consists of a UTF-16 surrogate\npair: `\"\\uDBFF\\uDFFD\"`. Using the index-operator on this string yields\na String with half of a surrogate pair:\n\n    var clef = \"\\uDBFF\\uDFFD\";\n    clef.length;  // => 2\n    clef.runes.first == 0x1D11E;  // => true\n    clef.runes.length;  // => 1\n    // The following strings are halves of a UTF-16 surrogate pair and\n    // thus invalid UTF-16 strings:\n    clef[0];  // => \"\\uDBFF\"\n    clef[1];  // => \"\\uDFFD\"\n\nThis method is equivalent to\n`new String.fromCharCode(this.codeUnitAt(index))`.\n","id":"[]1()","line":"72"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"charCodeAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index","line":"80"}],"kind":"method","comment":"\nGets the scalar character code at the given [index].\n\n*This method is deprecated. Please use [codeUnitAt] instead.*\n","id":"charCodeAt1()","line":"79"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"codeUnitAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"}],"kind":"method","comment":"\nReturns the 16-bit UTF-16 code unit at the given [index].\n","id":"codeUnitAt1()","line":"85"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"==","children":[{"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns whether the two strings are equal.\n\nThis method compares each individual code unit of the strings. It does not\ncheck for Unicode equivalence. For example the two following strings both\nrepresent the string \"Am√©lie\" but, due to their different encoding will\nnot return equal.\n\n    \"Am\\xe9lie\"\n    \"Ame\\u{301}lie\"\n\nIn the first string the \"√©\" is encoded as a single unicode code unit,\nwhereas the second string encodes it as \"e\" with the combining\naccent character \"‚óåÃÅ\".\n","id":"==1()","line":"111"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"endsWith","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns whether this string ends with [other].\n","id":"endsWith1()","line":"116"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"startsWith","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns whether this string starts with [other].\n","id":"startsWith1()","line":"121"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"indexOf","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"other","kind":"param","id":"other"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"start","kind":"param","id":"start"}],"kind":"method","comment":"\nReturns the first location of [other] in this string starting at\n[start] (inclusive).\nReturns -1 if [other] could not be found.\n","id":"indexOf2()","line":"128"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"lastIndexOf","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"other","kind":"param","id":"other"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"start","kind":"param","id":"start"}],"kind":"method","comment":"\nReturns the last location of [other] in this string, searching\nbackward starting at [start] (inclusive).\nReturns -1 if [other] could not be found.\n","id":"lastIndexOf2()","line":"135"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"concat","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nCreates a new string by concatenating this string with [other].\n\nA sequence of strings can be concatenated by using [Iterable.join]:\n\n    var strings = ['foo', 'bar', 'geez'];\n    var concatenated = strings.join();\n","id":"concat1()","line":"150"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"slice","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"startIndex","kind":"param","id":"startIndex"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"endIndex","kind":"param","id":"endIndex"}],"kind":"method","comment":"\nReturns a slice of this string from [startIndex] to [endIndex].\n\nIf [startIndex] is omitted, it defaults to the start of the string.\n\nIf [endIndex] is omitted, it defaults to the end of the string.\n\nIf either index is negative, it's taken as a negative index from the\nend of the string. Their effective value is computed by adding the\nnegative value to the [length] of the string.\n\nThe effective indices, after  must be non-negative, no greater than the\nlength of the string, and [endIndex] must not be less than [startIndex].\n","id":"slice2()","line":"166"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"substring","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"startIndex","kind":"param","id":"startIndex"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"endIndex","kind":"param","id":"endIndex"}],"kind":"method","comment":"\nReturns a substring of this string in the given range.\n[startIndex] is inclusive and [endIndex] is exclusive.\n","id":"substring2()","line":"172"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"trim","kind":"method","comment":"\nRemoves leading and trailing whitespace from a string. If the string\ncontains leading or trailing whitespace a new string with no leading and\nno trailing whitespace is returned. Otherwise, the string itself is\nreturned.  Whitespace is defined as every Unicode character in the Zs, Zl\nand Zp categories (this includes no-break space), the spacing control\ncharacters from 9 to 13 (tab, lf, vtab, ff and cr), and 0xfeff the BOM\ncharacter.\n","id":"trim0()","line":"183"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"contains","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"name":"other","kind":"param","id":"other"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"startIndex","kind":"param","id":"startIndex"}],"kind":"method","comment":"\nReturns whether this string contains [other] starting\nat [startIndex] (inclusive).\n","id":"contains2()","line":"189"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"replaceFirst","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"name":"from","kind":"param","id":"from"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"to","kind":"param","id":"to"}],"kind":"method","comment":"\nReturns a new string where the first occurence of [from] in this string\nis replaced with [to].\n","id":"replaceFirst2()","line":"195"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"replaceAll","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"name":"from","kind":"param","id":"from"},{"name":"replace","kind":"param","id":"replace"}],"kind":"method","comment":"\nReturns a new string where all occurences of [from] in this string\nare replaced with [replace].\n","id":"replaceAll2()","line":"201"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"replaceAllMapped","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"name":"from","kind":"param","id":"from"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"replace","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"Function","children":[{"ref":{"name":"Match","refId":"dart.core/Match"},"name":"match","uri":"sdk/lib/core/string.dart","kind":"param","id":"match","line":"211"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"replace"}],"kind":"method","comment":"\nReturns a new string where all occurences of [from] in this string\nare replaced with a [String] depending on [replace].\n\n\nThe [replace] function is called with the [Match] generated\nby the pattern, and its result is used as replacement.\n","id":"replaceAllMapped2()","line":"211"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"split","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"name":"pattern","kind":"param","id":"pattern"}],"kind":"method","comment":"\nSplits the string around matches of [pattern]. Returns\na list of substrings.\n\nSplitting with an empty string pattern (`\"\"`) splits at UTF-16 code unit\nboundaries and not at rune boundaries. The following two expressions\nare hence equivalent:\n\n    string.split(\"\")\n    string.codeUnits.map((unit) => new String.character(unit))\n\nUnless it guaranteed that the string is in the basic multilingual plane\n(meaning that each code unit represents a rune) it is often better to\nmap the runes instead:\n\n    string.runes.map((rune) => new String.character(rune))\n","id":"split1()","line":"230"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"splitChars","kind":"method","comment":"\nReturns a list of the individual code-units converted to strings.\n\n*Deprecated*\nIf you want to split on code-unit boundaries, use [split]. If you\nwant to split on rune boundaries, use [runes] and map the result.\n\n    Iterable<String> characters =\n        string.runes.map((c) => new String.fromCharCode(c));\n","id":"splitChars0()","line":"242"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"splitMapJoin","children":[{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"name":"pattern","kind":"param","id":"pattern"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"name":"onMatch","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"Function","children":[{"ref":{"name":"Match","refId":"dart.core/Match"},"name":"match","uri":"sdk/lib/core/string.dart","kind":"param","id":"match","line":"259"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"onMatch","line":"259"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"name":"onNonMatch","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"nonMatch","uri":"sdk/lib/core/string.dart","kind":"param","id":"nonMatch","line":"260"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"onNonMatch","line":"260"}],"kind":"method","comment":"\nSplits the string on the [pattern], then converts each part and each match.\n\nThe pattern is used to split the string into parts and separating matches.\n\nEach match is converted to a string by calling [onMatch]. If [onMatch]\nis omitted, the matched string is used.\n\nEach non-matched part is converted by a call to [onNonMatch]. If\n[onNonMatch] is omitted, the non-matching part is used.\n\nThen all the converted parts are combined into the resulting string.\n","id":"splitMapJoin3()","line":"258"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toLowerCase","kind":"method","comment":"\nIf this string is not already all lower case, returns a new string\nwhere all characters are made lower case. Returns [:this:] otherwise.\n","id":"toLowerCase0()","line":"291"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toUpperCase","kind":"method","comment":"\nIf this string is not already all upper case, returns a new string\nwhere all characters are made upper case. Returns [:this:] otherwise.\n","id":"toUpperCase0()","line":"298"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"property","comment":"\nThe length of the string.\n\nReturns the number of UTF-16 code units in this string. The number\nof [runes] might be less, if the string contains characters outside\nthe basic multilingual plane (plane 0).\n","id":"length","line":"94"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isEmpty","kind":"property","comment":"\nReturns whether this string is empty.\n","id":"isEmpty","line":"140"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"charCodes","kind":"property","comment":"\nReturns a list of UTF-16 code units of this string.\n\n*This getter is deprecated. Use [codeUnits] instead.*\n","id":"charCodes","line":"267"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"codeUnits","kind":"property","comment":"\nReturns an iterable of the UTF-16 code units of this string.\n","id":"codeUnits","line":"274"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"runes","kind":"property","comment":"\nReturns an iterable of Unicode code-points of this string.\n\nIf the string contains surrogate pairs, they will be combined and returned\nas one integer by this iterator. Unmatched surrogate halves are treated\nlike valid 16-bit code-units.\n","id":"runes","line":"284"},{"name":"String.fromCharCodes","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"charCodes","kind":"param","id":"charCodes"}],"kind":"constructor","comment":"\nAllocates a new String for the specified [charCodes].\n\nThe [charCodes] can be UTF-16 code units or runes. If a char-code value is\n16-bit it is copied verbatim. If it is greater than 16 bits it is\ndecomposed into a surrogate pair.\n","id":"String.fromCharCodes1()","line":"28"},{"name":"String.character","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"charCode","kind":"param","id":"charCode","line":"34"}],"kind":"constructor","comment":"\n*Deprecated*. Use [String.fromCharCode] instead.\n","id":"String.character1()","line":"33"},{"name":"String.fromCharCode","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"charCode","kind":"param","id":"charCode"}],"kind":"constructor","comment":"\nAllocates a new String for the specified [charCode].\n\nThe new string contains a single code unit if the [charCode] can be\nrepresented by a single UTF-16 code unit. Otherwise the [length] is 2 and\nthe code units form a surrogate pair.\n\nIt is allowed (though generally discouraged) to create a String with only\none half of a surrogate pair.\n","id":"String.fromCharCode1()","line":"46"}],"uri":"sdk/lib/core/string.dart","kind":"class","comment":"\nThe String class represents sequences of characters. Strings are\nimmutable. A string is represented by a sequence of Unicode UTF-16\ncode units accessible through the [codeUnitAt] or the\n[codeUnits] members. Their string representation is accessible through\nthe index-operator.\n\nThe characters of a string are encoded in UTF-16. Decoding UTF-16, which\ncombines surrogate pairs, yields Unicode code points. Following a similar\nterminology to Go we use the name \"rune\" for an integer representing a\nUnicode code point. The runes of a string are accessible through the [runes]\ngetter.\n","id":"String","line":"20"},{"interfaces":[{"name":"Stopwatch","refId":"dart.core/Stopwatch"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"_StopwatchImpl","children":[{"returnType":{"name":"void","refId":"void"},"name":"start","kind":"method","id":"start0()","line":"79"},{"returnType":{"name":"void","refId":"void"},"name":"stop","kind":"method","id":"stop0()","line":"94"},{"returnType":{"name":"void","refId":"void"},"name":"reset","kind":"method","id":"reset0()","line":"101"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"_frequency","isPrivate":true,"kind":"method","id":"_frequency0()","line":"130"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"_now","isPrivate":true,"kind":"method","id":"_now0()","line":"131"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"elapsedTicks","kind":"property","id":"elapsedTicks","line":"113"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"elapsedMicroseconds","kind":"property","id":"elapsedMicroseconds","line":"120"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"elapsedMilliseconds","kind":"property","id":"elapsedMilliseconds","line":"124"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"frequency","kind":"property","id":"frequency","line":"128"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_start","isPrivate":true,"kind":"variable","id":"_start","line":"74"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_stop","isPrivate":true,"kind":"variable","id":"_stop","line":"75"},{"name":"_StopwatchImpl","kind":"constructor","id":"_StopwatchImpl0()","line":"77"}],"isPrivate":true,"uri":"sdk/lib/core/stopwatch.dart","kind":"class","id":"_StopwatchImpl","line":"68"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Stopwatch","children":[{"returnType":{"name":"void","refId":"void"},"name":"start","kind":"method","comment":"\nStarts the [Stopwatch]. The [elapsed] count is increasing monotonically.\nIf the [Stopwatch] has been stopped, then calling start again restarts it\nwithout resetting the [elapsed] count.\nIf the [Stopwatch] is currently running, then calling start does nothing.\n","id":"start0()","line":"27"},{"returnType":{"name":"void","refId":"void"},"name":"stop","kind":"method","comment":"\nStops the [Stopwatch]. The [elapsed] count stops increasing.\nIf the [Stopwatch] is currently not running, then calling stop does\nnothing.\n","id":"stop0()","line":"34"},{"returnType":{"name":"void","refId":"void"},"name":"reset","kind":"method","comment":"\nResets the [elapsed] count to zero. This method does not stop or start\nthe [Stopwatch].\n","id":"reset0()","line":"40"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"elapsedTicks","kind":"property","comment":"\nReturns the elapsed number of clock ticks since calling [start] while the\n[Stopwatch] is running.\nReturns the elapsed number of clock ticks between calling [start] and\ncalling [stop].\nReturns 0 if the [Stopwatch] has never been started.\nThe elapsed number of clock ticks increases by [frequency] every second.\n","id":"elapsedTicks","line":"50"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"elapsedMicroseconds","kind":"property","comment":"\nReturns the [elapsedTicks] counter converted to microseconds.\n","id":"elapsedMicroseconds","line":"55"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"elapsedMilliseconds","kind":"property","comment":"\nReturns the [elapsedTicks] counter converted to milliseconds.\n","id":"elapsedMilliseconds","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"frequency","kind":"property","comment":"\nReturns the frequency of the elapsed counter in Hz.\n","id":"frequency","line":"65"},{"name":"Stopwatch","kind":"constructor","comment":"\nCreates a [Stopwatch] in stopped state with a zero elapsed count.\n\nThe following example shows how to start a [Stopwatch]\nright after allocation.\n\n    Stopwatch stopwatch = new Stopwatch()..start();\n","id":"Stopwatch0()","line":"19"}],"uri":"sdk/lib/core/stopwatch.dart","kind":"class","comment":"\nA simple [Stopwatch] interface to measure elapsed time.\n","id":"Stopwatch","line":"10"},{"superclass":{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"isAbstract":true,"name":"Set","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"contains","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nReturns true if [value] is in the set.\n","id":"contains1()","line":"22"},{"returnType":{"name":"void","refId":"void"},"name":"add","children":[{"ref":{"name":"E","refId":"dart.core/Set/E"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nAdds [value] into the set. The method has no effect if\n[value] was already in the set.\n","id":"add1()","line":"28"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"remove","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nRemoves [value] from the set. Returns true if [value] was\nin the set. Returns false otherwise. The method has no effect\nif [value] value was not in the set.\n","id":"remove1()","line":"35"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"isSubsetOf","children":[{"ref":{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"name":"collection","kind":"param","id":"collection"}],"kind":"method","comment":"\nReturns true if [collection] contains all the elements of this\ncollection.\n","id":"isSubsetOf1()","line":"41"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"containsAll","children":[{"ref":{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"name":"collection","kind":"param","id":"collection"}],"kind":"method","comment":"\nReturns true if this collection contains all the elements of\n[collection].\n","id":"containsAll1()","line":"47"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"name":"intersection","children":[{"ref":{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns a new set which is the intersection between this set and\nthe given collection.\n","id":"intersection1()","line":"53"},{"returnType":{"name":"void","refId":"void"},"name":"clear","kind":"method","comment":"\nRemoves all elements in the set.\n","id":"clear0()","line":"58"},{"name":"Set","kind":"constructor","id":"Set0()","line":"12"},{"name":"Set.from","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Set/E"}]},"name":"other","kind":"param","id":"other"}],"kind":"constructor","comment":"\nCreates a [Set] that contains all elements of [other].\n","id":"Set.from1()","line":"17"},{"name":"E","kind":"typeparam","id":"E"}],"uri":"sdk/lib/core/set.dart","kind":"class","comment":"\nThis class is the public interface of a set. A set is a collection\nwithout duplicates.\n","id":"Set","line":"11"},{"interfaces":[{"name":"Pattern","refId":"dart.core/Pattern"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"RegExp","children":[{"returnType":{"name":"Match","refId":"dart.core/Match"},"name":"firstMatch","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"}],"kind":"method","comment":"\nSearches for the first match of the regular expression\nin the string [str]. Returns `null` if there is no match.\n","id":"firstMatch1()","line":"105"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Match","refId":"dart.core/Match"}]},"name":"allMatches","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"}],"kind":"method","comment":"\nReturns an iterable on the  matches of the regular\nexpression in [str].\n","id":"allMatches1()","line":"111"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"hasMatch","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"}],"kind":"method","comment":"\nReturns whether the regular expression has a match in the string [str].\n","id":"hasMatch1()","line":"116"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"stringMatch","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"}],"kind":"method","comment":"\nSearches for the first match of the regular expression\nin the string [str] and returns the matched string.\n","id":"stringMatch1()","line":"122"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"pattern","kind":"property","comment":"\nThe pattern of this regular expression.\n","id":"pattern","line":"127"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isMultiLine","kind":"property","comment":"\nWhether this regular expression matches multiple lines.\n","id":"isMultiLine","line":"132"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isCaseSensitive","kind":"property","comment":"\nWhether this regular expression is case insensitive.\n","id":"isCaseSensitive","line":"137"},{"name":"RegExp","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"pattern","kind":"param","id":"pattern"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"name":"multiLine","kind":"param","id":"multiLine"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"true","isOptional":true,"name":"caseSensitive","kind":"param","id":"caseSensitive","line":"99"}],"kind":"constructor","comment":"\nConstructs a regular expression. The default implementation of a\n[RegExp] sets [multiLine] to false and [caseSensitive] to true.\n","id":"RegExp3()","line":"98"}],"uri":"sdk/lib/core/regexp.dart","kind":"class","comment":"\n[RegExp] represents regular expressions.\n\nDart regular expressions have the same syntax and semantics as\nJavaScript regular expressions. See\n<http://ecma-international.org/ecma-262/5.1/#sec-15.10>\nfor the specification of JavaScript regular expressions.\n\n[firstMatch] is the main implementation method that applies a regular\nexpression to a string and returns the first [Match]. All\nother methods in [RegExp] can build on it.\n\nUse [allMatches] to look for all matches of a regular expression in\na string.\n\nThe following example finds all matches of a regular expression in\na string.\n\n    RegExp exp = new RegExp(r\"(\\w+)\");\n    String str = \"Parse my string\";\n    Iterable<Match> matches = exp.allMatches(str);\n","id":"RegExp","line":"93"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Match","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"group","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"group","kind":"param","id":"group"}],"kind":"method","comment":"\nReturns the string matched by the given [group]. If [group] is 0,\nreturns the match of the regular expression.\n","id":"group1()","line":"45"},{"isOperator":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"group","kind":"param","id":"group"}],"kind":"method","id":"[]1()","line":"46"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"groups","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]},"name":"groups","kind":"param","id":"groups"}],"kind":"method","comment":"\nReturns the strings matched by [groups]. The order in the\nreturned string follows the order in [groups].\n","id":"groups1()","line":"52"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"start","kind":"property","comment":"\nReturns the index in the string where the match starts.\n","id":"start","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"end","kind":"property","comment":"\nReturns the index in the string after the last character of the\nmatch.\n","id":"end","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"groupCount","kind":"property","comment":"\nReturns the number of groups in the regular expression.\n","id":"groupCount","line":"57"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"property","comment":"\nThe string on which this matcher was computed.\n","id":"str","line":"62"},{"ref":{"name":"Pattern","refId":"dart.core/Pattern"},"name":"pattern","kind":"property","comment":"\nThe pattern used to search in [str].\n","id":"pattern","line":"67"}],"uri":"sdk/lib/core/regexp.dart","kind":"class","comment":"\n[Match] contains methods to manipulate a regular expression match.\n\nIterables of [Match] objects are returned from [RegExp] matching methods.\n\nThe following example finds all matches of a [RegExp] in a [String]\nand iterates through the returned iterable of [Match] objects.\n\n    RegExp exp = new RegExp(r\"(\\w+)\");\n    String str = \"Parse my string\";\n    Iterable<Match> matches = exp.allMatches(str);\n    for (Match m in matches) {\n      String match = m.group(0);\n      print(match);\n    };\n\nThe output of the example is:\n\n    Parse\n    my\n    string\n","id":"Match","line":"29"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Pattern","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"Match","refId":"dart.core/Match"}]},"name":"allMatches","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"}],"kind":"method","id":"allMatches1()","line":"8"}],"uri":"sdk/lib/core/pattern.dart","kind":"class","id":"Pattern","line":"7"},{"interfaces":[{"name":"Options","refId":"dart.core/Options"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"_OptionsImpl","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"arguments","kind":"property","id":"arguments","line":"47"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"executable","kind":"property","id":"executable","line":"55"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"script","kind":"property","id":"script","line":"59"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"_arguments","isPrivate":true,"kind":"variable","id":"_arguments","line":"63"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isStatic":true,"name":"_nativeArguments","isPrivate":true,"kind":"variable","id":"_nativeArguments","line":"66"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"_nativeExecutable","isPrivate":true,"kind":"variable","id":"_nativeExecutable","line":"69"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"_nativeScript","isPrivate":true,"kind":"variable","id":"_nativeScript","line":"72"}],"isPrivate":true,"uri":"sdk/lib/core/options.dart","kind":"class","id":"_OptionsImpl","line":"46"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Options","children":[{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"arguments","kind":"property","comment":"\nReturns a list of arguments that have been passed to this isolate. Any\nmodifications to the list will be contained to the options object owning\nthis list.\n\nIf the execution environment does not support [arguments] an empty list\nis returned.\n","id":"arguments","line":"26"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"executable","kind":"property","comment":"\nReturns the path of the executable used to run the script in this\nisolate.\n\nIf the execution environment does not support [executable] an empty\nstring is returned.\n","id":"executable","line":"35"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"script","kind":"property","comment":"\nReturns the path of the script being run in this isolate.\n\nIf the executable environment does not support [script] an empty\nstring is returned.\n","id":"script","line":"43"},{"name":"Options","kind":"constructor","comment":"\nA newly constructed Options object contains the arguments exactly as they\nhave been passed to the isolate.\n","id":"Options0()","line":"16"}],"uri":"sdk/lib/core/options.dart","kind":"class","comment":"\nThe Options object allows accessing the arguments which have been passed to\nthe current isolate.\n","id":"Options","line":"11"},{"name":"Object","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"==","children":[{"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nThe equality operator.\n\nThe default behavior for all [Object]s is to return true if and\nonly if [:this:] and [other] are the same object.\n\nIf a subclass overrides the equality operator it should override\nthe [hashCode] method as well to maintain consistency.\n","id":"==1()","line":"29"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nReturns a string representation of this object.\n","id":"toString0()","line":"48"},{"name":"noSuchMethod","children":[{"ref":{"name":"InvocationMirror","refId":"dart.core/InvocationMirror"},"name":"invocation","kind":"param","id":"invocation"}],"kind":"method","comment":"\n[noSuchMethod] is invoked when users invoke a non-existant method\non an object. The name of the method and the arguments of the\ninvocation are passed to [noSuchMethod] in an [InvocationMirror].\nIf [noSuchMethod] returns a value, that value becomes the result of\nthe original invocation.\n\nThe default behavior of [noSuchMethod] is to throw a\n[noSuchMethodError].\n","id":"noSuchMethod1()","line":"60"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hashCode","kind":"property","comment":"\nGet a hash code for this object.\n\nAll objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator [:==:]. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.\n\nIf a subclass overrides [hashCode] it should override the\nequality operator as well to maintain consistency.\n","id":"hashCode","line":"43"},{"ref":{"name":"Type","refId":"dart.core/Type"},"name":"runtimeType","kind":"property","comment":"\nA representation of the runtime type of the object.\n","id":"runtimeType","line":"65"},{"name":"Object","kind":"constructor","comment":"\nCreates a new [Object] instance.\n\n[Object] instances have no meaningful state, and are only useful\nthrough their identity. An [Object] instance is equal to itself\nonly.\n","id":"Object0()","line":"18"}],"uri":"sdk/lib/core/object.dart","kind":"class","comment":"\nEverything in Dart is an [Object].\n","id":"Object","line":"10"},{"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"num","children":[{"isOperator":true,"returnType":{"name":"num","refId":"dart.core/num"},"name":"+","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Addition operator. ","id":"+1()","line":"12"},{"isOperator":true,"returnType":{"name":"num","refId":"dart.core/num"},"name":"-","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Subtraction operator. ","id":"-1()","line":"15"},{"isOperator":true,"returnType":{"name":"num","refId":"dart.core/num"},"name":"*","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Multiplication operator. ","id":"*1()","line":"18"},{"isOperator":true,"returnType":{"name":"num","refId":"dart.core/num"},"name":"%","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Euclidean modulo operator. ","id":"%1()","line":"21"},{"isOperator":true,"returnType":{"name":"double","refId":"dart.core/double"},"name":"/","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Division operator. ","id":"#slash1()","line":"24"},{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"~/","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nTruncating division operator.\n\nThe result of the truncating division [:a ~/ b:] is equivalent to\n[:(a / b).truncate().toInt():].\n","id":"~#slash1()","line":"34"},{"isOperator":true,"returnType":{"name":"num","refId":"dart.core/num"},"name":"unary-","kind":"method","comment":"Negate operator. ","id":"unary-0()","line":"37"},{"returnType":{"name":"num","refId":"dart.core/num"},"name":"remainder","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Return the remainder from dividing this [num] by [other]. ","id":"remainder1()","line":"40"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"<","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Relational less than operator. ","id":"<1()","line":"43"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"<=","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Relational less than or equal operator. ","id":"<=1()","line":"46"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":">","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Relational greater than operator. ","id":">1()","line":"49"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":">=","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Relational greater than or equal operator. ","id":">=1()","line":"52"},{"returnType":{"name":"num","refId":"dart.core/num"},"name":"abs","kind":"method","comment":"Returns the absolute value of this [num]. ","id":"abs0()","line":"61"},{"returnType":{"name":"num","refId":"dart.core/num"},"name":"floor","kind":"method","comment":"Returns the greatest integer value no greater than this [num]. ","id":"floor0()","line":"64"},{"returnType":{"name":"num","refId":"dart.core/num"},"name":"ceil","kind":"method","comment":"Returns the least integer value that is no smaller than this [num]. ","id":"ceil0()","line":"67"},{"returnType":{"name":"num","refId":"dart.core/num"},"name":"round","kind":"method","comment":"\nReturns the integer value closest to this [num].\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n","id":"round0()","line":"75"},{"returnType":{"name":"num","refId":"dart.core/num"},"name":"truncate","kind":"method","comment":"\nReturns the integer value obtained by discarding any fractional\ndigits from this [num].\n","id":"truncate0()","line":"81"},{"returnType":{"name":"num","refId":"dart.core/num"},"name":"clamp","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"lowerLimit","kind":"param","id":"lowerLimit"},{"ref":{"name":"num","refId":"dart.core/num"},"name":"upperLimit","kind":"param","id":"upperLimit"}],"kind":"method","comment":"\nClamps [this] to be in the range [lowerLimit]-[upperLimit]. The comparison\nis done using [compareTo] and therefore takes [:-0.0:] into account.\nIt also implies that [double.NaN] is treated as the maximal double value.\n","id":"clamp2()","line":"88"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"toInt","kind":"method","comment":"Truncates this [num] to an integer and returns the result as an [int]. ","id":"toInt0()","line":"91"},{"returnType":{"name":"double","refId":"dart.core/double"},"name":"toDouble","kind":"method","comment":"\nReturn this [num] as a [double].\n\nIf the number is not representable as a [double], an\napproximation is returned. For numerically large integers, the\napproximation may be infinite.\n","id":"toDouble0()","line":"100"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toStringAsFixed","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"fractionDigits","kind":"param","id":"fractionDigits"}],"kind":"method","comment":"\nConverts [this] to a string representation with [fractionDigits] digits\nafter the decimal point.\n\nThe parameter [fractionDigits] must be an integer satisfying:\n[:0 <= fractionDigits <= 20:].\n","id":"toStringAsFixed1()","line":"109"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toStringAsExponential","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"fractionDigits","kind":"param","id":"fractionDigits"}],"kind":"method","comment":"\nConverts [this] to a string in decimal exponential notation with\n[fractionDigits] digits after the decimal point.\n\nIf [fractionDigits] is given then it must be an integer satisfying:\n[:0 <= fractionDigits <= 20:]. Without the parameter the returned string\nuses the shortest number of digits that accurately represent [this].\n","id":"toStringAsExponential1()","line":"119"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toStringAsPrecision","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"precision","kind":"param","id":"precision"}],"kind":"method","comment":"\nConverts [this] to a string representation with [precision] significant\ndigits.\n\nThe parameter [precision] must be an integer satisfying:\n[:1 <= precision <= 21:].\n","id":"toStringAsPrecision1()","line":"128"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isNaN","kind":"property","id":"isNaN","line":"54"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isNegative","kind":"property","id":"isNegative","line":"56"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isInfinite","kind":"property","id":"isInfinite","line":"58"}],"uri":"sdk/lib/core/num.dart","kind":"class","comment":"\nAll numbers in dart are instances of [num].\n","id":"num","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Map","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"containsValue","children":[{"ref":{"name":"V","refId":"dart.core/Map/V"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nReturns whether this map contains the given [value].\n","id":"containsValue1()","line":"26"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"containsKey","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","comment":"\nReturns whether this map contains the given [key].\n","id":"containsKey1()","line":"31"},{"isOperator":true,"returnType":{"name":"V","refId":"dart.core/Map/V"},"name":"[]","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","comment":"\nReturns the value for the given [key] or null if [key] is not\nin the map. Because null values are supported, one should either\nuse containsKey to distinguish between an absent key and a null\nvalue, or use the [putIfAbsent] method.\n","id":"[]1()","line":"39"},{"isOperator":true,"returnType":{"name":"void","refId":"void"},"name":"[]=","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"name":"key","kind":"param","id":"key"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nAssociates the [key] with the given [value].\n","id":"[]=2()","line":"44"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"name":"putIfAbsent","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"name":"key","kind":"param","id":"key"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"ifAbsent","children":[{"returnType":{"name":"V","refId":"dart.core/Map/V"},"name":"Function","uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"ifAbsent"}],"kind":"method","comment":"\nIf [key] is not associated to a value, calls [ifAbsent] and\nupdates the map by mapping [key] to the value returned by\n[ifAbsent]. Returns the value in the map.\n","id":"putIfAbsent2()","line":"51"},{"returnType":{"name":"V","refId":"dart.core/Map/V"},"name":"remove","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"name":"key","kind":"param","id":"key"}],"kind":"method","comment":"\nRemoves the association for the given [key]. Returns the value for\n[key] in the map or null if [key] is not in the map. Note that values\ncan be null and a returned null value does not always imply that the\nkey is absent.\n","id":"remove1()","line":"59"},{"returnType":{"name":"void","refId":"void"},"name":"clear","kind":"method","comment":"\nRemoves all pairs from the map.\n","id":"clear0()","line":"64"},{"returnType":{"name":"void","refId":"void"},"name":"forEach","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"returnType":{"name":"void","refId":"void"},"name":"Function","children":[{"ref":{"name":"K","refId":"dart.core/Map/K"},"name":"key","uri":"sdk/lib/core/map.dart","kind":"param","id":"key","line":"69"},{"ref":{"name":"V","refId":"dart.core/Map/V"},"name":"value","uri":"sdk/lib/core/map.dart","kind":"param","id":"value","line":"69"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f"}],"kind":"method","comment":"\nApplies [f] to each {key, value} pair of the map.\n","id":"forEach1()","line":"69"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"K","refId":"dart.core/Map/K"}]},"name":"keys","kind":"property","comment":"\nThe keys of [this].\n","id":"keys","line":"75"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"V","refId":"dart.core/Map/V"}]},"name":"values","kind":"property","comment":"\nThe values of [this].\n","id":"values","line":"80"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"property","comment":"\nThe number of {key, value} pairs in the map.\n","id":"length","line":"85"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isEmpty","kind":"property","comment":"\nReturns true if there is no {key, value} pair in the map.\n","id":"isEmpty","line":"90"},{"name":"Map","kind":"constructor","comment":"\nCreates a map with the default implementation.\n","id":"Map0()","line":"15"},{"name":"Map.from","children":[{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"K","refId":"dart.core/Map/K"},{"name":"V","refId":"dart.core/Map/V"}]},"name":"other","kind":"param","id":"other"}],"kind":"constructor","comment":"\nCreates a [Map] that contains all key value pairs of [other].\n","id":"Map.from1()","line":"20"},{"name":"K","kind":"typeparam","id":"K"},{"name":"V","kind":"typeparam","id":"V"}],"uri":"sdk/lib/core/map.dart","kind":"class","comment":"\nA [Map] is an associative container, mapping a key to a value.\nNull values are supported, but null keys are not.\n","id":"Map","line":"11"},{"interfaces":[{"name":"Collection","refId":"dart.core/Collection","arguments":[{"name":"E","refId":"dart.core/List/E"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"List","children":[{"isOperator":true,"returnType":{"name":"E","refId":"dart.core/List/E"},"name":"[]","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"}],"kind":"method","comment":"\nReturns the element at the given [index] in the list or throws\nan [RangeError] if [index] is out of bounds.\n","id":"[]1()","line":"43"},{"isOperator":true,"returnType":{"name":"void","refId":"void"},"name":"[]=","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"},{"ref":{"name":"E","refId":"dart.core/List/E"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the entry at the given [index] in the list to [value].\nThrows an [RangeError] if [index] is out of bounds.\n","id":"[]=2()","line":"49"},{"isSetter":true,"returnType":{"name":"void","refId":"void"},"name":"length=","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"newLength","kind":"param","id":"newLength"}],"kind":"method","comment":"\nChanges the length of the list. If [newLength] is greater than\nthe current [length], entries are initialized to [:null:]. Throws\nan [UnsupportedError] if the list is not extendable.\n","id":"length=1()","line":"56"},{"returnType":{"name":"void","refId":"void"},"name":"add","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nAdds [value] at the end of the list, extending the length by\none. Throws an [UnsupportedError] if the list is not\nextendable.\n","id":"add1()","line":"63"},{"returnType":{"name":"void","refId":"void"},"name":"addLast","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nAdds [value] at the end of the list, extending the length by\none. Throws an [UnsupportedError] if the list is not\nextendable.\n","id":"addLast1()","line":"70"},{"returnType":{"name":"void","refId":"void"},"name":"addAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"name":"iterable","kind":"param","id":"iterable"}],"kind":"method","comment":"\nAppends all elements of the [iterable] to the end of this list.\nExtends the length of the list by the number of elements in [iterable].\nThrows an [UnsupportedError] if this list is not extensible.\n","id":"addAll1()","line":"77"},{"returnType":{"name":"void","refId":"void"},"name":"sort","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"name":"a","uri":"sdk/lib/core/list.dart","kind":"param","id":"a","line":"95"},{"ref":{"name":"E","refId":"dart.core/List/E"},"name":"b","uri":"sdk/lib/core/list.dart","kind":"param","id":"b","line":"95"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"compare"}],"kind":"method","comment":"\nSorts the list according to the order specified by the [compare] function.\n\nThe [compare] function must act as a [Comparator].\nThe default [List] implementations use [Comparable.compare] if\n[compare] is omitted.\n","id":"sort1()","line":"95"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"indexOf","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"name":"element","kind":"param","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start"}],"kind":"method","comment":"\nReturns the first index of [element] in the list.\n\nSearches the list from index [start] to the length of the list.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nReturns -1 if [element] is not found.\n","id":"indexOf2()","line":"105"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"lastIndexOf","children":[{"ref":{"name":"E","refId":"dart.core/List/E"},"name":"element","kind":"param","id":"element"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"start","kind":"param","id":"start"}],"kind":"method","comment":"\nReturns the last index of [element] in the list.\n\nSearches the list backwards from index [start] (inclusive) to 0.\nThe first time an element [:e:] is encountered so that [:e == element:],\nthe index of [:e:] is returned.\nIf start is not provided, it defaults to [:this.length - 1:] .\nReturns -1 if [element] is not found.\n","id":"lastIndexOf2()","line":"116"},{"returnType":{"name":"void","refId":"void"},"name":"clear","kind":"method","comment":"\nRemoves all elements in the list.\n\nThe length of the list becomes zero.\nThrows an [UnsupportedError], and retains all elements, if the\nlength of the list cannot be changed.\n","id":"clear0()","line":"125"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"name":"removeAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"}],"kind":"method","comment":"\nRemoves the element at position[index] from the list.\n\nThis reduces the length of the list by one and moves all later elements\ndown by one position.\nReturns the removed element.\nThrows an [ArgumentError] if [index] is not an [int].\nThrows an [RangeError] if the [index] does not point inside\nthe list.\nThrows an [UnsupportedError], and doesn't remove the element,\nif the length of the list cannot be changed.\n","id":"removeAt1()","line":"139"},{"returnType":{"name":"E","refId":"dart.core/List/E"},"name":"removeLast","kind":"method","comment":"\nPops and returns the last element of the list.\nThrows a [UnsupportedError] if the length of the\nlist cannot be changed.\n","id":"removeLast0()","line":"146"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"name":"getRange","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"method","comment":"\nReturns a new list containing [length] elements from the list,\nstarting at  [start].\nReturns an empty list if [length] is 0.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] or\n[:start + length - 1:] are out of range.\n","id":"getRange2()","line":"156"},{"returnType":{"name":"void","refId":"void"},"name":"setRange","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"name":"from","kind":"param","id":"from"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"startFrom","kind":"param","id":"startFrom"}],"kind":"method","comment":"\nCopies [length] elements of [from], starting\nat [startFrom], into the list, starting at [start].\nIf [length] is 0, this method does not do anything.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] or\n[:start + length - 1:] are out of range for [:this:], or if\n[startFrom] or [:startFrom + length - 1:] are out of range for [from].\n","id":"setRange4()","line":"167"},{"returnType":{"name":"void","refId":"void"},"name":"removeRange","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"method","comment":"\nRemoves [length] elements from the list, beginning at [start].\nThrows an [UnsupportedError] if the list is\nnot extendable.\nIf [length] is 0, this method does not do anything.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] or\n[:start + length: - 1] are out of range.\n","id":"removeRange2()","line":"178"},{"returnType":{"name":"void","refId":"void"},"name":"insertRange","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isOptional":true,"name":"fill","kind":"param","id":"fill"}],"kind":"method","comment":"\nInserts a new range into the list, starting from [start] to\n[:start + length - 1:]. The entries are filled with [fill].\nThrows an [UnsupportedError] if the list is\nnot extendable.\nIf [length] is 0, this method does not do anything.\nIf [start] is the length of the list, this method inserts the\nrange at the end of the list.\nThrows an [ArgumentError] if [length] is negative.\nThrows an [RangeError] if [start] is negative or if\n[start] is greater than the length of the list.\n","id":"insertRange3()","line":"192"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/List/E"}]},"name":"reversed","kind":"property","comment":"\nReturns a reversed fixed-length view of this [List].\n\nThe reversed list has elements in the opposite order of this list.\nIt is backed by this list, but will stop working if this list\nbecomes shorter than its current length.\n","id":"reversed","line":"86"},{"name":"List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a list of the given [length].\n\nThe length of the returned list is not fixed.\n","id":"List1()","line":"17"},{"name":"List.fixedLength","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"},{"ref":{"name":"E","refId":"dart.core/List/E"},"isNamed":true,"defaultValue":"null","isOptional":true,"name":"fill","kind":"param","id":"fill"}],"kind":"constructor","comment":"\nCreates a fixed-sized list of the given [length] where each entry is\nfilled with [fill].\n","id":"List.fixedLength2()","line":"23"},{"name":"List.from","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"other","kind":"param","id":"other"}],"kind":"constructor","comment":"\nCreates an list with the elements of [other]. The order in\nthe list will be the order provided by the iterator of [other].\n\nThe length of the returned list is not fixed.\n","id":"List.from1()","line":"31"},{"name":"E","kind":"typeparam","id":"E"}],"uri":"sdk/lib/core/list.dart","kind":"class","comment":"\nA [List] is an indexable collection with a length. It can be of\nfixed size or extendable.\n","id":"List","line":"11"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Iterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"moveNext","kind":"method","comment":"\nMoves to the next element. Returns true if [current] contains the next\nelement. Returns false, if no element was left.\n\nIt is safe to invoke [moveNext] even when the iterator is already\npositioned after the last element. In this case [moveNext] has no effect.\n","id":"moveNext0()","line":"35"},{"ref":{"name":"E","refId":"dart.core/Iterator/E"},"name":"current","kind":"property","comment":"\nReturns the current element.\n\nReturn [:null:] if the iterator has not yet been moved to the first\nelement, or if the iterator has been moved after the last element of the\n[Iterable].\n","id":"current","line":"44"},{"name":"E","kind":"typeparam","id":"E"}],"uri":"sdk/lib/core/iterator.dart","kind":"class","comment":"\nThe [Iterator] class provides methods to iterate over an object. It\nis transparently used by the for-in construct to test for the end\nof the iteration, and to get the elements.\n\nIf the object iterated over is changed during the iteration, the\nbehavior is unspecified.\n\nThe [Iterator] is initially positioned before the first element. Before\naccessing the first element the iterator must thus be advanced ([moveNext])\nto point to the first element. If there is no element left, then [moveNext]\nreturns false.\n\nA typical usage of an [Iterator] looks as follows:\n\n    var it = obj.iterator;\n    while (it.moveNext()) {\n      use(it.current);\n    }\n","id":"Iterator","line":"27"},{"interfaces":[{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/_GeneratorIterator/E"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"_GeneratorIterator","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"moveNext","kind":"method","id":"moveNext0()","line":"422"},{"ref":{"name":"E","refId":"dart.core/_GeneratorIterator/E"},"name":"current","kind":"property","id":"current","line":"433"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"name":"_count","isPrivate":true,"kind":"variable","id":"_count","line":"415"},{"isFinal":true,"ref":{"name":"_Generator","refId":"dart.core/_Generator"},"name":"_generator","isPrivate":true,"kind":"variable","id":"_generator","line":"416"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"_index","isPrivate":true,"kind":"variable","id":"_index","line":"417"},{"ref":{"name":"E","refId":"dart.core/_GeneratorIterator/E"},"name":"_current","isPrivate":true,"kind":"variable","id":"_current","line":"418"},{"name":"_GeneratorIterator","children":[{"initializedField":{"name":"_count","refId":"dart.core/_GeneratorIterator/_count"},"ref":{"name":"int","refId":"dart.core/int"},"name":"_count","isPrivate":true,"kind":"param","id":"_count"},{"initializedField":{"name":"_generator","refId":"dart.core/_GeneratorIterator/_generator"},"ref":{"name":"_Generator","refId":"dart.core/_Generator"},"name":"_generator","isPrivate":true,"kind":"param","id":"_generator"}],"kind":"constructor","id":"_GeneratorIterator2()","line":"420"},{"name":"E","kind":"typeparam","id":"E"}],"isPrivate":true,"uri":"sdk/lib/core/iterable.dart","kind":"class","id":"_GeneratorIterator","line":"414"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/_GeneratorIterable/E"}]},"name":"_GeneratorIterable","children":[{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/_GeneratorIterable/E"}]},"name":"iterator","kind":"property","id":"iterator","line":"411"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"name":"_count","isPrivate":true,"kind":"variable","id":"_count","line":"408"},{"isFinal":true,"ref":{"name":"_Generator","refId":"dart.core/_Generator"},"name":"_generator","isPrivate":true,"kind":"variable","id":"_generator","line":"409"},{"name":"_GeneratorIterable","children":[{"initializedField":{"name":"_count","refId":"dart.core/_GeneratorIterable/_count"},"ref":{"name":"int","refId":"dart.core/int"},"name":"_count","isPrivate":true,"kind":"param","id":"_count"},{"initializedField":{"name":"_generator","refId":"dart.core/_GeneratorIterable/_generator"},"ref":{"name":"_Generator","refId":"dart.core/_Generator"},"name":"_generator","isPrivate":true,"kind":"param","id":"_generator"}],"kind":"constructor","id":"_GeneratorIterable2()","line":"410"},{"name":"E","kind":"typeparam","id":"E"}],"isPrivate":true,"uri":"sdk/lib/core/iterable.dart","kind":"class","id":"_GeneratorIterable","line":"407"},{"returnType":{"name":"E","refId":"dart.core/_Generator/E"},"name":"_Generator","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"},{"name":"E","kind":"typeparam","id":"E"}],"isPrivate":true,"uri":"sdk/lib/core/iterable.dart","kind":"typedef","id":"_Generator","line":"405"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Iterable","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"map","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"element","line":"51"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f"}],"kind":"method","comment":"\nReturns a lazy [Iterable] where each element [:e:] of [this] is replaced\nby the result of [:f(e):].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. The transformed elements will not be cached. Iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","id":"map1()","line":"51"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"mappedBy","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"element","line":"57"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f","line":"57"}],"kind":"method","comment":"\nDeprecated alias for [map].\n","id":"mappedBy1()","line":"56"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"name":"where","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"element","line":"69"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f"}],"kind":"method","comment":"\nReturns a lazy [Iterable] with all elements that satisfy the\npredicate [f].\n\nThis method returns a view of the mapped elements. As long as the\nreturned [Iterable] is not iterated over, the supplied function [f] will\nnot be invoked. Iterating will not cache results, and thus iterating\nmultiple times over the the returned [Iterable] will invoke the supplied\nfunction [f] multiple times on the same element.\n","id":"where1()","line":"69"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"expand","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"returnType":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"element","line":"81"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f"}],"kind":"method","comment":"\nExpand each element of this [Iterable] into zero or more elements.\n\nThe resulting Iterable will run through the elements returned\nby [f] for each element of this, in order.\n\nThe returned [Iterable] is lazy, and will call [f] for each element\nof this every time it's iterated.\n","id":"expand1()","line":"81"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"contains","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","kind":"param","id":"element"}],"kind":"method","comment":"\nCheck whether the collection contains an element equal to [element].\n","id":"contains1()","line":"87"},{"returnType":{"name":"void","refId":"void"},"name":"forEach","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"returnType":{"name":"void","refId":"void"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"element","line":"97"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f"}],"kind":"method","comment":"\nApplies the function [f] to each element of this collection.\n","id":"forEach1()","line":"97"},{"name":"reduce","children":[{"name":"initialValue","kind":"param","id":"initialValue"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"combine","children":[{"name":"Function","children":[{"name":"previousValue","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"previousValue","line":"112"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"element","line":"112"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"combine","line":"112"}],"kind":"method","comment":"\nReduce a collection to a single value by iteratively combining each element\nof the collection with an existing value using the provided function.\nUse [initialValue] as the initial value, and the function [combine] to\ncreate a new value from the previous one and an element.\n\nExample of calculating the sum of a collection:\n\n  collection.reduce(0, (prev, element) => prev + element);\n","id":"reduce2()","line":"111"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"every","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"element","line":"122"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f"}],"kind":"method","comment":"\nReturns true if every elements of this collection satisify the\npredicate [f]. Returns false otherwise.\n","id":"every1()","line":"122"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"join","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"separator","kind":"param","id":"separator"}],"kind":"method","comment":"\nConvert each element to a [String] and concatenate the strings.\n\nConverts each element to a [String] by calling [Object.toString] on it.\nThen concatenates the strings, optionally separated by the [separator]\nstring.\n","id":"join1()","line":"136"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"any","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"element","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"element","line":"158"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f"}],"kind":"method","comment":"\nReturns true if one element of this collection satisfies the\npredicate [f]. Returns false otherwise.\n","id":"any1()","line":"158"},{"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"name":"toList","kind":"method","id":"toList0()","line":"165"},{"returnType":{"name":"Set","refId":"dart.core/Set","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"name":"toSet","kind":"method","id":"toSet0()","line":"166"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"min","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"a","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"a","line":"194"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"b","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"b","line":"194"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"compare"}],"kind":"method","comment":"\nFind the least element in the iterable.\n\nReturns null if the iterable is empty.\nOtherwise returns an element [:x:] of this [Iterable] so that\n[:x:] is not greater than [:y:] (that is, [:compare(x, y) <= 0:]) for all\nother elements [:y:] in the iterable.\n\nThe [compare] function must be a proper [Comparator<T>]. If a function is\nnot provided, [compare] defaults to [Comparable.compare].\n","id":"min1()","line":"194"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"max","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"compare","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"a","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"a","line":"217"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"b","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"b","line":"217"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"compare"}],"kind":"method","comment":"\nFind the largest element in the iterable.\n\nReturns null if the iterable is empty.\nOtherwise returns an element [:x:] of this [Iterable] so that\n[:x:] is not smaller than [:y:] (that is, [:compare(x, y) >= 0:]) for all\nother elements [:y:] in the iterable.\n\nThe [compare] function must be a proper [Comparator<T>]. If a function is\nnot provided, [compare] defaults to [Comparable.compare].\n","id":"max1()","line":"217"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"name":"take","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"n","kind":"param","id":"n"}],"kind":"method","comment":"\nReturns an [Iterable] with at most [n] elements.\n\nThe returned [Iterable] may contain fewer than [n] elements, if [this]\ncontains fewer than [n] elements.\n","id":"take1()","line":"240"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"name":"takeWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"value","line":"253"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"test"}],"kind":"method","comment":"\nReturns an [Iterable] that stops once [test] is not satisfied anymore.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will start iterating over the elements of [this].\nWhen the iterator encounters an element [:e:] that does not satisfy [test],\nit discards [:e:] and moves into the finished state. That is, it will not\nask or provide any more elements.\n","id":"takeWhile1()","line":"253"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"name":"skip","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"n","kind":"param","id":"n"}],"kind":"method","comment":"\nReturns an [Iterable] that skips the first [n] elements.\n\nIf [this] has fewer than [n] elements, then the resulting [Iterable] will\nbe empty.\n","id":"skip1()","line":"263"},{"returnType":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"name":"skipWhile","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"value","line":"276"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"test"}],"kind":"method","comment":"\nReturns an [Iterable] that skips elements while [test] is satisfied.\n\nThe filtering happens lazily. Every new [Iterator] of the returned\n[Iterable] will iterate over all elements of [this].\nAs long as the iterator's elements do not satisfy [test] they are\ndiscarded. Once an element satisfies the [test] the iterator stops testing\nand uses every element unconditionally.\n","id":"skipWhile1()","line":"276"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"firstMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"value","line":"331"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"test"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"name":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"Function","uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"orElse"}],"kind":"method","comment":"\nReturns the first element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is `null`, a [StateError] is\nthrown.\n","id":"firstMatching2()","line":"331"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"lastMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"value","line":"347"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"test"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"name":"orElse","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"Function","uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"orElse"}],"kind":"method","comment":"\nReturns the last element that satisfies the given predicate [f].\n\nIf none matches, the result of invoking the [orElse] function is\nreturned. By default, when [orElse] is [:null:], a [StateError] is\nthrown.\n","id":"lastMatching2()","line":"347"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"singleMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"value","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"value","line":"366"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"test"}],"kind":"method","comment":"\nReturns the single element that satisfies [f]. If no or more than one\nelement match then a [StateError] is thrown.\n","id":"singleMatching1()","line":"366"},{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"elementAt","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"param","id":"index"}],"kind":"method","comment":"\nReturns the [index]th element.\n\nIf [this] [Iterable] has fewer than [index] elements throws a\n[RangeError].\n\nNote: if [this] does not have a deterministic iteration order then the\nfunction may simply return any element without any iteration if there are\nat least [index] elements in [this].\n","id":"elementAt1()","line":"393"},{"ref":{"name":"Iterator","refId":"dart.core/Iterator","arguments":[{"name":"E","refId":"dart.core/Iterable/E"}]},"name":"iterator","kind":"property","comment":"\nReturns an [Iterator] that iterates over this [Iterable] object.\n","id":"iterator","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"property","comment":"\nReturns the number of elements in [this].\n\nCounting all elements may be involve running through all elements and can\ntherefore be slow.\n","id":"length","line":"174"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isEmpty","kind":"property","comment":"\nReturns true if there is no element in this collection.\n","id":"isEmpty","line":"232"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"first","kind":"property","comment":"\nReturns the first element.\n\nIf [this] is empty throws a [StateError]. Otherwise this method is\nequivalent to [:this.elementAt(0):]\n","id":"first","line":"286"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"last","kind":"property","comment":"\nReturns the last element.\n\nIf [this] is empty throws a [StateError].\n","id":"last","line":"299"},{"ref":{"name":"E","refId":"dart.core/Iterable/E"},"name":"single","kind":"property","comment":"\nReturns the single element in [this].\n\nIf [this] is empty or has more than one element throws a [StateError].\n","id":"single","line":"316"},{"name":"Iterable","kind":"constructor","id":"Iterable0()","line":"20"},{"name":"Iterable.generate","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"count","kind":"param","id":"count"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"generator","children":[{"returnType":{"name":"E","refId":"dart.core/Iterable/E"},"name":"Function","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","uri":"sdk/lib/core/iterable.dart","kind":"param","id":"index","line":"32"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"generator"}],"kind":"constructor","comment":"\nCreate an [Iterable] that generates its elements dynamically.\n\nThe [Iterators] created by the [Iterable] will count from\nzero to [:count - 1:] while iterating, and call [generator]\nwith that index to create the next value.\n\nAs an [Iterable], [:new Iterable.generate(n, generator)):] is equivalent to\n[:const [0, ..., n - 1].map(generator):]\n","id":"Iterable.generate2()","line":"32"},{"name":"E","kind":"typeparam","id":"E"}],"uri":"sdk/lib/core/iterable.dart","kind":"class","comment":"\nThe [Iterable] interface allows to get an [Iterator] out of an\n[Iterable] object.\n\nThis interface is used by the for-in construct to iterate over an\n[Iterable] object.\nThe for-in construct takes an [Iterable] object at the right-hand\nside, and calls its [iterator] method to get an [Iterator] on it.\n\nA user-defined class that implements the [Iterable] interface can\nbe used as the right-hand side of a for-in construct.\n","id":"Iterable","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"InvocationMirror","children":[{"name":"invokeOn","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"receiver","kind":"param","id":"receiver"}],"kind":"method","comment":"\nPerform the invocation on the provided object.\n\nIf the object doesn't support the invocation, its [noSuchMethod]\nmethod will be called with either this [InvocationMirror] or another\nequivalent [InvocationMirror].\n","id":"invokeOn1()","line":"51"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"memberName","kind":"property","comment":"The name of the invoked member. ","id":"memberName","line":"16"},{"ref":{"name":"List","refId":"dart.core/List"},"name":"positionalArguments","kind":"property","comment":"An unmodifiable view of the positional arguments of the call. ","id":"positionalArguments","line":"19"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"namedArguments","kind":"property","comment":"An unmodifiable view of the named arguments of the call. ","id":"namedArguments","line":"22"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isMethod","kind":"property","comment":"Whether the invocation was a method call. ","id":"isMethod","line":"25"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isGetter","kind":"property","comment":"\nWhether the invocation was a getter call.\nIf so, both types of arguments will be null.\n","id":"isGetter","line":"31"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isSetter","kind":"property","comment":"\nWhether the invocation was a setter call.\n\nIf so, [arguments] will have exactly one positonal argument,\nand namedArguments will be null.\n","id":"isSetter","line":"39"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isAccessor","kind":"property","comment":"Whether the invocation was a getter or a setter call. ","id":"isAccessor","line":"42"}],"uri":"sdk/lib/core/invocation_mirror.dart","kind":"class","comment":"\nRepresentation of the invocation of a member on an object.\n\nThis is the type of objects passed to [Object.noSuchMethod] when\nan object doesn't support the member invocation that was attempted\non it.\n","id":"InvocationMirror","line":"14"},{"superclass":{"name":"num","refId":"dart.core/num"},"isAbstract":true,"name":"int","children":[{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"&","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"The bit-wise and operator. ","id":"&1()","line":"23"},{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"|","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"The bit-wise or operator. ","id":"|1()","line":"26"},{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"^","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"The bit-wise xor operator. ","id":"^1()","line":"29"},{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"~","kind":"method","comment":"The bit-wise negate operator. ","id":"~0()","line":"32"},{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"<<","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"shiftAmount","kind":"param","id":"shiftAmount"}],"kind":"method","comment":"The left shift operator. ","id":"<<1()","line":"35"},{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":">>","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"shiftAmount","kind":"param","id":"shiftAmount"}],"kind":"method","comment":"The right shift operator. ","id":">>1()","line":"38"},{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"unary-","kind":"method","comment":"Negate operator. Negating an integer produces an integer. ","id":"unary-0()","line":"47"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"abs","kind":"method","comment":"Returns the absolute value of this integer. ","id":"abs0()","line":"50"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"round","kind":"method","comment":"Returns [this]. ","id":"round0()","line":"53"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"floor","kind":"method","comment":"Returns [this]. ","id":"floor0()","line":"56"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"ceil","kind":"method","comment":"Returns [this]. ","id":"ceil0()","line":"59"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"truncate","kind":"method","comment":"Returns [this]. ","id":"truncate0()","line":"62"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nReturns a representation of this [int] value.\n\nIt should always be the case that if [:i:] is an [int] value,\nthen [:i == int.parse(i.toString()):].\n","id":"toString0()","line":"70"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toRadixString","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"radix","kind":"param","id":"radix"}],"kind":"method","comment":"\nConverts [this] to a string representation in the given [radix].\n\nIn the string representation, lower-case letters are used for digits above\n'9'.\n\nThe [radix] argument must be an integer in the range 2 to 36.\n","id":"toRadixString1()","line":"80"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"parse","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"source","kind":"param","id":"source"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"isOptional":true,"name":"radix","kind":"param","id":"radix","line":"104"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"isOptional":true,"name":"onError","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"source","uri":"sdk/lib/core/int.dart","kind":"param","id":"source","line":"105"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"onError","line":"105"}],"kind":"method","comment":"\nParse [source] as an integer literal and return its value.\n\nThe [radix] must be in the range 2..36. The digits used are\nfirst the decimal digits 0..9, and then the letters 'a'..'z'.\nAccepts capital letters as well.\n\nIf no [radix] is given then it defaults to 16 if the string starts\nwith \"0x\", \"-0x\" or \"+0x\" and 10 otherwise.\n\nThe [source] must be a non-empty sequence of base-[radix] digits,\noptionally prefixed with a minus or plus sign ('-' or '+').\n\nIt must always be the case for an int [:n:] and radix [:r:] that\n[:n == parseRadix(n.toRadixString(r), r):].\n\nIf the [source] is not a valid integer literal, optionally prefixed by a\nsign, the [onError] is called with the [source] as argument, and its return\nvalue is used instead. If no [onError] is provided, a [FormatException]\nis thrown.\n","id":"parse3()","line":"103"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isEven","kind":"property","comment":"Returns true if and only if this integer is even. ","id":"isEven","line":"41"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isOdd","kind":"property","comment":"Returns true if and only if this integer is odd. ","id":"isOdd","line":"44"}],"uri":"sdk/lib/core/int.dart","kind":"class","comment":"\nRepresentation of Dart integers containing integer specific\noperations and specialization of operations inherited from [num].\n\nIntegers can be arbitrarily large in Dart.\n\n*Note however, that when compiling to JavaScript, integers are\nimplemented as JavaScript numbers. When compiling to JavaScript,\nintegers are therefore restricted to 53 significant bits because\nall JavaScript numbers are double-precision floating point\nvalues. The behavior of the operators and methods in the [int]\nclass therefore sometimes differs between the Dart VM and Dart code\ncompiled to JavaScript.*\n","id":"int","line":"21"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Function","children":[{"isStatic":true,"name":"apply","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"function","kind":"param","id":"function"},{"ref":{"name":"List","refId":"dart.core/List"},"name":"positionalArguments","kind":"param","id":"positionalArguments","line":"31"},{"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"isOptional":true,"name":"namedArguments","kind":"param","id":"namedArguments","line":"32"}],"kind":"method","comment":"\nDynamically call [function] with the specified arguments.\n\nActs the same as calling function with positional arguments\ncorresponding to the elements of [positionalArguments] and\nnamed arguments corresponding to the elements of [namedArguments].\n\nThis includes giving the same errors if [function] isn't callable or\nif it expects different parameters.\n\nExample: [: Function.apply(foo, [1,2,3], {\"f\": 4, \"g\": 5}) :] gives\nexactly the same result as [: foo(1, 2, 3, f: 4, g: 5) :].\n\nIf [positionalArguments] is null, it's considered an empty list.\nIf [namedArguments] is omitted or null, it is considered an empty map.\n","id":"apply3()","line":"30"}],"uri":"sdk/lib/core/function.dart","kind":"class","comment":"\nSuper-type of all function types.\n\nA function value, or an instance of a class with a \"call\" method, is a\nsubtype of a function type, and as such, a subtype of [Function].\n","id":"Function","line":"13"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"ExpectException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"297"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"298"},{"name":"ExpectException","children":[{"initializedField":{"name":"message","refId":"dart.core/ExpectException/message"},"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"ExpectException1()","line":"296"}],"uri":"sdk/lib/core/expect.dart","kind":"class","id":"ExpectException","line":"295"},{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"_CheckExceptionFn","children":[{"name":"exception","kind":"param","id":"exception"}],"isPrivate":true,"uri":"sdk/lib/core/expect.dart","kind":"typedef","id":"_CheckExceptionFn","line":"293"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Expect","children":[{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"equals","children":[{"name":"expected","kind":"param","id":"expected"},{"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nChecks whether the expected and actual values are equal (using `==`).\n","id":"equals3()","line":"18"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"isTrue","children":[{"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nChecks whether the actual value is a bool and its value is true.\n","id":"isTrue2()","line":"27"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"isFalse","children":[{"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nChecks whether the actual value is a bool and its value is false.\n","id":"isFalse2()","line":"36"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"isNull","children":[{"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nChecks whether [actual] is null.\n","id":"isNull2()","line":"45"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"isNotNull","children":[{"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nChecks whether [actual] is not null.\n","id":"isNotNull2()","line":"54"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"identical","children":[{"name":"expected","kind":"param","id":"expected"},{"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nChecks whether the expected and actual values are identical\n(using `identical`).\n","id":"identical3()","line":"64"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"fail","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"msg","kind":"param","id":"msg"}],"kind":"method","id":"fail1()","line":"72"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"approxEquals","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"expected","kind":"param","id":"expected"},{"ref":{"name":"num","refId":"dart.core/num"},"name":"actual","kind":"param","id":"actual","line":"82"},{"ref":{"name":"num","refId":"dart.core/num"},"defaultValue":"null","isOptional":true,"name":"tolerance","kind":"param","id":"tolerance","line":"83"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason","line":"84"}],"kind":"method","comment":"\nFailure if the difference between expected and actual is greater than the\ngiven tolerance. If no tolerance is given, tolerance is assumed to be the\nvalue 4 significant digits smaller than the value given for expected.\n","id":"approxEquals4()","line":"81"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"notEquals","children":[{"name":"unexpected","kind":"param","id":"unexpected"},{"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","id":"notEquals3()","line":"96"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"listEquals","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"expected","kind":"param","id":"expected"},{"ref":{"name":"List","refId":"dart.core/List"},"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nChecks that all elements in [expected] and [actual] are equal `==`.\nThis is different than the typical check for identity equality `identical`\nused by the standard list implementation.  It should also produce nicer\nerror messages than just calling `Expect.equals(expected, actual)`.\n","id":"listEquals3()","line":"109"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"mapEquals","children":[{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"expected","kind":"param","id":"expected"},{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"actual","kind":"param","id":"actual"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason"}],"kind":"method","comment":"\nChecks that all [expected] and [actual] have the same set of keys (using\nthe semantics of [Map.containsKey] to determine what \"same\" means. For\neach key, checks that the values in both maps are equal using `==`.\n","id":"mapEquals3()","line":"133"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"stringEquals","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"expected","kind":"param","id":"expected"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"actual","kind":"param","id":"actual","line":"158"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason","line":"159"}],"kind":"method","comment":"\nSpecialized equality test for strings. When the strings don't match,\nthis method shows where the mismatch starts and ends.\n","id":"stringEquals3()","line":"157"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"setEquals","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"expected","kind":"param","id":"expected"},{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"actual","kind":"param","id":"actual","line":"226"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason","line":"227"}],"kind":"method","comment":"\nChecks that every element of [expected] is also in [actual], and that\nevery element of [actual] is also in [expected].\n","id":"setEquals3()","line":"225"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"throws","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","children":[{"returnType":{"name":"void","refId":"void"},"name":"Function","uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"f"},{"ref":{"name":"_CheckExceptionFn","refId":"dart.core/_CheckExceptionFn"},"defaultValue":"null","isOptional":true,"name":"check","kind":"param","id":"check","line":"266"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"null","isOptional":true,"name":"reason","kind":"param","id":"reason","line":"267"}],"kind":"method","comment":"\nCalls the function [f] and verifies that it throws an exception.\nThe optional [check] function can provide additional validation\nthat the correct exception is being thrown.  For example, to check\nthe type of the exception you could write this:\n\n    Expect.throws(myThrowingFunction, (e) => e is MyException);\n","id":"throws3()","line":"265"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"_getMessage","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"reason","kind":"param","id":"reason"}],"isPrivate":true,"kind":"method","id":"_getMessage1()","line":"283"},{"isStatic":true,"returnType":{"name":"void","refId":"void"},"name":"_fail","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"param","id":"message"}],"isPrivate":true,"kind":"method","id":"_fail1()","line":"286"}],"uri":"sdk/lib/core/expect.dart","kind":"class","comment":"\nExpect is used for tests that do not want to make use of the\nDart unit test library - for example, the core language tests.\nThird parties are discouraged from using this, and should use\nthe expect() function in the unit test library instead for\ntest assertions.\n","id":"Expect","line":"14"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Expando","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nExpando toString method override.\n","id":"toString0()","line":"29"},{"isOperator":true,"returnType":{"name":"T","refId":"dart.core/Expando/T"},"name":"[]","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"object","kind":"param","id":"object"}],"kind":"method","comment":"\nGets the value of this [Expando]'s property on the given\nobject. If the object hasn't been expanded, the method returns\n[null].\n","id":"[]1()","line":"36"},{"isOperator":true,"returnType":{"name":"void","refId":"void"},"name":"[]=","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"object","kind":"param","id":"object"},{"ref":{"name":"T","refId":"dart.core/Expando/T"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the value of this [Expando]'s property on the given\nobject. Properties can effectively be removed again by setting\ntheir value to null.\n","id":"[]=2()","line":"43"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"name","kind":"variable","id":"name","line":"16"},{"name":"Expando","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"name","kind":"param","id":"name"}],"kind":"constructor","comment":"\nCreates a new [Expando]. The optional name is only used for\ndebugging purposes and creating two different [Expando]s with the\nsame name yields two [Expando]s that work on different properties\nof the objects they are used on.\n","id":"Expando1()","line":"24"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/core/expando.dart","kind":"class","comment":"\nAn [Expando] allows adding new properties to objects.\n","id":"Expando","line":"10"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"IntegerDivisionByZeroException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"68"},{"name":"IntegerDivisionByZeroException","kind":"constructor","id":"IntegerDivisionByZeroException0()","line":"67"}],"uri":"sdk/lib/core/exceptions.dart","kind":"class","id":"IntegerDivisionByZeroException","line":"66"},{"superclass":{"name":"FormatException","refId":"dart.core/FormatException"},"isThrowable":true,"name":"IllegalJSRegExpException","children":[{"name":"IllegalJSRegExpException","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"pattern","kind":"param","id":"pattern"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"errmsg","kind":"param","id":"errmsg"}],"kind":"constructor","id":"IllegalJSRegExpException2()","line":"61"}],"uri":"sdk/lib/core/exceptions.dart","kind":"class","comment":"\nDeprecated. Replaced by [FormatException].\n","id":"IllegalJSRegExpException","line":"59"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"FormatException","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"53"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"46"},{"name":"FormatException","children":[{"initializedField":{"name":"message","refId":"dart.core/FormatException/message"},"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"\"\"","isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","comment":"\nCreates a new FormatException with an optional error [message].\n","id":"FormatException1()","line":"51"}],"uri":"sdk/lib/core/exceptions.dart","kind":"class","comment":"\nException thrown when a string or some other data does not have an expected\nformat and cannot be parsed or processed.\n","id":"FormatException","line":"42"},{"interfaces":[{"name":"Exception","refId":"dart.core/Exception"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"_ExceptionImplementation","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"31"},{"isFinal":true,"name":"message","kind":"variable","id":"message","line":"27"},{"name":"_ExceptionImplementation","children":[{"initializedField":{"name":"message","refId":"dart.core/_ExceptionImplementation/message"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"_ExceptionImplementation1()","line":"29"}],"isPrivate":true,"uri":"sdk/lib/core/exceptions.dart","kind":"class","comment":"Default implementation of [Exception] which carries a message. ","id":"_ExceptionImplementation","line":"26"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"isThrowable":true,"name":"Exception","children":[{"name":"Exception","children":[{"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"Exception1()","line":"21"}],"uri":"sdk/lib/core/exceptions.dart","kind":"class","comment":"\nA marker interface implemented by all core library exceptions.\n\nAn [Exception] is intended to convey information to the user about a failure,\nso that the error can be addressed programmatically. It is intended to be\ncaught, and it should contain useful data fields.\n\nCreating instances of [Exception] directly with [:new Exception(\"message\"):]\nis discouraged, and only included as a temporary measure during development,\nuntil the actual exceptions used by a library are done.\n","id":"Exception","line":"20"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"RuntimeError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"284"},{"isFinal":true,"name":"message","kind":"variable","id":"message","line":"282"},{"name":"RuntimeError","children":[{"initializedField":{"name":"message","refId":"dart.core/RuntimeError/message"},"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"RuntimeError1()","line":"283"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown when a runtime error occurs.\n","id":"RuntimeError","line":"281"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"StackOverflowError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"275"},{"name":"StackOverflowError","kind":"constructor","id":"StackOverflowError0()","line":"274"}],"uri":"sdk/lib/core/errors.dart","kind":"class","id":"StackOverflowError","line":"273"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"OutOfMemoryError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"270"},{"name":"OutOfMemoryError","kind":"constructor","id":"OutOfMemoryError0()","line":"269"}],"uri":"sdk/lib/core/errors.dart","kind":"class","id":"OutOfMemoryError","line":"268"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"ConcurrentModificationError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"258"},{"isFinal":true,"ref":{"name":"Object","refId":"dart.core/Object"},"name":"modifiedObject","kind":"variable","id":"modifiedObject","line":"254"},{"name":"ConcurrentModificationError","children":[{"initializedField":{"name":"modifiedObject","refId":"dart.core/ConcurrentModificationError/modifiedObject"},"ref":{"name":"Object","refId":"dart.core/Object"},"isOptional":true,"name":"modifiedObject","kind":"param","id":"modifiedObject"}],"kind":"constructor","id":"ConcurrentModificationError1()","line":"256"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError occurring when a collection is modified during iteration.\n\nSome modifications may be allowed for some collections, so each collection\n([Iterable] or similar collection of values) should declare which operations\nare allowed during an iteration.\n","id":"ConcurrentModificationError","line":"252"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"StateError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"241"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"239"},{"name":"StateError","children":[{"initializedField":{"name":"message","refId":"dart.core/StateError/message"},"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"StateError1()","line":"240"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nThe operation was not allowed by the current state of the object.\n\nThis is a generic error used for a variety of different erroneous\nactions. The message should be descriptive.\n","id":"StateError","line":"238"},{"interfaces":[{"name":"UnsupportedError","refId":"dart.core/UnsupportedError"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"UnimplementedError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"226"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"224"},{"name":"UnimplementedError","children":[{"initializedField":{"name":"message","refId":"dart.core/UnimplementedError/message"},"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"UnimplementedError1()","line":"225"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nThrown by operations that have not been implemented yet.\n\nThis [Error] is thrown by unfinished code that hasn't yet implemented\nall the features it needs.\n\nIf a class is not intending to implement the feature, it should throw\nan [UnsupportedError] instead. This error is only intended for\nuse during development.\n","id":"UnimplementedError","line":"223"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"UnsupportedError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"209"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"variable","id":"message","line":"207"},{"name":"UnsupportedError","children":[{"initializedField":{"name":"message","refId":"dart.core/UnsupportedError/message"},"ref":{"name":"String","refId":"dart.core/String"},"name":"message","kind":"param","id":"message"}],"kind":"constructor","id":"UnsupportedError1()","line":"208"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nThe operation was not allowed by the object.\n\nThis [Error] is thrown when an instance cannot implement one of the methods\nin its signature.\n","id":"UnsupportedError","line":"206"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"NoSuchMethodError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"154"},{"isFinal":true,"ref":{"name":"Object","refId":"dart.core/Object"},"name":"_receiver","isPrivate":true,"kind":"variable","id":"_receiver","line":"127"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"_memberName","isPrivate":true,"kind":"variable","id":"_memberName","line":"128"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List"},"name":"_arguments","isPrivate":true,"kind":"variable","id":"_arguments","line":"129"},{"isFinal":true,"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"_namedArguments","isPrivate":true,"kind":"variable","id":"_namedArguments","line":"130"},{"isFinal":true,"ref":{"name":"List","refId":"dart.core/List"},"name":"_existingArgumentNames","isPrivate":true,"kind":"variable","id":"_existingArgumentNames","line":"131"},{"name":"NoSuchMethodError","children":[{"initializedField":{"name":"_receiver","refId":"dart.core/NoSuchMethodError/_receiver"},"ref":{"name":"Object","refId":"dart.core/Object"},"name":"_receiver","isPrivate":true,"kind":"param","id":"_receiver"},{"initializedField":{"name":"_memberName","refId":"dart.core/NoSuchMethodError/_memberName"},"ref":{"name":"String","refId":"dart.core/String"},"name":"_memberName","isPrivate":true,"kind":"param","id":"_memberName","line":"148"},{"initializedField":{"name":"_arguments","refId":"dart.core/NoSuchMethodError/_arguments"},"ref":{"name":"List","refId":"dart.core/List"},"name":"_arguments","isPrivate":true,"kind":"param","id":"_arguments","line":"149"},{"initializedField":{"name":"_namedArguments","refId":"dart.core/NoSuchMethodError/_namedArguments"},"ref":{"name":"Map","refId":"dart.core/Map","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"_namedArguments","isPrivate":true,"kind":"param","id":"_namedArguments","line":"150"},{"ref":{"name":"List","refId":"dart.core/List"},"defaultValue":"null","isOptional":true,"name":"existingArgumentNames","kind":"param","id":"existingArgumentNames","line":"151"}],"kind":"constructor","comment":"\nCreate a [NoSuchMethodError] corresponding to a failed method call.\n\nThe first parameter to this constructor is the receiver of the method call.\nThat is, the object on which the method was attempted called.\nThe second parameter is the name of the called method or accessor.\nThe third parameter is a list of the positional arguments that the method\nwas called with.\nThe fourth parameter is a map from [String] names to the values of named\narguments that the method was called with.\nThe optional [exisitingArgumentNames] is the expected parameters of a\nmethod with the same name on the receiver, if available. This is\nthe method that would have been called if the parameters had matched.\n","id":"NoSuchMethodError5()","line":"147"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown by the default implementation of [:noSuchMethod:] on [Object].\n","id":"NoSuchMethodError","line":"126"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"AbstractClassInstantiationError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"120"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"_className","isPrivate":true,"kind":"variable","id":"_className","line":"118"},{"name":"AbstractClassInstantiationError","children":[{"initializedField":{"name":"_className","refId":"dart.core/AbstractClassInstantiationError/_className"},"ref":{"name":"String","refId":"dart.core/String"},"name":"_className","isPrivate":true,"kind":"param","id":"_className"}],"kind":"constructor","id":"AbstractClassInstantiationError1()","line":"119"}],"uri":"sdk/lib/core/errors.dart","kind":"class","id":"AbstractClassInstantiationError","line":"117"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"FallThroughError","children":[{"name":"FallThroughError","kind":"constructor","id":"FallThroughError0()","line":"113"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown when control reaches the end of a switch case.\n\nThe Dart specification requires this error to be thrown when\ncontrol reaches the end of a switch case (except the last case\nof a switch) without meeting a break or similar end of the control\nflow.\n","id":"FallThroughError","line":"112"},{"superclass":{"name":"ArgumentError","refId":"dart.core/ArgumentError"},"isThrowable":true,"name":"RangeError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"100"},{"name":"RangeError","children":[{"name":"message","kind":"param","id":"message"}],"kind":"constructor","comment":"\nCreate a new [RangeError] with the given [message].\n\nTemporarily made const for backwards compatibilty.\n","id":"RangeError1()","line":"91"},{"name":"RangeError.value","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"value","kind":"param","id":"value"}],"kind":"constructor","comment":"Create a new [RangeError] with a message for the given [value]. ","id":"RangeError.value1()","line":"94"},{"name":"RangeError.range","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"value","kind":"param","id":"value"},{"ref":{"name":"num","refId":"dart.core/num"},"name":"start","kind":"param","id":"start"},{"ref":{"name":"num","refId":"dart.core/num"},"name":"end","kind":"param","id":"end"}],"kind":"constructor","comment":"Create a new [RangeError] with a message for a value and a range. ","id":"RangeError.range3()","line":"97"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown because of an index outside of the valid range.\n\n","id":"RangeError","line":"83"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"ArgumentError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"71"},{"isFinal":true,"name":"message","kind":"variable","id":"message","line":"66"},{"name":"ArgumentError","children":[{"initializedField":{"name":"message","refId":"dart.core/ArgumentError/message"},"isOptional":true,"name":"message","kind":"param","id":"message"}],"kind":"constructor","comment":"The [message] describes the erroneous argument. ","id":"ArgumentError1()","line":"69"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown when a function is passed an unacceptable argument.\n","id":"ArgumentError","line":"65"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"NullThrownError","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"59"},{"name":"NullThrownError","kind":"constructor","id":"NullThrownError0()","line":"58"}],"uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown when attempting to throw [:null:].\n","id":"NullThrownError","line":"57"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"CastError","uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown by the runtime system when a cast operation fails.\n","id":"CastError","line":"51"},{"interfaces":[{"name":"AssertionError","refId":"dart.core/AssertionError"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"TypeError","uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown by the runtime system when a type assertion fails.\n","id":"TypeError","line":"45"},{"interfaces":[{"name":"Error","refId":"dart.core/Error"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"AssertionError","uri":"sdk/lib/core/errors.dart","kind":"class","comment":"\nError thrown by the runtime system when an assert statement fails.\n","id":"AssertionError","line":"39"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isThrowable":true,"name":"Error","children":[{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"safeToString","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"object","kind":"param","id":"object"}],"kind":"method","comment":"\nSafely convert a value to a [String] description.\n\nThe conversion is guaranteed to not throw, so it won't use the object's\ntoString method.\n","id":"safeToString1()","line":"16"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"_objectToString","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"object","kind":"param","id":"object"}],"isPrivate":true,"kind":"method","id":"_objectToString1()","line":"33"},{"name":"Error","kind":"constructor","id":"Error0()","line":"8"}],"uri":"sdk/lib/core/errors.dart","kind":"class","id":"Error","line":"7"},{"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Duration","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"==","children":[{"name":"other","kind":"param","id":"other"}],"kind":"method","id":"==1()","line":"83"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"compareTo","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"name":"other","kind":"param","id":"other"}],"kind":"method","id":"compareTo1()","line":"92"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"96"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"inDays","kind":"property","comment":"\nThis [Duration] in days. Incomplete days are discarded\n","id":"inDays","line":"55"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"inHours","kind":"property","comment":"\nThis [Duration] in hours. Incomplete hours are discarded.\nThe returned value can be greater than 23.\n","id":"inHours","line":"63"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"inMinutes","kind":"property","comment":"\nThis [Duration] in minutes. Incomplete minutes are discarded.\nThe returned value can be greater than 59.\n","id":"inMinutes","line":"71"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"inSeconds","kind":"property","comment":"\nThis [Duration] in seconds. Incomplete seconds are discarded.\nThe returned value can be greater than 59.\n","id":"inSeconds","line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hashCode","kind":"property","id":"hashCode","line":"88"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MILLISECONDS_PER_SECOND","kind":"variable","id":"MILLISECONDS_PER_SECOND","line":"11"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SECONDS_PER_MINUTE","kind":"variable","id":"SECONDS_PER_MINUTE","line":"12"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MINUTES_PER_HOUR","kind":"variable","id":"MINUTES_PER_HOUR","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"HOURS_PER_DAY","kind":"variable","id":"HOURS_PER_DAY","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MILLISECONDS_PER_MINUTE","kind":"variable","id":"MILLISECONDS_PER_MINUTE","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MILLISECONDS_PER_HOUR","kind":"variable","id":"MILLISECONDS_PER_HOUR","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MILLISECONDS_PER_DAY","kind":"variable","id":"MILLISECONDS_PER_DAY","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SECONDS_PER_HOUR","kind":"variable","id":"SECONDS_PER_HOUR","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SECONDS_PER_DAY","kind":"variable","id":"SECONDS_PER_DAY","line":"24"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MINUTES_PER_DAY","kind":"variable","id":"MINUTES_PER_DAY","line":"26"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"name":"inMilliseconds","kind":"variable","id":"inMilliseconds","line":"31"},{"name":"Duration","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"name":"days","kind":"param","id":"days"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"name":"hours","kind":"param","id":"hours","line":"42"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"name":"minutes","kind":"param","id":"minutes","line":"43"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"name":"seconds","kind":"param","id":"seconds","line":"44"},{"ref":{"name":"int","refId":"dart.core/int"},"isNamed":true,"defaultValue":"0","isOptional":true,"name":"milliseconds","kind":"param","id":"milliseconds","line":"45"}],"kind":"constructor","comment":"\nThe duration is the sum of all individual parts. This means that individual\nparts don't need to be less than the next-bigger unit. For example [hours]\nis allowed to have a value greater than 23.\n\nAll individual parts are allowed to be negative.\nAll arguments are by default 0.\n","id":"Duration5()","line":"41"}],"uri":"sdk/lib/core/duration.dart","kind":"class","comment":"\nA [Duration] represents a time span. A duration can be negative.\n","id":"Duration","line":"10"},{"superclass":{"name":"num","refId":"dart.core/num"},"isAbstract":true,"name":"double","children":[{"returnType":{"name":"double","refId":"dart.core/double"},"name":"remainder","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Return the remainder from dividing this [double] by [other]. ","id":"remainder1()","line":"27"},{"isOperator":true,"returnType":{"name":"double","refId":"dart.core/double"},"name":"+","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Addition operator. ","id":"+1()","line":"30"},{"isOperator":true,"returnType":{"name":"double","refId":"dart.core/double"},"name":"-","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Subtraction operator. ","id":"-1()","line":"33"},{"isOperator":true,"returnType":{"name":"double","refId":"dart.core/double"},"name":"*","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Multiplication operator. ","id":"*1()","line":"36"},{"isOperator":true,"returnType":{"name":"double","refId":"dart.core/double"},"name":"%","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Euclidean modulo operator. ","id":"%1()","line":"39"},{"isOperator":true,"returnType":{"name":"double","refId":"dart.core/double"},"name":"/","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Division operator. ","id":"#slash1()","line":"42"},{"isOperator":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"~/","children":[{"ref":{"name":"num","refId":"dart.core/num"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nTruncating division operator.\n\nThe result of the truncating division [:a ~/ b:] is equivalent to\n[:(a / b).truncate().toInt():].\n","id":"~#slash1()","line":"50"},{"isOperator":true,"returnType":{"name":"double","refId":"dart.core/double"},"name":"unary-","kind":"method","comment":"Negate operator. ","id":"unary-0()","line":"53"},{"returnType":{"name":"double","refId":"dart.core/double"},"name":"abs","kind":"method","comment":"Returns the absolute value of this [double]. ","id":"abs0()","line":"56"},{"returnType":{"name":"double","refId":"dart.core/double"},"name":"round","kind":"method","comment":"\nReturns the integer value closest to this [double].\n\nRounds away from zero when there is no closest integer:\n [:(3.5).round() == 4:] and [:(-3.5).round() == -4:].\n","id":"round0()","line":"64"},{"returnType":{"name":"double","refId":"dart.core/double"},"name":"floor","kind":"method","comment":"Returns the greatest integer value no greater than this [double]. ","id":"floor0()","line":"67"},{"returnType":{"name":"double","refId":"dart.core/double"},"name":"ceil","kind":"method","comment":"Returns the least integer value that is no smaller than this [double]. ","id":"ceil0()","line":"70"},{"returnType":{"name":"double","refId":"dart.core/double"},"name":"truncate","kind":"method","comment":"\nReturns the integer value obtained by discarding any fractional\ndigits from this [double].\n","id":"truncate0()","line":"76"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nProvide a representation of this [double] value.\n\nThe representation is a number literal such that the closest double value\nto the representation's mathematical value is this [double].\n\nReturns \"NaN\" for the Not-a-Number value.\nReturns \"Infinity\" and \"-Infinity\" for positive and negative Infinity.\nReturns \"-0.0\" for negative zero.\n\nIt should always be the case that if [:d:] is a [double], then\n[:d == double.parse(d.toString()):].\n","id":"toString0()","line":"91"},{"isStatic":true,"returnType":{"name":"double","refId":"dart.core/double"},"name":"parse","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"source","kind":"param","id":"source"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isOptional":true,"name":"handleError","children":[{"returnType":{"name":"double","refId":"dart.core/double"},"name":"Function","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"source","uri":"sdk/lib/core/double.dart","kind":"param","id":"source","line":"108"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"handleError","line":"108"}],"kind":"method","comment":"\nParse [source] as an double literal and return its value.\n\nAccepts the same format as double literals:\n  [: ['+'|'-'] [digit* '.'] digit+ [('e'|'E') ['+'|'-'] digit+] :]\n\nAlso recognizes \"NaN\", \"Infinity\" and \"-Infinity\" as inputs and\nreturns the corresponding double value.\n\nIf the [soure] is not a valid double literal, the [handleError]\nis called with the [source] as argument, and its return value is\nused instead. If no handleError is provided, a [FormatException]\nis thrown.\n","id":"parse2()","line":"107"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"name":"NAN","kind":"variable","id":"NAN","line":"20"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"name":"INFINITY","kind":"variable","id":"INFINITY","line":"21"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"name":"NEGATIVE_INFINITY","kind":"variable","id":"NEGATIVE_INFINITY","line":"22"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"name":"MIN_POSITIVE","kind":"variable","id":"MIN_POSITIVE","line":"23"},{"ref":{"name":"double","refId":"dart.core/double"},"isStatic":true,"name":"MAX_FINITE","kind":"variable","id":"MAX_FINITE","line":"24"}],"uri":"sdk/lib/core/double.dart","kind":"class","comment":"\nRepresentation of Dart doubles containing double specific constants\nand operations and specializations of operations inherited from\n[num].\n\nThe [double] type is contagious. Operations on [double]s return\n[double] results.\n","id":"double","line":"19"},{"interfaces":[{"name":"Date","refId":"dart.core/Date"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"DateTime","children":[{"isStatic":true,"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"parse","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"formattedString","kind":"param","id":"formattedString"}],"kind":"method","comment":"\nConstructs a new [DateTime] instance based on [formattedString].\n\nThe function parses a subset of ISO 8601. Examples of accepted strings:\n\n* `\"2012-02-27 13:27:00\"`\n* `\"2012-02-27 13:27:00.123456z\"`\n* `\"20120227 13:27:00\"`\n* `\"20120227T132700\"`\n* `\"20120227\"`\n* `\"+20120227\"`\n* `\"2012-02-27T14Z\"`\n* `\"-123450101 00:00:00 Z\"`: in the year -12345.\n","id":"parse1()","line":"210"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"==","children":[{"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns true if [this] occurs at the same time as [other]. The\ncomparison is independent of whether the time is utc or in the local\ntime zone.\n","id":"==1()","line":"279"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"<","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns true if [this] occurs before [other]. The comparison is independent\nof whether the time is utc or in the local time zone.\n","id":"<1()","line":"288"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"<=","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns true if [this] occurs at the same time or before [other]. The\ncomparison is independent of whether the time is utc or in the local\ntime zone.\n","id":"<=1()","line":"296"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":">","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns true if [this] occurs after [other]. The comparison is independent\nof whether the time is utc or in the local time zone.\n","id":">1()","line":"303"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":">=","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nReturns true if [this] occurs at the same time or after [other]. The\ncomparison is independent of whether the time is utc or in the local\ntime zone.\n","id":">=1()","line":"311"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"compareTo","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","id":"compareTo1()","line":"314"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"toLocal","kind":"method","comment":"\nReturns [this] in the local time zone. Returns itself if it is already in\nthe local time zone. Otherwise, this method is equivalent to\n\n    new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                            isUtc: false)\n","id":"toLocal0()","line":"326"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"toUtc","kind":"method","comment":"\nReturns [this] in UTC. Returns itself if it is already in UTC. Otherwise,\nthis method is equivalent to\n\n    new DateTime.fromMillisecondsSinceEpoch(millisecondsSinceEpoch,\n                                            isUtc: true)\n","id":"toUtc0()","line":"341"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","comment":"\nReturns a human readable string for this instance.\nThe returned string is constructed for the time zone of this instance.\n","id":"toString0()","line":"351"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"add","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"name":"duration","kind":"param","id":"duration"}],"kind":"method","comment":"Returns a new [DateTime] with the [duration] added to [this]. ","id":"add1()","line":"387"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"subtract","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"name":"duration","kind":"param","id":"duration"}],"kind":"method","comment":"Returns a new [DateTime] with the [duration] subtracted from [this]. ","id":"subtract1()","line":"394"},{"returnType":{"name":"Duration","refId":"dart.core/Duration"},"name":"difference","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"Returns a [Duration] with the difference of [this] and [other]. ","id":"difference1()","line":"401"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"_brokenDownDateToMillisecondsSinceEpoch","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"param","id":"year","line":"417"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"month","kind":"param","id":"month","line":"417"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"day","kind":"param","id":"day","line":"417"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hour","kind":"param","id":"hour","line":"417"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"minute","kind":"param","id":"minute","line":"417"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"second","kind":"param","id":"second","line":"417"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"millisecond","kind":"param","id":"millisecond","line":"418"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isUtc","kind":"param","id":"isUtc","line":"418"}],"isPrivate":true,"kind":"method","id":"_brokenDownDateToMillisecondsSinceEpoch8()","line":"416"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hashCode","kind":"property","id":"hashCode","line":"317"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"timeZoneName","kind":"property","comment":"\nReturns the abbreviated time-zone name.\n\nExamples: [:\"CET\":] or [:\"CEST\":].\n","id":"timeZoneName","line":"425"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"name":"timeZoneOffset","kind":"property","comment":"\nThe time-zone offset is the difference between local time and UTC. That is,\nthe offset is positive for time zones west of UTC.\n\nNote, that JavaScript, Python and C return the difference between UTC and\nlocal time. Java, C# and Ruby return the difference between local time and\nUTC.\n","id":"timeZoneOffset","line":"435"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"property","comment":"\nReturns the year.\n","id":"year","line":"440"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"month","kind":"property","comment":"\nReturns the month into the year [1..12].\n","id":"month","line":"445"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"day","kind":"property","comment":"\nReturns the day into the month [1..31].\n","id":"day","line":"450"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hour","kind":"property","comment":"\nReturns the hour into the day [0..23].\n","id":"hour","line":"455"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"minute","kind":"property","comment":"\nReturns the minute into the hour [0...59].\n","id":"minute","line":"460"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"second","kind":"property","comment":"\nReturns the second into the minute [0...59].\n","id":"second","line":"465"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"millisecond","kind":"property","comment":"\nReturns the millisecond into the second [0...999].\n","id":"millisecond","line":"470"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"weekday","kind":"property","comment":"\nReturns the week day [MON..SUN]. In accordance with ISO 8601\na week starts with Monday which has the value 1.\n","id":"weekday","line":"476"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MON","kind":"variable","id":"MON","line":"113"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"TUE","kind":"variable","id":"TUE","line":"114"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"WED","kind":"variable","id":"WED","line":"115"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"THU","kind":"variable","id":"THU","line":"116"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"FRI","kind":"variable","id":"FRI","line":"117"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SAT","kind":"variable","id":"SAT","line":"118"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SUN","kind":"variable","id":"SUN","line":"119"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"DAYS_IN_WEEK","kind":"variable","id":"DAYS_IN_WEEK","line":"120"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"JAN","kind":"variable","id":"JAN","line":"123"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"FEB","kind":"variable","id":"FEB","line":"124"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MAR","kind":"variable","id":"MAR","line":"125"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"APR","kind":"variable","id":"APR","line":"126"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MAY","kind":"variable","id":"MAY","line":"127"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"JUN","kind":"variable","id":"JUN","line":"128"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"JUL","kind":"variable","id":"JUL","line":"129"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"AUG","kind":"variable","id":"AUG","line":"130"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SEP","kind":"variable","id":"SEP","line":"131"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"OCT","kind":"variable","id":"OCT","line":"132"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NOV","kind":"variable","id":"NOV","line":"133"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"DEC","kind":"variable","id":"DEC","line":"134"},{"isFinal":true,"ref":{"name":"int","refId":"dart.core/int"},"name":"millisecondsSinceEpoch","kind":"variable","id":"millisecondsSinceEpoch","line":"142"},{"isFinal":true,"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isUtc","kind":"variable","id":"isUtc","line":"147"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"_MAX_MILLISECONDS_SINCE_EPOCH","isPrivate":true,"kind":"variable","id":"_MAX_MILLISECONDS_SINCE_EPOCH","line":"253"},{"name":"DateTime","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"param","id":"year"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"name":"month","kind":"param","id":"month","line":"158"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"name":"day","kind":"param","id":"day","line":"159"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"hour","kind":"param","id":"hour","line":"160"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"minute","kind":"param","id":"minute","line":"161"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"second","kind":"param","id":"second","line":"162"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"millisecond","kind":"param","id":"millisecond","line":"163"}],"kind":"constructor","comment":"\nConstructs a [DateTime] instance based on the individual parts. The date is\nin the local time zone.\n\n[month] and [day] are one-based. For example\n[:new DateTime(1938, 1, 10):] represents the 10th of January 1938.\n","id":"DateTime7()","line":"157"},{"name":"DateTime.utc","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"param","id":"year"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"name":"month","kind":"param","id":"month","line":"178"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"name":"day","kind":"param","id":"day","line":"179"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"hour","kind":"param","id":"hour","line":"180"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"minute","kind":"param","id":"minute","line":"181"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"second","kind":"param","id":"second","line":"182"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"millisecond","kind":"param","id":"millisecond","line":"183"}],"kind":"constructor","comment":"\nConstructs a [DateTime] instance based on the individual parts. The date is\nin the UTC time zone.\n\n[month] and [day] are one-based. For example\n[:new DateTime.utc(1938, 1, 10):] represents the 10th of January 1938 in\nCoordinated Universal Time.\n","id":"DateTime.utc7()","line":"177"},{"name":"DateTime.now","kind":"constructor","comment":"\nConstructs a new [DateTime] instance with current date time value in the\nlocal time zone.\n","id":"DateTime.now0()","line":"193"},{"name":"DateTime.fromMillisecondsSinceEpoch","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"millisecondsSinceEpoch","kind":"param","id":"millisecondsSinceEpoch"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"name":"isUtc","kind":"param","id":"isUtc","line":"265"}],"kind":"constructor","comment":"\nConstructs a new [DateTime] instance with the given [millisecondsSinceEpoch].\nIf [isUtc] is false then the date is in the local time zone.\n\nThe constructed [DateTime] represents\n1970-01-01T00:00:00Z + [millisecondsSinceEpoch]ms in the given\ntime zone (local or UTC).\n","id":"DateTime.fromMillisecondsSinceEpoch2()","line":"264"},{"name":"DateTime._internal","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"param","id":"year"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"month","kind":"param","id":"month","line":"408"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"day","kind":"param","id":"day","line":"409"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hour","kind":"param","id":"hour","line":"410"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"minute","kind":"param","id":"minute","line":"411"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"second","kind":"param","id":"second","line":"412"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"millisecond","kind":"param","id":"millisecond","line":"413"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isUtc","kind":"param","id":"isUtc","line":"414"}],"isPrivate":true,"kind":"constructor","id":"DateTime._internal8()","line":"407"},{"name":"DateTime._now","isPrivate":true,"kind":"constructor","id":"DateTime._now0()","line":"415"}],"uri":"sdk/lib/core/date_time.dart","kind":"class","comment":"\nA DateTime object represents a point in time.\n\nIt can represent time values that are at a distance of at most\n8,640,000,000,000,000ms (100,000,000 days) from epoch (1970-01-01 UTC). In\nother words: [:millisecondsSinceEpoch.abs() <= 8640000000000000:].\n\nAlso see [Stopwatch] for means to measure time-spans.\n","id":"DateTime","line":"111"},{"interfaces":[{"name":"Comparable","refId":"dart.core/Comparable"}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Date","children":[{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"==","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","id":"==1()","line":"68"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"<","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","id":"<1()","line":"69"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"<=","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","id":"<=1()","line":"70"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":">","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","id":">1()","line":"71"},{"isOperator":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":">=","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","id":">=1()","line":"72"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"toLocal","kind":"method","id":"toLocal0()","line":"75"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"toUtc","kind":"method","id":"toUtc0()","line":"76"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"95"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"add","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"name":"duration","kind":"param","id":"duration"}],"kind":"method","id":"add1()","line":"97"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"subtract","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"name":"duration","kind":"param","id":"duration"}],"kind":"method","id":"subtract1()","line":"98"},{"returnType":{"name":"Duration","refId":"dart.core/Duration"},"name":"difference","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"other","kind":"param","id":"other"}],"kind":"method","id":"difference1()","line":"99"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"timeZoneName","kind":"property","id":"timeZoneName","line":"78"},{"ref":{"name":"Duration","refId":"dart.core/Duration"},"name":"timeZoneOffset","kind":"property","id":"timeZoneOffset","line":"79"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"property","id":"year","line":"81"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"month","kind":"property","id":"month","line":"82"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"day","kind":"property","id":"day","line":"83"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hour","kind":"property","id":"hour","line":"84"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"minute","kind":"property","id":"minute","line":"85"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"second","kind":"property","id":"second","line":"86"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"millisecond","kind":"property","id":"millisecond","line":"87"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"weekday","kind":"property","id":"weekday","line":"89"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"millisecondsSinceEpoch","kind":"property","id":"millisecondsSinceEpoch","line":"91"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isUtc","kind":"property","id":"isUtc","line":"93"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MON","kind":"variable","id":"MON","line":"13"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"TUE","kind":"variable","id":"TUE","line":"14"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"WED","kind":"variable","id":"WED","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"THU","kind":"variable","id":"THU","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"FRI","kind":"variable","id":"FRI","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SAT","kind":"variable","id":"SAT","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SUN","kind":"variable","id":"SUN","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"DAYS_IN_WEEK","kind":"variable","id":"DAYS_IN_WEEK","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"JAN","kind":"variable","id":"JAN","line":"23"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"FEB","kind":"variable","id":"FEB","line":"24"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MAR","kind":"variable","id":"MAR","line":"25"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"APR","kind":"variable","id":"APR","line":"26"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"MAY","kind":"variable","id":"MAY","line":"27"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"JUN","kind":"variable","id":"JUN","line":"28"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"JUL","kind":"variable","id":"JUL","line":"29"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"AUG","kind":"variable","id":"AUG","line":"30"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"SEP","kind":"variable","id":"SEP","line":"31"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"OCT","kind":"variable","id":"OCT","line":"32"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"NOV","kind":"variable","id":"NOV","line":"33"},{"ref":{"name":"int","refId":"dart.core/int"},"isStatic":true,"name":"DEC","kind":"variable","id":"DEC","line":"34"},{"name":"Date","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"param","id":"year"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"name":"month","kind":"param","id":"month","line":"37"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"name":"day","kind":"param","id":"day","line":"38"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"hour","kind":"param","id":"hour","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"minute","kind":"param","id":"minute","line":"40"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"second","kind":"param","id":"second","line":"41"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"millisecond","kind":"param","id":"millisecond","line":"42"}],"kind":"constructor","id":"Date7()","line":"36"},{"name":"Date.utc","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"param","id":"year"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"name":"month","kind":"param","id":"month","line":"47"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"1","isOptional":true,"name":"day","kind":"param","id":"day","line":"48"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"hour","kind":"param","id":"hour","line":"49"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"minute","kind":"param","id":"minute","line":"50"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"second","kind":"param","id":"second","line":"51"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"millisecond","kind":"param","id":"millisecond","line":"52"}],"kind":"constructor","id":"Date.utc7()","line":"46"},{"name":"Date.now","kind":"constructor","id":"Date.now0()","line":"57"},{"name":"Date.fromString","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"formattedString","kind":"param","id":"formattedString"}],"kind":"constructor","id":"Date.fromString1()","line":"59"},{"name":"Date.fromMillisecondsSinceEpoch","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"millisecondsSinceEpoch","kind":"param","id":"millisecondsSinceEpoch"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"name":"isUtc","kind":"param","id":"isUtc","line":"63"}],"kind":"constructor","id":"Date.fromMillisecondsSinceEpoch2()","line":"62"}],"uri":"sdk/lib/core/date_time.dart","kind":"class","comment":"\nDeprecated class. Please use [DateTime] instead.\n","id":"Date","line":"10"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Comparable","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"compareTo","children":[{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"name":"other","kind":"param","id":"other"}],"kind":"method","comment":"\nCompares this object to another [Comparable]\n\nReturns a value like a [Comparator] when comparing [:this:] to [other].\n\nMay throw an [ArgumentError] if [other] is of a type that\nis not comparable to [:this:].\n","id":"compareTo1()","line":"34"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"compare","children":[{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"name":"a","kind":"param","id":"a"},{"ref":{"name":"Comparable","refId":"dart.core/Comparable"},"name":"b","kind":"param","id":"b"}],"kind":"method","comment":"\nCompare one comparable to another.\n\nThis utility function is used as the default comparator\nfor the [List] sort function.\n","id":"compare2()","line":"42"}],"uri":"sdk/lib/core/comparable.dart","kind":"class","comment":"\nInterface used by types that have an intrinsic ordering.\n","id":"Comparable","line":"25"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"Comparator","children":[{"ref":{"name":"T","refId":"dart.core/Comparator/T"},"name":"a","kind":"param","id":"a"},{"ref":{"name":"T","refId":"dart.core/Comparator/T"},"name":"b","kind":"param","id":"b"},{"name":"T","kind":"typeparam","id":"T"}],"uri":"sdk/lib/core/comparable.dart","kind":"typedef","comment":"\nThe signature of a generic comparison function.\n\nA comparison function represents an ordering on a type of objects.\nA total ordering on a type means that for two values, either they\nare equal or one is greater than the other (and the latter must then be\nsmaller than the former).\n\nA [Comparator] function represents such a total ordering by returning\n* a negative integer if [a] is smaller than [b],\n* zero if [a] is equal to [b], and\n* a positive integer if [a] is greater than [b].\n","id":"Comparator","line":"20"},{"superclass":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Collection/E"}]},"isAbstract":true,"name":"Collection","children":[{"returnType":{"name":"void","refId":"void"},"name":"add","children":[{"ref":{"name":"E","refId":"dart.core/Collection/E"},"name":"element","kind":"param","id":"element"}],"kind":"method","comment":"\nAdds an element to this collection.\n","id":"add1()","line":"25"},{"returnType":{"name":"void","refId":"void"},"name":"addAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable","arguments":[{"name":"E","refId":"dart.core/Collection/E"}]},"name":"elements","kind":"param","id":"elements"}],"kind":"method","comment":"\nAdds all of [elements] to this collection.\n\nEquivalent to adding each element in [elements] using [add],\nbut some collections may be able to optimize it.\n","id":"addAll1()","line":"33"},{"returnType":{"name":"void","refId":"void"},"name":"remove","children":[{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"element","kind":"param","id":"element"}],"kind":"method","comment":"\nRemoves an instance of [element] from this collection.\n\nThis removes only one instance of the element for collections that can\ncontain the same element more than once (e.g., [List]). Which instance\nis removed is decided by the collection.\n\nHas no effect if the elements is not in this collection.\n","id":"remove1()","line":"48"},{"returnType":{"name":"void","refId":"void"},"name":"removeAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"elements","kind":"param","id":"elements"}],"kind":"method","comment":"\nRemoves all of [elements] from this collection.\n\nEquivalent to calling [remove] once for each element in\n[elements], but may be faster for some collections.\n","id":"removeAll1()","line":"56"},{"returnType":{"name":"void","refId":"void"},"name":"retainAll","children":[{"ref":{"name":"Iterable","refId":"dart.core/Iterable"},"name":"elements","kind":"param","id":"elements"}],"kind":"method","comment":"\nRemoves all elements of this collection that are not\nin [elements].\n\nFor [Set]s, this is the intersection of the two original sets.\n","id":"retainAll1()","line":"66"},{"returnType":{"name":"void","refId":"void"},"name":"removeMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Collection/E"},"name":"element","uri":"sdk/lib/core/collection.dart","kind":"param","id":"element","line":"75"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"test"}],"kind":"method","comment":"\nRemoves all elements of this collection that satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","id":"removeMatching1()","line":"75"},{"returnType":{"name":"void","refId":"void"},"name":"retainMatching","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"test","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"Function","children":[{"ref":{"name":"E","refId":"dart.core/Collection/E"},"name":"element","uri":"sdk/lib/core/collection.dart","kind":"param","id":"element","line":"84"}],"uri":"sdk/lib/core/function.dart","kind":"functiontype","id":"Function","line":"13"}],"kind":"param","id":"test"}],"kind":"method","comment":"\nRemoves all elements of this collection that fail to satisfy [test].\n\nAn elements [:e:] satisfies [test] if [:test(e):] is true.\n","id":"retainMatching1()","line":"84"},{"returnType":{"name":"void","refId":"void"},"name":"clear","kind":"method","comment":"\nRemoves all elements of this collection.\n","id":"clear0()","line":"91"},{"name":"Collection","kind":"constructor","id":"Collection0()","line":"20"},{"name":"E","kind":"typeparam","id":"E"}],"uri":"sdk/lib/core/collection.dart","kind":"class","comment":"\nA collection of individual elements.\n\nA [Collection] contains some elements in a structure optimized\nfor certain operations. Different collections are optimized for different\nuses.\n\nA collection can be updated by adding or removing elements.\n\nCollections are [Iterable]. The order of iteration is defined by\neach type of collection.\n","id":"Collection","line":"19"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"bool","children":[{"name":"bool._uninstantiable","isPrivate":true,"kind":"constructor","id":"bool._uninstantiable0()","line":"8"}],"uri":"sdk/lib/core/bool.dart","kind":"class","id":"bool","line":"7"}],"uri":"sdk/lib/core/core.dart","kind":"library","id":"dart.core","line":"5"}