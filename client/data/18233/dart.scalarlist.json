{"name":"dart:scalarlist","children":[{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"double","refId":"dart.core/double"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Float64List","children":[{"name":"Float64List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a [Float64List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","id":"Float64List1()","line":"682"},{"name":"Float64List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start","line":"703"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length","line":"703"}],"kind":"constructor","comment":"\nCreates a [Float64List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Float64List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 8 (the size of a \"float64\" in bytes), or if the\n[start] of the region is not divisible by 8. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 8. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"float64s,\" or if it\nis not \"float64-aligned.\"\n","id":"Float64List.view3()","line":"702"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of IEEE 754 double-precision binary floating-point\nnumbers  that is viewable as a [ByteArray]. For long lists, this\nimplementation will be considerably more space- and time-efficient than\nthe default [List] implementation.\n","id":"Float64List","line":"677"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"double","refId":"dart.core/double"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Float32List","children":[{"name":"Float32List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a [Float32List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","id":"Float32List1()","line":"646"},{"name":"Float32List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start","line":"667"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length","line":"667"}],"kind":"constructor","comment":"\nCreates a [Float32List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Float32List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 4 (the size of a \"float32\" in bytes), or if the\n[start] of the region is not divisible by 4. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 4. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"float32s,\" or if it\nis not \"float32-aligned.\"\n","id":"Float32List.view3()","line":"666"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of IEEE 754 single-precision binary floating-point\nnumbers  that is viewable as a [ByteArray]. For long lists, this\nimplementation will be considerably more space- and time-efficient than\nthe default [List] implementation.\n","id":"Float32List","line":"641"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Uint64List","children":[{"name":"Uint64List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a [Uint64List] of the specified length (in elements), all\nof whose elements are initially zero.\n","id":"Uint64List1()","line":"610"},{"name":"Uint64List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start","line":"631"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length","line":"631"}],"kind":"constructor","comment":"\nCreates an [Uint64List] _view_ of the specified region in\nthe specified byte [array]. Changes in the [Uint64List] will be\nvisible in the byte array and vice versa. If the [start] index of the\nregion is not specified, it defaults to zero (the first byte in the byte\narray). If the length is not specified, it defaults to null, which\nindicates that the view extends to the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 8 (the size of a \"uint64\" in bytes), or if the\n[start] of the region is not divisible by 8. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 8. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"uint64s,\" or if it\nis not \"uint64-aligned.\"\n","id":"Uint64List.view3()","line":"630"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 64-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","id":"Uint64List","line":"605"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Int64List","children":[{"name":"Int64List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates an [Int64List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","id":"Int64List1()","line":"576"},{"name":"Int64List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates an [Int64List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Int64List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 8 (the size of an \"int64\" in bytes), or if the\n[start] of the region is not divisible by 8. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 8. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"int64s,\" or if it\nis not \"int64-aligned.\"\n","id":"Int64List.view3()","line":"596"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 64-bit signed integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","id":"Int64List","line":"571"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Uint32List","children":[{"name":"Uint32List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a [Uint32List] of the specified length (in elements), all\nof whose elements are initially zero.\n","id":"Uint32List1()","line":"541"},{"name":"Uint32List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start","line":"562"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length","line":"562"}],"kind":"constructor","comment":"\nCreates a [Uint32List] _view_ of the specified region in\nthe specified byte [array]. Changes in the [Uint32] will be\nvisible in the byte array and vice versa. If the [start] index of the\nregion is not specified, it defaults to zero (the first byte in the byte\narray). If the length is not specified, it defaults to null, which\nindicates that the view extends to the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 4 (the size of a \"uint32\" in bytes), or if the\n[start] of the region is not divisible by 4. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 4. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"uint32s,\" or if it\nis not \"uint32-aligned.\"\n","id":"Uint32List.view3()","line":"561"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 32-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","id":"Uint32List","line":"536"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Int32List","children":[{"name":"Int32List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates an [Int32List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","id":"Int32List1()","line":"507"},{"name":"Int32List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates an [Int32List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Int32List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 4 (the size of an \"int32\" in bytes), or if the\n[start] of the region is not divisible by 4. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 4. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"int32s,\" or if it\nis not \"int32-aligned.\"\n","id":"Int32List.view3()","line":"527"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 32-bit signed integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","id":"Int32List","line":"502"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Uint16List","children":[{"name":"Uint16List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a [Uint16List] of the specified length (in elements), all\nof whose elements are initially zero.\n","id":"Uint16List1()","line":"472"},{"name":"Uint16List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start","line":"493"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length","line":"493"}],"kind":"constructor","comment":"\nCreates a [Uint16List] _view_ of the specified region in\nthe specified byte [array]. Changes in the [Uint16List] will be\nvisible in the byte array and vice versa. If the [start] index of the\nregion is not specified, it defaults to zero (the first byte in the byte\narray). If the length is not specified, it defaults to null, which\nindicates that the view extends to the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 2 (the size of a \"uint16\" in bytes), or if the\n[start] of the region is not divisible by 2. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 2. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"uint16s,\" or if it\nis not \"uint16-aligned.\"\n","id":"Uint16List.view3()","line":"492"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 16-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","id":"Uint16List","line":"467"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Int16List","children":[{"name":"Int16List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates an [Int16List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","id":"Int16List1()","line":"438"},{"name":"Int16List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates an [Int16List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Int16List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n\nThrows [ArgumentError] if the length of the specified region\nis not divisible by 2 (the size of an \"int16\" in bytes), or if the\n[start] of the region is not divisible by 2. If, however, [array]\nis a view of another byte array, this constructor will throw\n[ArgumentError] if the implicit starting position in the\n\"ultimately backing\" byte array is not divisible by 2. In plain terms,\nthis constructor throws [ArgumentError] if the specified\nregion does not contain an integral number of \"int16s,\" or if it\nis not \"int16-aligned.\"\n","id":"Int16List.view3()","line":"458"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 16-bit signed integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","id":"Int16List","line":"433"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Uint8ClampedList","children":[{"name":"Uint8ClampedList","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a [Uint8ClampedList] of the specified length (in elements), all of\nwhose elements are initially zero.\n","id":"Uint8ClampedList1()","line":"413"},{"name":"Uint8ClampedList.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start","line":"424"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length","line":"424"}],"kind":"constructor","comment":"\nCreates a [Uint8ClampedList] _view_ of the specified region in the\nspecified byte [array]. Changes in the [Uint8List] will be visible in the\nbyte array and vice versa. If the [start] index of the region is not\nspecified, it defaults to zero (the first byte in the byte array). If the\nlength is not specified, it defaults to null, which indicates that the view\nextends to the end of the byte array.\n","id":"Uint8ClampedList.view3()","line":"423"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 8-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\nIndexed store clamps the value to range 0..0xFF.\n","id":"Uint8ClampedList","line":"408"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Uint8List","children":[{"name":"Uint8List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a [Uint8List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","id":"Uint8List1()","line":"388"},{"name":"Uint8List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates a [Uint8List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Uint8List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n","id":"Uint8List.view3()","line":"398"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 8-bit unsigned integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","id":"Uint8List","line":"383"},{"interfaces":[{"name":"ByteArrayViewable","refId":"dart.scalarlist/ByteArrayViewable"},{"name":"List","refId":"dart.core/List","arguments":[{"name":"int","refId":"dart.core/int"}]}],"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"Int8List","children":[{"name":"Int8List","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates an [Int8List] of the specified length (in elements), all of\nwhose elements are initially zero.\n","id":"Int8List1()","line":"364"},{"name":"Int8List.view","children":[{"ref":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"array","kind":"param","id":"array"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length"}],"kind":"constructor","comment":"\nCreates an [Int8List] _view_ of the specified region in the specified\nbyte [array]. Changes in the [Int8List] will be visible in the byte\narray and vice versa. If the [start] index of the region is not specified,\nit defaults to zero (the first byte in the byte array). If the length is\nnot specified, it defaults to null, which indicates that the view extends\nto the end of the byte array.\n","id":"Int8List.view3()","line":"374"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA fixed-length list of 8-bit signed integers that is viewable as a\n[ByteArray]. For long lists, this implementation will be considerably\nmore space- and time-efficient than the default [List] implementation.\n","id":"Int8List","line":"359"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"ByteArrayViewable","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"bytesPerElement","kind":"method","comment":"\nReturns the number of bytes in the representation of each element in\nthis list, or the number bytes in the representation of the entire\nobject if it is not a list.\n","id":"bytesPerElement0()","line":"339"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"lengthInBytes","kind":"method","comment":"\nReturns the length of this view, in bytes.\n","id":"lengthInBytes0()","line":"344"},{"returnType":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"asByteArray","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length"}],"kind":"method","comment":"\nReturns the byte array view of this object. This view allows the\nbyte representation of the object to be read and written directly.\n","id":"asByteArray2()","line":"350"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA \"mixin interface\" that allows a type, typically but not necessarily\na [List], to be viewed as a [ByteArray].\n","id":"ByteArrayViewable","line":"333"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"ByteArray","children":[{"returnType":{"name":"int","refId":"dart.core/int"},"name":"lengthInBytes","kind":"method","comment":"\nReturns the length of this byte array, in bytes.\n","id":"lengthInBytes0()","line":"28"},{"returnType":{"name":"ByteArray","refId":"dart.scalarlist/ByteArray"},"name":"subByteArray","children":[{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"start","kind":"param","id":"start"},{"ref":{"name":"int","refId":"dart.core/int"},"isOptional":true,"name":"length","kind":"param","id":"length"}],"kind":"method","comment":"\nReturns a [ByteArray] _view_ of a portion of this byte array.\nThe returned byte array consists of [length] bytes starting\nat position [start] in this byte array. The returned byte array\nis backed by the same data as this byte array. In other words,\nchanges to the returned byte array are visible in this byte array\nand vice-versa.\n\nThrows [RangeError] if [start] or [length] are negative, or\nif `start + length` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [length] is negative.\n","id":"subByteArray2()","line":"44"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"getInt8","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the (possibly negative) integer represented by the byte at the\nspecified [byteOffset] in this byte array, in two's complement binary\nrepresentation. The return value will be between -128 and 127, inclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\ngreater than or equal to the length of this byte array.\n","id":"getInt81()","line":"54"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setInt8","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the byte at the specified [byteOffset] in this byte array to the\ntwo's complement binary representation of the specified [value], which\nmust fit in a single byte. In other words, [value] must be between\n-128 and 127, inclusive.\n\nReturns `byteOffset + 1`, which is the offset of the first byte in the\narray after the byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\ngreater than or equal to the length of this byte array.\n\nThrows [ArgumentError] if [value] is less than -128 or\ngreater than 127.\n","id":"setInt82()","line":"72"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"getUint8","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the positive integer represented by the byte at the specified\n[byteOffset] in this byte array, in unsigned binary form. The\nreturn value will be between 0 and 255, inclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\ngreater than or equal to the length of this byte array.\n","id":"getUint81()","line":"82"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setUint8","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the byte at the specified [byteOffset] in this byte array to the\nunsigned binary representation of the specified [value], which must fit\nin a single byte. in other words, [value] must be between 0 and 255,\ninclusive.\n\nReturns `byteOffset + 1`, which is the offset of the first byte in the\narray after the byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative,\nor greater than or equal to the length of this byte array.\n\nThrows [ArgumentError] if [value] is negative or\ngreater than 255.\n","id":"setUint82()","line":"100"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"getInt16","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the (possibly negative) integer represented by the two bytes at\nthe specified [byteOffset] in this byte array, in two's complement binary\nform. The return value will be between 2<sup>15</sup> and 2<sup>15 - 1,\ninclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 2` is greater than the length of this byte array.\n","id":"getInt161()","line":"111"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setInt16","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the two bytes starting at the specified [byteOffset] in this\nbyte array to the two's complement binary representation of the specified\n[value], which must fit in two bytes. In other words, [value] must lie\nbetween 2<sup>15</sup> and 2<sup>15 - 1, inclusive.\n\nReturns `byteOffset + 2`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 2` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is less than 2<sup>15</sup>\nor greater than 2<sup>15 - 1.\n","id":"setInt162()","line":"129"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"getUint16","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the positive integer represented by the two bytes starting\nat the specified [byteOffset] in this byte array, in unsigned binary\nform. The return value will be between 0 and  2<sup>16 - 1, inclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 2` is greater than the length of this byte array.\n","id":"getUint161()","line":"139"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setUint16","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the two bytes starting at the specified [byteOffset] in this byte\narray to the unsigned binary representation of the specified [value],\nwhich must fit in two bytes. in other words, [value] must be between\n0 and 2<sup>16 - 1, inclusive.\n\nReturns `byteOffset + 2`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 2` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is negative or\ngreater than 2<sup>16 - 1.\n","id":"setUint162()","line":"157"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"getInt32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the (possibly negative) integer represented by the four bytes at\nthe specified [byteOffset] in this byte array, in two's complement binary\nform. The return value will be between 2<sup>31</sup> and 2<sup>31 - 1,\ninclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n","id":"getInt321()","line":"168"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setInt32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the four bytes starting at the specified [byteOffset] in this\nbyte array to the two's complement binary representation of the specified\n[value], which must fit in four bytes. In other words, [value] must lie\nbetween 2<sup>31</sup> and 2<sup>31 - 1, inclusive.\n\nReturns `byteOffset + 4`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is less than 2<sup>31</sup>\nor greater than 2<sup>31 - 1.\n","id":"setInt322()","line":"186"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"getUint32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the positive integer represented by the four bytes starting\nat the specified [byteOffset] in this byte array, in unsigned binary\nform. The return value will be between 0 and  2<sup>32 - 1, inclusive.\n\n","id":"getUint321()","line":"194"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setUint32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the four bytes starting at the specified [byteOffset] in this byte\narray to the unsigned binary representation of the specified [value],\nwhich must fit in four bytes. in other words, [value] must be between\n0 and 2<sup>32 - 1, inclusive.\n\nReturns `byteOffset + 4`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is negative or\ngreater than 2<sup>32 - 1.\n","id":"setUint322()","line":"212"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"getInt64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the (possibly negative) integer represented by the eight bytes at\nthe specified [byteOffset] in this byte array, in two's complement binary\nform. The return value will be between 2<sup>63</sup> and 2<sup>63 - 1,\ninclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n","id":"getInt641()","line":"223"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setInt64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the eight bytes starting at the specified [byteOffset] in this\nbyte array to the two's complement binary representation of the specified\n[value], which must fit in eight bytes. In other words, [value] must lie\nbetween 2<sup>63</sup> and 2<sup>63 - 1, inclusive.\n\nReturns `byteOffset + 8`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is less than 2<sup>63</sup>\nor greater than 2<sup>63 - 1.\n","id":"setInt642()","line":"241"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"getUint64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the positive integer represented by the eight bytes starting\nat the specified [byteOffset] in this byte array, in unsigned binary\nform. The return value will be between 0 and  2<sup>64 - 1, inclusive.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n","id":"getUint641()","line":"251"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setUint64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the eight bytes starting at the specified [byteOffset] in this byte\narray to the unsigned binary representation of the specified [value],\nwhich must fit in eight bytes. in other words, [value] must be between\n0 and 2<sup>64 - 1, inclusive.\n\nReturns `byteOffset + 8`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n\nThrows [ArgumentError] if [value] is negative or\ngreater than 2<sup>64 - 1.\n","id":"setUint642()","line":"269"},{"returnType":{"name":"double","refId":"dart.core/double"},"name":"getFloat32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the floating point number represented by the four bytes at\nthe specified [byteOffset] in this byte array, in IEEE 754\nsingle-precision binary floating-point format (binary32).\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n","id":"getFloat321()","line":"279"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setFloat32","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"double","refId":"dart.core/double"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the four bytes starting at the specified [byteOffset] in this\nbyte array to the IEEE 754 single-precision binary floating-point\n(binary32) representation of the specified [value].\n\n**Note that this method can lose precision.** The input [value] is\na 64-bit floating point value, which will be converted to 32-bit\nfloating point value by IEEE 754 rounding rules before it is stored.\nIf [value] cannot be represented exactly as a binary32, it will be\nconverted to the nearest binary32 value.  If two binary32 values are\nequally close, the one whose least significant bit is zero will be used.\nNote that finite (but large) values can be converted to infinity, and\nsmall non-zero values can be converted to zero.\n\nReturns `byteOffset + 4`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 4` is greater than the length of this byte array.\n","id":"setFloat322()","line":"302"},{"returnType":{"name":"double","refId":"dart.core/double"},"name":"getFloat64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"}],"kind":"method","comment":"\nReturns the floating point number represented by the eight bytes at\nthe specified [byteOffset] in this byte array, in IEEE 754\ndouble-precision binary floating-point format (binary64).\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n","id":"getFloat641()","line":"312"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"setFloat64","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"byteOffset","kind":"param","id":"byteOffset"},{"ref":{"name":"double","refId":"dart.core/double"},"name":"value","kind":"param","id":"value"}],"kind":"method","comment":"\nSets the eight bytes starting at the specified [byteOffset] in this\nbyte array to the IEEE 754 double-precision binary floating-point\n(binary64) representation of the specified [value].\n\nReturns `byteOffset + 8`, which is the offset of the first byte in the\narray after the last byte that was set by this call. This return value can\nbe passed as the [byteOffset] parameter to a subsequent `setXxx` call.\n\nThrows [RangeError] if [byteOffset] is negative, or\n`byteOffset + 8` is greater than the length of this byte array.\n","id":"setFloat642()","line":"326"}],"uri":"sdk/lib/scalarlist/byte_arrays.dart","kind":"class","comment":"\nA random-access sequence of bytes that also provides random access to\nthe fixed-width integers and floating point numbers represented by\nthose bytes. Byte arrays may be used to pack and unpack data from\nexternal sources (such as networks or files systems), and to process\nlarge quantities of numerical data more efficiently than would be possible\nwith ordinary [List] implementations. Byte arrays can save space, by\neliminating the need for object headers, and time, by eliminating the\nneed for data copies. Finally, Byte arrays may be used to intentionally\nreinterpret the bytes representing one arithmetic type as another.\nFor example this code fragment determine what 64-bit signed integer\nis represented by the bytes of a 64-bit floating point number:\n\n    var ba = new Uint8List(8).asByteArray();\n    ba.setFloat64(0, 3.14159265358979323846);\n    int huh = ba.getInt64(0);\n","id":"ByteArray","line":"24"}],"uri":"sdk/lib/scalarlist/scalarlist.dart","kind":"library","comment":"\nThe scalarlist library is used for Dart server applications,\nwhich run on a stand-alone Dart VM from the command line.\n*This library does not work in browser based applications.*\n\nThis library allows you to work with arrays of scalar values\nof various sizes.\n","id":"dart.scalarlist","line":"13"}