{"name":"package:intl/intl.dart","children":[{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Bidi","children":[{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"stripHtmlIfNeeded","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"}],"kind":"method","comment":"\nReturns the input [text] with spaces instead of HTML tags or HTML escapes,\nwhich is helpful for text directionality estimation.\nNote: This function should not be used in other contexts.\nIt does not deal well with many things: comments, script,\nelements, style elements, dir attribute,`>` in quoted attribute values,\netc. But it does handle well enough the most common use cases.\nSince the worst that can happen as a result of these shortcomings is that\nthe wrong directionality will be estimated, we have not invested in\nimproving this.\n","id":"stripHtmlIfNeeded1()","line":"99"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"startsWithLtr","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"}],"kind":"method","comment":"\nDetermines if the first character in [text] with strong directionality is\nLTR. If [isHtml] is true, the text is HTML or HTML-escaped.\n","id":"startsWithLtr2()","line":"110"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"startsWithRtl","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"}],"kind":"method","comment":"\nDetermines if the first character in [text] with strong directionality is\nRTL. If [isHtml] is true, the text is HTML or HTML-escaped.\n","id":"startsWithRtl2()","line":"119"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"endsWithLtr","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"}],"kind":"method","comment":"\nDetermines if the exit directionality (ie, the last strongly-directional\ncharacter in [text] is LTR. If [isHtml] is true, the text is HTML or\nHTML-escaped.\n","id":"endsWithLtr2()","line":"129"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"endsWithRtl","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"}],"kind":"method","comment":"\nDetermines if the exit directionality (ie, the last strongly-directional\ncharacter in [text] is RTL. If [isHtml] is true, the text is HTML or\nHTML-escaped.\n","id":"endsWithRtl2()","line":"139"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"hasAnyLtr","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"}],"kind":"method","comment":"\nDetermines if the given [text] has any LTR characters in it.\nIf [isHtml] is true, the text is HTML or HTML-escaped.\n","id":"hasAnyLtr2()","line":"148"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"hasAnyRtl","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"}],"kind":"method","comment":"\nDetermines if the given [text] has any RTL characters in it.\nIf [isHtml] is true, the text is HTML or HTML-escaped.\n","id":"hasAnyRtl2()","line":"157"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"isRtlLanguage","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"languageString","kind":"param","id":"languageString"}],"kind":"method","comment":"\nCheck if a BCP 47 / III [languageString] indicates an RTL language.\n\ni.e. either:\n- a language code explicitly specifying one of the right-to-left scripts,\n  e.g. \"az-Arab\", or\n- a language code specifying one of the languages normally written in a\n  right-to-left script, e.g. \"fa\" (Farsi), except ones explicitly\n  specifying Latin or Cyrillic script (which are the usual LTR\n  alternatives).\n\nThe list of right-to-left scripts appears in the 100-199 range in\nhttp://www.unicode.org/iso15924/iso15924-num.html, of which Arabic and\nHebrew are by far the most widely used. We also recognize Thaana, N'Ko, and\nTifinagh, which also have significant modern usage. The rest (Syriac,\nSamaritan, Mandaic, etc.) seem to have extremely limited or no modern usage\nand are not recognized.\nThe languages usually written in a right-to-left script are taken as those\nwith Suppress-Script: Hebr|Arab|Thaa|Nkoo|Tfng  in\nhttp://www.iana.org/assignments/language-subtag-registry,\nas well as Sindhi (sd) and Uyghur (ug).\nThe presence of other subtags of the language code, e.g. regions like EG\n(Egypt), is ignored.\n","id":"isRtlLanguage1()","line":"186"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"enforceRtlInHtml","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"html","kind":"param","id":"html"}],"kind":"method","comment":"\nEnforce the [html] snippet in RTL directionality regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must enclose\nthe whole piece. If the tag already has a direction specified, this new one\nwill override existing one in behavior (should work on Chrome, FF, and IE\nsince this was ported directly from the Closure version).\n","id":"enforceRtlInHtml1()","line":"201"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"enforceRtlInText","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"}],"kind":"method","comment":"\nEnforce RTL on both end of the given [text] using unicode BiDi formatting\ncharacters RLE and PDF.\n","id":"enforceRtlInText1()","line":"209"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"enforceLtrInHtml","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"html","kind":"param","id":"html"}],"kind":"method","comment":"\nEnforce the [html] snippet in LTR directionality regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must enclose\nthe whole piece. If the tag already has a direction specified, this new one\nwill override existing one in behavior (tested on FF and IE).\n","id":"enforceLtrInHtml1()","line":"221"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"enforceLtrInText","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"}],"kind":"method","comment":"\nEnforce LTR on both end of the given [text] using unicode BiDi formatting\ncharacters LRE and PDF.\n","id":"enforceLtrInText1()","line":"229"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"_enforceInHtmlHelper","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"html","kind":"param","id":"html"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"direction","kind":"param","id":"direction"}],"isPrivate":true,"kind":"method","comment":"\nEnforce the [html] snippet in the desired [direction] regardless of overall\ncontext. If the html piece was enclosed by a tag, the direction will be\napplied to existing tag, otherwise a span tag will be added as wrapper.\nFor this reason, if html snippet start with with tag, this tag must enclose\nthe whole piece. If the tag already has a direction specified, this new one\nwill override existing one in behavior (tested on FF and IE).\n","id":"_enforceInHtmlHelper2()","line":"241"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"guardBracketInHtml","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"isRtlContext","kind":"param","id":"isRtlContext"}],"kind":"method","comment":"\nApply bracket guard to [str] using html span tag. This is to address the\nproblem of messy bracket display that frequently happens in RTL layout.\nIf [isRtlContext] is true, then we explicitly want to wrap in a span of RTL\ndirectionality, regardless of the estimated directionality.\n","id":"guardBracketInHtml2()","line":"263"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"guardBracketInText","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isOptional":true,"name":"isRtlContext","kind":"param","id":"isRtlContext"}],"kind":"method","comment":"\nApply bracket guard to [str] using LRM and RLM. This is to address the\nproblem of messy bracket display that frequently happens in RTL layout.\nThis version works for both plain text and html, but in some cases is not\nas good as guardBracketInHtml.\nIf [isRtlContext] is true, then we explicitly want to wrap in a span of RTL\ndirectionality, regardless of the estimated directionality.\n","id":"guardBracketInText2()","line":"279"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"_guardBracketHelper","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"},{"ref":{"name":"RegExp","refId":"dart.core/RegExp"},"name":"regexp","kind":"param","id":"regexp"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"before","kind":"param","id":"before"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"after","kind":"param","id":"after","line":"296"}],"isPrivate":true,"kind":"method","comment":"\n(Mostly) reimplements the $& functionality of \"replace\" in JavaScript.\nGiven a [str] and the [regexp] to match with, optionally supply a string to\nbe inserted [before] the match and/or [after]. For example,\n`_guardBracketHelper('firetruck', new RegExp('truck'), 'hydrant', '!')`\nwould return 'firehydrant!'.\n","id":"_guardBracketHelper4()","line":"295"},{"isStatic":true,"returnType":{"name":"TextDirection","refId":"intl/TextDirection"},"name":"estimateDirectionOfText","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml","line":"323"}],"kind":"method","comment":"\nEstimates the directionality of [text] using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n[isHtml] is true if [text] HTML or HTML-escaped.\n\nIf the number of RTL words is above a certain percentage of the total\nnumber of strongly directional words, returns RTL.\nOtherwise, if any words are strongly or weakly LTR, returns LTR.\nOtherwise, returns UNKNOWN, which is used to mean `neutral`.\nNumbers and URLs are counted as weakly LTR.\n","id":"estimateDirectionOfText2()","line":"322"},{"isStatic":true,"returnType":{"name":"int","refId":"dart.core/int"},"name":"_unmatchedParenIndex","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"}],"isPrivate":true,"kind":"method","comment":"\nFind the first index in [str] of the first closing parenthesis that does\nnot match an opening parenthesis.\n","id":"_unmatchedParenIndex1()","line":"359"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"normalizeHebrewQuote","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"}],"kind":"method","comment":"\nReplace the double and single quote directly after a Hebrew character in\n[str] with GERESH and GERSHAYIM. This is most likely the user's intention.\n","id":"normalizeHebrewQuote1()","line":"375"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"detectRtlDirectionality","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"str","kind":"param","id":"str"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"}],"kind":"method","comment":"\nCheck the estimated directionality of [str], return true if the piece of\ntext should be laid out in RTL direction. If [isHtml] is true, the string\nis HTML or HTML-escaped.\n","id":"detectRtlDirectionality2()","line":"401"},{"isStatic":true,"name":"LRE","kind":"variable","id":"LRE","line":"61"},{"isStatic":true,"name":"RLE","kind":"variable","id":"RLE","line":"64"},{"isStatic":true,"name":"PDF","kind":"variable","id":"PDF","line":"67"},{"isStatic":true,"name":"LRM","kind":"variable","id":"LRM","line":"70"},{"isStatic":true,"name":"RLM","kind":"variable","id":"RLM","line":"73"},{"ref":{"name":"num","refId":"dart.core/num"},"isStatic":true,"name":"_RTL_DETECTION_THRESHOLD","isPrivate":true,"kind":"variable","id":"_RTL_DETECTION_THRESHOLD","line":"76"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"_LTR_CHARS","isPrivate":true,"kind":"variable","id":"_LTR_CHARS","line":"83"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"_RTL_CHARS","isPrivate":true,"kind":"variable","id":"_RTL_CHARS","line":"86"}],"uri":"pkg/intl/lib/bidi_utils.dart","kind":"class","comment":"\nThis provides utility methods for working with bidirectional text. All\nof the methods are static, and are organized into a class primarily to\ngroup them together for documentation and discoverability.\n","id":"Bidi","line":"58"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"TextDirection","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"isDirectionChange","children":[{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"name":"otherDirection","kind":"param","id":"otherDirection"}],"kind":"method","comment":"\nReturns true if [otherDirection] is known to be different from this\ndirection.\n","id":"isDirectionChange1()","line":"48"},{"isStatic":true,"name":"LTR","kind":"variable","id":"LTR","line":"26"},{"isStatic":true,"name":"RTL","kind":"variable","id":"RTL","line":"27"},{"isStatic":true,"name":"UNKNOWN","kind":"variable","id":"UNKNOWN","line":"31"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"value","kind":"variable","id":"value","line":"37"},{"isFinal":true,"ref":{"name":"String","refId":"dart.core/String"},"name":"spanText","kind":"variable","id":"spanText","line":"40"},{"name":"TextDirection._","children":[{"initializedField":{"name":"value","refId":"intl/TextDirection/value"},"ref":{"name":"String","refId":"dart.core/String"},"name":"value","kind":"param","id":"value"},{"initializedField":{"name":"spanText","refId":"intl/TextDirection/spanText"},"ref":{"name":"String","refId":"dart.core/String"},"name":"spanText","kind":"param","id":"spanText"}],"isPrivate":true,"kind":"constructor","id":"TextDirection._2()","line":"42"}],"uri":"pkg/intl/lib/bidi_utils.dart","kind":"class","comment":"\nBidi stands for Bi-directional text.\nAccording to http://en.wikipedia.org/wiki/Bi-directional_text:\nBi-directional text is text containing text in both text directionalities,\nboth right-to-left (RTL) and left-to-right (LTR). It generally involves text\ncontaining different types of alphabets, but may also refer to boustrophedon,\nwhich is changing text directionality in each row.\n\nThis file provides some utility classes for determining directionality of\ntext, switching CSS layout from LTR to RTL, and other normalizing utilities\nneeded when switching between RTL and LTR formatting.\n\nIt defines the TextDirection class which is used to represent directionality\nof text,\nIn most cases, it is preferable to use bidi_formatter.dart, which provides\nbidi functionality in the given directional context, instead of using\nbidi_utils.dart directly.\n","id":"TextDirection","line":"25"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"BidiFormatter","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"htmlEscape","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"}],"kind":"method","comment":"\nEscapes HTML-special characters of [text] so that the result can be\nincluded verbatim in HTML source code, either in an element body or in an\nattribute value.\n","id":"htmlEscape1()","line":"89"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"wrapWithSpan","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"true","isOptional":true,"name":"resetDir","kind":"param","id":"resetDir"},{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"isNamed":true,"isOptional":true,"name":"direction","kind":"param","id":"direction","line":"119"}],"kind":"method","comment":"\nFormats a string of a given (or estimated, if not provided)\n[direction] for use in HTML output of the context directionality, so\nan opposite-directionality string is neither garbled nor garbles what\nfollows it.\nIf the input string's directionality doesn't match the context\ndirectionality, we wrap it with a `span` tag and add a `dir` attribute\n(either \"dir=rtl\" or \"dir=ltr\").\nIf alwaysSpan was true when constructing the formatter, the input is always\nwrapped with `span` tag, skipping the dir attribute when it's not needed.\n\nIf [resetDir] is true and the overall directionality or the exit\ndirectionality of [text] is opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM). If [isHtml] is false, we HTML-escape the [text].\n","id":"wrapWithSpan4()","line":"118"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"wrapWithUnicode","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"true","isOptional":true,"name":"resetDir","kind":"param","id":"resetDir"},{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"isNamed":true,"isOptional":true,"name":"direction","kind":"param","id":"direction","line":"156"}],"kind":"method","comment":"\nFormat [text] of a known (if specified) or estimated [direction] for use\nin *plain-text* output of the context directionality, so an\nopposite-directionality text is neither garbled nor garbles what follows\nit. Unlike wrapWithSpan, this makes use of unicode BiDi formatting\ncharacters instead of spans for wrapping. The returned string would be\nRLE+text+PDF for RTL text, or LRE+text+PDF for LTR text.\n\nIf [resetDir] is true, and if the overall directionality or the exit\ndirectionality of text are opposite to the context directionality,\na trailing unicode BiDi mark matching the context directionality is\nappended (LRM or RLM).\n\nIn HTML, the *only* valid use of this function is inside of elements that\ndo not allow markup, e.g. an 'option' tag.\nThis function does *not* do HTML-escaping regardless of the value of\n[isHtml]. [isHtml] is used to designate if the text contains HTML (escaped\nor unescaped).\n","id":"wrapWithUnicode4()","line":"155"},{"returnType":{"name":"TextDirection","refId":"intl/TextDirection"},"name":"estimateDirection","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"ref":{"name":"bool","refId":"dart.core/bool"},"isNamed":true,"defaultValue":"false","isOptional":true,"name":"isHtml","kind":"param","id":"isHtml"}],"kind":"method","comment":"\nEstimates the directionality of [text] using the best known\ngeneral-purpose method (using relative word counts). A\nTextDirection.UNKNOWN return value indicates completely neutral input.\n[isHtml] is true if [text] HTML or HTML-escaped.\n","id":"estimateDirection2()","line":"173"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"_resetDir","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"text","kind":"param","id":"text"},{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"name":"direction","kind":"param","id":"direction"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isHtml","kind":"param","id":"isHtml"}],"isPrivate":true,"kind":"method","comment":"\nReturns a unicode BiDi mark matching the surrounding context's [direction]\n(not necessarily the direction of [text]). The function returns an LRM or\nRLM if the overall directionality or the exit directionality of [text] is\nopposite the context directionality. Otherwise\nreturn the empty string. [isHtml] is true if [text] is HTML or\nHTML-escaped.\n","id":"_resetDir3()","line":"185"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"isRTL","kind":"property","comment":"Is true if the known context direction for this formatter is RTL. ","id":"isRTL","line":"82"},{"ref":{"name":"TextDirection","refId":"intl/TextDirection"},"name":"contextDirection","kind":"variable","id":"contextDirection","line":"61"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"_alwaysSpan","isPrivate":true,"kind":"variable","id":"_alwaysSpan","line":"66"},{"name":"BidiFormatter.LTR","children":[{"defaultValue":"false","isOptional":true,"name":"alwaysSpan","kind":"param","id":"alwaysSpan"}],"kind":"constructor","comment":"\nCreate a formatting object with a direction. If [alwaysSpan] is true we\nshould always use a `span` tag, even when the input directionality is\nneutral or matches the context, so that the DOM structure of the output\ndoes not depend on the combination of directionalities.\n","id":"BidiFormatter.LTR1()","line":"74"},{"name":"BidiFormatter.RTL","children":[{"defaultValue":"false","isOptional":true,"name":"alwaysSpan","kind":"param","id":"alwaysSpan"}],"kind":"constructor","id":"BidiFormatter.RTL1()","line":"76"},{"name":"BidiFormatter.UNKNOWN","children":[{"defaultValue":"false","isOptional":true,"name":"alwaysSpan","kind":"param","id":"alwaysSpan"}],"kind":"constructor","id":"BidiFormatter.UNKNOWN1()","line":"78"}],"uri":"pkg/intl/lib/bidi_formatter.dart","kind":"class","comment":"\nBidi stands for Bi-directional text.\nAccording to [Wikipedia](http://en.wikipedia.org/wiki/Bi-directional_text):\nBi-directional text is text containing text in both text directionalities,\nboth right-to-left (RTL) and left-to-right (LTR). It generally involves text\ncontaining different types of alphabets, but may also refer to boustrophedon,\nwhich is changing text directionality in each row.\n\nUtility class for formatting display text in a potentially\nopposite-directionality context without garbling layout issues.\nMostly a very \"slimmed-down\" and dart-ified port of the Closure Birectional\nformatting libary. If there is a utility in the Closure library (or ICU, or\nelsewhere) that you would like this formatter to make available, please\ncontact the Dart team.\n\nProvides the following functionality:\n\n1. *BiDi Wrapping*\nWhen text in one language is mixed into a document in another, opposite-\ndirectionality language, e.g. when an English business name is embedded in a\nHebrew web page, both the inserted string and the text following it may be\ndisplayed incorrectly unless the inserted string is explicitly separated\nfrom the surrounding text in a \"wrapper\" that declares its directionality at\nthe start and then resets it back at the end. This wrapping can be done in\nHTML mark-up (e.g. a 'span dir=rtl' tag) or - only in contexts where mark-up\ncan not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).\nProviding such wrapping services is the basic purpose of the BiDi formatter.\n\n2. *Directionality estimation*\nHow does one know whether a string about to be inserted into surrounding\ntext has the same directionality? Well, in many cases, one knows that this\nmust be the case when writing the code doing the insertion, e.g. when a\nlocalized message is inserted into a localized page. In such cases there is\nno need to involve the BiDi formatter at all. In the remaining cases, e.g.\nwhen the string is user-entered or comes from a database, the language of\nthe string (and thus its directionality) is not known a priori, and must be\nestimated at run-time. The BiDi formatter does this automatically.\n\n3. *Escaping*\nWhen wrapping plain text - i.e. text that is not already HTML or HTML-\nescaped - in HTML mark-up, the text must first be HTML-escaped to prevent XSS\nattacks and other nasty business. This of course is always true, but the\nescaping cannot be done after the string has already been wrapped in\nmark-up, so the BiDi formatter also serves as a last chance and includes\nescaping services.\n\nThus, in a single call, the formatter will escape the input string as\nspecified, determine its directionality, and wrap it as necessary. It is\nthen up to the caller to insert the return value in the output.\n","id":"BidiFormatter","line":"58"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"_Stream","children":[{"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"atEnd","kind":"method","id":"atEnd0()","line":"75"},{"name":"next","kind":"method","id":"next0()","line":"77"},{"name":"read","children":[{"defaultValue":"1","isOptional":true,"name":"howMany","kind":"param","id":"howMany"}],"kind":"method","comment":"\nReturn the next [howMany] items, or as many as there are remaining.\nAdvance the stream by that many positions.\n","id":"read1()","line":"83"},{"name":"peek","children":[{"defaultValue":"1","isOptional":true,"name":"howMany","kind":"param","id":"howMany"}],"kind":"method","comment":"\nReturn the next [howMany] items, or as many as there are remaining.\nDoes not modify the stream position.\n","id":"peek1()","line":"93"},{"name":"rest","kind":"method","comment":"Return the remaining contents of the stream ","id":"rest0()","line":"107"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"findIndex","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","comment":"\nFind the index of the first element for which [f] returns true.\nAdvances the stream to that position.\n","id":"findIndex1()","line":"113"},{"returnType":{"name":"List","refId":"dart.core/List"},"name":"findIndexes","children":[{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"f","kind":"param","id":"f"}],"kind":"method","comment":"\nFind the indexes of all the elements for which [f] returns true.\nLeaves the stream positioned at the end.\n","id":"findIndexes1()","line":"124"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"nextInteger","kind":"method","id":"nextInteger0()","line":"137"},{"name":"contents","kind":"variable","id":"contents","line":"70"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"index","kind":"variable","id":"index","line":"71"},{"name":"digitMatcher","kind":"variable","id":"digitMatcher","line":"136"},{"name":"_Stream","children":[{"initializedField":{"name":"contents","refId":"intl/_Stream/contents"},"name":"contents","kind":"param","id":"contents"}],"kind":"constructor","id":"_Stream1()","line":"73"}],"isPrivate":true,"uri":"pkg/intl/lib/src/date_format_helpers.dart","kind":"class","comment":"\nA simple and not particularly general stream class to make parsing\ndates from strings simpler. It is general enough to operate on either\nlists or strings.\n","id":"_Stream","line":"69"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"_DateBuilder","children":[{"returnType":{"name":"void","refId":"void"},"name":"setYear","children":[{"name":"x","kind":"param","id":"x"}],"kind":"method","id":"setYear1()","line":"27"},{"returnType":{"name":"void","refId":"void"},"name":"setMonth","children":[{"name":"x","kind":"param","id":"x"}],"kind":"method","id":"setMonth1()","line":"28"},{"returnType":{"name":"void","refId":"void"},"name":"setDay","children":[{"name":"x","kind":"param","id":"x"}],"kind":"method","id":"setDay1()","line":"29"},{"returnType":{"name":"void","refId":"void"},"name":"setHour","children":[{"name":"x","kind":"param","id":"x"}],"kind":"method","id":"setHour1()","line":"30"},{"returnType":{"name":"void","refId":"void"},"name":"setMinute","children":[{"name":"x","kind":"param","id":"x"}],"kind":"method","id":"setMinute1()","line":"31"},{"returnType":{"name":"void","refId":"void"},"name":"setSecond","children":[{"name":"x","kind":"param","id":"x"}],"kind":"method","id":"setSecond1()","line":"32"},{"returnType":{"name":"void","refId":"void"},"name":"setFractionalSecond","children":[{"name":"x","kind":"param","id":"x"}],"kind":"method","id":"setFractionalSecond1()","line":"33"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"asDate","kind":"method","comment":"\nReturn a date built using our values. If no date portion is set,\nuse the \"Epoch\" of January 1, 1970.\n","id":"asDate0()","line":"39"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"year","kind":"variable","id":"year","line":"15"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"month","kind":"variable","id":"month","line":"16"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"day","kind":"variable","id":"day","line":"17"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"hour","kind":"variable","id":"hour","line":"18"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"minute","kind":"variable","id":"minute","line":"19"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"second","kind":"variable","id":"second","line":"20"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"fractionalSecond","kind":"variable","id":"fractionalSecond","line":"21"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"pm","kind":"variable","id":"pm","line":"22"},{"ref":{"name":"bool","refId":"dart.core/bool"},"name":"utc","kind":"variable","id":"utc","line":"23"}],"isPrivate":true,"uri":"pkg/intl/lib/src/date_format_helpers.dart","kind":"class","comment":"\nA class for holding onto the data for a date so that it can be built\nup incrementally.\n","id":"_DateBuilder","line":"12"},{"superclass":{"name":"_DateFormatField","refId":"intl/_DateFormatField"},"name":"_DateFormatPatternField","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"format","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","comment":"Format date according to our specification and return the result. ","id":"format1()","line":"111"},{"returnType":{"name":"void","refId":"void"},"name":"parse","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"name":"dateFields","kind":"param","id":"dateFields"}],"kind":"method","comment":"\nParse the date according to our specification and put the result\ninto the correct place in dateFields.\n","id":"parse2()","line":"119"},{"returnType":{"name":"void","refId":"void"},"name":"parseField","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"name":"builder","kind":"param","id":"builder"}],"kind":"method","comment":"\nParse a field representing part of a date pattern. Note that we do not\nreturn a value, but rather build up the result in [builder].\n","id":"parseField2()","line":"127"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatField","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","comment":"Formatting logic if we are of type FIELD ","id":"formatField1()","line":"155"},{"name":"formatEra","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatEra1()","line":"183"},{"name":"formatYear","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatYear1()","line":"189"},{"returnType":{"name":"void","refId":"void"},"name":"handleNumericField","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"setter","kind":"param","id":"setter"},{"ref":{"name":"int","refId":"dart.core/int"},"defaultValue":"0","isOptional":true,"name":"offset","kind":"param","id":"offset"}],"kind":"method","comment":"\nWe are given [input] as a stream from which we want to read a date. We\ncan't dynamically build up a date, so we are given a list [dateFields] of\nthe constructor arguments and an [position] at which to set it\n(year,month,day,hour,minute,second,fractionalSecond)\nthen after all parsing is done we construct a date from the arguments.\nThis method handles reading any of the numeric fields. The [offset]\nargument allows us to compensate for zero-based versus one-based values.\n","id":"handleNumericField3()","line":"207"},{"returnType":{"name":"int","refId":"dart.core/int"},"name":"parseEnumeratedString","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"List","refId":"dart.core/List"},"name":"possibilities","kind":"param","id":"possibilities"}],"kind":"method","comment":"\nWe are given [input] as a stream from which we want to read a date. We\ncan't dynamically build up a date, so we are given a list [dateFields] of\nthe constructor arguments and an [position] at which to set it\n(year,month,day,hour,minute,second,fractionalSecond)\nthen after all parsing is done we construct a date from the arguments.\nThis method handles reading any of string fields from an enumerated set.\n","id":"parseEnumeratedString2()","line":"221"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatMonth","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatMonth1()","line":"232"},{"returnType":{"name":"void","refId":"void"},"name":"parseMonth","children":[{"name":"input","kind":"param","id":"input"},{"name":"dateFields","kind":"param","id":"dateFields"}],"kind":"method","id":"parseMonth2()","line":"242"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"format24Hours","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"format24Hours1()","line":"253"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatFractionalSeconds","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatFractionalSeconds1()","line":"257"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatAmPm","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatAmPm1()","line":"268"},{"returnType":{"name":"void","refId":"void"},"name":"parseAmPm","children":[{"name":"input","kind":"param","id":"input"},{"name":"dateFields","kind":"param","id":"dateFields"}],"kind":"method","id":"parseAmPm2()","line":"275"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"format1To12Hours","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"format1To12Hours1()","line":"281"},{"returnType":{"name":"void","refId":"void"},"name":"parse1To12Hours","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"name":"dateFields","kind":"param","id":"dateFields"}],"kind":"method","id":"parse1To12Hours2()","line":"288"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"format0To11Hours","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"format0To11Hours1()","line":"293"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"format0To23Hours","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"format0To23Hours1()","line":"297"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatStandaloneDay","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatStandaloneDay1()","line":"301"},{"returnType":{"name":"void","refId":"void"},"name":"parseStandaloneDay","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"}],"kind":"method","id":"parseStandaloneDay1()","line":"311"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatStandaloneMonth","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatStandaloneMonth1()","line":"323"},{"returnType":{"name":"void","refId":"void"},"name":"parseStandaloneMonth","children":[{"name":"input","kind":"param","id":"input"},{"name":"dateFields","kind":"param","id":"dateFields"}],"kind":"method","id":"parseStandaloneMonth2()","line":"336"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatQuarter","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatQuarter1()","line":"347"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatDayOfMonth","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatDayOfMonth1()","line":"355"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatDayOfWeek","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatDayOfWeek1()","line":"359"},{"returnType":{"name":"void","refId":"void"},"name":"parseDayOfWeek","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"}],"kind":"method","id":"parseDayOfWeek1()","line":"365"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatMinutes","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatMinutes1()","line":"371"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatSeconds","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatSeconds1()","line":"375"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatTimeZoneId","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatTimeZoneId1()","line":"379"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatTimeZone","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatTimeZone1()","line":"384"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatTimeZoneRFC","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","id":"formatTimeZoneRFC1()","line":"388"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"padTo","children":[{"ref":{"name":"int","refId":"dart.core/int"},"name":"width","kind":"param","id":"width"},{"ref":{"name":"Object","refId":"dart.core/Object"},"name":"toBePrinted","kind":"param","id":"toBePrinted"}],"kind":"method","comment":"\nReturn a string representation of the object padded to the left with\nzeros. Primarily useful for numbers.\n","id":"padTo2()","line":"396"},{"ref":{"name":"DateSymbols","refId":"date_symbols/DateSymbols"},"name":"symbols","kind":"property","comment":"Return the symbols for our current locale. ","id":"symbols","line":"181"},{"name":"_DateFormatPatternField","children":[{"name":"pattern","kind":"param","id":"pattern"},{"name":"parent","kind":"param","id":"parent"}],"kind":"constructor","id":"_DateFormatPatternField2()","line":"108"}],"isPrivate":true,"uri":"pkg/intl/lib/src/date_format_field.dart","kind":"class","id":"_DateFormatPatternField","line":"106"},{"superclass":{"name":"_DateFormatField","refId":"intl/_DateFormatField"},"name":"_DateFormatQuotedField","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"fullPattern","kind":"method","id":"fullPattern0()","line":"79"},{"name":"parse","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"name":"dateFields","kind":"param","id":"dateFields"}],"kind":"method","id":"parse2()","line":"86"},{"returnType":{"name":"void","refId":"void"},"name":"patchQuotes","kind":"method","id":"patchQuotes0()","line":"90"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"_fullPattern","isPrivate":true,"kind":"variable","id":"_fullPattern","line":"77"},{"name":"_DateFormatQuotedField","children":[{"name":"pattern","kind":"param","id":"pattern"},{"name":"parent","kind":"param","id":"parent"}],"kind":"constructor","id":"_DateFormatQuotedField2()","line":"81"}],"isPrivate":true,"uri":"pkg/intl/lib/src/date_format_field.dart","kind":"class","comment":"\nRepresents a literal field with quoted characters in it. This is\nonly slightly more complex than a _DateFormatLiteralField.\n","id":"_DateFormatQuotedField","line":"75"},{"superclass":{"name":"_DateFormatField","refId":"intl/_DateFormatField"},"name":"_DateFormatLiteralField","children":[{"name":"parse","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"name":"dateFields","kind":"param","id":"dateFields"}],"kind":"method","id":"parse2()","line":"66"},{"name":"_DateFormatLiteralField","children":[{"name":"pattern","kind":"param","id":"pattern"},{"name":"parent","kind":"param","id":"parent"}],"kind":"constructor","id":"_DateFormatLiteralField2()","line":"64"}],"isPrivate":true,"uri":"pkg/intl/lib/src/date_format_field.dart","kind":"class","comment":"\nRepresents a literal field - a sequence of characters that doesn't\nchange according to the date's data. As such, the implementation\nis extremely simple.\n","id":"_DateFormatLiteralField","line":"62"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"isAbstract":true,"name":"_DateFormatField","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"fullPattern","kind":"method","id":"fullPattern0()","line":"28"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"toString","kind":"method","id":"toString0()","line":"30"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"format","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","comment":"Format date according to our specification and return the result. ","id":"format1()","line":"33"},{"returnType":{"name":"void","refId":"void"},"name":"parse","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"},{"ref":{"name":"_DateBuilder","refId":"intl/_DateBuilder"},"name":"dateFields","kind":"param","id":"dateFields"}],"kind":"method","comment":"Abstract method for subclasses to implementing parsing for their format.","id":"parse2()","line":"40"},{"returnType":{"name":"void","refId":"void"},"name":"parseLiteral","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"input","kind":"param","id":"input"}],"kind":"method","comment":"Parse a literal field. We just look for the exact input. ","id":"parseLiteral1()","line":"43"},{"returnType":{"name":"void","refId":"void"},"name":"throwFormatException","children":[{"ref":{"name":"_Stream","refId":"intl/_Stream"},"name":"stream","kind":"param","id":"stream"}],"kind":"method","comment":"Throw a format exception with an error message indicating the position.","id":"throwFormatException1()","line":"51"},{"ref":{"name":"int","refId":"dart.core/int"},"name":"width","kind":"property","comment":"\nReturn the width of [pattern]. Different widths represent different\nformatting options. See the comment for DateFormat for details.\n","id":"width","line":"26"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"pattern","kind":"variable","id":"pattern","line":"15"},{"ref":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"parent","kind":"variable","id":"parent","line":"18"},{"name":"_DateFormatField","children":[{"initializedField":{"name":"pattern","refId":"intl/_DateFormatField/pattern"},"ref":{"name":"String","refId":"dart.core/String"},"name":"pattern","kind":"param","id":"pattern"},{"initializedField":{"name":"parent","refId":"intl/_DateFormatField/parent"},"ref":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"parent","kind":"param","id":"parent"}],"kind":"constructor","id":"_DateFormatField2()","line":"20"}],"isPrivate":true,"uri":"pkg/intl/lib/src/date_format_field.dart","kind":"class","comment":"\nThis is a private class internal to DateFormat which is used for formatting\nparticular fields in a template. e.g. if the format is hh:mm:ss then the\nfields would be \"hh\", \":\", \"mm\", \":\", and \"ss\". Each type of field knows\nhow to format that portion of a date.\n","id":"_DateFormatField","line":"13"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"DateFormat","children":[{"returnType":{"name":"String","refId":"dart.core/String"},"name":"format","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","comment":"\nReturn a string representing [date] formatted according to our locale\nand internal format.\n","id":"format1()","line":"225"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatDuration","children":[{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"reference","kind":"param","id":"reference"}],"kind":"method","comment":"\nReturns a date string indicating how long ago (3 hours, 2 minutes)\nsomething has happened or how long in the future something will happen\ngiven a [reference] DateTime relative to the current time.\n","id":"formatDuration1()","line":"237"},{"returnType":{"name":"String","refId":"dart.core/String"},"name":"formatDurationFrom","children":[{"ref":{"name":"Duration","refId":"dart.core/Duration"},"name":"duration","kind":"param","id":"duration"},{"ref":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"date","kind":"param","id":"date"}],"kind":"method","comment":"\nFormats a string indicating how long ago (negative [duration]) or how far\nin the future (positive [duration]) some time is with respect to a\nreference [date].\n","id":"formatDurationFrom2()","line":"246"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"parse","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"inputString","kind":"param","id":"inputString"},{"defaultValue":"false","isOptional":true,"name":"utc","kind":"param","id":"utc"}],"kind":"method","comment":"\nGiven user input, attempt to parse the [inputString] into the anticipated\nformat, treating it as being in the local timezone.\n","id":"parse2()","line":"254"},{"returnType":{"name":"DateTime","refId":"dart.core/DateTime"},"name":"parseUTC","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"inputString","kind":"param","id":"inputString"}],"kind":"method","comment":"\nGiven user input, attempt to parse the [inputString] into the anticipated\nformat, treating it as being in UTC.\n","id":"parseUTC1()","line":"269"},{"isStatic":true,"returnType":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"allLocalesWithSymbols","kind":"method","comment":"\nReturns a list of all locales for which we have date formatting\ninformation.\n","id":"allLocalesWithSymbols0()","line":"282"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_d","kind":"method","comment":"\nThe \"add_*\" methods append a particular skeleton to the format, or set\nit as the only format if none was previously set. These are primarily\nuseful for creating compound formats. For example\n      new DateFormat.yMd().add_Hms();\nwould create a date format that prints both the date and the time.\n","id":"add_d0()","line":"347"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_E","kind":"method","id":"add_E0()","line":"348"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_EEEE","kind":"method","id":"add_EEEE0()","line":"349"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_LLL","kind":"method","id":"add_LLL0()","line":"350"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_LLLL","kind":"method","id":"add_LLLL0()","line":"351"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_M","kind":"method","id":"add_M0()","line":"352"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_Md","kind":"method","id":"add_Md0()","line":"353"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_MEd","kind":"method","id":"add_MEd0()","line":"354"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_MMM","kind":"method","id":"add_MMM0()","line":"355"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_MMMd","kind":"method","id":"add_MMMd0()","line":"356"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_MMMEd","kind":"method","id":"add_MMMEd0()","line":"357"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_MMMM","kind":"method","id":"add_MMMM0()","line":"358"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_MMMMd","kind":"method","id":"add_MMMMd0()","line":"359"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_MMMMEEEEd","kind":"method","id":"add_MMMMEEEEd0()","line":"360"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_QQQ","kind":"method","id":"add_QQQ0()","line":"361"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_QQQQ","kind":"method","id":"add_QQQQ0()","line":"362"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_y","kind":"method","id":"add_y0()","line":"363"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yM","kind":"method","id":"add_yM0()","line":"364"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yMd","kind":"method","id":"add_yMd0()","line":"365"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yMEd","kind":"method","id":"add_yMEd0()","line":"366"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yMMM","kind":"method","id":"add_yMMM0()","line":"367"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yMMMd","kind":"method","id":"add_yMMMd0()","line":"368"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yMMMEd","kind":"method","id":"add_yMMMEd0()","line":"369"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yMMMM","kind":"method","id":"add_yMMMM0()","line":"370"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yMMMMd","kind":"method","id":"add_yMMMMd0()","line":"371"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yMMMMEEEEd","kind":"method","id":"add_yMMMMEEEEd0()","line":"372"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yQQQ","kind":"method","id":"add_yQQQ0()","line":"373"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_yQQQQ","kind":"method","id":"add_yQQQQ0()","line":"374"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_H","kind":"method","id":"add_H0()","line":"375"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_Hm","kind":"method","id":"add_Hm0()","line":"376"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_Hms","kind":"method","id":"add_Hms0()","line":"377"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_j","kind":"method","id":"add_j0()","line":"378"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_jm","kind":"method","id":"add_jm0()","line":"379"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_jms","kind":"method","id":"add_jms0()","line":"380"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_jmv","kind":"method","id":"add_jmv0()","line":"381"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_jmz","kind":"method","id":"add_jmz0()","line":"382"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_jv","kind":"method","id":"add_jv0()","line":"383"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_jz","kind":"method","id":"add_jz0()","line":"384"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_m","kind":"method","id":"add_m0()","line":"385"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_ms","kind":"method","id":"add_ms0()","line":"386"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"add_s","kind":"method","id":"add_s0()","line":"387"},{"name":"_useDefaultPattern","isPrivate":true,"kind":"method","comment":"\nWe are being asked to do formatting without having set any pattern.\nUse a default.\n","id":"_useDefaultPattern0()","line":"467"},{"name":"_appendPattern","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"inputPattern","kind":"param","id":"inputPattern"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"' '","isOptional":true,"name":"separator","kind":"param","id":"separator"}],"isPrivate":true,"kind":"method","comment":"\nSet our pattern, appending it to any existing patterns. Also adds a single\nspace to separate the two.\n","id":"_appendPattern2()","line":"495"},{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"addPattern","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"inputPattern","kind":"param","id":"inputPattern"},{"ref":{"name":"String","refId":"dart.core/String"},"defaultValue":"' '","isOptional":true,"name":"separator","kind":"param","id":"separator"}],"kind":"method","comment":"\nAdd [inputPattern] to this instance as a pattern. If there was a previous\npattern, then this appends to it, separating the two by [separator].\n[inputPattern] is first looked up in our list of known skeletons.\nIf it's found there, then use the corresponding pattern for this locale.\nIf it's not, then treat [inputPattern] as an explicit pattern.\n","id":"addPattern2()","line":"510"},{"name":"_setLocale","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"newLocale","kind":"param","id":"newLocale"}],"isPrivate":true,"kind":"method","comment":"\nSet the locale. If the locale can't be found, we also look up\nbased on alternative versions, e.g. if we have no 'en_CA' we will\nlook for 'en' as a fallback. It will also translate en-ca into en_CA.\nNull is also considered a valid value for [newLocale], indicating\nto use the default.\n","id":"_setLocale1()","line":"540"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"localeExists","children":[{"name":"localeName","kind":"param","id":"localeName"}],"kind":"method","comment":"\nReturn true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.\n","id":"localeExists1()","line":"548"},{"returnType":{"name":"List","refId":"dart.core/List"},"name":"parsePattern","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"pattern","kind":"param","id":"pattern"}],"kind":"method","comment":"Parse the template pattern and return a list of field objects.","id":"parsePattern1()","line":"559"},{"returnType":{"name":"List","refId":"dart.core/List"},"name":"_parsePatternHelper","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"pattern","kind":"param","id":"pattern"}],"isPrivate":true,"kind":"method","comment":"Recursive helper for parsing the template pattern. ","id":"_parsePatternHelper1()","line":"565"},{"returnType":{"name":"_DateFormatField","refId":"intl/_DateFormatField"},"name":"_match","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"pattern","kind":"param","id":"pattern"}],"isPrivate":true,"kind":"method","comment":"Find elements in a string that are patterns for specific fields.","id":"_match1()","line":"578"},{"returnType":{"name":"List","refId":"dart.core/List"},"name":"_reverse","children":[{"ref":{"name":"List","refId":"dart.core/List"},"name":"list","kind":"param","id":"list"}],"isPrivate":true,"kind":"method","comment":"Polyfill for missing library function. ","id":"_reverse1()","line":"589"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"locale","kind":"property","comment":"\nReturn the locale code in which we operate, e.g. 'en_US' or 'pt'.\n","id":"locale","line":"276"},{"name":"_formatFields","isPrivate":true,"kind":"property","comment":"\nGetter for [_formatFieldsPrivate] that lazily initializes it.\n","id":"_formatFields","line":"455"},{"name":"pattern","kind":"property","comment":"Return the pattern that we use to format dates.","id":"pattern","line":"526"},{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"_availableSkeletons","isPrivate":true,"kind":"property","comment":"Return the skeletons for our current locale. ","id":"_availableSkeletons","line":"529"},{"ref":{"name":"List","refId":"dart.core/List"},"isStatic":true,"name":"_fieldConstructors","isPrivate":true,"kind":"property","id":"_fieldConstructors","line":"553"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"ABBR_MONTH","kind":"variable","id":"ABBR_MONTH","line":"393"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"DAY","kind":"variable","id":"DAY","line":"394"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"ABBR_WEEKDAY","kind":"variable","id":"ABBR_WEEKDAY","line":"395"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"WEEKDAY","kind":"variable","id":"WEEKDAY","line":"396"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"ABBR_STANDALONE_MONTH","kind":"variable","id":"ABBR_STANDALONE_MONTH","line":"397"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"STANDALONE_MONTH","kind":"variable","id":"STANDALONE_MONTH","line":"398"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"NUM_MONTH","kind":"variable","id":"NUM_MONTH","line":"399"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"NUM_MONTH_DAY","kind":"variable","id":"NUM_MONTH_DAY","line":"400"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"NUM_MONTH_WEEKDAY_DAY","kind":"variable","id":"NUM_MONTH_WEEKDAY_DAY","line":"401"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"ABBR_MONTH_DAY","kind":"variable","id":"ABBR_MONTH_DAY","line":"402"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"ABBR_MONTH_WEEKDAY_DAY","kind":"variable","id":"ABBR_MONTH_WEEKDAY_DAY","line":"403"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"MONTH","kind":"variable","id":"MONTH","line":"404"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"MONTH_DAY","kind":"variable","id":"MONTH_DAY","line":"405"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"MONTH_WEEKDAY_DAY","kind":"variable","id":"MONTH_WEEKDAY_DAY","line":"406"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"ABBR_QUARTER","kind":"variable","id":"ABBR_QUARTER","line":"407"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"QUARTER","kind":"variable","id":"QUARTER","line":"408"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR","kind":"variable","id":"YEAR","line":"409"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_NUM_MONTH","kind":"variable","id":"YEAR_NUM_MONTH","line":"410"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_NUM_MONTH_DAY","kind":"variable","id":"YEAR_NUM_MONTH_DAY","line":"411"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_NUM_MONTH_WEEKDAY_DAY","kind":"variable","id":"YEAR_NUM_MONTH_WEEKDAY_DAY","line":"412"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_ABBR_MONTH","kind":"variable","id":"YEAR_ABBR_MONTH","line":"413"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_ABBR_MONTH_DAY","kind":"variable","id":"YEAR_ABBR_MONTH_DAY","line":"414"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_ABBR_MONTH_WEEKDAY_DAY","kind":"variable","id":"YEAR_ABBR_MONTH_WEEKDAY_DAY","line":"415"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_MONTH","kind":"variable","id":"YEAR_MONTH","line":"416"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_MONTH_DAY","kind":"variable","id":"YEAR_MONTH_DAY","line":"417"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_MONTH_WEEKDAY_DAY","kind":"variable","id":"YEAR_MONTH_WEEKDAY_DAY","line":"418"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_ABBR_QUARTER","kind":"variable","id":"YEAR_ABBR_QUARTER","line":"419"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"YEAR_QUARTER","kind":"variable","id":"YEAR_QUARTER","line":"420"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR24","kind":"variable","id":"HOUR24","line":"421"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR24_MINUTE","kind":"variable","id":"HOUR24_MINUTE","line":"422"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR24_MINUTE_SECOND","kind":"variable","id":"HOUR24_MINUTE_SECOND","line":"423"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR","kind":"variable","id":"HOUR","line":"424"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR_MINUTE","kind":"variable","id":"HOUR_MINUTE","line":"425"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR_MINUTE_SECOND","kind":"variable","id":"HOUR_MINUTE_SECOND","line":"426"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR_MINUTE_GENERIC_TZ","kind":"variable","id":"HOUR_MINUTE_GENERIC_TZ","line":"427"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR_MINUTE_TZ","kind":"variable","id":"HOUR_MINUTE_TZ","line":"428"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR_GENERIC_TZ","kind":"variable","id":"HOUR_GENERIC_TZ","line":"429"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"HOUR_TZ","kind":"variable","id":"HOUR_TZ","line":"430"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"MINUTE","kind":"variable","id":"MINUTE","line":"431"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"MINUTE_SECOND","kind":"variable","id":"MINUTE_SECOND","line":"432"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"SECOND","kind":"variable","id":"SECOND","line":"433"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"_locale","isPrivate":true,"kind":"variable","id":"_locale","line":"436"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"_pattern","isPrivate":true,"kind":"variable","id":"_pattern","line":"443"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"_DateFormatField","refId":"intl/_DateFormatField"}]},"name":"_formatFieldsPrivate","isPrivate":true,"kind":"variable","id":"_formatFieldsPrivate","line":"450"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"Pattern","refId":"dart.core/Pattern"}]},"isStatic":true,"name":"_matchers","isPrivate":true,"kind":"variable","id":"_matchers","line":"476"},{"name":"DateFormat","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"newPattern","kind":"param","id":"newPattern"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","comment":"\nCreates a new DateFormat, using the format specified by [newPattern]. For\nforms that match one of our predefined skeletons, we look up the\ncorresponding pattern in [locale] (or in the default locale if none is\nspecified) and use the resulting full format string. This is the\npreferred usage, but if [newPattern] does not match one of the skeletons,\nthen it is used as a format directly, but will not be adapted to suit\nthe locale.\n\nFor example, in an en_US locale, specifying the skeleton\n    new DateFormat('yMEd');\nor the explicit\n    new DateFormat('EEE, M/d/y');\nwould produce the same result, a date of the form\n    Wed, 6/27/2012\nThe first version would produce a different format string if used in\nanother locale, but the second format would always be the same.\n\nIf [locale] does not exist in our set of supported locales then an\n[ArgumentError] is thrown.\n","id":"DateFormat2()","line":"211"},{"name":"DateFormat.d","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","comment":"\nThe named constructors for this class are all conveniences for creating\ninstances using one of the known \"skeleton\" formats, and having code\ncompletion support for discovering those formats.\nSo,\n    new DateFormat.yMd(\"en_US\")\nis equivalent to\n    new DateFormat(\"yMd\", \"en_US\")\nTo create a compound format you can use these constructors in combination\nwith the add_ methods below. e.g.\n    new DateFormat.yMd().add_Hms();\nIf the optional [locale] is omitted, the format will be created using the\ndefault locale in [Intl.systemLocale].\n","id":"DateFormat.d1()","line":"298"},{"name":"DateFormat.E","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.E1()","line":"299"},{"name":"DateFormat.EEEE","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.EEEE1()","line":"300"},{"name":"DateFormat.LLL","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.LLL1()","line":"301"},{"name":"DateFormat.LLLL","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.LLLL1()","line":"302"},{"name":"DateFormat.M","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.M1()","line":"303"},{"name":"DateFormat.Md","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.Md1()","line":"304"},{"name":"DateFormat.MEd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.MEd1()","line":"305"},{"name":"DateFormat.MMM","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.MMM1()","line":"306"},{"name":"DateFormat.MMMd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.MMMd1()","line":"307"},{"name":"DateFormat.MMMEd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.MMMEd1()","line":"308"},{"name":"DateFormat.MMMM","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.MMMM1()","line":"309"},{"name":"DateFormat.MMMMd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.MMMMd1()","line":"310"},{"name":"DateFormat.MMMMEEEEd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.MMMMEEEEd1()","line":"311"},{"name":"DateFormat.QQQ","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.QQQ1()","line":"312"},{"name":"DateFormat.QQQQ","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.QQQQ1()","line":"313"},{"name":"DateFormat.y","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.y1()","line":"314"},{"name":"DateFormat.yM","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yM1()","line":"315"},{"name":"DateFormat.yMd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yMd1()","line":"316"},{"name":"DateFormat.yMEd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yMEd1()","line":"317"},{"name":"DateFormat.yMMM","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yMMM1()","line":"318"},{"name":"DateFormat.yMMMd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yMMMd1()","line":"319"},{"name":"DateFormat.yMMMEd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yMMMEd1()","line":"320"},{"name":"DateFormat.yMMMM","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yMMMM1()","line":"321"},{"name":"DateFormat.yMMMMd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yMMMMd1()","line":"322"},{"name":"DateFormat.yMMMMEEEEd","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yMMMMEEEEd1()","line":"323"},{"name":"DateFormat.yQQQ","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yQQQ1()","line":"324"},{"name":"DateFormat.yQQQQ","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.yQQQQ1()","line":"325"},{"name":"DateFormat.H","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.H1()","line":"326"},{"name":"DateFormat.Hm","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.Hm1()","line":"327"},{"name":"DateFormat.Hms","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.Hms1()","line":"328"},{"name":"DateFormat.j","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.j1()","line":"329"},{"name":"DateFormat.jm","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.jm1()","line":"330"},{"name":"DateFormat.jms","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.jms1()","line":"331"},{"name":"DateFormat.jmv","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.jmv1()","line":"332"},{"name":"DateFormat.jmz","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.jmz1()","line":"333"},{"name":"DateFormat.jv","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.jv1()","line":"334"},{"name":"DateFormat.jz","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.jz1()","line":"335"},{"name":"DateFormat.m","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.m1()","line":"336"},{"name":"DateFormat.ms","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.ms1()","line":"337"},{"name":"DateFormat.s","children":[{"isOptional":true,"name":"locale","kind":"param","id":"locale"}],"kind":"constructor","id":"DateFormat.s1()","line":"338"}],"uri":"pkg/intl/lib/date_format.dart","kind":"class","comment":"\nDateFormat is for formatting and parsing dates in a locale-sensitive\nmanner.\nIt allows the user to choose from a set of standard date time formats as well\nas specify a customized pattern under certain locales. Date elements that\nvary across locales include month name, week name, field order, etc.\nWe also allow the user to use any customized pattern to parse or format\ndate-time strings under certain locales. Date elements that vary across\nlocales include month name, weekname, field, order, etc.\n\nThe actual date for the locales must be obtained. This can currently be done\nin one of three ways, determined by which library you import. If you only\nwant to use en_US formatting you can use it directly, as a copy of that\nlocale is hard-coded into the formatter. In all other cases,\nthe [initializeDateFormatting] method must be called and will return a future\nthat is complete once the locale data is available. The result of the future\nisn't important, but the data for that locale is available to the date\nformatting and parsing once it completes.\n\nThe easiest option is that the data may be available locally, imported in a\nlibrary that contains data for all the locales.\n      import 'package:intl/date_symbol_data_local.dart';\n      initializeDateFormatting(\"en_US\", null).then((_) => runMyCode());\n\nIf we are running outside of a browser, we may want to read the data\nfrom files in the file system.\n      import 'package:intl/date_symbol_data_file.dart';\n      initializeDateFormatting(\"de_DE\", null).then((_) => runMyCode());\n\nIf we are running in a browser, we may want to read the data from the\nserver using the XmlHttpRequest mechanism.\n      import 'package:intl/date_symbol_data_http_request.dart';\n      initializeDateFormatting(\"pt_BR\", null).then((_) => runMyCode());\n\nThe code in example/basic/basic_example.dart shows a full example of\nusing this mechanism.\n\nOnce we have the locale data, we need to specify the particular format.\nThis library uses the ICU/JDK date/time pattern specification both for\ncomplete format specifications and also the abbreviated \"skeleton\" form\nwhich can also adapt to different locales and is preferred where available.\n\nSkeletons: These can be specified either as the ICU constant name or as the\nskeleton to which it resolves. The supported set of skeletons is as follows\n     ICU Name                   Skeleton\n     --------                   --------\n     DAY                          d\n     ABBR_WEEKDAY                 E\n     WEEKDAY                      EEEE\n     ABBR_STANDALONE_MONTH        LLL\n     STANDALONE_MONTH             LLLL\n     NUM_MONTH                    M\n     NUM_MONTH_DAY                Md\n     NUM_MONTH_WEEKDAY_DAY        MEd\n     ABBR_MONTH                   MMM\n     ABBR_MONTH_DAY               MMMd\n     ABBR_MONTH_WEEKDAY_DAY       MMMEd\n     MONTH                        MMMM\n     MONTH_DAY                    MMMMd\n     MONTH_WEEKDAY_DAY            MMMMEEEEd\n     ABBR_QUARTER                 QQQ\n     QUARTER                      QQQQ\n     YEAR                         y\n     YEAR_NUM_MONTH               yM\n     YEAR_NUM_MONTH_DAY           yMd\n     YEAR_NUM_MONTH_WEEKDAY_DAY   yMEd\n     YEAR_ABBR_MONTH              yMMM\n     YEAR_ABBR_MONTH_DAY          yMMMd\n     YEAR_ABBR_MONTH_WEEKDAY_DAY  yMMMEd\n     YEAR_MONTH                   yMMMM\n     YEAR_MONTH_DAY               yMMMMd\n     YEAR_MONTH_WEEKDAY_DAY       yMMMMEEEEd\n     YEAR_ABBR_QUARTER            yQQQ\n     YEAR_QUARTER                 yQQQQ\n     HOUR24                       H\n     HOUR24_MINUTE                Hm\n     HOUR24_MINUTE_SECOND         Hms\n     HOUR                         j\n     HOUR_MINUTE                  jm\n     HOUR_MINUTE_SECOND           jms\n     HOUR_MINUTE_GENERIC_TZ       jmv\n     HOUR_MINUTE_TZ               jmz\n     HOUR_GENERIC_TZ              jv\n     HOUR_TZ                      jz\n     MINUTE                       m\n     MINUTE_SECOND                ms\n     SECOND                       s\n\nExamples Using the US Locale:\n\n     Pattern                           Result\n     ----------------                  -------\n     new DateFormat.yMd()             -> 07/10/1996\n     new DateFormat(\"yMd\")            -> 07/10/1996\n     new DateFormat.yMMMMd(\"en_US\")   -> July 10, 1996\n     new DateFormat(\"Hm\", \"en_US\")    -> 12:08 PM\n     new DateFormat.yMd().Hm()        -> 07/10/1996 12:08 PM\n\nExplicit Pattern Syntax: Formats can also be specified with a pattern string.\nThe skeleton forms will resolve to explicit patterns of this form, but will\nalso adapt to different patterns in different locales.\nThe following characters are reserved:\n\n    Symbol   Meaning                Presentation        Example\n    ------   -------                ------------        -------\n    G        era designator         (Text)              AD\n    y        year                   (Number)            1996\n    M        month in year          (Text & Number)     July & 07\n    L        standalone month       (Text & Number)     July & 07\n    d        day in month           (Number)            10\n    c        standalone day         (Number)            10\n    h        hour in am/pm (1~12)   (Number)            12\n    H        hour in day (0~23)     (Number)            0\n    m        minute in hour         (Number)            30\n    s        second in minute       (Number)            55\n    S        fractional second      (Number)            978\n    E        day of week            (Text)              Tuesday\n    D        day in year            (Number)            189\n    a        am/pm marker           (Text)              PM\n    k        hour in day (1~24)     (Number)            24\n    K        hour in am/pm (0~11)   (Number)            0\n    z        time zone              (Text)              Pacific Standard Time\n    Z        time zone (RFC 822)    (Number)            -0800\n    v        time zone (generic)    (Text)              Pacific Time\n    Q        quarter                (Text)              Q3\n    '        escape for text        (Delimiter)         'Date='\n    ''       single quote           (Literal)           'o''clock'\n\nThe count of pattern letters determine the format.\n\n**Text**:\n* 5 pattern letters--use narrow form for standalone. Otherwise does not apply\n* 4 or more pattern letters--use full form,\n* 3 pattern letters--use short or abbreviated form if one exists\n* less than 3--use numeric form if one exists\n\n**Number**: the minimum number of digits. Shorter numbers are zero-padded to\nthis amount (e.g. if \"m\" produces \"6\", \"mm\" produces \"06\"). Year is handled\nspecially; that is, if the count of 'y' is 2, the Year will be truncated to\n2 digits. (e.g., if \"yyyy\" produces \"1997\", \"yy\" produces \"97\".) Unlike other\nfields, fractional seconds are padded on the right with zero.\n\n**(Text & Number)**: 3 or over, use text, otherwise use number.\n\nAny characters not in the pattern will be treated as quoted text. For\ninstance, characters like ':', '.', ' ', '#' and '@' will appear in the\nresulting text even though they are not enclosed in single quotes. In our\ncurrent pattern usage, not all letters have meanings. But those unused\nletters are strongly discouraged to be used as quoted text without quotes,\nbecause we may use other letters as pattern characters in the future.\n\nExamples Using the US Locale:\n\n    Format Pattern                     Result\n    --------------                     -------\n    \"yyyy.MM.dd G 'at' HH:mm:ss vvvv\"  1996.07.10 AD at 15:08:56 Pacific Time\n    \"EEE, MMM d, ''yy\"                 Wed, July 10, '96\n    \"h:mm a\"                           12:08 PM\n    \"hh 'o''clock' a, zzzz\"            12 o'clock PM, Pacific Daylight Time\n    \"K:mm a, vvv\"                      0:00 PM, PT\n    \"yyyyy.MMMMM.dd GGG hh:mm aaa\"     01996.July.10 AD 12:08 PM\n\nWhen parsing a date string using the abbreviated year pattern (\"yy\"),\nDateFormat must interpret the abbreviated year relative to some\ncentury. It does this by adjusting dates to be within 80 years before and 20\nyears after the time the parse function is called. For example, using a\npattern of \"MM/dd/yy\" and a DateParse instance created on Jan 1, 1997,\nthe string \"01/11/12\" would be interpreted as Jan 11, 2012 while the string\n\"05/04/64\" would be interpreted as May 4, 1964. During parsing, only\nstrings consisting of exactly two digits, as defined by {@link\njava.lang.Character#isDigit(char)}, will be parsed into the default\ncentury. Any other numeric string, such as a one digit string, a three or\nmore digit string will be interpreted as its face value.\n\nIf the year pattern does not have exactly two 'y' characters, the year is\ninterpreted literally, regardless of the number of digits. So using the\npattern \"MM/dd/yyyy\", \"01/11/12\" parses to Jan 11, 12 A.D.\n","id":"DateFormat","line":"188"},{"superclass":{"name":"Object","refId":"dart.core/Object"},"name":"Intl","children":[{"returnType":{"name":"DateFormat","refId":"intl/DateFormat"},"name":"date","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"pattern","kind":"param","id":"pattern"},{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"desiredLocale","kind":"param","id":"desiredLocale"}],"kind":"method","comment":"\nReturn a new date format using the specified [pattern].\nIf [desiredLocale] is not specified, then we default to [locale].\n","id":"date2()","line":"94"},{"isStatic":true,"returnType":{"name":"Future","refId":"dart.async/Future","arguments":[{"name":"String","refId":"dart.core/String"}]},"name":"message","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"message_str","kind":"param","id":"message_str"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"defaultValue":"''","isOptional":true,"name":"desc","kind":"param","id":"desc"},{"ref":{"name":"Map","refId":"dart.core/Map"},"isNamed":true,"defaultValue":"const{}","isOptional":true,"name":"examples","kind":"param","id":"examples","line":"132"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"name":"locale","kind":"param","id":"locale","line":"132"},{"ref":{"name":"String","refId":"dart.core/String"},"isNamed":true,"isOptional":true,"name":"name","kind":"param","id":"name","line":"132"},{"ref":{"name":"List","refId":"dart.core/List","arguments":[{"name":"String","refId":"dart.core/String"}]},"isNamed":true,"isOptional":true,"name":"args","kind":"param","id":"args","line":"133"}],"kind":"method","comment":"\nReturns a message that can be internationalized. It takes a\n[message_str] that will be translated, which may be interpolated\nbased on one or more variables, a [desc] providing a description of usage\nfor the [message_str], and a map of [examples] for each data element to be\nsubstituted into the message. For example, if message=\"Hello, $name\", then\nexamples = {'name': 'Sparky'}. If not using the user's default locale, or\nif the locale is not easily detectable, explicitly pass [locale].\nThe values of [desc] and [examples] are not used at run-time but are only\nmade available to the translators, so they MUST be simple Strings available\nat compile time: no String interpolation or concatenation.\nThe expected usage of this is inside a function that takes as parameters\nthe variables used in the interpolated string, and additionally also a\nlocale (optional).\nUltimately, the information about the enclosing function and its arguments\nwill be extracted automatically but for the time being it must be passed\nexplicitly in the [name] and [args] arguments.\n","id":"message6()","line":"131"},{"isStatic":true,"returnType":{"name":"bool","refId":"dart.core/bool"},"name":"_localeExists","children":[{"name":"localeName","kind":"param","id":"localeName"}],"isPrivate":true,"kind":"method","comment":"\nReturn true if the locale exists, or if it is null. The null case\nis interpreted to mean that we use the default locale.\n","id":"_localeExists1()","line":"148"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"verifiedLocale","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"newLocale","kind":"param","id":"newLocale"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"localeExists","kind":"param","id":"localeExists"},{"ref":{"name":"Function","refId":"dart.core/Function"},"isNamed":true,"defaultValue":"_throwLocaleError","isOptional":true,"name":"onFailure","kind":"param","id":"onFailure","line":"163"}],"kind":"method","comment":"\nGiven [newLocale] return a locale that we have data for that is similar\nto it, if possible.\nIf [newLocale] is found directly, return it. If it can't be found, look up\nbased on just the language (e.g. 'en_CA' -> 'en'). Also accepts '-'\nas a separator and changes it into '_' for lookup, and changes the\ncountry to uppercase.\nNote that null is interpreted as meaning the default locale, so if\n[newLocale] is null it will be returned.\n","id":"verifiedLocale3()","line":"162"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"_throwLocaleError","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"localeName","kind":"param","id":"localeName"}],"isPrivate":true,"kind":"method","comment":"\nThe default action if a locale isn't found in verifiedLocale. Throw\nan exception indicating the locale isn't correct.\n","id":"_throwLocaleError1()","line":"186"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"_shortLocale","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"aLocale","kind":"param","id":"aLocale"}],"isPrivate":true,"kind":"method","comment":"Return the short version of a locale name, e.g. 'en_US' => 'en' ","id":"_shortLocale1()","line":"191"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"canonicalizedLocale","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"aLocale","kind":"param","id":"aLocale"}],"kind":"method","comment":"\nReturn the name [aLocale] turned into xx_YY where it might possibly be\nin the wrong case or with a hyphen instead of an underscore. If\n[aLocale] is null, for example, if you tried to get it from IE,\nreturn the current system locale.\n","id":"canonicalizedLocale1()","line":"202"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"plural","children":[{"name":"howMany","kind":"param","id":"howMany"},{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"cases","kind":"param","id":"cases"},{"ref":{"name":"num","refId":"dart.core/num"},"defaultValue":"0","isOptional":true,"name":"offset","kind":"param","id":"offset"}],"kind":"method","comment":"\nSupport method for message formatting. Select the correct plural form from\n[cases] given [howMany].\n","id":"plural3()","line":"222"},{"isStatic":true,"name":"withLocale","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"locale","kind":"param","id":"locale"},{"ref":{"name":"Function","refId":"dart.core/Function"},"name":"message_function","kind":"param","id":"message_function"}],"kind":"method","comment":"\nFormat the given function with a specific [locale], given a\n[message_function] that takes no parameters. The [message_function] can be\na simple message function that just returns the result of `Intl.message()`\nit can be a wrapper around a message function that takes arguments, or it\ncan be something more complex that manipulates multiple message\nfunctions.\n\nIn either case, the purpose of this is to delay calling [message_function]\nuntil the proper locale has been set. This returns the result of calling\n[msg_function], which could be of an arbitrary type.\n","id":"withLocale2()","line":"239"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"select","children":[{"ref":{"name":"String","refId":"dart.core/String"},"name":"choice","kind":"param","id":"choice"},{"ref":{"name":"Map","refId":"dart.core/Map"},"name":"cases","kind":"param","id":"cases"}],"kind":"method","comment":"\nSupport method for message formatting. Select the correct exact (gender,\nusually) form from [cases] given the user [choice].\n","id":"select2()","line":"255"},{"isStatic":true,"returnType":{"name":"String","refId":"dart.core/String"},"name":"getCurrentLocale","kind":"method","comment":"\nAccessor for the current locale. This should always == the default locale,\nunless for some reason this gets called inside a message that resets the\nlocale.\n","id":"getCurrentLocale0()","line":"270"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"locale","kind":"property","comment":"\nReturn the locale for this instance. If none was set, the locale will\nbe the default.\n","id":"locale","line":"142"},{"ref":{"name":"String","refId":"dart.core/String"},"name":"_locale","isPrivate":true,"kind":"variable","id":"_locale","line":"74"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"_defaultLocale","isPrivate":true,"kind":"variable","id":"_defaultLocale","line":"80"},{"ref":{"name":"String","refId":"dart.core/String"},"isStatic":true,"name":"systemLocale","kind":"variable","id":"systemLocale","line":"88"},{"name":"Intl","children":[{"ref":{"name":"String","refId":"dart.core/String"},"isOptional":true,"name":"aLocale","kind":"param","id":"aLocale"}],"kind":"constructor","comment":"\nConstructor optionally [aLocale] for specifics of the language\nlocale to be used, otherwise, we will attempt to infer it (acceptable if\nDart is running on the client, we can infer from the browser/client\npreferences).\n","id":"Intl1()","line":"105"}],"kind":"class","comment":"\nThe Intl class provides a common entry point for internationalization\nrelated tasks. An Intl instance can be created for a particular locale\nand used to create a date format via `anIntl.date()`. Static methods\non this class are also used in message formatting.\n\nMessage example:\n    '''I see ${Intl.plural(num_people,\n              {'0': 'no one at all',\n               '1': 'one other person',\n               'other': '$num_people other people'})} in $place.''''\n\nUsage examples:\n     today(date) => Intl.message(\n         \"Today's date is $date\",\n         desc: 'Indicate the current date',\n         examples: {'date' : 'June 8, 2012'});\n     print(today(new DateTime.now());\n\n     msg({num_people, place}) => Intl.message(\n          '''I see ${Intl.plural(num_people,\n            {'0': 'no one at all',\n             '1': 'one other person',\n             'other': '$num_people other people'})} in $place.'''',\n         desc: 'Description of how many people are seen as program start.',\n         examples: {'num_people': 3, 'place': 'London'});\n\nCalling `msg({'num_people': 2, 'place': 'Athens'});` would\nproduce \"I see 2 other people in Athens.\" as output in the default locale.\n\nTo use a locale other than the default, use the `withLocale` function.\n      var todayString = new DateFormat(\"pt_BR\").format(new DateTime.now());\n      print(withLocale(\"pt_BR\", () => today(todayString));\n\nSee `tests/message_format_test.dart` for more examples.\n","id":"Intl","line":"69"}],"uri":"pkg/intl/lib/intl.dart","kind":"library","comment":"\nThis library provides internationalization and localization. This includes\nmessage formatting and replacement, date and number formatting and parsing,\nand utilities for working with Bidirectional text.\n\nFor things that require locale or other data, there are multiple different\nways of making that data available, which may require importing different\nlibraries. See the class comments for more details.\n\nThere is also a simple example application that can be found in the\n`example/basic` directory.\n","id":"intl","line":"17"}